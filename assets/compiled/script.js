/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );

/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.7'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

(function(){var $c=function(a){this.w=a||[]};$c.prototype.set=function(a){this.w[a]=!0};$c.prototype.encode=function(){for(var a=[],b=0;b<this.w.length;b++)this.w[b]&&(a[Math.floor(b/6)]^=1<<b%6);for(b=0;b<a.length;b++)a[b]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(a[b]||0);return a.join("")+"~"};var vd=new $c;function J(a){vd.set(a)}var Nd=function(a,b){var c=new $c(Dd(a));c.set(b);a.set(Gd,c.w)},Td=function(a){a=Dd(a);a=new $c(a);for(var b=vd.w.slice(),c=0;c<a.w.length;c++)b[c]=b[c]||a.w[c];return(new $c(b)).encode()},Dd=function(a){a=a.get(Gd);ka(a)||(a=[]);return a};var ea=function(a){return"function"==typeof a},ka=function(a){return"[object Array]"==Object.prototype.toString.call(Object(a))},qa=function(a){return void 0!=a&&-1<(a.constructor+"").indexOf("String")},D=function(a,b){return 0==a.indexOf(b)},sa=function(a){return a?a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,""):""},ta=function(a){var b=M.createElement("img");b.width=1;b.height=1;b.src=a;return b},ua=function(){},K=function(a){if(encodeURIComponent instanceof Function)return encodeURIComponent(a);J(28);return a},
L=function(a,b,c,d){try{a.addEventListener?a.addEventListener(b,c,!!d):a.attachEvent&&a.attachEvent("on"+b,c)}catch(e){J(27)}},f=/^[\w\-:/.?=&%!]+$/,wa=function(a,b,c,d){a&&(c?(d="",b&&f.test(b)&&(d=' id="'+b+'"'),f.test(a)&&M.write("<script"+d+' src="'+a+'">\x3c/script>')):(c=M.createElement("script"),c.type="text/javascript",c.async=!0,c.src=a,d&&(c.onload=d),b&&(c.id=b),a=M.getElementsByTagName("script")[0],a.parentNode.insertBefore(c,a)))},Ud=function(){return"https:"==M.location.protocol},E=
function(a,b){return(a=a.match("(?:&|#|\\?)"+K(b).replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")+"=([^&#]*)"))&&2==a.length?a[1]:""},xa=function(){var a=""+M.location.hostname;return 0==a.indexOf("www.")?a.substring(4):a},ya=function(a){var b=M.referrer;if(/^https?:\/\//i.test(b)){if(a)return b;a="//"+M.location.hostname;var c=b.indexOf(a);if(5==c||6==c)if(a=b.charAt(c+a.length),"/"==a||"?"==a||""==a||":"==a)return;return b}},za=function(a,b){if(1==b.length&&null!=b[0]&&"object"===typeof b[0])return b[0];
for(var c={},d=Math.min(a.length+1,b.length),e=0;e<d;e++)if("object"===typeof b[e]){for(var g in b[e])b[e].hasOwnProperty(g)&&(c[g]=b[e][g]);break}else e<a.length&&(c[a[e]]=b[e]);return c};var ee=function(){this.keys=[];this.values={};this.m={}};ee.prototype.set=function(a,b,c){this.keys.push(a);c?this.m[":"+a]=b:this.values[":"+a]=b};ee.prototype.get=function(a){return this.m.hasOwnProperty(":"+a)?this.m[":"+a]:this.values[":"+a]};ee.prototype.map=function(a){for(var b=0;b<this.keys.length;b++){var c=this.keys[b],d=this.get(c);d&&a(c,d)}};var O=window,M=document;var F=window,G=function(a){var b=F._gaUserPrefs;if(b&&b.ioo&&b.ioo()||a&&!0===F["ga-disable-"+a])return!0;try{var c=F.external;if(c&&c._gaUserPrefs&&"oo"==c._gaUserPrefs)return!0}catch(d){}return!1};var Ca=function(a){var b=[],c=M.cookie.split(";");a=new RegExp("^\\s*"+a+"=\\s*(.*?)\\s*$");for(var d=0;d<c.length;d++){var e=c[d].match(a);e&&b.push(e[1])}return b},zc=function(a,b,c,d,e,g){e=G(e)?!1:eb.test(M.location.hostname)||"/"==c&&vc.test(d)?!1:!0;if(!e)return!1;b&&1200<b.length&&(b=b.substring(0,1200),J(24));c=a+"="+b+"; path="+c+"; ";g&&(c+="expires="+(new Date((new Date).getTime()+g)).toGMTString()+"; ");d&&"none"!=d&&(c+="domain="+d+";");d=M.cookie;M.cookie=c;if(!(d=d!=M.cookie))a:{a=
Ca(a);for(d=0;d<a.length;d++)if(b==a[d]){d=!0;break a}d=!1}return d},Cc=function(a){return K(a).replace(/\(/g,"%28").replace(/\)/g,"%29")},vc=/^(www\.)?google(\.com?)?(\.[a-z]{2})?$/,eb=/(^|\.)doubleclick\.net$/i;var oc=function(){return(Ba||Ud()?"https:":"http:")+"//www.google-analytics.com"},Da=function(a){this.name="len";this.message=a+"-8192"},ba=function(a,b,c){c=c||ua;if(2036>=b.length)wc(a,b,c);else if(8192>=b.length)x(a,b,c)||wd(a,b,c)||wc(a,b,c);else throw ge("len",b.length),new Da(b.length);},wc=function(a,b,c){var d=ta(a+"?"+b);d.onload=d.onerror=function(){d.onload=null;d.onerror=null;c()}},wd=function(a,b,c){var d=O.XMLHttpRequest;if(!d)return!1;var e=new d;if(!("withCredentials"in e))return!1;
e.open("POST",a,!0);e.withCredentials=!0;e.setRequestHeader("Content-Type","text/plain");e.onreadystatechange=function(){4==e.readyState&&(c(),e=null)};e.send(b);return!0},x=function(a,b,c){return O.navigator.sendBeacon?O.navigator.sendBeacon(a,b)?(c(),!0):!1:!1},ge=function(a,b,c){1<=100*Math.random()||G("?")||(a=["t=error","_e="+a,"_v=j48","sr=1"],b&&a.push("_f="+b),c&&a.push("_m="+K(c.substring(0,100))),a.push("aip=1"),a.push("z="+hd()),wc(oc()+"/collect",a.join("&"),ua))};var h=function(a){var b=O.gaData=O.gaData||{};return b[a]=b[a]||{}};var Ha=function(){this.M=[]};Ha.prototype.add=function(a){this.M.push(a)};Ha.prototype.D=function(a){try{for(var b=0;b<this.M.length;b++){var c=a.get(this.M[b]);c&&ea(c)&&c.call(O,a)}}catch(d){}b=a.get(Ia);b!=ua&&ea(b)&&(a.set(Ia,ua,!0),setTimeout(b,10))};function Ja(a){if(100!=a.get(Ka)&&La(P(a,Q))%1E4>=100*R(a,Ka))throw"abort";}function Ma(a){if(G(P(a,Na)))throw"abort";}function Oa(){var a=M.location.protocol;if("http:"!=a&&"https:"!=a)throw"abort";}
function Pa(a){try{O.navigator.sendBeacon?J(42):O.XMLHttpRequest&&"withCredentials"in new O.XMLHttpRequest&&J(40)}catch(c){}a.set(ld,Td(a),!0);a.set(Ac,R(a,Ac)+1);var b=[];Qa.map(function(c,d){d.F&&(c=a.get(c),void 0!=c&&c!=d.defaultValue&&("boolean"==typeof c&&(c*=1),b.push(d.F+"="+K(""+c))))});b.push("z="+Bd());a.set(Ra,b.join("&"),!0)}
function Sa(a){var b=P(a,gd)||oc()+"/collect",c=P(a,fa);!c&&a.get(Vd)&&(c="beacon");if(c){var d=P(a,Ra),e=a.get(Ia),e=e||ua;"image"==c?wc(b,d,e):"xhr"==c&&wd(b,d,e)||"beacon"==c&&x(b,d,e)||ba(b,d,e)}else ba(b,P(a,Ra),a.get(Ia));b=a.get(Na);b=h(b);c=b.hitcount;b.hitcount=c?c+1:1;b=a.get(Na);delete h(b).pending_experiments;a.set(Ia,ua,!0)}
function Hc(a){(O.gaData=O.gaData||{}).expId&&a.set(Nc,(O.gaData=O.gaData||{}).expId);(O.gaData=O.gaData||{}).expVar&&a.set(Oc,(O.gaData=O.gaData||{}).expVar);var b;var c=a.get(Na);if(c=h(c).pending_experiments){var d=[];for(b in c)c.hasOwnProperty(b)&&c[b]&&d.push(encodeURIComponent(b)+"."+encodeURIComponent(c[b]));b=d.join("!")}else b=void 0;b&&a.set(m,b,!0)}function cd(){if(O.navigator&&"preview"==O.navigator.loadPurpose)throw"abort";}
function yd(a){var b=O.gaDevIds;ka(b)&&0!=b.length&&a.set("&did",b.join(","),!0)}function vb(a){if(!a.get(Na))throw"abort";};var hd=function(){return Math.round(2147483647*Math.random())},Bd=function(){try{var a=new Uint32Array(1);O.crypto.getRandomValues(a);return a[0]&2147483647}catch(b){return hd()}};function Ta(a){var b=R(a,Ua);500<=b&&J(15);var c=P(a,Va);if("transaction"!=c&&"item"!=c){var c=R(a,Wa),d=(new Date).getTime(),e=R(a,Xa);0==e&&a.set(Xa,d);e=Math.round(2*(d-e)/1E3);0<e&&(c=Math.min(c+e,20),a.set(Xa,d));if(0>=c)throw"abort";a.set(Wa,--c)}a.set(Ua,++b)};var Ya=function(){this.data=new ee},Qa=new ee,Za=[];Ya.prototype.get=function(a){var b=$a(a),c=this.data.get(a);b&&void 0==c&&(c=ea(b.defaultValue)?b.defaultValue():b.defaultValue);return b&&b.Z?b.Z(this,a,c):c};var P=function(a,b){a=a.get(b);return void 0==a?"":""+a},R=function(a,b){a=a.get(b);return void 0==a||""===a?0:1*a};Ya.prototype.set=function(a,b,c){if(a)if("object"==typeof a)for(var d in a)a.hasOwnProperty(d)&&ab(this,d,a[d],c);else ab(this,a,b,c)};
var ab=function(a,b,c,d){if(void 0!=c)switch(b){case Na:wb.test(c)}var e=$a(b);e&&e.o?e.o(a,b,c,d):a.data.set(b,c,d)},bb=function(a,b,c,d,e){this.name=a;this.F=b;this.Z=d;this.o=e;this.defaultValue=c},$a=function(a){var b=Qa.get(a);if(!b)for(var c=0;c<Za.length;c++){var d=Za[c],e=d[0].exec(a);if(e){b=d[1](e);Qa.set(b.name,b);break}}return b},yc=function(a){var b;Qa.map(function(c,d){d.F==a&&(b=d)});return b&&b.name},S=function(a,b,c,d,e){a=new bb(a,b,c,d,e);Qa.set(a.name,a);return a.name},cb=function(a,
b){Za.push([new RegExp("^"+a+"$"),b])},T=function(a,b,c){return S(a,b,c,void 0,db)},db=function(){};var gb=qa(window.GoogleAnalyticsObject)&&sa(window.GoogleAnalyticsObject)||"ga",Ba=!1,hb=T("apiVersion","v"),ib=T("clientVersion","_v");S("anonymizeIp","aip");var jb=S("adSenseId","a"),Va=S("hitType","t"),Ia=S("hitCallback"),Ra=S("hitPayload");S("nonInteraction","ni");S("currencyCode","cu");S("dataSource","ds");var Vd=S("useBeacon",void 0,!1),fa=S("transport");S("sessionControl","sc","");S("sessionGroup","sg");S("queueTime","qt");var Ac=S("_s","_s");S("screenName","cd");
var kb=S("location","dl",""),lb=S("referrer","dr"),mb=S("page","dp","");S("hostname","dh");var nb=S("language","ul"),ob=S("encoding","de");S("title","dt",function(){return M.title||void 0});cb("contentGroup([0-9]+)",function(a){return new bb(a[0],"cg"+a[1])});var pb=S("screenColors","sd"),qb=S("screenResolution","sr"),rb=S("viewportSize","vp"),sb=S("javaEnabled","je"),tb=S("flashVersion","fl");S("campaignId","ci");S("campaignName","cn");S("campaignSource","cs");S("campaignMedium","cm");
S("campaignKeyword","ck");S("campaignContent","cc");var ub=S("eventCategory","ec"),xb=S("eventAction","ea"),yb=S("eventLabel","el"),zb=S("eventValue","ev"),Bb=S("socialNetwork","sn"),Cb=S("socialAction","sa"),Db=S("socialTarget","st"),Eb=S("l1","plt"),Fb=S("l2","pdt"),Gb=S("l3","dns"),Hb=S("l4","rrt"),Ib=S("l5","srt"),Jb=S("l6","tcp"),Kb=S("l7","dit"),Lb=S("l8","clt"),Mb=S("timingCategory","utc"),Nb=S("timingVar","utv"),Ob=S("timingLabel","utl"),Pb=S("timingValue","utt");S("appName","an");
S("appVersion","av","");S("appId","aid","");S("appInstallerId","aiid","");S("exDescription","exd");S("exFatal","exf");var Nc=S("expId","xid"),Oc=S("expVar","xvar"),m=S("exp","exp"),Rc=S("_utma","_utma"),Sc=S("_utmz","_utmz"),Tc=S("_utmht","_utmht"),Ua=S("_hc",void 0,0),Xa=S("_ti",void 0,0),Wa=S("_to",void 0,20);cb("dimension([0-9]+)",function(a){return new bb(a[0],"cd"+a[1])});cb("metric([0-9]+)",function(a){return new bb(a[0],"cm"+a[1])});S("linkerParam",void 0,void 0,Bc,db);
var ld=S("usage","_u"),Gd=S("_um");S("forceSSL",void 0,void 0,function(){return Ba},function(a,b,c){J(34);Ba=!!c});var ed=S("_j1","jid");cb("\\&(.*)",function(a){var b=new bb(a[0],a[1]),c=yc(a[0].substring(1));c&&(b.Z=function(a){return a.get(c)},b.o=function(a,b,g,ca){a.set(c,g,ca)},b.F=void 0);return b});
var Qb=T("_oot"),dd=S("previewTask"),Rb=S("checkProtocolTask"),md=S("validationTask"),Sb=S("checkStorageTask"),Uc=S("historyImportTask"),Tb=S("samplerTask"),Vb=S("_rlt"),Wb=S("buildHitTask"),Xb=S("sendHitTask"),Vc=S("ceTask"),zd=S("devIdTask"),Cd=S("timingTask"),Ld=S("displayFeaturesTask"),V=T("name"),Q=T("clientId","cid"),n=T("clientIdTime"),Ad=S("userId","uid"),Na=T("trackingId","tid"),U=T("cookieName",void 0,"_ga"),W=T("cookieDomain"),Yb=T("cookiePath",void 0,"/"),Zb=T("cookieExpires",void 0,63072E3),
$b=T("legacyCookieDomain"),Wc=T("legacyHistoryImport",void 0,!0),ac=T("storage",void 0,"cookie"),bc=T("allowLinker",void 0,!1),cc=T("allowAnchor",void 0,!0),Ka=T("sampleRate","sf",100),dc=T("siteSpeedSampleRate",void 0,1),ec=T("alwaysSendReferrer",void 0,!1),gd=S("transportUrl"),Md=S("_r","_r");function X(a,b,c,d){b[a]=function(){try{return d&&J(d),c.apply(this,arguments)}catch(e){throw ge("exc",a,e&&e.name),e;}}};var Od=function(a,b,c){this.V=a;this.fa=b;this.$=!1;this.oa=c;this.ea=1},Ed=function(a,b){var c;if(a.fa&&a.$)return 0;a.$=!0;if(b){if(a.oa&&R(b,a.oa))return R(b,a.oa);if(0==b.get(dc))return 0}if(0==a.V)return 0;void 0===c&&(c=Bd());return 0==c%a.V?Math.floor(c/a.V)%a.ea+1:0};function fc(){var a,b,c;if((c=(c=O.navigator)?c.plugins:null)&&c.length)for(var d=0;d<c.length&&!b;d++){var e=c[d];-1<e.name.indexOf("Shockwave Flash")&&(b=e.description)}if(!b)try{a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"),b=a.GetVariable("$version")}catch(g){}if(!b)try{a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"),b="WIN 6,0,21,0",a.AllowScriptAccess="always",b=a.GetVariable("$version")}catch(g){}if(!b)try{a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash"),b=a.GetVariable("$version")}catch(g){}b&&
(a=b.match(/[\d]+/g))&&3<=a.length&&(b=a[0]+"."+a[1]+" r"+a[2]);return b||void 0};var aa=function(a){var b=Math.min(R(a,dc),100);return La(P(a,Q))%100>=b?!1:!0},gc=function(a){var b={};if(Ec(b)||Fc(b)){var c=b[Eb];void 0==c||Infinity==c||isNaN(c)||(0<c?(Y(b,Gb),Y(b,Jb),Y(b,Ib),Y(b,Fb),Y(b,Hb),Y(b,Kb),Y(b,Lb),a(b)):L(O,"load",function(){gc(a)},!1))}},Ec=function(a){var b=O.performance||O.webkitPerformance,b=b&&b.timing;if(!b)return!1;var c=b.navigationStart;if(0==c)return!1;a[Eb]=b.loadEventStart-c;a[Gb]=b.domainLookupEnd-b.domainLookupStart;a[Jb]=b.connectEnd-b.connectStart;a[Ib]=
b.responseStart-b.requestStart;a[Fb]=b.responseEnd-b.responseStart;a[Hb]=b.fetchStart-c;a[Kb]=b.domInteractive-c;a[Lb]=b.domContentLoadedEventStart-c;return!0},Fc=function(a){if(O.top!=O)return!1;var b=O.external,c=b&&b.onloadT;b&&!b.isValidLoadTime&&(c=void 0);2147483648<c&&(c=void 0);0<c&&b.setPageReadyTime();if(void 0==c)return!1;a[Eb]=c;return!0},Y=function(a,b){var c=a[b];if(isNaN(c)||Infinity==c||0>c)a[b]=void 0},Fd=function(a){return function(b){if("pageview"==b.get(Va)&&!a.I){a.I=!0;var c=
aa(b);b=0<E(b.get(kb),"gclid").length;(c||b)&&gc(function(b){a.send(c?"timing":"adtiming",b)})}}};var hc=!1,mc=function(a){if("cookie"==P(a,ac)){var b=P(a,U),c=nd(a),d=kc(P(a,Yb)),e=lc(P(a,W)),g=1E3*R(a,Zb),ca=P(a,Na);if("auto"!=e)zc(b,c,d,e,ca,g)&&(hc=!0);else{J(32);var l;a:{c=[];e=xa().split(".");if(4==e.length&&(l=e[e.length-1],parseInt(l,10)==l)){l=["none"];break a}for(l=e.length-2;0<=l;l--)c.push(e.slice(l).join("."));c.push("none");l=c}for(var k=0;k<l.length;k++)if(e=l[k],a.data.set(W,e),c=nd(a),zc(b,c,d,e,ca,g)){hc=!0;return}a.data.set(W,"auto")}}},nc=function(a){if("cookie"==P(a,ac)&&
!hc&&(mc(a),!hc))throw"abort";},Yc=function(a){if(a.get(Wc)){var b=P(a,W),c=P(a,$b)||xa(),d=Xc("__utma",c,b);d&&(J(19),a.set(Tc,(new Date).getTime(),!0),a.set(Rc,d.R),(b=Xc("__utmz",c,b))&&d.hash==b.hash&&a.set(Sc,b.R))}},nd=function(a){var b=Cc(P(a,Q)),c=lc(P(a,W)).split(".").length;a=jc(P(a,Yb));1<a&&(c+="-"+a);return["GA1",c,b].join(".")},Gc=function(a,b,c){for(var d=[],e=[],g,ca=0;ca<a.length;ca++){var l=a[ca];l.H[c]==b?d.push(l):void 0==g||l.H[c]<g?(e=[l],g=l.H[c]):l.H[c]==g&&e.push(l)}return 0<
d.length?d:e},lc=function(a){return 0==a.indexOf(".")?a.substr(1):a},kc=function(a){if(!a)return"/";1<a.length&&a.lastIndexOf("/")==a.length-1&&(a=a.substr(0,a.length-1));0!=a.indexOf("/")&&(a="/"+a);return a},jc=function(a){a=kc(a);return"/"==a?1:a.split("/").length};function Xc(a,b,c){"none"==b&&(b="");var d=[],e=Ca(a);a="__utma"==a?6:2;for(var g=0;g<e.length;g++){var ca=(""+e[g]).split(".");ca.length>=a&&d.push({hash:ca[0],R:e[g],O:ca})}if(0!=d.length)return 1==d.length?d[0]:Zc(b,d)||Zc(c,d)||Zc(null,d)||d[0]}function Zc(a,b){var c;null==a?c=a=1:(c=La(a),a=La(D(a,".")?a.substring(1):"."+a));for(var d=0;d<b.length;d++)if(b[d].hash==c||b[d].hash==a)return b[d]};var od=new RegExp(/^https?:\/\/([^\/:]+)/),pd=/(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/;function Bc(a){a=a.get(Q);var b=Ic(a,0);return"_ga=1."+K(b+"."+a)}function Ic(a,b){var c=new Date,d=O.navigator,e=d.plugins||[];a=[a,d.userAgent,c.getTimezoneOffset(),c.getYear(),c.getDate(),c.getHours(),c.getMinutes()+b];for(b=0;b<e.length;++b)a.push(e[b].description);return La(a.join("."))}var Dc=function(a){J(48);this.target=a;this.T=!1};
Dc.prototype.ca=function(a,b){if(a.tagName){if("a"==a.tagName.toLowerCase()){a.href&&(a.href=qd(this,a.href,b));return}if("form"==a.tagName.toLowerCase())return rd(this,a)}if("string"==typeof a)return qd(this,a,b)};
var qd=function(a,b,c){var d=pd.exec(b);d&&3<=d.length&&(b=d[1]+(d[3]?d[2]+d[3]:""));a=a.target.get("linkerParam");var e=b.indexOf("?"),d=b.indexOf("#");c?b+=(-1==d?"#":"&")+a:(c=-1==e?"?":"&",b=-1==d?b+(c+a):b.substring(0,d)+c+a+b.substring(d));return b=b.replace(/&+_ga=/,"&_ga=")},rd=function(a,b){if(b&&b.action){var c=a.target.get("linkerParam").split("=")[1];if("get"==b.method.toLowerCase()){a=b.childNodes||[];for(var d=0;d<a.length;d++)if("_ga"==a[d].name){a[d].setAttribute("value",c);return}a=
M.createElement("input");a.setAttribute("type","hidden");a.setAttribute("name","_ga");a.setAttribute("value",c);b.appendChild(a)}else"post"==b.method.toLowerCase()&&(b.action=qd(a,b.action))}};
Dc.prototype.S=function(a,b,c){function d(c){try{c=c||O.event;var d;a:{var g=c.target||c.srcElement;for(c=100;g&&0<c;){if(g.href&&g.nodeName.match(/^a(?:rea)?$/i)){d=g;break a}g=g.parentNode;c--}d={}}("http:"==d.protocol||"https:"==d.protocol)&&sd(a,d.hostname||"")&&d.href&&(d.href=qd(e,d.href,b))}catch(k){J(26)}}var e=this;this.T||(this.T=!0,L(M,"mousedown",d,!1),L(M,"keyup",d,!1));c&&L(M,"submit",function(b){b=b||O.event;if((b=b.target||b.srcElement)&&b.action){var c=b.action.match(od);c&&sd(a,
c[1])&&rd(e,b)}})};function sd(a,b){if(b==M.location.hostname)return!1;for(var c=0;c<a.length;c++)if(a[c]instanceof RegExp){if(a[c].test(b))return!0}else if(0<=b.indexOf(a[c]))return!0;return!1};var p=/^(GTM|OPT)-[A-Z0-9]+$/,q=/;_gaexp=[^;]*/g,r=/;((__utma=)|([^;=]+=GAX?\d+\.))[^;]*/g,t=function(a){function b(a,b){b&&(c+="&"+a+"="+K(b))}var c="https://www.google-analytics.com/gtm/js?id="+K(a.id);"dataLayer"!=a.B&&b("l",a.B);b("t",a.target);b("cid",a.ja);b("cidt",a.ka);b("gac",a.la);b("aip",a.ia);a.na&&b("m","sync");b("cycle",a.G);a.qa&&b("gclid",a.qa);return c};var Jd=function(a,b,c){this.U=ed;this.aa=b;(b=c)||(b=(b=P(a,V))&&"t0"!=b?Wd.test(b)?"_gat_"+Cc(P(a,Na)):"_gat_"+Cc(b):"_gat");this.Y=b;Ed(new Od(10),a)&&(J(30),this.pa=!0)},Rd=function(a,b){var c=b.get(Wb);b.set(Wb,function(b){Pd(a,b);var d=c(b);Qd(a,b);return d});var d=b.get(Xb);b.set(Xb,function(b){var c=d(b);Id(a,b);return c})},Pd=function(a,b){b.get(a.U)||("1"==Ca(a.Y)[0]?b.set(a.U,"",!0):b.set(a.U,""+hd(),!0))},Qd=function(a,b){if(b.get(a.U)){var c=6E5;a.pa&&(c/=10);zc(a.Y,"1",b.get(Yb),b.get(W),
b.get(Na),c)}},Id=function(a,b){if(b.get(a.U)){var c=new ee,d=function(a){$a(a).F&&c.set($a(a).F,b.get(a))};d(hb);d(ib);d(Na);d(Q);d(Ad);d(a.U);c.set($a(ld).F,Td(b));var e=a.aa;c.map(function(a,b){e+=K(a)+"=";e+=K(""+b)+"&"});e+="z="+hd();ta(e);b.set(a.U,"",!0)}},Wd=/^gtm\d+$/;var fd=function(a,b){a=a.b;if(!a.get("dcLoaded")){Nd(a,29);b=b||{};var c;b[U]&&(c=Cc(b[U]));b=new Jd(a,"https://stats.g.doubleclick.net/r/collect?t=dc&aip=1&_r=3&",c);Rd(b,a);a.set("dcLoaded",!0)}};var Sd=function(a){if(!a.get("dcLoaded")&&"cookie"==a.get(ac)){Nd(a,51);var b=new Jd(a);Pd(b,a);Qd(b,a);a.get(b.U)&&(a.set(Md,1,!0),a.set(gd,oc()+"/r/collect",!0))}};var Lc=function(){var a=O.gaGlobal=O.gaGlobal||{};return a.hid=a.hid||hd()};var ad,bd=function(a,b,c){if(!ad){var d;d=M.location.hash;var e=O.name,g=/^#?gaso=([^&]*)/;if(e=(d=(d=d&&d.match(g)||e&&e.match(g))?d[1]:Ca("GASO")[0]||"")&&d.match(/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i))zc("GASO",""+d,c,b,a,0),window._udo||(window._udo=b),window._utcp||(window._utcp=c),a=e[1],wa("https://www.google.com/analytics/web/inpage/pub/inpage.js?"+(a?"prefix="+a+"&":"")+hd(),"_gasojs");ad=!0}};var H=function(a){return a?(1*a).toFixed(3):"0"},da=function(a){var b=O.performance;if(b&&b.getEntriesByName){J(35);var c="https://www.google-analytics.com/analytics.js?wpid="+a;wa(c,void 0,void 0,function(){try{var d=1,e=b.getEntriesByName("https://www.google-analytics.com/analytics.js");e&&0!=e.length||(e=b.getEntriesByName("http://www.google-analytics.com/analytics.js"),d=0);var g=b.getEntriesByName(c);if(e&&1==e.length&&g&&1==g.length){J(37);var ca=e[0],l=g[0],k={tid:a,ad:H(ca.duration),bd:H(l.duration),
ar:H(ca.responseEnd-ca.requestStart),br:H(l.responseEnd-l.requestStart),an:H(ca.domainLookupEnd-ca.domainLookupStart),bn:H(l.domainLookupEnd-l.domainLookupStart),ac:H(ca.connectEnd-ca.connectStart),bc:H(l.connectEnd-l.connectStart),as:d},d=[];d.push("_v=j48");d.push("id=10");for(var w in k)k.hasOwnProperty(w)&&d.push(w+"="+K(k[w]));d.push("z="+hd());wc("https://www.google-analytics.com/u/d",d.join("&"),ua)}}catch(ha){}})}};var wb=/^(UA|YT|MO|GP)-(\d+)-(\d+)$/,pc=function(a){function b(a,b){e.b.data.set(a,b)}function c(a,c){b(a,c);e.filters.add(a)}function d(a,b,c){Ed(new Od(1E4,!0,b),e.b)&&(a=Ca(a))&&0<a.length&&J(c)}var e=this;this.b=new Ya;this.filters=new Ha;b(V,a[V]);b(Na,sa(a[Na]));b(U,a[U]);b(W,a[W]||xa());b(Yb,a[Yb]);b(Zb,a[Zb]);b($b,a[$b]);b(Wc,a[Wc]);b(bc,a[bc]);b(cc,a[cc]);b(Ka,a[Ka]);b(dc,a[dc]);b(ec,a[ec]);b(ac,a[ac]);b(Ad,a[Ad]);b(n,a[n]);b(hb,1);b(ib,"j48");c(Qb,Ma);c(dd,cd);c(Rb,Oa);c(md,vb);c(Sb,nc);
c(Uc,Yc);c(Tb,Ja);c(Vb,Ta);c(Vc,Hc);c(zd,yd);c(Ld,Sd);c(Wb,Pa);c(Xb,Sa);c(Cd,Fd(this));Jc(this.b,a[Q]);Kc(this.b);this.b.set(jb,Lc());bd(this.b.get(Na),this.b.get(W),this.b.get(Yb));this.ra=new Od(1E4,!0,"gaexp10");d("_gid","gacookie11",41);d("_gaid","gacookie12",44)},Jc=function(a,b){if("cookie"==P(a,ac)){hc=!1;var c;b:{var d=Ca(P(a,U));if(d&&!(1>d.length)){c=[];for(var e=0;e<d.length;e++){var g;g=d[e].split(".");var ca=g.shift();("GA1"==ca||"1"==ca)&&1<g.length?(ca=g.shift().split("-"),1==ca.length&&
(ca[1]="1"),ca[0]*=1,ca[1]*=1,g={H:ca,s:g.join(".")}):g=void 0;g&&c.push(g)}if(1==c.length){J(13);c=c[0].s;break b}if(0==c.length)J(12);else{J(14);d=lc(P(a,W)).split(".").length;c=Gc(c,d,0);if(1==c.length){c=c[0].s;break b}d=jc(P(a,Yb));c=Gc(c,d,1);c=c[0]&&c[0].s;break b}}c=void 0}c||(c=P(a,W),d=P(a,$b)||xa(),c=Xc("__utma",d,c),void 0!=c?(J(10),c=c.O[1]+"."+c.O[2]):c=void 0);c&&(a.data.set(Q,c),hc=!0)}c=a.get(cc);if(e=E(M.location[c?"href":"search"],"_ga"))a.get(bc)?(c=e.indexOf("."),-1==c?J(22):
(d=e.substring(c+1),"1"!=e.substring(0,c)?J(22):(c=d.indexOf("."),-1==c?J(22):(e=d.substring(0,c),c=d.substring(c+1),e!=Ic(c,0)&&e!=Ic(c,-1)&&e!=Ic(c,-2)?J(23):(J(11),a.data.set(Q,c)))))):J(21);b&&(J(9),a.data.set(Q,K(b)));if(!a.get(Q))if(b=(b=O.gaGlobal&&O.gaGlobal.vid)&&-1!=b.search(/^(?:utma\.)?\d+\.\d+$/)?b:void 0)J(17),a.data.set(Q,b);else{J(8);b=O.navigator.userAgent+(M.cookie?M.cookie:"")+(M.referrer?M.referrer:"");c=b.length;for(d=O.history.length;0<d;)b+=d--^c++;a.data.set(Q,[hd()^La(b)&
2147483647,Math.round((new Date).getTime()/1E3)].join("."))}mc(a)},Kc=function(a){var b=O.navigator,c=O.screen,d=M.location;a.set(lb,ya(a.get(ec)));if(d){var e=d.pathname||"";"/"!=e.charAt(0)&&(J(31),e="/"+e);a.set(kb,d.protocol+"//"+d.hostname+e+d.search)}c&&a.set(qb,c.width+"x"+c.height);c&&a.set(pb,c.colorDepth+"-bit");var c=M.documentElement,g=(e=M.body)&&e.clientWidth&&e.clientHeight,ca=[];c&&c.clientWidth&&c.clientHeight&&("CSS1Compat"===M.compatMode||!g)?ca=[c.clientWidth,c.clientHeight]:g&&
(ca=[e.clientWidth,e.clientHeight]);c=0>=ca[0]||0>=ca[1]?"":ca.join("x");a.set(rb,c);a.set(tb,fc());a.set(ob,M.characterSet||M.charset);a.set(sb,b&&"function"===typeof b.javaEnabled&&b.javaEnabled()||!1);a.set(nb,(b&&(b.language||b.browserLanguage)||"").toLowerCase());if(d&&a.get(cc)&&(b=M.location.hash)){b=b.split(/[?&#]+/);d=[];for(c=0;c<b.length;++c)(D(b[c],"utm_id")||D(b[c],"utm_campaign")||D(b[c],"utm_source")||D(b[c],"utm_medium")||D(b[c],"utm_term")||D(b[c],"utm_content")||D(b[c],"gclid")||
D(b[c],"dclid")||D(b[c],"gclsrc"))&&d.push(b[c]);0<d.length&&(b="#"+d.join("&"),a.set(kb,a.get(kb)+b))}};pc.prototype.get=function(a){return this.b.get(a)};pc.prototype.set=function(a,b){this.b.set(a,b)};var qc={pageview:[mb],event:[ub,xb,yb,zb],social:[Bb,Cb,Db],timing:[Mb,Nb,Pb,Ob]};
pc.prototype.send=function(a){if(!(1>arguments.length)){var b,c;"string"===typeof arguments[0]?(b=arguments[0],c=[].slice.call(arguments,1)):(b=arguments[0]&&arguments[0][Va],c=arguments);b&&(c=za(qc[b]||[],c),c[Va]=b,this.b.set(c,void 0,!0),this.filters.D(this.b),this.b.data.m={},Ed(this.ra,this.b)&&da(this.b.get(Na)))}};pc.prototype.ma=function(a,b){var c=this;u(a,c,b)||(v(a,function(){u(a,c,b)}),y(String(c.get(V)),a,void 0,b,!0))};var rc=function(a){if("prerender"==M.visibilityState)return!1;a();return!0},z=function(a){if(!rc(a)){J(16);var b=!1,c=function(){if(!b&&rc(a)){b=!0;var d=c,e=M;e.removeEventListener?e.removeEventListener("visibilitychange",d,!1):e.detachEvent&&e.detachEvent("onvisibilitychange",d)}};L(M,"visibilitychange",c)}};var td=/^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/,sc=function(a){if(ea(a[0]))this.u=a[0];else{var b=td.exec(a[0]);null!=b&&4==b.length&&(this.c=b[1]||"t0",this.K=b[2]||"",this.C=b[3],this.a=[].slice.call(a,1),this.K||(this.A="create"==this.C,this.i="require"==this.C,this.g="provide"==this.C,this.ba="remove"==this.C),this.i&&(3<=this.a.length?(this.X=this.a[1],this.W=this.a[2]):this.a[1]&&(qa(this.a[1])?this.X=this.a[1]:this.W=this.a[1])));b=a[1];a=a[2];if(!this.C)throw"abort";if(this.i&&(!qa(b)||""==b))throw"abort";
if(this.g&&(!qa(b)||""==b||!ea(a)))throw"abort";if(ud(this.c)||ud(this.K))throw"abort";if(this.g&&"t0"!=this.c)throw"abort";}};function ud(a){return 0<=a.indexOf(".")||0<=a.indexOf(":")};var Yd,Zd,$d,A;Yd=new ee;$d=new ee;A=new ee;Zd={ec:45,ecommerce:46,linkid:47};
var u=function(a,b,c){b==N||b.get(V);var d=Yd.get(a);if(!ea(d))return!1;b.plugins_=b.plugins_||new ee;if(b.plugins_.get(a))return!0;b.plugins_.set(a,new d(b,c||{}));return!0},y=function(a,b,c,d,e){if(!ea(Yd.get(b))&&!$d.get(b)){Zd.hasOwnProperty(b)&&J(Zd[b]);if(p.test(b)){J(52);a=N.j(a);if(!a)return!0;c=d||{};d={id:b,B:c.dataLayer||"dataLayer",ia:!!a.get("anonymizeIp"),na:e,G:!1};a.get("&gtm")==b&&(d.G=!0);var g=String(a.get("name"));"t0"!=g&&(d.target=g);G(String(a.get("trackingId")))||(d.ja=String(a.get(Q)),
d.ka=Number(a.get(n)),c=c.palindrome?r:q,c=(c=M.cookie.replace(/^|(; +)/g,";").match(c))?c.sort().join("").substring(1):void 0,d.la=c,d.qa=E(a.b.get(kb)||"","gclid"));a=d.B;c=(new Date).getTime();O[a]=O[a]||[];c={"gtm.start":c};e||(c.event="gtm.js");O[a].push(c);c=t(d)}!c&&Zd.hasOwnProperty(b)?(J(39),c=b+".js"):J(43);c&&(c&&0<=c.indexOf("/")||(c=(Ba||Ud()?"https:":"http:")+"//www.google-analytics.com/plugins/ua/"+c),d=ae(c),a=d.protocol,c=M.location.protocol,("https:"==a||a==c||("http:"!=a?0:"http:"==
c))&&B(d)&&(wa(d.url,void 0,e),$d.set(b,!0)))}},v=function(a,b){var c=A.get(a)||[];c.push(b);A.set(a,c)},C=function(a,b){Yd.set(a,b);b=A.get(a)||[];for(var c=0;c<b.length;c++)b[c]();A.set(a,[])},B=function(a){var b=ae(M.location.href);if(D(a.url,"https://www.google-analytics.com/gtm/js?id="))return!0;if(a.query||0<=a.url.indexOf("?")||0<=a.path.indexOf("://"))return!1;if(a.host==b.host&&a.port==b.port)return!0;b="http:"==a.protocol?80:443;return"www.google-analytics.com"==a.host&&(a.port||b)==b&&
D(a.path,"/plugins/")?!0:!1},ae=function(a){function b(a){var b=(a.hostname||"").split(":")[0].toLowerCase(),c=(a.protocol||"").toLowerCase(),c=1*a.port||("http:"==c?80:"https:"==c?443:"");a=a.pathname||"";D(a,"/")||(a="/"+a);return[b,""+c,a]}var c=M.createElement("a");c.href=M.location.href;var d=(c.protocol||"").toLowerCase(),e=b(c),g=c.search||"",ca=d+"//"+e[0]+(e[1]?":"+e[1]:"");D(a,"//")?a=d+a:D(a,"/")?a=ca+a:!a||D(a,"?")?a=ca+e[2]+(a||g):0>a.split("/")[0].indexOf(":")&&(a=ca+e[2].substring(0,
e[2].lastIndexOf("/"))+"/"+a);c.href=a;d=b(c);return{protocol:(c.protocol||"").toLowerCase(),host:d[0],port:d[1],path:d[2],query:c.search||"",url:a||""}};var Z={ga:function(){Z.f=[]}};Z.ga();Z.D=function(a){var b=Z.J.apply(Z,arguments),b=Z.f.concat(b);for(Z.f=[];0<b.length&&!Z.v(b[0])&&!(b.shift(),0<Z.f.length););Z.f=Z.f.concat(b)};Z.J=function(a){for(var b=[],c=0;c<arguments.length;c++)try{var d=new sc(arguments[c]);d.g?C(d.a[0],d.a[1]):(d.i&&(d.ha=y(d.c,d.a[0],d.X,d.W)),b.push(d))}catch(e){}return b};
Z.v=function(a){try{if(a.u)a.u.call(O,N.j("t0"));else{var b=a.c==gb?N:N.j(a.c);if(a.A)"t0"!=a.c||N.create.apply(N,a.a);else if(a.ba)N.remove(a.c);else if(b)if(a.i){if(a.ha&&(a.ha=y(a.c,a.a[0],a.X,a.W)),!u(a.a[0],b,a.W))return!0}else if(a.K){var c=a.C,d=a.a,e=b.plugins_.get(a.K);e[c].apply(e,d)}else b[a.C].apply(b,a.a)}}catch(g){}};var N=function(a){J(1);Z.D.apply(Z,[arguments])};N.h={};N.P=[];N.L=0;N.answer=42;var uc=[Na,W,V];N.create=function(a){var b=za(uc,[].slice.call(arguments));b[V]||(b[V]="t0");var c=""+b[V];if(N.h[c])return N.h[c];b=new pc(b);N.h[c]=b;N.P.push(b);return b};N.remove=function(a){for(var b=0;b<N.P.length;b++)if(N.P[b].get(V)==a){N.P.splice(b,1);N.h[a]=null;break}};N.j=function(a){return N.h[a]};N.getAll=function(){return N.P.slice(0)};
N.N=function(){"ga"!=gb&&J(49);var a=O[gb];if(!a||42!=a.answer){N.L=a&&a.l;N.loaded=!0;var b=O[gb]=N;X("create",b,b.create);X("remove",b,b.remove);X("getByName",b,b.j,5);X("getAll",b,b.getAll,6);b=pc.prototype;X("get",b,b.get,7);X("set",b,b.set,4);X("send",b,b.send);X("requireSync",b,b.ma);b=Ya.prototype;X("get",b,b.get);X("set",b,b.set);if(!Ud()&&!Ba){a:{for(var b=M.getElementsByTagName("script"),c=0;c<b.length&&100>c;c++){var d=b[c].src;if(d&&0==d.indexOf("https://www.google-analytics.com/analytics")){J(33);
b=!0;break a}}b=!1}b&&(Ba=!0)}Ud()||Ba||!Ed(new Od(1E4))||(J(36),Ba=!0);(O.gaplugins=O.gaplugins||{}).Linker=Dc;b=Dc.prototype;C("linker",Dc);X("decorate",b,b.ca,20);X("autoLink",b,b.S,25);C("displayfeatures",fd);C("adfeatures",fd);a=a&&a.q;ka(a)?Z.D.apply(N,a):J(50)}};N.da=function(){for(var a=N.getAll(),b=0;b<a.length;b++)a[b].get(V)};var I=N.N,ga=O[gb];ga&&ga.r?I():z(I);z(function(){Z.D(["provide","render",ua])});function La(a){var b=1,c,d;if(a)for(b=0,d=a.length-1;0<=d;d--)c=a.charCodeAt(d),b=(b<<6&268435455)+c+(c<<14),c=b&266338304,b=0!=c?b^c>>21:b;return b};})(window);

(function() {
  var AjaxMonitor, Bar, DocumentMonitor, ElementMonitor, ElementTracker, EventLagMonitor, Evented, Events, NoTargetError, Pace, RequestIntercept, SOURCE_KEYS, Scaler, SocketRequestTracker, XHRRequestTracker, animation, avgAmplitude, bar, cancelAnimation, cancelAnimationFrame, defaultOptions, extend, extendNative, getFromDOM, getIntercept, handlePushState, ignoreStack, init, now, options, requestAnimationFrame, result, runAnimation, scalers, shouldIgnoreURL, shouldTrack, source, sources, uniScaler, _WebSocket, _XDomainRequest, _XMLHttpRequest, _i, _intercept, _len, _pushState, _ref, _ref1, _replaceState,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  defaultOptions = {
    catchupTime: 100,
    initialRate: .03,
    minTime: 250,
    ghostTime: 100,
    maxProgressPerFrame: 20,
    easeFactor: 1.25,
    startOnPageLoad: true,
    restartOnPushState: true,
    restartOnRequestAfter: 500,
    target: 'body',
    elements: {
      checkInterval: 100,
      selectors: ['body']
    },
    eventLag: {
      minSamples: 10,
      sampleCount: 3,
      lagThreshold: 3
    },
    ajax: {
      trackMethods: ['GET'],
      trackWebSockets: true,
      ignoreURLs: []
    }
  };

  now = function() {
    var _ref;
    return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +(new Date);
  };

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

  if (requestAnimationFrame == null) {
    requestAnimationFrame = function(fn) {
      return setTimeout(fn, 50);
    };
    cancelAnimationFrame = function(id) {
      return clearTimeout(id);
    };
  }

  runAnimation = function(fn) {
    var last, tick;
    last = now();
    tick = function() {
      var diff;
      diff = now() - last;
      if (diff >= 33) {
        last = now();
        return fn(diff, function() {
          return requestAnimationFrame(tick);
        });
      } else {
        return setTimeout(tick, 33 - diff);
      }
    };
    return tick();
  };

  result = function() {
    var args, key, obj;
    obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (typeof obj[key] === 'function') {
      return obj[key].apply(obj, args);
    } else {
      return obj[key];
    }
  };

  extend = function() {
    var key, out, source, sources, val, _i, _len;
    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      if (source) {
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          val = source[key];
          if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {
            extend(out[key], val);
          } else {
            out[key] = val;
          }
        }
      }
    }
    return out;
  };

  avgAmplitude = function(arr) {
    var count, sum, v, _i, _len;
    sum = count = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      sum += Math.abs(v);
      count++;
    }
    return sum / count;
  };

  getFromDOM = function(key, json) {
    var data, e, el;
    if (key == null) {
      key = 'options';
    }
    if (json == null) {
      json = true;
    }
    el = document.querySelector("[data-pace-" + key + "]");
    if (!el) {
      return;
    }
    data = el.getAttribute("data-pace-" + key);
    if (!json) {
      return data;
    }
    try {
      return JSON.parse(data);
    } catch (_error) {
      e = _error;
      return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
    }
  };

  Evented = (function() {
    function Evented() {}

    Evented.prototype.on = function(event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function(event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function(event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function() {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;

  })();

  Pace = window.Pace || {};

  window.Pace = Pace;

  extend(Pace, Evented.prototype);

  options = Pace.options = extend({}, defaultOptions, window.paceOptions, getFromDOM());

  _ref = ['ajax', 'document', 'eventLag', 'elements'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    source = _ref[_i];
    if (options[source] === true) {
      options[source] = defaultOptions[source];
    }
  }

  NoTargetError = (function(_super) {
    __extends(NoTargetError, _super);

    function NoTargetError() {
      _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return NoTargetError;

  })(Error);

  Bar = (function() {
    function Bar() {
      this.progress = 0;
    }

    Bar.prototype.getElement = function() {
      var targetElement;
      if (this.el == null) {
        targetElement = document.querySelector(options.target);
        if (!targetElement) {
          throw new NoTargetError;
        }
        this.el = document.createElement('div');
        this.el.className = "pace pace-active";
        document.body.className = document.body.className.replace(/pace-done/g, '');
        document.body.className += ' pace-running';
        this.el.innerHTML = '<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
        if (targetElement.firstChild != null) {
          targetElement.insertBefore(this.el, targetElement.firstChild);
        } else {
          targetElement.appendChild(this.el);
        }
      }
      return this.el;
    };

    Bar.prototype.finish = function() {
      var el;
      el = this.getElement();
      el.className = el.className.replace('pace-active', '');
      el.className += ' pace-inactive';
      document.body.className = document.body.className.replace('pace-running', '');
      return document.body.className += ' pace-done';
    };

    Bar.prototype.update = function(prog) {
      this.progress = prog;
      return this.render();
    };

    Bar.prototype.destroy = function() {
      try {
        this.getElement().parentNode.removeChild(this.getElement());
      } catch (_error) {
        NoTargetError = _error;
      }
      return this.el = void 0;
    };

    Bar.prototype.render = function() {
      var el, key, progressStr, transform, _j, _len1, _ref2;
      if (document.querySelector(options.target) == null) {
        return false;
      }
      el = this.getElement();
      transform = "translate3d(" + this.progress + "%, 0, 0)";
      _ref2 = ['webkitTransform', 'msTransform', 'transform'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        key = _ref2[_j];
        el.children[0].style[key] = transform;
      }
      if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
        el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
        if (this.progress >= 100) {
          progressStr = '99';
        } else {
          progressStr = this.progress < 10 ? "0" : "";
          progressStr += this.progress | 0;
        }
        el.children[0].setAttribute('data-progress', "" + progressStr);
      }
      return this.lastRenderedProgress = this.progress;
    };

    Bar.prototype.done = function() {
      return this.progress >= 100;
    };

    return Bar;

  })();

  Events = (function() {
    function Events() {
      this.bindings = {};
    }

    Events.prototype.trigger = function(name, val) {
      var binding, _j, _len1, _ref2, _results;
      if (this.bindings[name] != null) {
        _ref2 = this.bindings[name];
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          binding = _ref2[_j];
          _results.push(binding.call(this, val));
        }
        return _results;
      }
    };

    Events.prototype.on = function(name, fn) {
      var _base;
      if ((_base = this.bindings)[name] == null) {
        _base[name] = [];
      }
      return this.bindings[name].push(fn);
    };

    return Events;

  })();

  _XMLHttpRequest = window.XMLHttpRequest;

  _XDomainRequest = window.XDomainRequest;

  _WebSocket = window.WebSocket;

  extendNative = function(to, from) {
    var e, key, _results;
    _results = [];
    for (key in from.prototype) {
      try {
        if ((to[key] == null) && typeof from[key] !== 'function') {
          if (typeof Object.defineProperty === 'function') {
            _results.push(Object.defineProperty(to, key, {
              get: function() {
                return from.prototype[key];
              },
              configurable: true,
              enumerable: true
            }));
          } else {
            _results.push(to[key] = from.prototype[key]);
          }
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        e = _error;
      }
    }
    return _results;
  };

  ignoreStack = [];

  Pace.ignore = function() {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('ignore');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  Pace.track = function() {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('track');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  shouldTrack = function(method) {
    var _ref2;
    if (method == null) {
      method = 'GET';
    }
    if (ignoreStack[0] === 'track') {
      return 'force';
    }
    if (!ignoreStack.length && options.ajax) {
      if (method === 'socket' && options.ajax.trackWebSockets) {
        return true;
      } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
        return true;
      }
    }
    return false;
  };

  RequestIntercept = (function(_super) {
    __extends(RequestIntercept, _super);

    function RequestIntercept() {
      var monitorXHR,
        _this = this;
      RequestIntercept.__super__.constructor.apply(this, arguments);
      monitorXHR = function(req) {
        var _open;
        _open = req.open;
        return req.open = function(type, url, async) {
          if (shouldTrack(type)) {
            _this.trigger('request', {
              type: type,
              url: url,
              request: req
            });
          }
          return _open.apply(req, arguments);
        };
      };
      window.XMLHttpRequest = function(flags) {
        var req;
        req = new _XMLHttpRequest(flags);
        monitorXHR(req);
        return req;
      };
      try {
        extendNative(window.XMLHttpRequest, _XMLHttpRequest);
      } catch (_error) {}
      if (_XDomainRequest != null) {
        window.XDomainRequest = function() {
          var req;
          req = new _XDomainRequest;
          monitorXHR(req);
          return req;
        };
        try {
          extendNative(window.XDomainRequest, _XDomainRequest);
        } catch (_error) {}
      }
      if ((_WebSocket != null) && options.ajax.trackWebSockets) {
        window.WebSocket = function(url, protocols) {
          var req;
          if (protocols != null) {
            req = new _WebSocket(url, protocols);
          } else {
            req = new _WebSocket(url);
          }
          if (shouldTrack('socket')) {
            _this.trigger('request', {
              type: 'socket',
              url: url,
              protocols: protocols,
              request: req
            });
          }
          return req;
        };
        try {
          extendNative(window.WebSocket, _WebSocket);
        } catch (_error) {}
      }
    }

    return RequestIntercept;

  })(Events);

  _intercept = null;

  getIntercept = function() {
    if (_intercept == null) {
      _intercept = new RequestIntercept;
    }
    return _intercept;
  };

  shouldIgnoreURL = function(url) {
    var pattern, _j, _len1, _ref2;
    _ref2 = options.ajax.ignoreURLs;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      pattern = _ref2[_j];
      if (typeof pattern === 'string') {
        if (url.indexOf(pattern) !== -1) {
          return true;
        }
      } else {
        if (pattern.test(url)) {
          return true;
        }
      }
    }
    return false;
  };

  getIntercept().on('request', function(_arg) {
    var after, args, request, type, url;
    type = _arg.type, request = _arg.request, url = _arg.url;
    if (shouldIgnoreURL(url)) {
      return;
    }
    if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
      args = arguments;
      after = options.restartOnRequestAfter || 0;
      if (typeof after === 'boolean') {
        after = 0;
      }
      return setTimeout(function() {
        var stillActive, _j, _len1, _ref2, _ref3, _results;
        if (type === 'socket') {
          stillActive = request.readyState < 2;
        } else {
          stillActive = (0 < (_ref2 = request.readyState) && _ref2 < 4);
        }
        if (stillActive) {
          Pace.restart();
          _ref3 = Pace.sources;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            source = _ref3[_j];
            if (source instanceof AjaxMonitor) {
              source.watch.apply(source, args);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }, after);
    }
  });

  AjaxMonitor = (function() {
    function AjaxMonitor() {
      var _this = this;
      this.elements = [];
      getIntercept().on('request', function() {
        return _this.watch.apply(_this, arguments);
      });
    }

    AjaxMonitor.prototype.watch = function(_arg) {
      var request, tracker, type, url;
      type = _arg.type, request = _arg.request, url = _arg.url;
      if (shouldIgnoreURL(url)) {
        return;
      }
      if (type === 'socket') {
        tracker = new SocketRequestTracker(request);
      } else {
        tracker = new XHRRequestTracker(request);
      }
      return this.elements.push(tracker);
    };

    return AjaxMonitor;

  })();

  XHRRequestTracker = (function() {
    function XHRRequestTracker(request) {
      var event, size, _j, _len1, _onreadystatechange, _ref2,
        _this = this;
      this.progress = 0;
      if (window.ProgressEvent != null) {
        size = null;
        request.addEventListener('progress', function(evt) {
          if (evt.lengthComputable) {
            return _this.progress = 100 * evt.loaded / evt.total;
          } else {
            return _this.progress = _this.progress + (100 - _this.progress) / 2;
          }
        }, false);
        _ref2 = ['load', 'abort', 'timeout', 'error'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          event = _ref2[_j];
          request.addEventListener(event, function() {
            return _this.progress = 100;
          }, false);
        }
      } else {
        _onreadystatechange = request.onreadystatechange;
        request.onreadystatechange = function() {
          var _ref3;
          if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
            _this.progress = 100;
          } else if (request.readyState === 3) {
            _this.progress = 50;
          }
          return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
        };
      }
    }

    return XHRRequestTracker;

  })();

  SocketRequestTracker = (function() {
    function SocketRequestTracker(request) {
      var event, _j, _len1, _ref2,
        _this = this;
      this.progress = 0;
      _ref2 = ['error', 'open'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        event = _ref2[_j];
        request.addEventListener(event, function() {
          return _this.progress = 100;
        }, false);
      }
    }

    return SocketRequestTracker;

  })();

  ElementMonitor = (function() {
    function ElementMonitor(options) {
      var selector, _j, _len1, _ref2;
      if (options == null) {
        options = {};
      }
      this.elements = [];
      if (options.selectors == null) {
        options.selectors = [];
      }
      _ref2 = options.selectors;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        selector = _ref2[_j];
        this.elements.push(new ElementTracker(selector));
      }
    }

    return ElementMonitor;

  })();

  ElementTracker = (function() {
    function ElementTracker(selector) {
      this.selector = selector;
      this.progress = 0;
      this.check();
    }

    ElementTracker.prototype.check = function() {
      var _this = this;
      if (document.querySelector(this.selector)) {
        return this.done();
      } else {
        return setTimeout((function() {
          return _this.check();
        }), options.elements.checkInterval);
      }
    };

    ElementTracker.prototype.done = function() {
      return this.progress = 100;
    };

    return ElementTracker;

  })();

  DocumentMonitor = (function() {
    DocumentMonitor.prototype.states = {
      loading: 0,
      interactive: 50,
      complete: 100
    };

    function DocumentMonitor() {
      var _onreadystatechange, _ref2,
        _this = this;
      this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
      _onreadystatechange = document.onreadystatechange;
      document.onreadystatechange = function() {
        if (_this.states[document.readyState] != null) {
          _this.progress = _this.states[document.readyState];
        }
        return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
      };
    }

    return DocumentMonitor;

  })();

  EventLagMonitor = (function() {
    function EventLagMonitor() {
      var avg, interval, last, points, samples,
        _this = this;
      this.progress = 0;
      avg = 0;
      samples = [];
      points = 0;
      last = now();
      interval = setInterval(function() {
        var diff;
        diff = now() - last - 50;
        last = now();
        samples.push(diff);
        if (samples.length > options.eventLag.sampleCount) {
          samples.shift();
        }
        avg = avgAmplitude(samples);
        if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
          _this.progress = 100;
          return clearInterval(interval);
        } else {
          return _this.progress = 100 * (3 / (avg + 3));
        }
      }, 50);
    }

    return EventLagMonitor;

  })();

  Scaler = (function() {
    function Scaler(source) {
      this.source = source;
      this.last = this.sinceLastUpdate = 0;
      this.rate = options.initialRate;
      this.catchup = 0;
      this.progress = this.lastProgress = 0;
      if (this.source != null) {
        this.progress = result(this.source, 'progress');
      }
    }

    Scaler.prototype.tick = function(frameTime, val) {
      var scaling;
      if (val == null) {
        val = result(this.source, 'progress');
      }
      if (val >= 100) {
        this.done = true;
      }
      if (val === this.last) {
        this.sinceLastUpdate += frameTime;
      } else {
        if (this.sinceLastUpdate) {
          this.rate = (val - this.last) / this.sinceLastUpdate;
        }
        this.catchup = (val - this.progress) / options.catchupTime;
        this.sinceLastUpdate = 0;
        this.last = val;
      }
      if (val > this.progress) {
        this.progress += this.catchup * frameTime;
      }
      scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
      this.progress += scaling * this.rate * frameTime;
      this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
      this.progress = Math.max(0, this.progress);
      this.progress = Math.min(100, this.progress);
      this.lastProgress = this.progress;
      return this.progress;
    };

    return Scaler;

  })();

  sources = null;

  scalers = null;

  bar = null;

  uniScaler = null;

  animation = null;

  cancelAnimation = null;

  Pace.running = false;

  handlePushState = function() {
    if (options.restartOnPushState) {
      return Pace.restart();
    }
  };

  if (window.history.pushState != null) {
    _pushState = window.history.pushState;
    window.history.pushState = function() {
      handlePushState();
      return _pushState.apply(window.history, arguments);
    };
  }

  if (window.history.replaceState != null) {
    _replaceState = window.history.replaceState;
    window.history.replaceState = function() {
      handlePushState();
      return _replaceState.apply(window.history, arguments);
    };
  }

  SOURCE_KEYS = {
    ajax: AjaxMonitor,
    elements: ElementMonitor,
    document: DocumentMonitor,
    eventLag: EventLagMonitor
  };

  (init = function() {
    var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
    Pace.sources = sources = [];
    _ref2 = ['ajax', 'elements', 'document', 'eventLag'];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      type = _ref2[_j];
      if (options[type] !== false) {
        sources.push(new SOURCE_KEYS[type](options[type]));
      }
    }
    _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      source = _ref4[_k];
      sources.push(new source(options));
    }
    Pace.bar = bar = new Bar;
    scalers = [];
    return uniScaler = new Scaler;
  })();

  Pace.stop = function() {
    Pace.trigger('stop');
    Pace.running = false;
    bar.destroy();
    cancelAnimation = true;
    if (animation != null) {
      if (typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animation);
      }
      animation = null;
    }
    return init();
  };

  Pace.restart = function() {
    Pace.trigger('restart');
    Pace.stop();
    return Pace.start();
  };

  Pace.go = function() {
    var start;
    Pace.running = true;
    bar.render();
    start = now();
    cancelAnimation = false;
    return animation = runAnimation(function(frameTime, enqueueNextFrame) {
      var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
      remaining = 100 - bar.progress;
      count = sum = 0;
      done = true;
      for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
        source = sources[i];
        scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
        elements = (_ref2 = source.elements) != null ? _ref2 : [source];
        for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
          element = elements[j];
          scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
          done &= scaler.done;
          if (scaler.done) {
            continue;
          }
          count++;
          sum += scaler.tick(frameTime);
        }
      }
      avg = sum / count;
      bar.update(uniScaler.tick(frameTime, avg));
      if (bar.done() || done || cancelAnimation) {
        bar.update(100);
        Pace.trigger('done');
        return setTimeout(function() {
          bar.finish();
          Pace.running = false;
          return Pace.trigger('hide');
        }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
      } else {
        return enqueueNextFrame();
      }
    });
  };

  Pace.start = function(_options) {
    extend(options, _options);
    Pace.running = true;
    try {
      bar.render();
    } catch (_error) {
      NoTargetError = _error;
    }
    if (!document.querySelector('.pace')) {
      return setTimeout(Pace.start, 50);
    } else {
      Pace.trigger('start');
      return Pace.go();
    }
  };

  if (typeof define === 'function' && define.amd) {
    define(['pace'], function() {
      return Pace;
    });
  } else if (typeof exports === 'object') {
    module.exports = Pace;
  } else {
    if (options.startOnPageLoad) {
      Pace.start();
    }
  }

}).call(this);

/*!
 * Packery PACKAGED v2.1.1
 * Gapless, draggable grid layouts
 *
 * Licensed GPLv3 for open source use
 * or Packery Commercial License for commercial use
 *
 * http://packery.metafizzy.co
 * Copyright 2016 Metafizzy
 */

!function(t,e){"use strict";"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(i){e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("jquery")):t.jQueryBridget=e(t,t.jQuery)}(window,function(t,e){"use strict";function i(i,s,a){function h(t,e,n){var o,s="$()."+i+'("'+e+'")';return t.each(function(t,h){var u=a.data(h,i);if(!u)return void r(i+" not initialized. Cannot call methods, i.e. "+s);var c=u[e];if(!c||"_"==e.charAt(0))return void r(s+" is not a valid method");var d=c.apply(u,n);o=void 0===o?d:o}),void 0!==o?o:t}function u(t,e){t.each(function(t,n){var o=a.data(n,i);o?(o.option(e),o._init()):(o=new s(n,e),a.data(n,i,o))})}a=a||e||t.jQuery,a&&(s.prototype.option||(s.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[i]=function(t){if("string"==typeof t){var e=o.call(arguments,1);return h(this,t,e)}return u(this,t),this},n(a))}function n(t){!t||t&&t.bridget||(t.bridget=i)}var o=Array.prototype.slice,s=t.console,r="undefined"==typeof s?function(){}:function(t){s.error(t)};return n(e||t.jQuery),i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("get-size/get-size",[],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():t.getSize=e()}(window,function(){"use strict";function t(t){var e=parseFloat(t),i=-1==t.indexOf("%")&&!isNaN(e);return i&&e}function e(){}function i(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;u>e;e++){var i=h[e];t[i]=0}return t}function n(t){var e=getComputedStyle(t);return e||a("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),e}function o(){if(!c){c=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var o=n(e);s.isBoxSizeOuter=r=200==t(o.width),i.removeChild(e)}}function s(e){if(o(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var s=n(e);if("none"==s.display)return i();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var c=a.isBorderBox="border-box"==s.boxSizing,d=0;u>d;d++){var f=h[d],l=s[f],p=parseFloat(l);a[f]=isNaN(p)?0:p}var g=a.paddingLeft+a.paddingRight,m=a.paddingTop+a.paddingBottom,y=a.marginLeft+a.marginRight,v=a.marginTop+a.marginBottom,_=a.borderLeftWidth+a.borderRightWidth,x=a.borderTopWidth+a.borderBottomWidth,b=c&&r,E=t(s.width);E!==!1&&(a.width=E+(b?0:g+_));var T=t(s.height);return T!==!1&&(a.height=T+(b?0:m+x)),a.innerWidth=a.width-(g+_),a.innerHeight=a.height-(m+x),a.outerWidth=a.width+y,a.outerHeight=a.height+v,a}}var r,a="undefined"==typeof console?e:function(t){console.error(t)},h=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],u=h.length,c=!1;return s}),function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}(this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{},n=i[t]=i[t]||{};return n[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=0,o=i[n];e=e||[];for(var s=this._onceEvents&&this._onceEvents[t];o;){var r=s&&s[o];r&&(this.off(t,o),delete s[o]),o.apply(this,e),n+=r?0:1,o=i[n]}return this}},t}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",e):"object"==typeof module&&module.exports?module.exports=e():t.matchesSelector=e()}(window,function(){"use strict";var t=function(){var t=Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i],o=n+"MatchesSelector";if(t[o])return o}}();return function(e,i){return e[t](i)}}),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.matchesSelector)}(window,function(t,e){var i={};i.extend=function(t,e){for(var i in e)t[i]=e[i];return t},i.modulo=function(t,e){return(t%e+e)%e},i.makeArray=function(t){var e=[];if(Array.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var i=0;i<t.length;i++)e.push(t[i]);else e.push(t);return e},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var o=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!n)return void o.push(t);e(t,n)&&o.push(t);for(var i=t.querySelectorAll(n),s=0;s<i.length;s++)o.push(i[s])}}),o},i.debounceMethod=function(t,e,i){var n=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];t&&clearTimeout(t);var e=arguments,s=this;this[o]=setTimeout(function(){n.apply(s,e),delete s[o]},i||100)}},i.docReady=function(t){"complete"==document.readyState?t():document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var n=t.console;return i.htmlInit=function(e,o){i.docReady(function(){var s=i.toDashed(o),r="data-"+s,a=document.querySelectorAll("["+r+"]"),h=document.querySelectorAll(".js-"+s),u=i.makeArray(a).concat(i.makeArray(h)),c=r+"-options",d=t.jQuery;u.forEach(function(t){var i,s=t.getAttribute(r)||t.getAttribute(c);try{i=s&&JSON.parse(s)}catch(a){return void(n&&n.error("Error parsing "+r+" on "+t.className+": "+a))}var h=new e(t,i);d&&d.data(t,o,h)})})},i}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("ev-emitter"),require("get-size")):(t.Outlayer={},t.Outlayer.Item=e(t.EvEmitter,t.getSize))}(window,function(t,e){"use strict";function i(t){for(var e in t)return!1;return e=null,!0}function n(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}function o(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var s=document.documentElement.style,r="string"==typeof s.transition?"transition":"WebkitTransition",a="string"==typeof s.transform?"transform":"WebkitTransform",h={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[r],u={transform:a,transition:r,transitionDuration:r+"Duration",transitionProperty:r+"Property",transitionDelay:r+"Delay"},c=n.prototype=Object.create(t.prototype);c.constructor=n,c._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},c.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},c.getSize=function(){this.size=e(this.element)},c.css=function(t){var e=this.element.style;for(var i in t){var n=u[i]||i;e[n]=t[i]}},c.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],o=t[i?"top":"bottom"],s=this.layout.size,r=-1!=n.indexOf("%")?parseFloat(n)/100*s.width:parseInt(n,10),a=-1!=o.indexOf("%")?parseFloat(o)/100*s.height:parseInt(o,10);r=isNaN(r)?0:r,a=isNaN(a)?0:a,r-=e?s.paddingLeft:s.paddingRight,a-=i?s.paddingTop:s.paddingBottom,this.position.x=r,this.position.y=a},c.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",s=i?"left":"right",r=i?"right":"left",a=this.position.x+t[o];e[s]=this.getXValue(a),e[r]="";var h=n?"paddingTop":"paddingBottom",u=n?"top":"bottom",c=n?"bottom":"top",d=this.position.y+t[h];e[u]=this.getYValue(d),e[c]="",this.css(e),this.emitEvent("layout",[this])},c.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},c.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},c._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,o=parseInt(t,10),s=parseInt(e,10),r=o===this.position.x&&s===this.position.y;if(this.setPosition(t,e),r&&!this.isTransitioning)return void this.layoutPosition();var a=t-i,h=e-n,u={};u.transform=this.getTranslate(a,h),this.transition({to:u,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})},c.getTranslate=function(t,e){var i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop");return t=i?t:-t,e=n?e:-e,"translate3d("+t+"px, "+e+"px, 0)"},c.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},c.moveTo=c._transitionTo,c.setPosition=function(t,e){this.position.x=parseInt(t,10),this.position.y=parseInt(e,10)},c._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},c.transition=function(t){if(!parseFloat(this.layout.options.transitionDuration))return void this._nonTransition(t);var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);var n=this.element.offsetHeight;n=null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0};var d="opacity,"+o(a);c.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:d,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(h,this,!1)}},c.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},c.onotransitionend=function(t){this.ontransitionend(t)};var f={"-webkit-transform":"transform"};c.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=f[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],i(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd){var o=e.onEnd[n];o.call(this),delete e.onEnd[n]}this.emitEvent("transitionEnd",[this])}},c.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(h,this,!1),this.isTransitioning=!1},c._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var l={transitionProperty:"",transitionDuration:"",transitionDelay:""};return c.removeTransitionStyles=function(){this.css(l)},c.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},c.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},c.remove=function(){return r&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),void this.hide()):void this.removeElem()},c.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={},i=this.getHideRevealTransitionEndProperty("visibleStyle");e[i]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},c.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},c.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},c.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={},i=this.getHideRevealTransitionEndProperty("hiddenStyle");e[i]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},c.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},c.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(i,n,o,s){return e(t,i,n,o,s)}):"object"==typeof module&&module.exports?module.exports=e(t,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.EvEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,i,n,o){"use strict";function s(t,e){var i=n.getQueryElement(t);if(!i)return void(h&&h.error("Bad element for "+this.constructor.namespace+": "+(i||t)));this.element=i,u&&(this.$element=u(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e);var o=++d;this.element.outlayerGUID=o,f[o]=this,this._create();var s=this._getOption("initLayout");s&&this.layout()}function r(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}function a(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];if(!i.length)return 0;i=parseFloat(i);var o=p[n]||1;return i*o}var h=t.console,u=t.jQuery,c=function(){},d=0,f={};s.namespace="outlayer",s.Item=o,s.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var l=s.prototype;n.extend(l,e.prototype),l.option=function(t){n.extend(this.options,t)},l._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},s.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},l._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),n.extend(this.element.style,this.options.containerStyle);var t=this._getOption("resize");t&&this.bindResize()},l.reloadItems=function(){this.items=this._itemize(this.element.children)},l._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],o=0;o<e.length;o++){var s=e[o],r=new i(s,this);n.push(r)}return n},l._filterFindItemElements=function(t){return n.filterFindElements(t,this.options.itemSelector)},l.getItemElements=function(){return this.items.map(function(t){return t.element})},l.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},l._init=l.layout,l._resetLayout=function(){this.getSize()},l.getSize=function(){this.size=i(this.element)},l._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):o instanceof HTMLElement&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},l.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},l._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},l._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var i=[];t.forEach(function(t){var n=this._getItemLayoutPosition(t);n.item=t,n.isInstant=e||t.isLayoutInstant,i.push(n)},this),this._processLayoutQueue(i)}},l._getItemLayoutPosition=function(){return{x:0,y:0}},l._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},l.updateStagger=function(){var t=this.options.stagger;return null===t||void 0===t?void(this.stagger=0):(this.stagger=a(t),this.stagger)},l._positionItem=function(t,e,i,n,o){n?t.goTo(e,i):(t.stagger(o*this.stagger),t.moveTo(e,i))},l._postLayout=function(){this.resizeContainer()},l.resizeContainer=function(){var t=this._getOption("resizeContainer");if(t){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},l._getContainerSize=c,l._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},l._emitCompleteOnItems=function(t,e){function i(){o.dispatchEvent(t+"Complete",null,[e])}function n(){r++,r==s&&i()}var o=this,s=e.length;if(!e||!s)return void i();var r=0;e.forEach(function(e){e.once(t,n)})},l.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),u)if(this.$element=this.$element||u(this.element),e){var o=u.Event(e);o.type=t,this.$element.trigger(o,i)}else this.$element.trigger(t,i)},l.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},l.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},l.stamp=function(t){t=this._find(t),t&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},l.unstamp=function(t){t=this._find(t),t&&t.forEach(function(t){n.removeFrom(this.stamps,t),this.unignore(t)},this)},l._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=n.makeArray(t)):void 0},l._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},l._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},l._manageStamp=c,l._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,o=i(t),s={left:e.left-n.left-o.marginLeft,top:e.top-n.top-o.marginTop,right:n.right-e.right-o.marginRight,bottom:n.bottom-e.bottom-o.marginBottom};return s},l.handleEvent=n.handleEvent,l.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},l.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},l.onresize=function(){this.resize()},n.debounceMethod(s,"onresize",100),l.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},l.needsResizeLayout=function(){var t=i(this.element),e=this.size&&t;return e&&t.innerWidth!==this.size.innerWidth},l.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},l.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},l.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},l.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,i){t.stagger(i*e),t.reveal()})}},l.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,i){t.stagger(i*e),t.hide()})}},l.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},l.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},l.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},l.getItems=function(t){t=n.makeArray(t);var e=[];return t.forEach(function(t){var i=this.getItem(t);i&&e.push(i)},this),e},l.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),n.removeFrom(this.items,t)},this)},l.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete f[e],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){t=n.getQueryElement(t);var e=t&&t.outlayerGUID;return e&&f[e]},s.create=function(t,e){var i=r(s);return i.defaults=n.extend({},s.defaults),n.extend(i.defaults,e),i.compatOptions=n.extend({},s.compatOptions),i.namespace=t,i.data=s.data,i.Item=r(o),n.htmlInit(i,t),u&&u.bridget&&u.bridget(t,i),i};var p={ms:1,s:1e3};return s.Item=o,s}),function(t,e){"function"==typeof define&&define.amd?define("packery/js/rect",e):"object"==typeof module&&module.exports?module.exports=e():(t.Packery=t.Packery||{},t.Packery.Rect=e())}(window,function(){"use strict";function t(e){for(var i in t.defaults)this[i]=t.defaults[i];for(i in e)this[i]=e[i]}t.defaults={x:0,y:0,width:0,height:0};var e=t.prototype;return e.contains=function(t){var e=t.width||0,i=t.height||0;return this.x<=t.x&&this.y<=t.y&&this.x+this.width>=t.x+e&&this.y+this.height>=t.y+i},e.overlaps=function(t){var e=this.x+this.width,i=this.y+this.height,n=t.x+t.width,o=t.y+t.height;return this.x<n&&e>t.x&&this.y<o&&i>t.y},e.getMaximalFreeRects=function(e){if(!this.overlaps(e))return!1;var i,n=[],o=this.x+this.width,s=this.y+this.height,r=e.x+e.width,a=e.y+e.height;return this.y<e.y&&(i=new t({x:this.x,y:this.y,width:this.width,height:e.y-this.y}),n.push(i)),o>r&&(i=new t({x:r,y:this.y,width:o-r,height:this.height}),n.push(i)),s>a&&(i=new t({x:this.x,y:a,width:this.width,height:s-a}),n.push(i)),this.x<e.x&&(i=new t({x:this.x,y:this.y,width:e.x-this.x,height:this.height}),n.push(i)),n},e.canFit=function(t){return this.width>=t.width&&this.height>=t.height},t}),function(t,e){if("function"==typeof define&&define.amd)define("packery/js/packer",["./rect"],e);else if("object"==typeof module&&module.exports)module.exports=e(require("./rect"));else{var i=t.Packery=t.Packery||{};i.Packer=e(i.Rect)}}(window,function(t){"use strict";function e(t,e,i){this.width=t||0,this.height=e||0,this.sortDirection=i||"downwardLeftToRight",this.reset()}var i=e.prototype;i.reset=function(){this.spaces=[];var e=new t({x:0,y:0,width:this.width,height:this.height});this.spaces.push(e),this.sorter=n[this.sortDirection]||n.downwardLeftToRight},i.pack=function(t){for(var e=0;e<this.spaces.length;e++){var i=this.spaces[e];if(i.canFit(t)){this.placeInSpace(t,i);break}}},i.columnPack=function(t){for(var e=0;e<this.spaces.length;e++){var i=this.spaces[e],n=i.x<=t.x&&i.x+i.width>=t.x+t.width&&i.height>=t.height-.01;if(n){t.y=i.y,this.placed(t);break}}},i.rowPack=function(t){for(var e=0;e<this.spaces.length;e++){var i=this.spaces[e],n=i.y<=t.y&&i.y+i.height>=t.y+t.height&&i.width>=t.width-.01;if(n){t.x=i.x,this.placed(t);break}}},i.placeInSpace=function(t,e){t.x=e.x,t.y=e.y,this.placed(t)},i.placed=function(t){for(var e=[],i=0;i<this.spaces.length;i++){var n=this.spaces[i],o=n.getMaximalFreeRects(t);o?e.push.apply(e,o):e.push(n)}this.spaces=e,this.mergeSortSpaces()},i.mergeSortSpaces=function(){e.mergeRects(this.spaces),this.spaces.sort(this.sorter)},i.addSpace=function(t){this.spaces.push(t),this.mergeSortSpaces()},e.mergeRects=function(t){var e=0,i=t[e];t:for(;i;){for(var n=0,o=t[e+n];o;){if(o==i)n++;else{if(o.contains(i)){t.splice(e,1),i=t[e];continue t}i.contains(o)?t.splice(e+n,1):n++}o=t[e+n]}e++,i=t[e]}return t};var n={downwardLeftToRight:function(t,e){return t.y-e.y||t.x-e.x},rightwardTopToBottom:function(t,e){return t.x-e.x||t.y-e.y}};return e}),function(t,e){"function"==typeof define&&define.amd?define("packery/js/item",["outlayer/outlayer","./rect"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer"),require("./rect")):t.Packery.Item=e(t.Outlayer,t.Packery.Rect)}(window,function(t,e){"use strict";var i=document.documentElement.style,n="string"==typeof i.transform?"transform":"WebkitTransform",o=function(){t.Item.apply(this,arguments)},s=o.prototype=Object.create(t.Item.prototype),r=s._create;s._create=function(){r.call(this),this.rect=new e};var a=s.moveTo;return s.moveTo=function(t,e){var i=Math.abs(this.position.x-t),n=Math.abs(this.position.y-e),o=this.layout.dragItemCount&&!this.isPlacing&&!this.isTransitioning&&1>i&&1>n;return o?void this.goTo(t,e):void a.apply(this,arguments)},s.enablePlacing=function(){this.removeTransitionStyles(),this.isTransitioning&&n&&(this.element.style[n]="none"),this.isTransitioning=!1,this.getSize(),this.layout._setRectSize(this.element,this.rect),this.isPlacing=!0},s.disablePlacing=function(){this.isPlacing=!1},s.removeElem=function(){this.element.parentNode.removeChild(this.element),this.layout.packer.addSpace(this.rect),this.emitEvent("remove",[this])},s.showDropPlaceholder=function(){var t=this.dropPlaceholder;t||(t=this.dropPlaceholder=document.createElement("div"),t.className="packery-drop-placeholder",t.style.position="absolute"),t.style.width=this.size.width+"px",t.style.height=this.size.height+"px",this.positionDropPlaceholder(),this.layout.element.appendChild(t)},s.positionDropPlaceholder=function(){this.dropPlaceholder.style[n]="translate("+this.rect.x+"px, "+this.rect.y+"px)"},s.hideDropPlaceholder=function(){var t=this.dropPlaceholder.parentNode;t&&t.removeChild(this.dropPlaceholder)},o}),function(t,e){"function"==typeof define&&define.amd?define(["get-size/get-size","outlayer/outlayer","packery/js/rect","packery/js/packer","packery/js/item"],e):"object"==typeof module&&module.exports?module.exports=e(require("get-size"),require("outlayer"),require("./rect"),require("./packer"),require("./item")):t.Packery=e(t.getSize,t.Outlayer,t.Packery.Rect,t.Packery.Packer,t.Packery.Item)}(window,function(t,e,i,n,o){"use strict";function s(t,e){return t.position.y-e.position.y||t.position.x-e.position.x}function r(t,e){return t.position.x-e.position.x||t.position.y-e.position.y}function a(t,e){var i=e.x-t.x,n=e.y-t.y;return Math.sqrt(i*i+n*n)}i.prototype.canFit=function(t){return this.width>=t.width-1&&this.height>=t.height-1};var h=e.create("packery");h.Item=o;var u=h.prototype;u._create=function(){e.prototype._create.call(this),this.packer=new n,this.shiftPacker=new n,this.isEnabled=!0,this.dragItemCount=0;var t=this;this.handleDraggabilly={dragStart:function(){t.itemDragStart(this.element)},dragMove:function(){t.itemDragMove(this.element,this.position.x,this.position.y)},dragEnd:function(){t.itemDragEnd(this.element)}},this.handleUIDraggable={start:function(e,i){i&&t.itemDragStart(e.currentTarget)},drag:function(e,i){i&&t.itemDragMove(e.currentTarget,i.position.left,i.position.top)},stop:function(e,i){i&&t.itemDragEnd(e.currentTarget)}}},u._resetLayout=function(){this.getSize(),this._getMeasurements();var t,e,i;this._getOption("horizontal")?(t=1/0,e=this.size.innerHeight+this.gutter,i="rightwardTopToBottom"):(t=this.size.innerWidth+this.gutter,e=1/0,i="downwardLeftToRight"),this.packer.width=this.shiftPacker.width=t,this.packer.height=this.shiftPacker.height=e,this.packer.sortDirection=this.shiftPacker.sortDirection=i,this.packer.reset(),this.maxY=0,this.maxX=0},u._getMeasurements=function(){this._getMeasurement("columnWidth","width"),this._getMeasurement("rowHeight","height"),this._getMeasurement("gutter","width")},u._getItemLayoutPosition=function(t){if(this._setRectSize(t.element,t.rect),this.isShifting||this.dragItemCount>0){var e=this._getPackMethod();this.packer[e](t.rect)}else this.packer.pack(t.rect);return this._setMaxXY(t.rect),t.rect},u.shiftLayout=function(){this.isShifting=!0,this.layout(),delete this.isShifting},u._getPackMethod=function(){return this._getOption("horizontal")?"rowPack":"columnPack"},u._setMaxXY=function(t){this.maxX=Math.max(t.x+t.width,this.maxX),this.maxY=Math.max(t.y+t.height,this.maxY)},u._setRectSize=function(e,i){var n=t(e),o=n.outerWidth,s=n.outerHeight;(o||s)&&(o=this._applyGridGutter(o,this.columnWidth),s=this._applyGridGutter(s,this.rowHeight)),i.width=Math.min(o,this.packer.width),i.height=Math.min(s,this.packer.height)},u._applyGridGutter=function(t,e){if(!e)return t+this.gutter;e+=this.gutter;var i=t%e,n=i&&1>i?"round":"ceil";return t=Math[n](t/e)*e},u._getContainerSize=function(){return this._getOption("horizontal")?{width:this.maxX-this.gutter}:{height:this.maxY-this.gutter}},u._manageStamp=function(t){var e,n=this.getItem(t);if(n&&n.isPlacing)e=n.rect;else{var o=this._getElementOffset(t);e=new i({x:this._getOption("originLeft")?o.left:o.right,y:this._getOption("originTop")?o.top:o.bottom})}this._setRectSize(t,e),this.packer.placed(e),this._setMaxXY(e)},u.sortItemsByPosition=function(){var t=this._getOption("horizontal")?r:s;this.items.sort(t)},u.fit=function(t,e,i){var n=this.getItem(t);n&&(this.stamp(n.element),n.enablePlacing(),this.updateShiftTargets(n),e=void 0===e?n.rect.x:e,i=void 0===i?n.rect.y:i,this.shift(n,e,i),this._bindFitEvents(n),n.moveTo(n.rect.x,n.rect.y),this.shiftLayout(),this.unstamp(n.element),this.sortItemsByPosition(),n.disablePlacing())},u._bindFitEvents=function(t){function e(){n++,2==n&&i.dispatchEvent("fitComplete",null,[t])}var i=this,n=0;t.once("layout",e),this.once("layoutComplete",e)},u.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&(this.options.shiftPercentResize?this.resizeShiftPercentLayout():this.layout())},u.needsResizeLayout=function(){var e=t(this.element),i=this._getOption("horizontal")?"innerHeight":"innerWidth";return e[i]!=this.size[i]},u.resizeShiftPercentLayout=function(){var e=this._getItemsForLayout(this.items),i=this._getOption("horizontal"),n=i?"y":"x",o=i?"height":"width",s=i?"rowHeight":"columnWidth",r=i?"innerHeight":"innerWidth",a=this[s];if(a=a&&a+this.gutter){this._getMeasurements();var h=this[s]+this.gutter;e.forEach(function(t){var e=Math.round(t.rect[n]/a);t.rect[n]=e*h})}else{var u=t(this.element)[r]+this.gutter,c=this.packer[o];e.forEach(function(t){t.rect[n]=t.rect[n]/c*u})}this.shiftLayout()},u.itemDragStart=function(t){if(this.isEnabled){this.stamp(t);var e=this.getItem(t);e&&(e.enablePlacing(),e.showDropPlaceholder(),this.dragItemCount++,this.updateShiftTargets(e))}},u.updateShiftTargets=function(t){this.shiftPacker.reset(),this._getBoundingRect();var e=this._getOption("originLeft"),n=this._getOption("originTop");this.stamps.forEach(function(t){var o=this.getItem(t);if(!o||!o.isPlacing){var s=this._getElementOffset(t),r=new i({x:e?s.left:s.right,y:n?s.top:s.bottom});this._setRectSize(t,r),this.shiftPacker.placed(r)}},this);var o=this._getOption("horizontal"),s=o?"rowHeight":"columnWidth",r=o?"height":"width";this.shiftTargetKeys=[],this.shiftTargets=[];var a,h=this[s];if(h=h&&h+this.gutter){var u=Math.ceil(t.rect[r]/h),c=Math.floor((this.shiftPacker[r]+this.gutter)/h);a=(c-u)*h;for(var d=0;c>d;d++){var f=o?0:d*h,l=o?d*h:0;this._addShiftTarget(f,l,a)}}else a=this.shiftPacker[r]+this.gutter-t.rect[r],this._addShiftTarget(0,0,a);var p=this._getItemsForLayout(this.items),g=this._getPackMethod();p.forEach(function(t){var e=t.rect;this._setRectSize(t.element,e),this.shiftPacker[g](e),this._addShiftTarget(e.x,e.y,a);var i=o?e.x+e.width:e.x,n=o?e.y:e.y+e.height;if(this._addShiftTarget(i,n,a),h)for(var s=Math.round(e[r]/h),u=1;s>u;u++){var c=o?i:e.x+h*u,d=o?e.y+h*u:n;this._addShiftTarget(c,d,a)}},this)},u._addShiftTarget=function(t,e,i){var n=this._getOption("horizontal")?e:t;if(!(0!==n&&n>i)){var o=t+","+e,s=-1!=this.shiftTargetKeys.indexOf(o);s||(this.shiftTargetKeys.push(o),this.shiftTargets.push({x:t,y:e}))}},u.shift=function(t,e,i){var n,o=1/0,s={x:e,y:i};this.shiftTargets.forEach(function(t){var e=a(t,s);o>e&&(n=t,o=e)}),t.rect.x=n.x,t.rect.y=n.y};var c=120;u.itemDragMove=function(t,e,i){
function n(){s.shift(o,e,i),o.positionDropPlaceholder(),s.layout()}var o=this.isEnabled&&this.getItem(t);if(o){e-=this.size.paddingLeft,i-=this.size.paddingTop;var s=this,r=new Date;this._itemDragTime&&r-this._itemDragTime<c?(clearTimeout(this.dragTimeout),this.dragTimeout=setTimeout(n,c)):(n(),this._itemDragTime=r)}},u.itemDragEnd=function(t){function e(){n++,2==n&&(i.element.classList.remove("is-positioning-post-drag"),i.hideDropPlaceholder(),o.dispatchEvent("dragItemPositioned",null,[i]))}var i=this.isEnabled&&this.getItem(t);if(i){clearTimeout(this.dragTimeout),i.element.classList.add("is-positioning-post-drag");var n=0,o=this;i.once("layout",e),this.once("layoutComplete",e),i.moveTo(i.rect.x,i.rect.y),this.layout(),this.dragItemCount=Math.max(0,this.dragItemCount-1),this.sortItemsByPosition(),i.disablePlacing(),this.unstamp(i.element)}},u.bindDraggabillyEvents=function(t){this._bindDraggabillyEvents(t,"on")},u.unbindDraggabillyEvents=function(t){this._bindDraggabillyEvents(t,"off")},u._bindDraggabillyEvents=function(t,e){var i=this.handleDraggabilly;t[e]("dragStart",i.dragStart),t[e]("dragMove",i.dragMove),t[e]("dragEnd",i.dragEnd)},u.bindUIDraggableEvents=function(t){this._bindUIDraggableEvents(t,"on")},u.unbindUIDraggableEvents=function(t){this._bindUIDraggableEvents(t,"off")},u._bindUIDraggableEvents=function(t,e){var i=this.handleUIDraggable;t[e]("dragstart",i.start)[e]("drag",i.drag)[e]("dragstop",i.stop)};var d=u.destroy;return u.destroy=function(){d.apply(this,arguments),this.isEnabled=!1},h.Rect=i,h.Packer=n,h});

/**
 * jQuery Unveil
 * A very lightweight jQuery plugin to lazy load images
 * http://luis-almeida.github.com/unveil
 *
 * Licensed under the MIT license.
 * Copyright 2013 Luís Almeida
 * https://github.com/luis-almeida
 */

;(function($) {

  $.fn.unveil = function(threshold, callback, options) {

    var $w = $(window),
        th = threshold || 0,
        retina = window.devicePixelRatio > 1,
        attrib = retina? "data-src-retina" : "data-src",
        images = this,
        options = options || {},
        queueCounter = 0,
        loaded;

    this.one("unveil", function() {
      if (typeof options.beforeUnveil === "function") options.beforeUnveil.call(this);

      var source = this.getAttribute(attrib);
      source = source || this.getAttribute("data-src");

      if (source) {
        this.setAttribute("src", source);
        if (typeof callback === "function") callback.call(this);
      }
    });

    function unveil() {
      var i = 0;

      var inview = images.filter(function() {
        // if(i++ >= 2) return false;

        var $e = $(this);
        if ($e.is(":hidden")) return;

        var wt = $w.scrollTop(),
            wb = wt + $w.height(),
            et = $e.offset().top,
            eb = et + $e.height();

        return eb >= wt - th && et <= wb + th;
      });

      var inviewImages = inview.length;

      for(var i = 0; i < inview.length; i++) {
        var j = i;

        // Add onload-event when not bined yet
        var imgEvents = window.jQuery._data(inview[i], "events");
        var valid = true;

        valid = valid && (typeof imgEvents !== "undefined");

        if(valid) {
          valid = valid && (typeof imgEvents.load === "undefined");
        }

        if(valid) {
          queueCounter++;

          window.jQuery(inview[i]).on('load', function() {
            queueCounter--;
            var loadPercentage = 100 - (queueCounter/inviewImages * 100);

            // if(loadPercentage >= 0 && loadPercentage <= 100) {
              if (typeof options.imageSetProgressCallback === "function") options.imageSetProgressCallback.call(this, this, loadPercentage);
            // }

            if(queueCounter == 0) {
              if (typeof options.afterImageSetHasBeenLoaded === "function") options.afterImageSetHasBeenLoaded.call(this);
            }
          });
        }
      }

      loaded = inview.trigger("unveil");
      images = images.not(loaded);

      /*console.log("inview: ", inviewImages);
      console.log("loaded: ", loaded.length);
      console.log("not loaded: ", images.length);*/
    }

    $w.on("scroll.unveil resize.unveil lookup.unveil", unveil);

    unveil();

    return this;
  };

})(window.jQuery || window.Zepto);

var isMobileDevice = false;

$(document).ready(function() {

  $('img.svg').each(function(){
    var $img = jQuery(this);
    var imgID = $img.attr('id');
    var imgClass = $img.attr('class');
    var imgURL = $img.attr('src');

    jQuery.get(imgURL, function(data) {
      // Get the SVG tag, ignore the rest
      var $svg = jQuery(data).find('svg');

      // Add replaced image's ID to the new SVG
      if(typeof imgID !== 'undefined') {
        $svg = $svg.attr('id', imgID);
      }
      // Add replaced image's classes to the new SVG
      if(typeof imgClass !== 'undefined') {
        $svg = $svg.attr('class', imgClass+' replaced-svg');
      }

      // Remove any invalid XML tags as per http://validator.w3.org
      $svg = $svg.removeAttr('xmlns:a');

      // Check if the viewport is set, if the viewport is not set the SVG wont't scale.
      if(!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
        $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'))
      }

      // Replace image with new SVG
      $img.replaceWith($svg);

    }, 'xml');
  });

  if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) {

    isMobileDevice = true;
  }

  $(window).on('resize', function(el) {
    calculateGridWrapperSize(".img-wrapper");
    watchAffix();

    $(window).trigger("lookup");
    $grid.packery();
  });

  var $grid = $('.grid').packery({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true
  });

  // improves layout in cost of performance
  /*var lastChecked = 0;

  $(window).on('scroll', function(e) {
    var now = Date.now();

    if(lastChecked + 1000 < now) {
      $grid.packery();
      lastChecked = now;
    }

    if($(window).scrollTop() + $(window).height() == $(document).height()) {
      $grid.packery();
    }
  });*/

  setTimeout(function() { $grid.packery(); }, 1000);
  setTimeout(function() { $grid.packery(); }, 2000);

  var unveilCounter = $(".unveil").length;
  var lastPercentage = 0;
  var processStack = 0;

  $(".unveil").unveil(200, function() {
    $(this).parents('.grid-item').addClass('-unveiled');

    $(window).trigger("lookup");

    $grid.packery();
  },
  {
    beforeUnveil: function(test) {
      processStack++;

      if(lastPercentage == 0) {
        $('.pace-progress').css('transform', 'translate3d(0%, 0px, 0px)');
      }

      var $spinner = $('.spinner');

      if(!$spinner.hasClass('-hidden')) {
        $spinner.addClass('-hidden');
      }
    },
    afterImageSetHasBeenLoaded: function() {
      // just to be sure
      $('.pace-progress').css('transform', 'translate3d(100%, 0px, 0px)');
    },
    imageSetProgressCallback: function(image, percent) {
      $(image).addClass('-unveiled');
      processStack--;

      $('.pace-progress').css('transform', 'translate3d('+percent+'%, 0px, 0px)');

      if(lastPercentage <= percent) {
        lastPercentage = percent;
        $('.pace-progress').css('transform', 'translate3d('+percent+'%, 0px, 0px)');

        if(lastPercentage >= 100) {
          lastPercentage = 0;
        }
      }
    }
  });

  calculateGridWrapperSize(".img-wrapper");
  scrollTopButton(400);
  watchAffix();
  watchAffixMinSize();
});


function calculateGridWrapperSize(selector) {
  $(selector).each(function(index, el) {
    var height  = $(el).data('height');
    var width   = $(el).data('width');
    var currentWidth  = $(el).outerWidth();

    var cropFactor = (currentWidth / width) * 100;
    var croppedHeight = Math.round(height * cropFactor / 100);

    $(el).height(croppedHeight + "px");
  });
}

function watchAffix() {
  // Enable / Disable affix
  var windowHeight = $(window).height();
  var affixHeight   = $('.js-blog-affix').height();

  if(affixHeight > windowHeight) {
    $(window).off('.affix');
  }
  else {
    $(window).on('.affix');

    $('.js-blog-affix').affix({
      offset: {
        top: 305
      }
    });
  }
}

function watchAffixMinSize() {
  var contentHeight = $('.blogposts').height();
  var affixHeight   = $('.js-blog-affix').height();

  $('.blogposts').css('min-height', affixHeight + "px");
}

function scrollTopButton(offset) {
  offset = (offset) ? offset : 400;

	var back_to_top_button = ['<a href="#top" class="back-to-top"><span class="glyphicons glyphicon glyphicon-chevron-up"></span></a>'].join("");
	$("body").append(back_to_top_button);

	// Hide the button
	$(".back-to-top").hide();

	// Scrollspy
	$(function () {
    var lastVal = 0;
    var curVal = 0;
    var direction = 'down';

		$(window).scroll(function () {

      curVal = $(this).scrollTop();
      direction = (curVal > lastVal) ? 'down' : 'up';

      if(direction == 'down') {
        $('.back-to-top').fadeOut();
      }
      else {
  			if($(this).scrollTop() > offset) { // reached scroll offset
          if(direction == 'up') {
            $('.back-to-top').fadeIn();
          }
  			}
        else {
  				$('.back-to-top').fadeOut();
  			}
      }

      lastVal = curVal;
		});

		$('.back-to-top').click(function () {
			$('body,html').animate({
				scrollTop: 0
			}, 800);
			return false;
		});
	});
}

//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVHcmlkV3JhcHBlclNpemUiLCJzZWxlY3RvciIsIiQiLCJlYWNoIiwiaW5kZXgiLCJlbCIsImhlaWdodCIsImRhdGEiLCJ3aWR0aCIsImN1cnJlbnRXaWR0aCIsIm91dGVyV2lkdGgiLCJjcm9wRmFjdG9yIiwiY3JvcHBlZEhlaWdodCIsIk1hdGgiLCJyb3VuZCIsIndhdGNoQWZmaXgiLCJ3aW5kb3dIZWlnaHQiLCJ3aW5kb3ciLCJhZmZpeEhlaWdodCIsIm9mZiIsIm9uIiwiYWZmaXgiLCJvZmZzZXQiLCJ0b3AiLCJ3YXRjaEFmZml4TWluU2l6ZSIsImNzcyIsInNjcm9sbFRvcEJ1dHRvbiIsImJhY2tfdG9fdG9wX2J1dHRvbiIsImpvaW4iLCJhcHBlbmQiLCJoaWRlIiwibGFzdFZhbCIsImN1clZhbCIsImRpcmVjdGlvbiIsInNjcm9sbCIsInRoaXMiLCJzY3JvbGxUb3AiLCJmYWRlT3V0IiwiZmFkZUluIiwiY2xpY2siLCJhbmltYXRlIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIm5vR2xvYmFsIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlzQXJyYXlMaWtlIiwib2JqIiwibGVuZ3RoIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImVsZW0iLCJpIiwiY2FsbCIsIm5vZGVUeXBlIiwiaW5kZXhPZiIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJtYXRjaCIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJtZXRob2QiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwidW5kZWZpbmVkIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJnZXREYXRhIiwicmJyYWNlIiwiSlNPTiIsInBhcnNlIiwiZGF0YUF0dHIiLCJrZXkiLCJuYW1lIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJ0b0xvd2VyQ2FzZSIsImdldEF0dHJpYnV0ZSIsImUiLCJkYXRhVXNlciIsInNldCIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3R5bGUiLCJzdGFydCIsImVuZCIsImdldERlZmF1bHREaXNwbGF5IiwidGVtcCIsIm93bmVyRG9jdW1lbnQiLCJub2RlTmFtZSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheU1hcCIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJkYXRhUHJpdiIsImdldCIsImlzSGlkZGVuV2l0aGluVHJlZSIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImoiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsInR5cGVzIiwiZm4iLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ3VpZCIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZXh0ZW5kIiwiZml4SW5wdXQiLCJyY2hlY2thYmxlVHlwZSIsImNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJhcmdzIiwiY2FsbGJhY2siLCJjb25jYXQiLCJmaXJzdCIsImhhc1NjcmlwdHMiLCJub2RlIiwiaU5vQ2xvbmUiLCJzdXBwb3J0IiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwic2VsZiIsImVxIiwiaHRtbCIsIm1hcCIsImNsb25lIiwiX2V2YWxVcmwiLCJyY2xlYW5TY3JpcHQiLCJyZW1vdmUiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJlbXB0eVN0eWxlIiwiY2FwTmFtZSIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJjc3NQcmVmaXhlcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXRjaGVzIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvdG90eXBlIiwiaW5pdCIsInJhZiIsInRpbWVySWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmeCIsInRpY2siLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwib3B0cyIsInRvZ2dsZSIsImhvb2tzIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJhbmltIiwib3JpZyIsImhpZGRlbiIsImRhdGFTaG93IiwicXVldWUiLCJfcXVldWVIb29rcyIsInVucXVldWVkIiwiZW1wdHkiLCJmaXJlIiwiYWx3YXlzIiwicmZ4dHlwZXMiLCJpc0VtcHR5T2JqZWN0Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNhbWVsQ2FzZSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3h5IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwic3RyaXBBbmRDb2xsYXBzZSIsInRva2VucyIsImdldENsYXNzIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInJicmFja2V0IiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhamF4RXh0ZW5kIiwidGFyZ2V0IiwiZGVlcCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3BsaXQiLCJ0aHJvd3MiLCJzdGF0ZSIsImVycm9yIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJ2ZXJzaW9uIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJsYXN0IiwibGVuIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwcm90byIsIkN0b3IiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJtIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsImNvbXBpbGVyQ2FjaGUiLCJyYnVnZ3lRU0EiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiY2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJhIiwiYiIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsImRpc2FibGVkQW5jZXN0b3IiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJuZXh0IiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImVscyIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwicGFyZW50IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJvd25lciIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJzd2FwIiwib2xkIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0Zpbml0ZSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwicG9zIiwic3RlcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsInJydW4iLCIqIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwidXJsQW5jaG9yIiwidW5jYWNoZWQiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJyZWN0IiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsIlBsdWdpbiIsIiR0aGlzIiwiQWZmaXgiLCJlbGVtZW50IiwiREVGQVVMVFMiLCIkdGFyZ2V0IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiJGVsZW1lbnQiLCJhZmZpeGVkIiwidW5waW4iLCJwaW5uZWRPZmZzZXQiLCJWRVJTSU9OIiwiUkVTRVQiLCJnZXRTdGF0ZSIsInNjcm9sbEhlaWdodCIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInRhcmdldEhlaWdodCIsImluaXRpYWxpemluZyIsImNvbGxpZGVyVG9wIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRQaW5uZWRPZmZzZXQiLCJib3R0b20iLCJhZmZpeFR5cGUiLCJDb25zdHJ1Y3RvciIsIiRzcHkiLCJKIiwidmQiLCJKYSIsIkthIiwiTGEiLCJQIiwiUSIsIlIiLCJNYSIsIkciLCJOYSIsIk9hIiwiTSIsIlBhIiwiTyIsIm5hdmlnYXRvciIsInNlbmRCZWFjb24iLCJjIiwibGQiLCJUZCIsIkFjIiwiUWEiLCJkIiwiRiIsIksiLCJCZCIsIlJhIiwiU2EiLCJnZCIsIm9jIiwiZmEiLCJWZCIsIklhIiwidWEiLCJ3YyIsIndkIiwieCIsImJhIiwiaCIsImhpdGNvdW50IiwicGVuZGluZ19leHBlcmltZW50cyIsIkhjIiwiZ2FEYXRhIiwiZXhwSWQiLCJOYyIsImV4cFZhciIsIk9jIiwiY2QiLCJsb2FkUHVycG9zZSIsInlkIiwiZ2FEZXZJZHMiLCJrYSIsInZiIiwiVGEiLCJVYSIsIlZhIiwiV2EiLCJnZXRUaW1lIiwiWGEiLCJtaW4iLCJYIiwiZ2UiLCJmYyIsInBsdWdpbnMiLCJkZXNjcmlwdGlvbiIsIkFjdGl2ZVhPYmplY3QiLCJHZXRWYXJpYWJsZSIsImciLCJBbGxvd1NjcmlwdEFjY2VzcyIsIlhjIiwiQ2EiLCJjYSIsIlpjIiwiRCIsInN1YnN0cmluZyIsIkJjIiwiSWMiLCJ1c2VyQWdlbnQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFllYXIiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic2QiLCJob3N0bmFtZSIsInVkIiwiJGMiLCJlbmNvZGUiLCJmbG9vciIsImNoYXJBdCIsIk5kIiwiRGQiLCJHZCIsImVhIiwicWEiLCJzYSIsInRhIiwiRnVuY3Rpb24iLCJMIiwiZiIsIndhIiwid3JpdGUiLCJVZCIsIkUiLCJ4YSIsInlhIiwicmVmZXJyZXIiLCJ6YSIsImVlIiwiX2dhVXNlclByZWZzIiwiaW9vIiwiZXh0ZXJuYWwiLCJjb29raWUiLCJ6YyIsImViIiwidmMiLCJ0b0dNVFN0cmluZyIsIkNjIiwiQmEiLCJEYSIsIndpdGhDcmVkZW50aWFscyIsImhkIiwiSGEiLCJVaW50MzJBcnJheSIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIllhIiwiWmEiLCIkYSIsIloiLCJhYiIsIndiIiwibyIsImJiIiwieWMiLCJTIiwiY2IiLCJUIiwiZGIiLCJnYiIsIkdvb2dsZUFuYWx5dGljc09iamVjdCIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJ0aXRsZSIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJ1YiIsInhiIiwieWIiLCJ6YiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlJjIiwiU2MiLCJUYyIsImVkIiwiUWIiLCJkZCIsIlJiIiwibWQiLCJTYiIsIlVjIiwiVGIiLCJWYiIsIldiIiwiWGIiLCJWYyIsInpkIiwiQ2QiLCJMZCIsIlYiLCJBZCIsIlUiLCJXIiwiWWIiLCJaYiIsIiRiIiwiV2MiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiTWQiLCJPZCIsIm9hIiwiRWQiLCJhYSIsImdjIiwiRWMiLCJGYyIsIkluZmluaXR5IiwiWSIsInBlcmZvcm1hbmNlIiwid2Via2l0UGVyZm9ybWFuY2UiLCJ0aW1pbmciLCJuYXZpZ2F0aW9uU3RhcnQiLCJsb2FkRXZlbnRTdGFydCIsImRvbWFpbkxvb2t1cEVuZCIsImRvbWFpbkxvb2t1cFN0YXJ0IiwiY29ubmVjdEVuZCIsImNvbm5lY3RTdGFydCIsInJlc3BvbnNlU3RhcnQiLCJyZXF1ZXN0U3RhcnQiLCJyZXNwb25zZUVuZCIsImZldGNoU3RhcnQiLCJkb21JbnRlcmFjdGl2ZSIsImRvbUNvbnRlbnRMb2FkZWRFdmVudFN0YXJ0Iiwib25sb2FkVCIsImlzVmFsaWRMb2FkVGltZSIsInNldFBhZ2VSZWFkeVRpbWUiLCJGZCIsIkkiLCJoYyIsIm1jIiwibmQiLCJrYyIsImxjIiwiayIsIm5jIiwiWWMiLCJqYyIsIkdjIiwiSCIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwib2QiLCJwZCIsIkRjIiwidGFnTmFtZSIsInFkIiwicmQiLCJhY3Rpb24iLCJzcmNFbGVtZW50IiwiYWQiLCJxIiwiciIsIkIiLCJqYSIsImxhIiwiaWEiLCJuYSIsIkpkIiwiV2QiLCJwYSIsIlJkIiwiUGQiLCJRZCIsIklkIiwiZmQiLCJTZCIsIkxjIiwiZ2FHbG9iYWwiLCJoaWQiLCJiZCIsIl91ZG8iLCJfdXRjcCIsInRvRml4ZWQiLCJkYSIsImdldEVudHJpZXNCeU5hbWUiLCJ0aWQiLCJhciIsImJyIiwiYW4iLCJibiIsImFzIiwiaGEiLCJwYyIsIkpjIiwiS2MiLCJyYSIsInZpZCIsInNlYXJjaCIsImhpc3RvcnkiLCJzY3JlZW4iLCJwYXRobmFtZSIsImNvbG9yRGVwdGgiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImNvbXBhdE1vZGUiLCJjaGFyYWN0ZXJTZXQiLCJqYXZhRW5hYmxlZCIsImxhbmd1YWdlIiwiYnJvd3Nlckxhbmd1YWdlIiwicWMiLCJwYWdldmlldyIsInNvY2lhbCIsIm1hIiwidSIsInkiLCJZZCIsIlpkIiwiJGQiLCJBIiwicmMiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ6IiwiZGV0YWNoRXZlbnQiLCJzYyIsIkMiLCJlY29tbWVyY2UiLCJsaW5raWQiLCJOIiwicGx1Z2luc18iLCJkYXRhTGF5ZXIiLCJOdW1iZXIiLCJwYWxpbmRyb21lIiwiZ3RtLnN0YXJ0IiwiYWUiLCJxdWVyeSIsInBhdGgiLCJwb3J0IiwiZ2EiLCJjcmVhdGUiLCJhbnN3ZXIiLCJ1YyIsImxvYWRlZCIsImdhcGx1Z2lucyIsIkxpbmtlciIsIkFqYXhNb25pdG9yIiwiQmFyIiwiRG9jdW1lbnRNb25pdG9yIiwiRWxlbWVudE1vbml0b3IiLCJFbGVtZW50VHJhY2tlciIsIkV2ZW50TGFnTW9uaXRvciIsIkV2ZW50ZWQiLCJFdmVudHMiLCJOb1RhcmdldEVycm9yIiwiUGFjZSIsIlJlcXVlc3RJbnRlcmNlcHQiLCJTT1VSQ0VfS0VZUyIsIlNjYWxlciIsIlNvY2tldFJlcXVlc3RUcmFja2VyIiwiWEhSUmVxdWVzdFRyYWNrZXIiLCJhdmdBbXBsaXR1ZGUiLCJiYXIiLCJjYW5jZWxBbmltYXRpb24iLCJkZWZhdWx0T3B0aW9ucyIsImV4dGVuZE5hdGl2ZSIsImdldEZyb21ET00iLCJnZXRJbnRlcmNlcHQiLCJoYW5kbGVQdXNoU3RhdGUiLCJpZ25vcmVTdGFjayIsInJ1bkFuaW1hdGlvbiIsInNjYWxlcnMiLCJzaG91bGRJZ25vcmVVUkwiLCJzaG91bGRUcmFjayIsInNvdXJjZXMiLCJ1bmlTY2FsZXIiLCJfV2ViU29ja2V0IiwiX1hEb21haW5SZXF1ZXN0IiwiX1hNTEh0dHBSZXF1ZXN0IiwiX2kiLCJfaW50ZXJjZXB0IiwiX2xlbiIsIl9wdXNoU3RhdGUiLCJfcmVmIiwiX3JlZjEiLCJfcmVwbGFjZVN0YXRlIiwiX19zbGljZSIsIl9faGFzUHJvcCIsIl9fZXh0ZW5kcyIsImNoaWxkIiwiY3RvciIsIl9fc3VwZXJfXyIsIl9faW5kZXhPZiIsIml0ZW0iLCJjYXRjaHVwVGltZSIsImluaXRpYWxSYXRlIiwibWluVGltZSIsImdob3N0VGltZSIsIm1heFByb2dyZXNzUGVyRnJhbWUiLCJlYXNlRmFjdG9yIiwic3RhcnRPblBhZ2VMb2FkIiwicmVzdGFydE9uUHVzaFN0YXRlIiwicmVzdGFydE9uUmVxdWVzdEFmdGVyIiwiY2hlY2tJbnRlcnZhbCIsImV2ZW50TGFnIiwibWluU2FtcGxlcyIsInNhbXBsZUNvdW50IiwibGFnVGhyZXNob2xkIiwidHJhY2tNZXRob2RzIiwidHJhY2tXZWJTb2NrZXRzIiwiaWdub3JlVVJMcyIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvdXQiLCJzdW0iLCJhYnMiLCJxdWVyeVNlbGVjdG9yIiwiX2Vycm9yIiwiY3R4IiwiX2Jhc2UiLCJiaW5kaW5ncyIsIl9yZXN1bHRzIiwicGFjZU9wdGlvbnMiLCJfc3VwZXIiLCJnZXRFbGVtZW50IiwidGFyZ2V0RWxlbWVudCIsInVwZGF0ZSIsInByb2ciLCJyZW5kZXIiLCJkZXN0cm95IiwicHJvZ3Jlc3NTdHIiLCJ0cmFuc2Zvcm0iLCJfaiIsIl9sZW4xIiwiX3JlZjIiLCJsYXN0UmVuZGVyZWRQcm9ncmVzcyIsImJpbmRpbmciLCJYRG9tYWluUmVxdWVzdCIsIldlYlNvY2tldCIsImZyb20iLCJpZ25vcmUiLCJ0cmFjayIsIm1vbml0b3JYSFIiLCJfdGhpcyIsInJlcSIsIl9vcGVuIiwicmVxdWVzdCIsImZsYWdzIiwicHJvdG9jb2xzIiwiX2FyZyIsInJ1bm5pbmciLCJzdGlsbEFjdGl2ZSIsIl9yZWYzIiwicmVzdGFydCIsIndhdGNoIiwidHJhY2tlciIsInNpemUiLCJfb25yZWFkeXN0YXRlY2hhbmdlIiwiUHJvZ3Jlc3NFdmVudCIsImxlbmd0aENvbXB1dGFibGUiLCJ0b3RhbCIsInN0YXRlcyIsImxvYWRpbmciLCJpbnRlcmFjdGl2ZSIsImF2ZyIsInBvaW50cyIsInNhbXBsZXMiLCJzaW5jZUxhc3RVcGRhdGUiLCJyYXRlIiwiY2F0Y2h1cCIsImxhc3RQcm9ncmVzcyIsImZyYW1lVGltZSIsInNjYWxpbmciLCJwb3ciLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJfayIsIl9sZW4yIiwiX3JlZjQiLCJleHRyYVNvdXJjZXMiLCJnbyIsImVucXVldWVOZXh0RnJhbWUiLCJzY2FsZXIiLCJzY2FsZXJMaXN0IiwiX29wdGlvbnMiLCJyZXF1aXJlIiwialF1ZXJ5QnJpZGdldCIsIl9pbml0IiwiYnJpZGdldCIsImdldFNpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaXppbmciLCJpc0JveFNpemVPdXRlciIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIkV2RW1pdHRlciIsIl9ldmVudHMiLCJfb25jZUV2ZW50cyIsImVtaXRFdmVudCIsIkVsZW1lbnQiLCJmaXp6eVVJVXRpbHMiLCJtb2R1bG8iLCJyZW1vdmVGcm9tIiwiZ2V0UGFyZW50IiwiZ2V0UXVlcnlFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJmb3JFYWNoIiwiSFRNTEVsZW1lbnQiLCJkZWJvdW5jZU1ldGhvZCIsImRvY1JlYWR5IiwidG9EYXNoZWQiLCJodG1sSW5pdCIsIk91dGxheWVyIiwiSXRlbSIsImxheW91dCIsIl9jcmVhdGUiLCJ0cmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInRyYW5zaXRpb25EZWxheSIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImdldFBvc2l0aW9uIiwiX2dldE9wdGlvbiIsImxheW91dFBvc2l0aW9uIiwiZ2V0WFZhbHVlIiwiZ2V0WVZhbHVlIiwicGVyY2VudFBvc2l0aW9uIiwiX3RyYW5zaXRpb25UbyIsInNldFBvc2l0aW9uIiwiaXNUcmFuc2l0aW9uaW5nIiwiZ2V0VHJhbnNsYXRlIiwib25UcmFuc2l0aW9uRW5kIiwiaXNDbGVhbmluZyIsImdvVG8iLCJtb3ZlVG8iLCJfbm9uVHJhbnNpdGlvbiIsIl9yZW1vdmVTdHlsZXMiLCJlbmFibGVUcmFuc2l0aW9uIiwic3RhZ2dlckRlbGF5Iiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsIi13ZWJraXQtdHJhbnNmb3JtIiwicHJvcGVydHlOYW1lIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJyZW1vdmVUcmFuc2l0aW9uU3R5bGVzIiwic3RhZ2dlciIsInJlbW92ZUVsZW0iLCJyZXZlYWwiLCJpc0hpZGRlbiIsImdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkiLCJvblJldmVhbFRyYW5zaXRpb25FbmQiLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsIm9uSGlkZVRyYW5zaXRpb25FbmQiLCJyaWdodCIsImRlZmF1bHRzIiwib3V0bGF5ZXJHVUlEIiwiY29udGFpbmVyU3R5bGUiLCJpbml0TGF5b3V0Iiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInJlc2l6ZSIsInJlc2l6ZUNvbnRhaW5lciIsImNvbXBhdE9wdGlvbnMiLCJob3Jpem9udGFsIiwibGF5b3V0SW5zdGFudCIsInJlbG9hZEl0ZW1zIiwic3RhbXBzIiwic3RhbXAiLCJiaW5kUmVzaXplIiwiaXRlbXMiLCJfaXRlbWl6ZSIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwiX3Jlc2V0TGF5b3V0IiwiX21hbmFnZVN0YW1wcyIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2dldE1lYXN1cmVtZW50IiwiX2dldEl0ZW1zRm9yTGF5b3V0IiwiX2xheW91dEl0ZW1zIiwiX3Bvc3RMYXlvdXQiLCJpc0lnbm9yZWQiLCJfZW1pdENvbXBsZXRlT25JdGVtcyIsIl9nZXRJdGVtTGF5b3V0UG9zaXRpb24iLCJpc0luc3RhbnQiLCJpc0xheW91dEluc3RhbnQiLCJfcHJvY2Vzc0xheW91dFF1ZXVlIiwidXBkYXRlU3RhZ2dlciIsIl9wb3NpdGlvbkl0ZW0iLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwiZGlzcGF0Y2hFdmVudCIsImdldEl0ZW0iLCJ1bmlnbm9yZSIsIl9maW5kIiwidW5zdGFtcCIsIl9nZXRCb3VuZGluZ1JlY3QiLCJfbWFuYWdlU3RhbXAiLCJfYm91bmRpbmdSZWN0IiwiX2dldEVsZW1lbnRPZmZzZXQiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJyZXZlYWxJdGVtRWxlbWVudHMiLCJnZXRJdGVtcyIsImhpZGVJdGVtRWxlbWVudHMiLCJtcyIsIlBhY2tlcnkiLCJSZWN0Iiwib3ZlcmxhcHMiLCJnZXRNYXhpbWFsRnJlZVJlY3RzIiwiY2FuRml0IiwiUGFja2VyIiwic29ydERpcmVjdGlvbiIsInNwYWNlcyIsInNvcnRlciIsImRvd253YXJkTGVmdFRvUmlnaHQiLCJwYWNrIiwicGxhY2VJblNwYWNlIiwiY29sdW1uUGFjayIsInBsYWNlZCIsInJvd1BhY2siLCJtZXJnZVNvcnRTcGFjZXMiLCJtZXJnZVJlY3RzIiwiYWRkU3BhY2UiLCJyaWdodHdhcmRUb3BUb0JvdHRvbSIsImRyYWdJdGVtQ291bnQiLCJpc1BsYWNpbmciLCJlbmFibGVQbGFjaW5nIiwiX3NldFJlY3RTaXplIiwiZGlzYWJsZVBsYWNpbmciLCJwYWNrZXIiLCJzaG93RHJvcFBsYWNlaG9sZGVyIiwiZHJvcFBsYWNlaG9sZGVyIiwicG9zaXRpb25Ecm9wUGxhY2Vob2xkZXIiLCJoaWRlRHJvcFBsYWNlaG9sZGVyIiwic3FydCIsInNoaWZ0UGFja2VyIiwiaXNFbmFibGVkIiwiaGFuZGxlRHJhZ2dhYmlsbHkiLCJkcmFnU3RhcnQiLCJpdGVtRHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJpdGVtRHJhZ01vdmUiLCJkcmFnRW5kIiwiaXRlbURyYWdFbmQiLCJoYW5kbGVVSURyYWdnYWJsZSIsImRyYWciLCJfZ2V0TWVhc3VyZW1lbnRzIiwiZ3V0dGVyIiwibWF4WSIsIm1heFgiLCJpc1NoaWZ0aW5nIiwiX2dldFBhY2tNZXRob2QiLCJfc2V0TWF4WFkiLCJzaGlmdExheW91dCIsIl9hcHBseUdyaWRHdXR0ZXIiLCJjb2x1bW5XaWR0aCIsInJvd0hlaWdodCIsInNvcnRJdGVtc0J5UG9zaXRpb24iLCJmaXQiLCJ1cGRhdGVTaGlmdFRhcmdldHMiLCJfYmluZEZpdEV2ZW50cyIsInNoaWZ0UGVyY2VudFJlc2l6ZSIsInJlc2l6ZVNoaWZ0UGVyY2VudExheW91dCIsInNoaWZ0VGFyZ2V0S2V5cyIsInNoaWZ0VGFyZ2V0cyIsImNlaWwiLCJfYWRkU2hpZnRUYXJnZXQiLCJfaXRlbURyYWdUaW1lIiwiZHJhZ1RpbWVvdXQiLCJjbGFzc0xpc3QiLCJiaW5kRHJhZ2dhYmlsbHlFdmVudHMiLCJfYmluZERyYWdnYWJpbGx5RXZlbnRzIiwidW5iaW5kRHJhZ2dhYmlsbHlFdmVudHMiLCJiaW5kVUlEcmFnZ2FibGVFdmVudHMiLCJfYmluZFVJRHJhZ2dhYmxlRXZlbnRzIiwidW5iaW5kVUlEcmFnZ2FibGVFdmVudHMiLCJ1bnZlaWwiLCJ0aHJlc2hvbGQiLCJpbnZpZXciLCJpbWFnZXMiLCIkZSIsInd0IiwiJHciLCJldCIsImludmlld0ltYWdlcyIsImltZ0V2ZW50cyIsInZhbGlkIiwicXVldWVDb3VudGVyIiwibG9hZFBlcmNlbnRhZ2UiLCJpbWFnZVNldFByb2dyZXNzQ2FsbGJhY2siLCJhZnRlckltYWdlU2V0SGFzQmVlbkxvYWRlZCIsInJldGluYSIsImRldmljZVBpeGVsUmF0aW8iLCJhdHRyaWIiLCJiZWZvcmVVbnZlaWwiLCJaZXB0byIsImlzTW9iaWxlRGV2aWNlIiwiJGltZyIsImltZ0lEIiwiaW1nQ2xhc3MiLCJpbWdVUkwiLCIkc3ZnIiwiJGdyaWQiLCJwYWNrZXJ5IiwibGFzdFBlcmNlbnRhZ2UiLCJwcm9jZXNzU3RhY2siLCIkc3Bpbm5lciJdLCJtYXBwaW5ncyI6IkFBNDFXQSxRQUFTQSwwQkFBeUJDLEdBQ2hDQyxFQUFFRCxHQUFVRSxLQUFLLFNBQVNDLEVBQU9DLEdBQy9CLEdBQUlDLEdBQVVKLEVBQUVHLEdBQUlFLEtBQUssVUFDckJDLEVBQVVOLEVBQUVHLEdBQUlFLEtBQUssU0FDckJFLEVBQWdCUCxFQUFFRyxHQUFJSyxhQUV0QkMsRUFBY0YsRUFBZUQsRUFBUyxJQUN0Q0ksRUFBZ0JDLEtBQUtDLE1BQU1SLEVBQVNLLEVBQWEsSUFFckRULEdBQUVHLEdBQUlDLE9BQU9NLEVBQWdCLFFBSWpDLFFBQVNHLGNBRVAsR0FBSUMsR0FBZWQsRUFBRWUsUUFBUVgsU0FDekJZLEVBQWdCaEIsRUFBRSxrQkFBa0JJLFFBRXJDWSxHQUFjRixFQUNmZCxFQUFFZSxRQUFRRSxJQUFJLFdBR2RqQixFQUFFZSxRQUFRRyxHQUFHLFVBRWJsQixFQUFFLGtCQUFrQm1CLE9BQ2xCQyxRQUNFQyxJQUFLLFFBTWIs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eUJBQXlCLGdCQUN6QjBCLGdCQUFnQixLQUNoQlgsYUFDQVMiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjEuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA5LTIyVDIyOjMwWlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4xLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdFx0cmVzb2x2ZS5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWwsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0aWYgKCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdHZhbCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbIG5hbWUgXTtcblx0fVxuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gcmFmKCkge1xuXHRpZiAoIHRpbWVySWQgKSB7XG5cdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICk7XG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmYgb3IgaWYgZG9jdW1lbnQgaXMgaGlkZGVuXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiB8fCBkb2N1bWVudC5oaWRkZW4gKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID9cblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApIDpcblx0XHRcdHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSApIHtcblx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRpbWVySWQgKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR9XG5cblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sIHJlY3QsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHQvLyBNYWtlIHN1cmUgZWxlbWVudCBpcyBub3QgaGlkZGVuIChkaXNwbGF5OiBub25lKVxuXHRcdGlmICggcmVjdC53aWR0aCB8fCByZWN0LmhlaWdodCApIHtcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHRyZXR1cm4gcmVjdDtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNydcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuXG4oZnVuY3Rpb24oKXt2YXIgJGM9ZnVuY3Rpb24oYSl7dGhpcy53PWF8fFtdfTskYy5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEpe3RoaXMud1thXT0hMH07JGMucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPTA7Yjx0aGlzLncubGVuZ3RoO2IrKyl0aGlzLndbYl0mJihhW01hdGguZmxvb3IoYi82KV1ePTE8PGIlNik7Zm9yKGI9MDtiPGEubGVuZ3RoO2IrKylhW2JdPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktX1wiLmNoYXJBdChhW2JdfHwwKTtyZXR1cm4gYS5qb2luKFwiXCIpK1wiflwifTt2YXIgdmQ9bmV3ICRjO2Z1bmN0aW9uIEooYSl7dmQuc2V0KGEpfXZhciBOZD1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyAkYyhEZChhKSk7Yy5zZXQoYik7YS5zZXQoR2QsYy53KX0sVGQ9ZnVuY3Rpb24oYSl7YT1EZChhKTthPW5ldyAkYyhhKTtmb3IodmFyIGI9dmQudy5zbGljZSgpLGM9MDtjPGEudy5sZW5ndGg7YysrKWJbY109YltjXXx8YS53W2NdO3JldHVybihuZXcgJGMoYikpLmVuY29kZSgpfSxEZD1mdW5jdGlvbihhKXthPWEuZ2V0KEdkKTtrYShhKXx8KGE9W10pO3JldHVybiBhfTt2YXIgZWE9ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYX0sa2E9ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KGEpKX0scWE9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMCE9YSYmLTE8KGEuY29uc3RydWN0b3IrXCJcIikuaW5kZXhPZihcIlN0cmluZ1wiKX0sRD1mdW5jdGlvbihhLGIpe3JldHVybiAwPT1hLmluZGV4T2YoYil9LHNhPWZ1bmN0aW9uKGEpe3JldHVybiBhP2EucmVwbGFjZSgvXltcXHNcXHhhMF0rfFtcXHNcXHhhMF0rJC9nLFwiXCIpOlwiXCJ9LHRhPWZ1bmN0aW9uKGEpe3ZhciBiPU0uY3JlYXRlRWxlbWVudChcImltZ1wiKTtiLndpZHRoPTE7Yi5oZWlnaHQ9MTtiLnNyYz1hO3JldHVybiBifSx1YT1mdW5jdGlvbigpe30sSz1mdW5jdGlvbihhKXtpZihlbmNvZGVVUklDb21wb25lbnQgaW5zdGFuY2VvZiBGdW5jdGlvbilyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGEpO0ooMjgpO3JldHVybiBhfSxcbkw9ZnVuY3Rpb24oYSxiLGMsZCl7dHJ5e2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEhZCk6YS5hdHRhY2hFdmVudCYmYS5hdHRhY2hFdmVudChcIm9uXCIrYixjKX1jYXRjaChlKXtKKDI3KX19LGY9L15bXFx3XFwtOi8uPz0mJSFdKyQvLHdhPWZ1bmN0aW9uKGEsYixjLGQpe2EmJihjPyhkPVwiXCIsYiYmZi50ZXN0KGIpJiYoZD0nIGlkPVwiJytiKydcIicpLGYudGVzdChhKSYmTS53cml0ZShcIjxzY3JpcHRcIitkKycgc3JjPVwiJythKydcIj5cXHgzYy9zY3JpcHQ+JykpOihjPU0uY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxjLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIixjLmFzeW5jPSEwLGMuc3JjPWEsZCYmKGMub25sb2FkPWQpLGImJihjLmlkPWIpLGE9TS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXSxhLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGMsYSkpKX0sVWQ9ZnVuY3Rpb24oKXtyZXR1cm5cImh0dHBzOlwiPT1NLmxvY2F0aW9uLnByb3RvY29sfSxFPVxuZnVuY3Rpb24oYSxiKXtyZXR1cm4oYT1hLm1hdGNoKFwiKD86JnwjfFxcXFw/KVwiK0soYikucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLFwiXFxcXCQxXCIpK1wiPShbXiYjXSopXCIpKSYmMj09YS5sZW5ndGg/YVsxXTpcIlwifSx4YT1mdW5jdGlvbigpe3ZhciBhPVwiXCIrTS5sb2NhdGlvbi5ob3N0bmFtZTtyZXR1cm4gMD09YS5pbmRleE9mKFwid3d3LlwiKT9hLnN1YnN0cmluZyg0KTphfSx5YT1mdW5jdGlvbihhKXt2YXIgYj1NLnJlZmVycmVyO2lmKC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QoYikpe2lmKGEpcmV0dXJuIGI7YT1cIi8vXCIrTS5sb2NhdGlvbi5ob3N0bmFtZTt2YXIgYz1iLmluZGV4T2YoYSk7aWYoNT09Y3x8Nj09YylpZihhPWIuY2hhckF0KGMrYS5sZW5ndGgpLFwiL1wiPT1hfHxcIj9cIj09YXx8XCJcIj09YXx8XCI6XCI9PWEpcmV0dXJuO3JldHVybiBifX0semE9ZnVuY3Rpb24oYSxiKXtpZigxPT1iLmxlbmd0aCYmbnVsbCE9YlswXSYmXCJvYmplY3RcIj09PXR5cGVvZiBiWzBdKXJldHVybiBiWzBdO1xuZm9yKHZhciBjPXt9LGQ9TWF0aC5taW4oYS5sZW5ndGgrMSxiLmxlbmd0aCksZT0wO2U8ZDtlKyspaWYoXCJvYmplY3RcIj09PXR5cGVvZiBiW2VdKXtmb3IodmFyIGcgaW4gYltlXSliW2VdLmhhc093blByb3BlcnR5KGcpJiYoY1tnXT1iW2VdW2ddKTticmVha31lbHNlIGU8YS5sZW5ndGgmJihjW2FbZV1dPWJbZV0pO3JldHVybiBjfTt2YXIgZWU9ZnVuY3Rpb24oKXt0aGlzLmtleXM9W107dGhpcy52YWx1ZXM9e307dGhpcy5tPXt9fTtlZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLmtleXMucHVzaChhKTtjP3RoaXMubVtcIjpcIithXT1iOnRoaXMudmFsdWVzW1wiOlwiK2FdPWJ9O2VlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubS5oYXNPd25Qcm9wZXJ0eShcIjpcIithKT90aGlzLm1bXCI6XCIrYV06dGhpcy52YWx1ZXNbXCI6XCIrYV19O2VlLnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7Yjx0aGlzLmtleXMubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5rZXlzW2JdLGQ9dGhpcy5nZXQoYyk7ZCYmYShjLGQpfX07dmFyIE89d2luZG93LE09ZG9jdW1lbnQ7dmFyIEY9d2luZG93LEc9ZnVuY3Rpb24oYSl7dmFyIGI9Ri5fZ2FVc2VyUHJlZnM7aWYoYiYmYi5pb28mJmIuaW9vKCl8fGEmJiEwPT09RltcImdhLWRpc2FibGUtXCIrYV0pcmV0dXJuITA7dHJ5e3ZhciBjPUYuZXh0ZXJuYWw7aWYoYyYmYy5fZ2FVc2VyUHJlZnMmJlwib29cIj09Yy5fZ2FVc2VyUHJlZnMpcmV0dXJuITB9Y2F0Y2goZCl7fXJldHVybiExfTt2YXIgQ2E9ZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1NLmNvb2tpZS5zcGxpdChcIjtcIik7YT1uZXcgUmVnRXhwKFwiXlxcXFxzKlwiK2ErXCI9XFxcXHMqKC4qPylcXFxccyokXCIpO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLm1hdGNoKGEpO2UmJmIucHVzaChlWzFdKX1yZXR1cm4gYn0semM9ZnVuY3Rpb24oYSxiLGMsZCxlLGcpe2U9RyhlKT8hMTplYi50ZXN0KE0ubG9jYXRpb24uaG9zdG5hbWUpfHxcIi9cIj09YyYmdmMudGVzdChkKT8hMTohMDtpZighZSlyZXR1cm4hMTtiJiYxMjAwPGIubGVuZ3RoJiYoYj1iLnN1YnN0cmluZygwLDEyMDApLEooMjQpKTtjPWErXCI9XCIrYitcIjsgcGF0aD1cIitjK1wiOyBcIjtnJiYoYys9XCJleHBpcmVzPVwiKyhuZXcgRGF0ZSgobmV3IERhdGUpLmdldFRpbWUoKStnKSkudG9HTVRTdHJpbmcoKStcIjsgXCIpO2QmJlwibm9uZVwiIT1kJiYoYys9XCJkb21haW49XCIrZCtcIjtcIik7ZD1NLmNvb2tpZTtNLmNvb2tpZT1jO2lmKCEoZD1kIT1NLmNvb2tpZSkpYTp7YT1cbkNhKGEpO2ZvcihkPTA7ZDxhLmxlbmd0aDtkKyspaWYoYj09YVtkXSl7ZD0hMDticmVhayBhfWQ9ITF9cmV0dXJuIGR9LENjPWZ1bmN0aW9uKGEpe3JldHVybiBLKGEpLnJlcGxhY2UoL1xcKC9nLFwiJTI4XCIpLnJlcGxhY2UoL1xcKS9nLFwiJTI5XCIpfSx2Yz0vXih3d3dcXC4pP2dvb2dsZShcXC5jb20/KT8oXFwuW2Etel17Mn0pPyQvLGViPS8oXnxcXC4pZG91YmxlY2xpY2tcXC5uZXQkL2k7dmFyIG9jPWZ1bmN0aW9uKCl7cmV0dXJuKEJhfHxVZCgpP1wiaHR0cHM6XCI6XCJodHRwOlwiKStcIi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tXCJ9LERhPWZ1bmN0aW9uKGEpe3RoaXMubmFtZT1cImxlblwiO3RoaXMubWVzc2FnZT1hK1wiLTgxOTJcIn0sYmE9ZnVuY3Rpb24oYSxiLGMpe2M9Y3x8dWE7aWYoMjAzNj49Yi5sZW5ndGgpd2MoYSxiLGMpO2Vsc2UgaWYoODE5Mj49Yi5sZW5ndGgpeChhLGIsYyl8fHdkKGEsYixjKXx8d2MoYSxiLGMpO2Vsc2UgdGhyb3cgZ2UoXCJsZW5cIixiLmxlbmd0aCksbmV3IERhKGIubGVuZ3RoKTt9LHdjPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10YShhK1wiP1wiK2IpO2Qub25sb2FkPWQub25lcnJvcj1mdW5jdGlvbigpe2Qub25sb2FkPW51bGw7ZC5vbmVycm9yPW51bGw7YygpfX0sd2Q9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU8uWE1MSHR0cFJlcXVlc3Q7aWYoIWQpcmV0dXJuITE7dmFyIGU9bmV3IGQ7aWYoIShcIndpdGhDcmVkZW50aWFsc1wiaW4gZSkpcmV0dXJuITE7XG5lLm9wZW4oXCJQT1NUXCIsYSwhMCk7ZS53aXRoQ3JlZGVudGlhbHM9ITA7ZS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJ0ZXh0L3BsYWluXCIpO2Uub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09ZS5yZWFkeVN0YXRlJiYoYygpLGU9bnVsbCl9O2Uuc2VuZChiKTtyZXR1cm4hMH0seD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIE8ubmF2aWdhdG9yLnNlbmRCZWFjb24/Ty5uYXZpZ2F0b3Iuc2VuZEJlYWNvbihhLGIpPyhjKCksITApOiExOiExfSxnZT1mdW5jdGlvbihhLGIsYyl7MTw9MTAwKk1hdGgucmFuZG9tKCl8fEcoXCI/XCIpfHwoYT1bXCJ0PWVycm9yXCIsXCJfZT1cIithLFwiX3Y9ajQ4XCIsXCJzcj0xXCJdLGImJmEucHVzaChcIl9mPVwiK2IpLGMmJmEucHVzaChcIl9tPVwiK0soYy5zdWJzdHJpbmcoMCwxMDApKSksYS5wdXNoKFwiYWlwPTFcIiksYS5wdXNoKFwiej1cIitoZCgpKSx3YyhvYygpK1wiL2NvbGxlY3RcIixhLmpvaW4oXCImXCIpLHVhKSl9O3ZhciBoPWZ1bmN0aW9uKGEpe3ZhciBiPU8uZ2FEYXRhPU8uZ2FEYXRhfHx7fTtyZXR1cm4gYlthXT1iW2FdfHx7fX07dmFyIEhhPWZ1bmN0aW9uKCl7dGhpcy5NPVtdfTtIYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEpe3RoaXMuTS5wdXNoKGEpfTtIYS5wcm90b3R5cGUuRD1mdW5jdGlvbihhKXt0cnl7Zm9yKHZhciBiPTA7Yjx0aGlzLk0ubGVuZ3RoO2IrKyl7dmFyIGM9YS5nZXQodGhpcy5NW2JdKTtjJiZlYShjKSYmYy5jYWxsKE8sYSl9fWNhdGNoKGQpe31iPWEuZ2V0KElhKTtiIT11YSYmZWEoYikmJihhLnNldChJYSx1YSwhMCksc2V0VGltZW91dChiLDEwKSl9O2Z1bmN0aW9uIEphKGEpe2lmKDEwMCE9YS5nZXQoS2EpJiZMYShQKGEsUSkpJTFFND49MTAwKlIoYSxLYSkpdGhyb3dcImFib3J0XCI7fWZ1bmN0aW9uIE1hKGEpe2lmKEcoUChhLE5hKSkpdGhyb3dcImFib3J0XCI7fWZ1bmN0aW9uIE9hKCl7dmFyIGE9TS5sb2NhdGlvbi5wcm90b2NvbDtpZihcImh0dHA6XCIhPWEmJlwiaHR0cHM6XCIhPWEpdGhyb3dcImFib3J0XCI7fVxuZnVuY3Rpb24gUGEoYSl7dHJ5e08ubmF2aWdhdG9yLnNlbmRCZWFjb24/Sig0Mik6Ty5YTUxIdHRwUmVxdWVzdCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIG5ldyBPLlhNTEh0dHBSZXF1ZXN0JiZKKDQwKX1jYXRjaChjKXt9YS5zZXQobGQsVGQoYSksITApO2Euc2V0KEFjLFIoYSxBYykrMSk7dmFyIGI9W107UWEubWFwKGZ1bmN0aW9uKGMsZCl7ZC5GJiYoYz1hLmdldChjKSx2b2lkIDAhPWMmJmMhPWQuZGVmYXVsdFZhbHVlJiYoXCJib29sZWFuXCI9PXR5cGVvZiBjJiYoYyo9MSksYi5wdXNoKGQuRitcIj1cIitLKFwiXCIrYykpKSl9KTtiLnB1c2goXCJ6PVwiK0JkKCkpO2Euc2V0KFJhLGIuam9pbihcIiZcIiksITApfVxuZnVuY3Rpb24gU2EoYSl7dmFyIGI9UChhLGdkKXx8b2MoKStcIi9jb2xsZWN0XCIsYz1QKGEsZmEpOyFjJiZhLmdldChWZCkmJihjPVwiYmVhY29uXCIpO2lmKGMpe3ZhciBkPVAoYSxSYSksZT1hLmdldChJYSksZT1lfHx1YTtcImltYWdlXCI9PWM/d2MoYixkLGUpOlwieGhyXCI9PWMmJndkKGIsZCxlKXx8XCJiZWFjb25cIj09YyYmeChiLGQsZSl8fGJhKGIsZCxlKX1lbHNlIGJhKGIsUChhLFJhKSxhLmdldChJYSkpO2I9YS5nZXQoTmEpO2I9aChiKTtjPWIuaGl0Y291bnQ7Yi5oaXRjb3VudD1jP2MrMToxO2I9YS5nZXQoTmEpO2RlbGV0ZSBoKGIpLnBlbmRpbmdfZXhwZXJpbWVudHM7YS5zZXQoSWEsdWEsITApfVxuZnVuY3Rpb24gSGMoYSl7KE8uZ2FEYXRhPU8uZ2FEYXRhfHx7fSkuZXhwSWQmJmEuc2V0KE5jLChPLmdhRGF0YT1PLmdhRGF0YXx8e30pLmV4cElkKTsoTy5nYURhdGE9Ty5nYURhdGF8fHt9KS5leHBWYXImJmEuc2V0KE9jLChPLmdhRGF0YT1PLmdhRGF0YXx8e30pLmV4cFZhcik7dmFyIGI7dmFyIGM9YS5nZXQoTmEpO2lmKGM9aChjKS5wZW5kaW5nX2V4cGVyaW1lbnRzKXt2YXIgZD1bXTtmb3IoYiBpbiBjKWMuaGFzT3duUHJvcGVydHkoYikmJmNbYl0mJmQucHVzaChlbmNvZGVVUklDb21wb25lbnQoYikrXCIuXCIrZW5jb2RlVVJJQ29tcG9uZW50KGNbYl0pKTtiPWQuam9pbihcIiFcIil9ZWxzZSBiPXZvaWQgMDtiJiZhLnNldChtLGIsITApfWZ1bmN0aW9uIGNkKCl7aWYoTy5uYXZpZ2F0b3ImJlwicHJldmlld1wiPT1PLm5hdmlnYXRvci5sb2FkUHVycG9zZSl0aHJvd1wiYWJvcnRcIjt9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1PLmdhRGV2SWRzO2thKGIpJiYwIT1iLmxlbmd0aCYmYS5zZXQoXCImZGlkXCIsYi5qb2luKFwiLFwiKSwhMCl9ZnVuY3Rpb24gdmIoYSl7aWYoIWEuZ2V0KE5hKSl0aHJvd1wiYWJvcnRcIjt9O3ZhciBoZD1mdW5jdGlvbigpe3JldHVybiBNYXRoLnJvdW5kKDIxNDc0ODM2NDcqTWF0aC5yYW5kb20oKSl9LEJkPWZ1bmN0aW9uKCl7dHJ5e3ZhciBhPW5ldyBVaW50MzJBcnJheSgxKTtPLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYSk7cmV0dXJuIGFbMF0mMjE0NzQ4MzY0N31jYXRjaChiKXtyZXR1cm4gaGQoKX19O2Z1bmN0aW9uIFRhKGEpe3ZhciBiPVIoYSxVYSk7NTAwPD1iJiZKKDE1KTt2YXIgYz1QKGEsVmEpO2lmKFwidHJhbnNhY3Rpb25cIiE9YyYmXCJpdGVtXCIhPWMpe3ZhciBjPVIoYSxXYSksZD0obmV3IERhdGUpLmdldFRpbWUoKSxlPVIoYSxYYSk7MD09ZSYmYS5zZXQoWGEsZCk7ZT1NYXRoLnJvdW5kKDIqKGQtZSkvMUUzKTswPGUmJihjPU1hdGgubWluKGMrZSwyMCksYS5zZXQoWGEsZCkpO2lmKDA+PWMpdGhyb3dcImFib3J0XCI7YS5zZXQoV2EsLS1jKX1hLnNldChVYSwrK2IpfTt2YXIgWWE9ZnVuY3Rpb24oKXt0aGlzLmRhdGE9bmV3IGVlfSxRYT1uZXcgZWUsWmE9W107WWEucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXt2YXIgYj0kYShhKSxjPXRoaXMuZGF0YS5nZXQoYSk7YiYmdm9pZCAwPT1jJiYoYz1lYShiLmRlZmF1bHRWYWx1ZSk/Yi5kZWZhdWx0VmFsdWUoKTpiLmRlZmF1bHRWYWx1ZSk7cmV0dXJuIGImJmIuWj9iLloodGhpcyxhLGMpOmN9O3ZhciBQPWZ1bmN0aW9uKGEsYil7YT1hLmdldChiKTtyZXR1cm4gdm9pZCAwPT1hP1wiXCI6XCJcIithfSxSPWZ1bmN0aW9uKGEsYil7YT1hLmdldChiKTtyZXR1cm4gdm9pZCAwPT1hfHxcIlwiPT09YT8wOjEqYX07WWEucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIsYyl7aWYoYSlpZihcIm9iamVjdFwiPT10eXBlb2YgYSlmb3IodmFyIGQgaW4gYSlhLmhhc093blByb3BlcnR5KGQpJiZhYih0aGlzLGQsYVtkXSxjKTtlbHNlIGFiKHRoaXMsYSxiLGMpfTtcbnZhciBhYj1mdW5jdGlvbihhLGIsYyxkKXtpZih2b2lkIDAhPWMpc3dpdGNoKGIpe2Nhc2UgTmE6d2IudGVzdChjKX12YXIgZT0kYShiKTtlJiZlLm8/ZS5vKGEsYixjLGQpOmEuZGF0YS5zZXQoYixjLGQpfSxiYj1mdW5jdGlvbihhLGIsYyxkLGUpe3RoaXMubmFtZT1hO3RoaXMuRj1iO3RoaXMuWj1kO3RoaXMubz1lO3RoaXMuZGVmYXVsdFZhbHVlPWN9LCRhPWZ1bmN0aW9uKGEpe3ZhciBiPVFhLmdldChhKTtpZighYilmb3IodmFyIGM9MDtjPFphLmxlbmd0aDtjKyspe3ZhciBkPVphW2NdLGU9ZFswXS5leGVjKGEpO2lmKGUpe2I9ZFsxXShlKTtRYS5zZXQoYi5uYW1lLGIpO2JyZWFrfX1yZXR1cm4gYn0seWM9ZnVuY3Rpb24oYSl7dmFyIGI7UWEubWFwKGZ1bmN0aW9uKGMsZCl7ZC5GPT1hJiYoYj1kKX0pO3JldHVybiBiJiZiLm5hbWV9LFM9ZnVuY3Rpb24oYSxiLGMsZCxlKXthPW5ldyBiYihhLGIsYyxkLGUpO1FhLnNldChhLm5hbWUsYSk7cmV0dXJuIGEubmFtZX0sY2I9ZnVuY3Rpb24oYSxcbmIpe1phLnB1c2goW25ldyBSZWdFeHAoXCJeXCIrYStcIiRcIiksYl0pfSxUPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUyhhLGIsYyx2b2lkIDAsZGIpfSxkYj1mdW5jdGlvbigpe307dmFyIGdiPXFhKHdpbmRvdy5Hb29nbGVBbmFseXRpY3NPYmplY3QpJiZzYSh3aW5kb3cuR29vZ2xlQW5hbHl0aWNzT2JqZWN0KXx8XCJnYVwiLEJhPSExLGhiPVQoXCJhcGlWZXJzaW9uXCIsXCJ2XCIpLGliPVQoXCJjbGllbnRWZXJzaW9uXCIsXCJfdlwiKTtTKFwiYW5vbnltaXplSXBcIixcImFpcFwiKTt2YXIgamI9UyhcImFkU2Vuc2VJZFwiLFwiYVwiKSxWYT1TKFwiaGl0VHlwZVwiLFwidFwiKSxJYT1TKFwiaGl0Q2FsbGJhY2tcIiksUmE9UyhcImhpdFBheWxvYWRcIik7UyhcIm5vbkludGVyYWN0aW9uXCIsXCJuaVwiKTtTKFwiY3VycmVuY3lDb2RlXCIsXCJjdVwiKTtTKFwiZGF0YVNvdXJjZVwiLFwiZHNcIik7dmFyIFZkPVMoXCJ1c2VCZWFjb25cIix2b2lkIDAsITEpLGZhPVMoXCJ0cmFuc3BvcnRcIik7UyhcInNlc3Npb25Db250cm9sXCIsXCJzY1wiLFwiXCIpO1MoXCJzZXNzaW9uR3JvdXBcIixcInNnXCIpO1MoXCJxdWV1ZVRpbWVcIixcInF0XCIpO3ZhciBBYz1TKFwiX3NcIixcIl9zXCIpO1MoXCJzY3JlZW5OYW1lXCIsXCJjZFwiKTtcbnZhciBrYj1TKFwibG9jYXRpb25cIixcImRsXCIsXCJcIiksbGI9UyhcInJlZmVycmVyXCIsXCJkclwiKSxtYj1TKFwicGFnZVwiLFwiZHBcIixcIlwiKTtTKFwiaG9zdG5hbWVcIixcImRoXCIpO3ZhciBuYj1TKFwibGFuZ3VhZ2VcIixcInVsXCIpLG9iPVMoXCJlbmNvZGluZ1wiLFwiZGVcIik7UyhcInRpdGxlXCIsXCJkdFwiLGZ1bmN0aW9uKCl7cmV0dXJuIE0udGl0bGV8fHZvaWQgMH0pO2NiKFwiY29udGVudEdyb3VwKFswLTldKylcIixmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGJiKGFbMF0sXCJjZ1wiK2FbMV0pfSk7dmFyIHBiPVMoXCJzY3JlZW5Db2xvcnNcIixcInNkXCIpLHFiPVMoXCJzY3JlZW5SZXNvbHV0aW9uXCIsXCJzclwiKSxyYj1TKFwidmlld3BvcnRTaXplXCIsXCJ2cFwiKSxzYj1TKFwiamF2YUVuYWJsZWRcIixcImplXCIpLHRiPVMoXCJmbGFzaFZlcnNpb25cIixcImZsXCIpO1MoXCJjYW1wYWlnbklkXCIsXCJjaVwiKTtTKFwiY2FtcGFpZ25OYW1lXCIsXCJjblwiKTtTKFwiY2FtcGFpZ25Tb3VyY2VcIixcImNzXCIpO1MoXCJjYW1wYWlnbk1lZGl1bVwiLFwiY21cIik7XG5TKFwiY2FtcGFpZ25LZXl3b3JkXCIsXCJja1wiKTtTKFwiY2FtcGFpZ25Db250ZW50XCIsXCJjY1wiKTt2YXIgdWI9UyhcImV2ZW50Q2F0ZWdvcnlcIixcImVjXCIpLHhiPVMoXCJldmVudEFjdGlvblwiLFwiZWFcIikseWI9UyhcImV2ZW50TGFiZWxcIixcImVsXCIpLHpiPVMoXCJldmVudFZhbHVlXCIsXCJldlwiKSxCYj1TKFwic29jaWFsTmV0d29ya1wiLFwic25cIiksQ2I9UyhcInNvY2lhbEFjdGlvblwiLFwic2FcIiksRGI9UyhcInNvY2lhbFRhcmdldFwiLFwic3RcIiksRWI9UyhcImwxXCIsXCJwbHRcIiksRmI9UyhcImwyXCIsXCJwZHRcIiksR2I9UyhcImwzXCIsXCJkbnNcIiksSGI9UyhcImw0XCIsXCJycnRcIiksSWI9UyhcImw1XCIsXCJzcnRcIiksSmI9UyhcImw2XCIsXCJ0Y3BcIiksS2I9UyhcImw3XCIsXCJkaXRcIiksTGI9UyhcImw4XCIsXCJjbHRcIiksTWI9UyhcInRpbWluZ0NhdGVnb3J5XCIsXCJ1dGNcIiksTmI9UyhcInRpbWluZ1ZhclwiLFwidXR2XCIpLE9iPVMoXCJ0aW1pbmdMYWJlbFwiLFwidXRsXCIpLFBiPVMoXCJ0aW1pbmdWYWx1ZVwiLFwidXR0XCIpO1MoXCJhcHBOYW1lXCIsXCJhblwiKTtcblMoXCJhcHBWZXJzaW9uXCIsXCJhdlwiLFwiXCIpO1MoXCJhcHBJZFwiLFwiYWlkXCIsXCJcIik7UyhcImFwcEluc3RhbGxlcklkXCIsXCJhaWlkXCIsXCJcIik7UyhcImV4RGVzY3JpcHRpb25cIixcImV4ZFwiKTtTKFwiZXhGYXRhbFwiLFwiZXhmXCIpO3ZhciBOYz1TKFwiZXhwSWRcIixcInhpZFwiKSxPYz1TKFwiZXhwVmFyXCIsXCJ4dmFyXCIpLG09UyhcImV4cFwiLFwiZXhwXCIpLFJjPVMoXCJfdXRtYVwiLFwiX3V0bWFcIiksU2M9UyhcIl91dG16XCIsXCJfdXRtelwiKSxUYz1TKFwiX3V0bWh0XCIsXCJfdXRtaHRcIiksVWE9UyhcIl9oY1wiLHZvaWQgMCwwKSxYYT1TKFwiX3RpXCIsdm9pZCAwLDApLFdhPVMoXCJfdG9cIix2b2lkIDAsMjApO2NiKFwiZGltZW5zaW9uKFswLTldKylcIixmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGJiKGFbMF0sXCJjZFwiK2FbMV0pfSk7Y2IoXCJtZXRyaWMoWzAtOV0rKVwiLGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYmIoYVswXSxcImNtXCIrYVsxXSl9KTtTKFwibGlua2VyUGFyYW1cIix2b2lkIDAsdm9pZCAwLEJjLGRiKTtcbnZhciBsZD1TKFwidXNhZ2VcIixcIl91XCIpLEdkPVMoXCJfdW1cIik7UyhcImZvcmNlU1NMXCIsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiBCYX0sZnVuY3Rpb24oYSxiLGMpe0ooMzQpO0JhPSEhY30pO3ZhciBlZD1TKFwiX2oxXCIsXCJqaWRcIik7Y2IoXCJcXFxcJiguKilcIixmdW5jdGlvbihhKXt2YXIgYj1uZXcgYmIoYVswXSxhWzFdKSxjPXljKGFbMF0uc3Vic3RyaW5nKDEpKTtjJiYoYi5aPWZ1bmN0aW9uKGEpe3JldHVybiBhLmdldChjKX0sYi5vPWZ1bmN0aW9uKGEsYixnLGNhKXthLnNldChjLGcsY2EpfSxiLkY9dm9pZCAwKTtyZXR1cm4gYn0pO1xudmFyIFFiPVQoXCJfb290XCIpLGRkPVMoXCJwcmV2aWV3VGFza1wiKSxSYj1TKFwiY2hlY2tQcm90b2NvbFRhc2tcIiksbWQ9UyhcInZhbGlkYXRpb25UYXNrXCIpLFNiPVMoXCJjaGVja1N0b3JhZ2VUYXNrXCIpLFVjPVMoXCJoaXN0b3J5SW1wb3J0VGFza1wiKSxUYj1TKFwic2FtcGxlclRhc2tcIiksVmI9UyhcIl9ybHRcIiksV2I9UyhcImJ1aWxkSGl0VGFza1wiKSxYYj1TKFwic2VuZEhpdFRhc2tcIiksVmM9UyhcImNlVGFza1wiKSx6ZD1TKFwiZGV2SWRUYXNrXCIpLENkPVMoXCJ0aW1pbmdUYXNrXCIpLExkPVMoXCJkaXNwbGF5RmVhdHVyZXNUYXNrXCIpLFY9VChcIm5hbWVcIiksUT1UKFwiY2xpZW50SWRcIixcImNpZFwiKSxuPVQoXCJjbGllbnRJZFRpbWVcIiksQWQ9UyhcInVzZXJJZFwiLFwidWlkXCIpLE5hPVQoXCJ0cmFja2luZ0lkXCIsXCJ0aWRcIiksVT1UKFwiY29va2llTmFtZVwiLHZvaWQgMCxcIl9nYVwiKSxXPVQoXCJjb29raWVEb21haW5cIiksWWI9VChcImNvb2tpZVBhdGhcIix2b2lkIDAsXCIvXCIpLFpiPVQoXCJjb29raWVFeHBpcmVzXCIsdm9pZCAwLDYzMDcyRTMpLFxuJGI9VChcImxlZ2FjeUNvb2tpZURvbWFpblwiKSxXYz1UKFwibGVnYWN5SGlzdG9yeUltcG9ydFwiLHZvaWQgMCwhMCksYWM9VChcInN0b3JhZ2VcIix2b2lkIDAsXCJjb29raWVcIiksYmM9VChcImFsbG93TGlua2VyXCIsdm9pZCAwLCExKSxjYz1UKFwiYWxsb3dBbmNob3JcIix2b2lkIDAsITApLEthPVQoXCJzYW1wbGVSYXRlXCIsXCJzZlwiLDEwMCksZGM9VChcInNpdGVTcGVlZFNhbXBsZVJhdGVcIix2b2lkIDAsMSksZWM9VChcImFsd2F5c1NlbmRSZWZlcnJlclwiLHZvaWQgMCwhMSksZ2Q9UyhcInRyYW5zcG9ydFVybFwiKSxNZD1TKFwiX3JcIixcIl9yXCIpO2Z1bmN0aW9uIFgoYSxiLGMsZCl7YlthXT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gZCYmSihkKSxjLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChlKXt0aHJvdyBnZShcImV4Y1wiLGEsZSYmZS5uYW1lKSxlO319fTt2YXIgT2Q9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuVj1hO3RoaXMuZmE9Yjt0aGlzLiQ9ITE7dGhpcy5vYT1jO3RoaXMuZWE9MX0sRWQ9ZnVuY3Rpb24oYSxiKXt2YXIgYztpZihhLmZhJiZhLiQpcmV0dXJuIDA7YS4kPSEwO2lmKGIpe2lmKGEub2EmJlIoYixhLm9hKSlyZXR1cm4gUihiLGEub2EpO2lmKDA9PWIuZ2V0KGRjKSlyZXR1cm4gMH1pZigwPT1hLlYpcmV0dXJuIDA7dm9pZCAwPT09YyYmKGM9QmQoKSk7cmV0dXJuIDA9PWMlYS5WP01hdGguZmxvb3IoYy9hLlYpJWEuZWErMTowfTtmdW5jdGlvbiBmYygpe3ZhciBhLGIsYztpZigoYz0oYz1PLm5hdmlnYXRvcik/Yy5wbHVnaW5zOm51bGwpJiZjLmxlbmd0aClmb3IodmFyIGQ9MDtkPGMubGVuZ3RoJiYhYjtkKyspe3ZhciBlPWNbZF07LTE8ZS5uYW1lLmluZGV4T2YoXCJTaG9ja3dhdmUgRmxhc2hcIikmJihiPWUuZGVzY3JpcHRpb24pfWlmKCFiKXRyeXthPW5ldyBBY3RpdmVYT2JqZWN0KFwiU2hvY2t3YXZlRmxhc2guU2hvY2t3YXZlRmxhc2guN1wiKSxiPWEuR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKX1jYXRjaChnKXt9aWYoIWIpdHJ5e2E9bmV3IEFjdGl2ZVhPYmplY3QoXCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC42XCIpLGI9XCJXSU4gNiwwLDIxLDBcIixhLkFsbG93U2NyaXB0QWNjZXNzPVwiYWx3YXlzXCIsYj1hLkdldFZhcmlhYmxlKFwiJHZlcnNpb25cIil9Y2F0Y2goZyl7fWlmKCFiKXRyeXthPW5ldyBBY3RpdmVYT2JqZWN0KFwiU2hvY2t3YXZlRmxhc2guU2hvY2t3YXZlRmxhc2hcIiksYj1hLkdldFZhcmlhYmxlKFwiJHZlcnNpb25cIil9Y2F0Y2goZyl7fWImJlxuKGE9Yi5tYXRjaCgvW1xcZF0rL2cpKSYmMzw9YS5sZW5ndGgmJihiPWFbMF0rXCIuXCIrYVsxXStcIiByXCIrYVsyXSk7cmV0dXJuIGJ8fHZvaWQgMH07dmFyIGFhPWZ1bmN0aW9uKGEpe3ZhciBiPU1hdGgubWluKFIoYSxkYyksMTAwKTtyZXR1cm4gTGEoUChhLFEpKSUxMDA+PWI/ITE6ITB9LGdjPWZ1bmN0aW9uKGEpe3ZhciBiPXt9O2lmKEVjKGIpfHxGYyhiKSl7dmFyIGM9YltFYl07dm9pZCAwPT1jfHxJbmZpbml0eT09Y3x8aXNOYU4oYyl8fCgwPGM/KFkoYixHYiksWShiLEpiKSxZKGIsSWIpLFkoYixGYiksWShiLEhiKSxZKGIsS2IpLFkoYixMYiksYShiKSk6TChPLFwibG9hZFwiLGZ1bmN0aW9uKCl7Z2MoYSl9LCExKSl9fSxFYz1mdW5jdGlvbihhKXt2YXIgYj1PLnBlcmZvcm1hbmNlfHxPLndlYmtpdFBlcmZvcm1hbmNlLGI9YiYmYi50aW1pbmc7aWYoIWIpcmV0dXJuITE7dmFyIGM9Yi5uYXZpZ2F0aW9uU3RhcnQ7aWYoMD09YylyZXR1cm4hMTthW0ViXT1iLmxvYWRFdmVudFN0YXJ0LWM7YVtHYl09Yi5kb21haW5Mb29rdXBFbmQtYi5kb21haW5Mb29rdXBTdGFydDthW0piXT1iLmNvbm5lY3RFbmQtYi5jb25uZWN0U3RhcnQ7YVtJYl09XG5iLnJlc3BvbnNlU3RhcnQtYi5yZXF1ZXN0U3RhcnQ7YVtGYl09Yi5yZXNwb25zZUVuZC1iLnJlc3BvbnNlU3RhcnQ7YVtIYl09Yi5mZXRjaFN0YXJ0LWM7YVtLYl09Yi5kb21JbnRlcmFjdGl2ZS1jO2FbTGJdPWIuZG9tQ29udGVudExvYWRlZEV2ZW50U3RhcnQtYztyZXR1cm4hMH0sRmM9ZnVuY3Rpb24oYSl7aWYoTy50b3AhPU8pcmV0dXJuITE7dmFyIGI9Ty5leHRlcm5hbCxjPWImJmIub25sb2FkVDtiJiYhYi5pc1ZhbGlkTG9hZFRpbWUmJihjPXZvaWQgMCk7MjE0NzQ4MzY0ODxjJiYoYz12b2lkIDApOzA8YyYmYi5zZXRQYWdlUmVhZHlUaW1lKCk7aWYodm9pZCAwPT1jKXJldHVybiExO2FbRWJdPWM7cmV0dXJuITB9LFk9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hW2JdO2lmKGlzTmFOKGMpfHxJbmZpbml0eT09Y3x8MD5jKWFbYl09dm9pZCAwfSxGZD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7aWYoXCJwYWdldmlld1wiPT1iLmdldChWYSkmJiFhLkkpe2EuST0hMDt2YXIgYz1cbmFhKGIpO2I9MDxFKGIuZ2V0KGtiKSxcImdjbGlkXCIpLmxlbmd0aDsoY3x8YikmJmdjKGZ1bmN0aW9uKGIpe2Euc2VuZChjP1widGltaW5nXCI6XCJhZHRpbWluZ1wiLGIpfSl9fX07dmFyIGhjPSExLG1jPWZ1bmN0aW9uKGEpe2lmKFwiY29va2llXCI9PVAoYSxhYykpe3ZhciBiPVAoYSxVKSxjPW5kKGEpLGQ9a2MoUChhLFliKSksZT1sYyhQKGEsVykpLGc9MUUzKlIoYSxaYiksY2E9UChhLE5hKTtpZihcImF1dG9cIiE9ZSl6YyhiLGMsZCxlLGNhLGcpJiYoaGM9ITApO2Vsc2V7SigzMik7dmFyIGw7YTp7Yz1bXTtlPXhhKCkuc3BsaXQoXCIuXCIpO2lmKDQ9PWUubGVuZ3RoJiYobD1lW2UubGVuZ3RoLTFdLHBhcnNlSW50KGwsMTApPT1sKSl7bD1bXCJub25lXCJdO2JyZWFrIGF9Zm9yKGw9ZS5sZW5ndGgtMjswPD1sO2wtLSljLnB1c2goZS5zbGljZShsKS5qb2luKFwiLlwiKSk7Yy5wdXNoKFwibm9uZVwiKTtsPWN9Zm9yKHZhciBrPTA7azxsLmxlbmd0aDtrKyspaWYoZT1sW2tdLGEuZGF0YS5zZXQoVyxlKSxjPW5kKGEpLHpjKGIsYyxkLGUsY2EsZykpe2hjPSEwO3JldHVybn1hLmRhdGEuc2V0KFcsXCJhdXRvXCIpfX19LG5jPWZ1bmN0aW9uKGEpe2lmKFwiY29va2llXCI9PVAoYSxhYykmJlxuIWhjJiYobWMoYSksIWhjKSl0aHJvd1wiYWJvcnRcIjt9LFljPWZ1bmN0aW9uKGEpe2lmKGEuZ2V0KFdjKSl7dmFyIGI9UChhLFcpLGM9UChhLCRiKXx8eGEoKSxkPVhjKFwiX191dG1hXCIsYyxiKTtkJiYoSigxOSksYS5zZXQoVGMsKG5ldyBEYXRlKS5nZXRUaW1lKCksITApLGEuc2V0KFJjLGQuUiksKGI9WGMoXCJfX3V0bXpcIixjLGIpKSYmZC5oYXNoPT1iLmhhc2gmJmEuc2V0KFNjLGIuUikpfX0sbmQ9ZnVuY3Rpb24oYSl7dmFyIGI9Q2MoUChhLFEpKSxjPWxjKFAoYSxXKSkuc3BsaXQoXCIuXCIpLmxlbmd0aDthPWpjKFAoYSxZYikpOzE8YSYmKGMrPVwiLVwiK2EpO3JldHVybltcIkdBMVwiLGMsYl0uam9pbihcIi5cIil9LEdjPWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9W10sZT1bXSxnLGNhPTA7Y2E8YS5sZW5ndGg7Y2ErKyl7dmFyIGw9YVtjYV07bC5IW2NdPT1iP2QucHVzaChsKTp2b2lkIDA9PWd8fGwuSFtjXTxnPyhlPVtsXSxnPWwuSFtjXSk6bC5IW2NdPT1nJiZlLnB1c2gobCl9cmV0dXJuIDA8XG5kLmxlbmd0aD9kOmV9LGxjPWZ1bmN0aW9uKGEpe3JldHVybiAwPT1hLmluZGV4T2YoXCIuXCIpP2Euc3Vic3RyKDEpOmF9LGtjPWZ1bmN0aW9uKGEpe2lmKCFhKXJldHVyblwiL1wiOzE8YS5sZW5ndGgmJmEubGFzdEluZGV4T2YoXCIvXCIpPT1hLmxlbmd0aC0xJiYoYT1hLnN1YnN0cigwLGEubGVuZ3RoLTEpKTswIT1hLmluZGV4T2YoXCIvXCIpJiYoYT1cIi9cIithKTtyZXR1cm4gYX0samM9ZnVuY3Rpb24oYSl7YT1rYyhhKTtyZXR1cm5cIi9cIj09YT8xOmEuc3BsaXQoXCIvXCIpLmxlbmd0aH07ZnVuY3Rpb24gWGMoYSxiLGMpe1wibm9uZVwiPT1iJiYoYj1cIlwiKTt2YXIgZD1bXSxlPUNhKGEpO2E9XCJfX3V0bWFcIj09YT82OjI7Zm9yKHZhciBnPTA7ZzxlLmxlbmd0aDtnKyspe3ZhciBjYT0oXCJcIitlW2ddKS5zcGxpdChcIi5cIik7Y2EubGVuZ3RoPj1hJiZkLnB1c2goe2hhc2g6Y2FbMF0sUjplW2ddLE86Y2F9KX1pZigwIT1kLmxlbmd0aClyZXR1cm4gMT09ZC5sZW5ndGg/ZFswXTpaYyhiLGQpfHxaYyhjLGQpfHxaYyhudWxsLGQpfHxkWzBdfWZ1bmN0aW9uIFpjKGEsYil7dmFyIGM7bnVsbD09YT9jPWE9MTooYz1MYShhKSxhPUxhKEQoYSxcIi5cIik/YS5zdWJzdHJpbmcoMSk6XCIuXCIrYSkpO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKWlmKGJbZF0uaGFzaD09Y3x8YltkXS5oYXNoPT1hKXJldHVybiBiW2RdfTt2YXIgb2Q9bmV3IFJlZ0V4cCgvXmh0dHBzPzpcXC9cXC8oW15cXC86XSspLykscGQ9LyguKikoWz8mI10pKD86X2dhPVteJiNdKikoPzomPykoLiopLztmdW5jdGlvbiBCYyhhKXthPWEuZ2V0KFEpO3ZhciBiPUljKGEsMCk7cmV0dXJuXCJfZ2E9MS5cIitLKGIrXCIuXCIrYSl9ZnVuY3Rpb24gSWMoYSxiKXt2YXIgYz1uZXcgRGF0ZSxkPU8ubmF2aWdhdG9yLGU9ZC5wbHVnaW5zfHxbXTthPVthLGQudXNlckFnZW50LGMuZ2V0VGltZXpvbmVPZmZzZXQoKSxjLmdldFllYXIoKSxjLmdldERhdGUoKSxjLmdldEhvdXJzKCksYy5nZXRNaW51dGVzKCkrYl07Zm9yKGI9MDtiPGUubGVuZ3RoOysrYilhLnB1c2goZVtiXS5kZXNjcmlwdGlvbik7cmV0dXJuIExhKGEuam9pbihcIi5cIikpfXZhciBEYz1mdW5jdGlvbihhKXtKKDQ4KTt0aGlzLnRhcmdldD1hO3RoaXMuVD0hMX07XG5EYy5wcm90b3R5cGUuY2E9ZnVuY3Rpb24oYSxiKXtpZihhLnRhZ05hbWUpe2lmKFwiYVwiPT1hLnRhZ05hbWUudG9Mb3dlckNhc2UoKSl7YS5ocmVmJiYoYS5ocmVmPXFkKHRoaXMsYS5ocmVmLGIpKTtyZXR1cm59aWYoXCJmb3JtXCI9PWEudGFnTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiByZCh0aGlzLGEpfWlmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXJldHVybiBxZCh0aGlzLGEsYil9O1xudmFyIHFkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1wZC5leGVjKGIpO2QmJjM8PWQubGVuZ3RoJiYoYj1kWzFdKyhkWzNdP2RbMl0rZFszXTpcIlwiKSk7YT1hLnRhcmdldC5nZXQoXCJsaW5rZXJQYXJhbVwiKTt2YXIgZT1iLmluZGV4T2YoXCI/XCIpLGQ9Yi5pbmRleE9mKFwiI1wiKTtjP2IrPSgtMT09ZD9cIiNcIjpcIiZcIikrYTooYz0tMT09ZT9cIj9cIjpcIiZcIixiPS0xPT1kP2IrKGMrYSk6Yi5zdWJzdHJpbmcoMCxkKStjK2ErYi5zdWJzdHJpbmcoZCkpO3JldHVybiBiPWIucmVwbGFjZSgvJitfZ2E9LyxcIiZfZ2E9XCIpfSxyZD1mdW5jdGlvbihhLGIpe2lmKGImJmIuYWN0aW9uKXt2YXIgYz1hLnRhcmdldC5nZXQoXCJsaW5rZXJQYXJhbVwiKS5zcGxpdChcIj1cIilbMV07aWYoXCJnZXRcIj09Yi5tZXRob2QudG9Mb3dlckNhc2UoKSl7YT1iLmNoaWxkTm9kZXN8fFtdO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKWlmKFwiX2dhXCI9PWFbZF0ubmFtZSl7YVtkXS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMpO3JldHVybn1hPVxuTS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7YS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIik7YS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJfZ2FcIik7YS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMpO2IuYXBwZW5kQ2hpbGQoYSl9ZWxzZVwicG9zdFwiPT1iLm1ldGhvZC50b0xvd2VyQ2FzZSgpJiYoYi5hY3Rpb249cWQoYSxiLmFjdGlvbikpfX07XG5EYy5wcm90b3R5cGUuUz1mdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChjKXt0cnl7Yz1jfHxPLmV2ZW50O3ZhciBkO2E6e3ZhciBnPWMudGFyZ2V0fHxjLnNyY0VsZW1lbnQ7Zm9yKGM9MTAwO2cmJjA8Yzspe2lmKGcuaHJlZiYmZy5ub2RlTmFtZS5tYXRjaCgvXmEoPzpyZWEpPyQvaSkpe2Q9ZzticmVhayBhfWc9Zy5wYXJlbnROb2RlO2MtLX1kPXt9fShcImh0dHA6XCI9PWQucHJvdG9jb2x8fFwiaHR0cHM6XCI9PWQucHJvdG9jb2wpJiZzZChhLGQuaG9zdG5hbWV8fFwiXCIpJiZkLmhyZWYmJihkLmhyZWY9cWQoZSxkLmhyZWYsYikpfWNhdGNoKGspe0ooMjYpfX12YXIgZT10aGlzO3RoaXMuVHx8KHRoaXMuVD0hMCxMKE0sXCJtb3VzZWRvd25cIixkLCExKSxMKE0sXCJrZXl1cFwiLGQsITEpKTtjJiZMKE0sXCJzdWJtaXRcIixmdW5jdGlvbihiKXtiPWJ8fE8uZXZlbnQ7aWYoKGI9Yi50YXJnZXR8fGIuc3JjRWxlbWVudCkmJmIuYWN0aW9uKXt2YXIgYz1iLmFjdGlvbi5tYXRjaChvZCk7YyYmc2QoYSxcbmNbMV0pJiZyZChlLGIpfX0pfTtmdW5jdGlvbiBzZChhLGIpe2lmKGI9PU0ubG9jYXRpb24uaG9zdG5hbWUpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYVtjXWluc3RhbmNlb2YgUmVnRXhwKXtpZihhW2NdLnRlc3QoYikpcmV0dXJuITB9ZWxzZSBpZigwPD1iLmluZGV4T2YoYVtjXSkpcmV0dXJuITA7cmV0dXJuITF9O3ZhciBwPS9eKEdUTXxPUFQpLVtBLVowLTldKyQvLHE9LztfZ2FleHA9W147XSovZyxyPS87KChfX3V0bWE9KXwoW147PV0rPUdBWD9cXGQrXFwuKSlbXjtdKi9nLHQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe2ImJihjKz1cIiZcIithK1wiPVwiK0soYikpfXZhciBjPVwiaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vZ3RtL2pzP2lkPVwiK0soYS5pZCk7XCJkYXRhTGF5ZXJcIiE9YS5CJiZiKFwibFwiLGEuQik7YihcInRcIixhLnRhcmdldCk7YihcImNpZFwiLGEuamEpO2IoXCJjaWR0XCIsYS5rYSk7YihcImdhY1wiLGEubGEpO2IoXCJhaXBcIixhLmlhKTthLm5hJiZiKFwibVwiLFwic3luY1wiKTtiKFwiY3ljbGVcIixhLkcpO2EucWEmJmIoXCJnY2xpZFwiLGEucWEpO3JldHVybiBjfTt2YXIgSmQ9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuVT1lZDt0aGlzLmFhPWI7KGI9Yyl8fChiPShiPVAoYSxWKSkmJlwidDBcIiE9Yj9XZC50ZXN0KGIpP1wiX2dhdF9cIitDYyhQKGEsTmEpKTpcIl9nYXRfXCIrQ2MoYik6XCJfZ2F0XCIpO3RoaXMuWT1iO0VkKG5ldyBPZCgxMCksYSkmJihKKDMwKSx0aGlzLnBhPSEwKX0sUmQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1iLmdldChXYik7Yi5zZXQoV2IsZnVuY3Rpb24oYil7UGQoYSxiKTt2YXIgZD1jKGIpO1FkKGEsYik7cmV0dXJuIGR9KTt2YXIgZD1iLmdldChYYik7Yi5zZXQoWGIsZnVuY3Rpb24oYil7dmFyIGM9ZChiKTtJZChhLGIpO3JldHVybiBjfSl9LFBkPWZ1bmN0aW9uKGEsYil7Yi5nZXQoYS5VKXx8KFwiMVwiPT1DYShhLlkpWzBdP2Iuc2V0KGEuVSxcIlwiLCEwKTpiLnNldChhLlUsXCJcIitoZCgpLCEwKSl9LFFkPWZ1bmN0aW9uKGEsYil7aWYoYi5nZXQoYS5VKSl7dmFyIGM9NkU1O2EucGEmJihjLz0xMCk7emMoYS5ZLFwiMVwiLGIuZ2V0KFliKSxiLmdldChXKSxcbmIuZ2V0KE5hKSxjKX19LElkPWZ1bmN0aW9uKGEsYil7aWYoYi5nZXQoYS5VKSl7dmFyIGM9bmV3IGVlLGQ9ZnVuY3Rpb24oYSl7JGEoYSkuRiYmYy5zZXQoJGEoYSkuRixiLmdldChhKSl9O2QoaGIpO2QoaWIpO2QoTmEpO2QoUSk7ZChBZCk7ZChhLlUpO2Muc2V0KCRhKGxkKS5GLFRkKGIpKTt2YXIgZT1hLmFhO2MubWFwKGZ1bmN0aW9uKGEsYil7ZSs9SyhhKStcIj1cIjtlKz1LKFwiXCIrYikrXCImXCJ9KTtlKz1cIno9XCIraGQoKTt0YShlKTtiLnNldChhLlUsXCJcIiwhMCl9fSxXZD0vXmd0bVxcZCskLzt2YXIgZmQ9ZnVuY3Rpb24oYSxiKXthPWEuYjtpZighYS5nZXQoXCJkY0xvYWRlZFwiKSl7TmQoYSwyOSk7Yj1ifHx7fTt2YXIgYztiW1VdJiYoYz1DYyhiW1VdKSk7Yj1uZXcgSmQoYSxcImh0dHBzOi8vc3RhdHMuZy5kb3VibGVjbGljay5uZXQvci9jb2xsZWN0P3Q9ZGMmYWlwPTEmX3I9MyZcIixjKTtSZChiLGEpO2Euc2V0KFwiZGNMb2FkZWRcIiwhMCl9fTt2YXIgU2Q9ZnVuY3Rpb24oYSl7aWYoIWEuZ2V0KFwiZGNMb2FkZWRcIikmJlwiY29va2llXCI9PWEuZ2V0KGFjKSl7TmQoYSw1MSk7dmFyIGI9bmV3IEpkKGEpO1BkKGIsYSk7UWQoYixhKTthLmdldChiLlUpJiYoYS5zZXQoTWQsMSwhMCksYS5zZXQoZ2Qsb2MoKStcIi9yL2NvbGxlY3RcIiwhMCkpfX07dmFyIExjPWZ1bmN0aW9uKCl7dmFyIGE9Ty5nYUdsb2JhbD1PLmdhR2xvYmFsfHx7fTtyZXR1cm4gYS5oaWQ9YS5oaWR8fGhkKCl9O3ZhciBhZCxiZD1mdW5jdGlvbihhLGIsYyl7aWYoIWFkKXt2YXIgZDtkPU0ubG9jYXRpb24uaGFzaDt2YXIgZT1PLm5hbWUsZz0vXiM/Z2Fzbz0oW14mXSopLztpZihlPShkPShkPWQmJmQubWF0Y2goZyl8fGUmJmUubWF0Y2goZykpP2RbMV06Q2EoXCJHQVNPXCIpWzBdfHxcIlwiKSYmZC5tYXRjaCgvXig/OiEoWy0wLTlhLXouXXsxLDQwfSkhKT8oWy0uXFx3XXsxMCwxMjAwfSkkL2kpKXpjKFwiR0FTT1wiLFwiXCIrZCxjLGIsYSwwKSx3aW5kb3cuX3Vkb3x8KHdpbmRvdy5fdWRvPWIpLHdpbmRvdy5fdXRjcHx8KHdpbmRvdy5fdXRjcD1jKSxhPWVbMV0sd2EoXCJodHRwczovL3d3dy5nb29nbGUuY29tL2FuYWx5dGljcy93ZWIvaW5wYWdlL3B1Yi9pbnBhZ2UuanM/XCIrKGE/XCJwcmVmaXg9XCIrYStcIiZcIjpcIlwiKStoZCgpLFwiX2dhc29qc1wiKTthZD0hMH19O3ZhciBIPWZ1bmN0aW9uKGEpe3JldHVybiBhPygxKmEpLnRvRml4ZWQoMyk6XCIwXCJ9LGRhPWZ1bmN0aW9uKGEpe3ZhciBiPU8ucGVyZm9ybWFuY2U7aWYoYiYmYi5nZXRFbnRyaWVzQnlOYW1lKXtKKDM1KTt2YXIgYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcz93cGlkPVwiK2E7d2EoYyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dHJ5e3ZhciBkPTEsZT1iLmdldEVudHJpZXNCeU5hbWUoXCJodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanNcIik7ZSYmMCE9ZS5sZW5ndGh8fChlPWIuZ2V0RW50cmllc0J5TmFtZShcImh0dHA6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzXCIpLGQ9MCk7dmFyIGc9Yi5nZXRFbnRyaWVzQnlOYW1lKGMpO2lmKGUmJjE9PWUubGVuZ3RoJiZnJiYxPT1nLmxlbmd0aCl7SigzNyk7dmFyIGNhPWVbMF0sbD1nWzBdLGs9e3RpZDphLGFkOkgoY2EuZHVyYXRpb24pLGJkOkgobC5kdXJhdGlvbiksXG5hcjpIKGNhLnJlc3BvbnNlRW5kLWNhLnJlcXVlc3RTdGFydCksYnI6SChsLnJlc3BvbnNlRW5kLWwucmVxdWVzdFN0YXJ0KSxhbjpIKGNhLmRvbWFpbkxvb2t1cEVuZC1jYS5kb21haW5Mb29rdXBTdGFydCksYm46SChsLmRvbWFpbkxvb2t1cEVuZC1sLmRvbWFpbkxvb2t1cFN0YXJ0KSxhYzpIKGNhLmNvbm5lY3RFbmQtY2EuY29ubmVjdFN0YXJ0KSxiYzpIKGwuY29ubmVjdEVuZC1sLmNvbm5lY3RTdGFydCksYXM6ZH0sZD1bXTtkLnB1c2goXCJfdj1qNDhcIik7ZC5wdXNoKFwiaWQ9MTBcIik7Zm9yKHZhciB3IGluIGspay5oYXNPd25Qcm9wZXJ0eSh3KSYmZC5wdXNoKHcrXCI9XCIrSyhrW3ddKSk7ZC5wdXNoKFwiej1cIitoZCgpKTt3YyhcImh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL3UvZFwiLGQuam9pbihcIiZcIiksdWEpfX1jYXRjaChoYSl7fX0pfX07dmFyIHdiPS9eKFVBfFlUfE1PfEdQKS0oXFxkKyktKFxcZCspJC8scGM9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIpe2UuYi5kYXRhLnNldChhLGIpfWZ1bmN0aW9uIGMoYSxjKXtiKGEsYyk7ZS5maWx0ZXJzLmFkZChhKX1mdW5jdGlvbiBkKGEsYixjKXtFZChuZXcgT2QoMUU0LCEwLGIpLGUuYikmJihhPUNhKGEpKSYmMDxhLmxlbmd0aCYmSihjKX12YXIgZT10aGlzO3RoaXMuYj1uZXcgWWE7dGhpcy5maWx0ZXJzPW5ldyBIYTtiKFYsYVtWXSk7YihOYSxzYShhW05hXSkpO2IoVSxhW1VdKTtiKFcsYVtXXXx8eGEoKSk7YihZYixhW1liXSk7YihaYixhW1piXSk7YigkYixhWyRiXSk7YihXYyxhW1djXSk7YihiYyxhW2JjXSk7YihjYyxhW2NjXSk7YihLYSxhW0thXSk7YihkYyxhW2RjXSk7YihlYyxhW2VjXSk7YihhYyxhW2FjXSk7YihBZCxhW0FkXSk7YihuLGFbbl0pO2IoaGIsMSk7YihpYixcImo0OFwiKTtjKFFiLE1hKTtjKGRkLGNkKTtjKFJiLE9hKTtjKG1kLHZiKTtjKFNiLG5jKTtcbmMoVWMsWWMpO2MoVGIsSmEpO2MoVmIsVGEpO2MoVmMsSGMpO2MoemQseWQpO2MoTGQsU2QpO2MoV2IsUGEpO2MoWGIsU2EpO2MoQ2QsRmQodGhpcykpO0pjKHRoaXMuYixhW1FdKTtLYyh0aGlzLmIpO3RoaXMuYi5zZXQoamIsTGMoKSk7YmQodGhpcy5iLmdldChOYSksdGhpcy5iLmdldChXKSx0aGlzLmIuZ2V0KFliKSk7dGhpcy5yYT1uZXcgT2QoMUU0LCEwLFwiZ2FleHAxMFwiKTtkKFwiX2dpZFwiLFwiZ2Fjb29raWUxMVwiLDQxKTtkKFwiX2dhaWRcIixcImdhY29va2llMTJcIiw0NCl9LEpjPWZ1bmN0aW9uKGEsYil7aWYoXCJjb29raWVcIj09UChhLGFjKSl7aGM9ITE7dmFyIGM7Yjp7dmFyIGQ9Q2EoUChhLFUpKTtpZihkJiYhKDE+ZC5sZW5ndGgpKXtjPVtdO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZztnPWRbZV0uc3BsaXQoXCIuXCIpO3ZhciBjYT1nLnNoaWZ0KCk7KFwiR0ExXCI9PWNhfHxcIjFcIj09Y2EpJiYxPGcubGVuZ3RoPyhjYT1nLnNoaWZ0KCkuc3BsaXQoXCItXCIpLDE9PWNhLmxlbmd0aCYmXG4oY2FbMV09XCIxXCIpLGNhWzBdKj0xLGNhWzFdKj0xLGc9e0g6Y2EsczpnLmpvaW4oXCIuXCIpfSk6Zz12b2lkIDA7ZyYmYy5wdXNoKGcpfWlmKDE9PWMubGVuZ3RoKXtKKDEzKTtjPWNbMF0uczticmVhayBifWlmKDA9PWMubGVuZ3RoKUooMTIpO2Vsc2V7SigxNCk7ZD1sYyhQKGEsVykpLnNwbGl0KFwiLlwiKS5sZW5ndGg7Yz1HYyhjLGQsMCk7aWYoMT09Yy5sZW5ndGgpe2M9Y1swXS5zO2JyZWFrIGJ9ZD1qYyhQKGEsWWIpKTtjPUdjKGMsZCwxKTtjPWNbMF0mJmNbMF0uczticmVhayBifX1jPXZvaWQgMH1jfHwoYz1QKGEsVyksZD1QKGEsJGIpfHx4YSgpLGM9WGMoXCJfX3V0bWFcIixkLGMpLHZvaWQgMCE9Yz8oSigxMCksYz1jLk9bMV0rXCIuXCIrYy5PWzJdKTpjPXZvaWQgMCk7YyYmKGEuZGF0YS5zZXQoUSxjKSxoYz0hMCl9Yz1hLmdldChjYyk7aWYoZT1FKE0ubG9jYXRpb25bYz9cImhyZWZcIjpcInNlYXJjaFwiXSxcIl9nYVwiKSlhLmdldChiYyk/KGM9ZS5pbmRleE9mKFwiLlwiKSwtMT09Yz9KKDIyKTpcbihkPWUuc3Vic3RyaW5nKGMrMSksXCIxXCIhPWUuc3Vic3RyaW5nKDAsYyk/SigyMik6KGM9ZC5pbmRleE9mKFwiLlwiKSwtMT09Yz9KKDIyKTooZT1kLnN1YnN0cmluZygwLGMpLGM9ZC5zdWJzdHJpbmcoYysxKSxlIT1JYyhjLDApJiZlIT1JYyhjLC0xKSYmZSE9SWMoYywtMik/SigyMyk6KEooMTEpLGEuZGF0YS5zZXQoUSxjKSkpKSkpOkooMjEpO2ImJihKKDkpLGEuZGF0YS5zZXQoUSxLKGIpKSk7aWYoIWEuZ2V0KFEpKWlmKGI9KGI9Ty5nYUdsb2JhbCYmTy5nYUdsb2JhbC52aWQpJiYtMSE9Yi5zZWFyY2goL14oPzp1dG1hXFwuKT9cXGQrXFwuXFxkKyQvKT9iOnZvaWQgMClKKDE3KSxhLmRhdGEuc2V0KFEsYik7ZWxzZXtKKDgpO2I9Ty5uYXZpZ2F0b3IudXNlckFnZW50KyhNLmNvb2tpZT9NLmNvb2tpZTpcIlwiKSsoTS5yZWZlcnJlcj9NLnJlZmVycmVyOlwiXCIpO2M9Yi5sZW5ndGg7Zm9yKGQ9Ty5oaXN0b3J5Lmxlbmd0aDswPGQ7KWIrPWQtLV5jKys7YS5kYXRhLnNldChRLFtoZCgpXkxhKGIpJlxuMjE0NzQ4MzY0NyxNYXRoLnJvdW5kKChuZXcgRGF0ZSkuZ2V0VGltZSgpLzFFMyldLmpvaW4oXCIuXCIpKX1tYyhhKX0sS2M9ZnVuY3Rpb24oYSl7dmFyIGI9Ty5uYXZpZ2F0b3IsYz1PLnNjcmVlbixkPU0ubG9jYXRpb247YS5zZXQobGIseWEoYS5nZXQoZWMpKSk7aWYoZCl7dmFyIGU9ZC5wYXRobmFtZXx8XCJcIjtcIi9cIiE9ZS5jaGFyQXQoMCkmJihKKDMxKSxlPVwiL1wiK2UpO2Euc2V0KGtiLGQucHJvdG9jb2wrXCIvL1wiK2QuaG9zdG5hbWUrZStkLnNlYXJjaCl9YyYmYS5zZXQocWIsYy53aWR0aCtcInhcIitjLmhlaWdodCk7YyYmYS5zZXQocGIsYy5jb2xvckRlcHRoK1wiLWJpdFwiKTt2YXIgYz1NLmRvY3VtZW50RWxlbWVudCxnPShlPU0uYm9keSkmJmUuY2xpZW50V2lkdGgmJmUuY2xpZW50SGVpZ2h0LGNhPVtdO2MmJmMuY2xpZW50V2lkdGgmJmMuY2xpZW50SGVpZ2h0JiYoXCJDU1MxQ29tcGF0XCI9PT1NLmNvbXBhdE1vZGV8fCFnKT9jYT1bYy5jbGllbnRXaWR0aCxjLmNsaWVudEhlaWdodF06ZyYmXG4oY2E9W2UuY2xpZW50V2lkdGgsZS5jbGllbnRIZWlnaHRdKTtjPTA+PWNhWzBdfHwwPj1jYVsxXT9cIlwiOmNhLmpvaW4oXCJ4XCIpO2Euc2V0KHJiLGMpO2Euc2V0KHRiLGZjKCkpO2Euc2V0KG9iLE0uY2hhcmFjdGVyU2V0fHxNLmNoYXJzZXQpO2Euc2V0KHNiLGImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmphdmFFbmFibGVkJiZiLmphdmFFbmFibGVkKCl8fCExKTthLnNldChuYiwoYiYmKGIubGFuZ3VhZ2V8fGIuYnJvd3Nlckxhbmd1YWdlKXx8XCJcIikudG9Mb3dlckNhc2UoKSk7aWYoZCYmYS5nZXQoY2MpJiYoYj1NLmxvY2F0aW9uLmhhc2gpKXtiPWIuc3BsaXQoL1s/JiNdKy8pO2Q9W107Zm9yKGM9MDtjPGIubGVuZ3RoOysrYykoRChiW2NdLFwidXRtX2lkXCIpfHxEKGJbY10sXCJ1dG1fY2FtcGFpZ25cIil8fEQoYltjXSxcInV0bV9zb3VyY2VcIil8fEQoYltjXSxcInV0bV9tZWRpdW1cIil8fEQoYltjXSxcInV0bV90ZXJtXCIpfHxEKGJbY10sXCJ1dG1fY29udGVudFwiKXx8RChiW2NdLFwiZ2NsaWRcIil8fFxuRChiW2NdLFwiZGNsaWRcIil8fEQoYltjXSxcImdjbHNyY1wiKSkmJmQucHVzaChiW2NdKTswPGQubGVuZ3RoJiYoYj1cIiNcIitkLmpvaW4oXCImXCIpLGEuc2V0KGtiLGEuZ2V0KGtiKStiKSl9fTtwYy5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmIuZ2V0KGEpfTtwYy5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7dGhpcy5iLnNldChhLGIpfTt2YXIgcWM9e3BhZ2V2aWV3OlttYl0sZXZlbnQ6W3ViLHhiLHliLHpiXSxzb2NpYWw6W0JiLENiLERiXSx0aW1pbmc6W01iLE5iLFBiLE9iXX07XG5wYy5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbihhKXtpZighKDE+YXJndW1lbnRzLmxlbmd0aCkpe3ZhciBiLGM7XCJzdHJpbmdcIj09PXR5cGVvZiBhcmd1bWVudHNbMF0/KGI9YXJndW1lbnRzWzBdLGM9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpOihiPWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdW1ZhXSxjPWFyZ3VtZW50cyk7YiYmKGM9emEocWNbYl18fFtdLGMpLGNbVmFdPWIsdGhpcy5iLnNldChjLHZvaWQgMCwhMCksdGhpcy5maWx0ZXJzLkQodGhpcy5iKSx0aGlzLmIuZGF0YS5tPXt9LEVkKHRoaXMucmEsdGhpcy5iKSYmZGEodGhpcy5iLmdldChOYSkpKX19O3BjLnByb3RvdHlwZS5tYT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7dShhLGMsYil8fCh2KGEsZnVuY3Rpb24oKXt1KGEsYyxiKX0pLHkoU3RyaW5nKGMuZ2V0KFYpKSxhLHZvaWQgMCxiLCEwKSl9O3ZhciByYz1mdW5jdGlvbihhKXtpZihcInByZXJlbmRlclwiPT1NLnZpc2liaWxpdHlTdGF0ZSlyZXR1cm4hMTthKCk7cmV0dXJuITB9LHo9ZnVuY3Rpb24oYSl7aWYoIXJjKGEpKXtKKDE2KTt2YXIgYj0hMSxjPWZ1bmN0aW9uKCl7aWYoIWImJnJjKGEpKXtiPSEwO3ZhciBkPWMsZT1NO2UucmVtb3ZlRXZlbnRMaXN0ZW5lcj9lLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsZCwhMSk6ZS5kZXRhY2hFdmVudCYmZS5kZXRhY2hFdmVudChcIm9udmlzaWJpbGl0eWNoYW5nZVwiLGQpfX07TChNLFwidmlzaWJpbGl0eWNoYW5nZVwiLGMpfX07dmFyIHRkPS9eKD86KFxcdyspXFwuKT8oPzooXFx3Kyk6KT8oXFx3KykkLyxzYz1mdW5jdGlvbihhKXtpZihlYShhWzBdKSl0aGlzLnU9YVswXTtlbHNle3ZhciBiPXRkLmV4ZWMoYVswXSk7bnVsbCE9YiYmND09Yi5sZW5ndGgmJih0aGlzLmM9YlsxXXx8XCJ0MFwiLHRoaXMuSz1iWzJdfHxcIlwiLHRoaXMuQz1iWzNdLHRoaXMuYT1bXS5zbGljZS5jYWxsKGEsMSksdGhpcy5LfHwodGhpcy5BPVwiY3JlYXRlXCI9PXRoaXMuQyx0aGlzLmk9XCJyZXF1aXJlXCI9PXRoaXMuQyx0aGlzLmc9XCJwcm92aWRlXCI9PXRoaXMuQyx0aGlzLmJhPVwicmVtb3ZlXCI9PXRoaXMuQyksdGhpcy5pJiYoMzw9dGhpcy5hLmxlbmd0aD8odGhpcy5YPXRoaXMuYVsxXSx0aGlzLlc9dGhpcy5hWzJdKTp0aGlzLmFbMV0mJihxYSh0aGlzLmFbMV0pP3RoaXMuWD10aGlzLmFbMV06dGhpcy5XPXRoaXMuYVsxXSkpKTtiPWFbMV07YT1hWzJdO2lmKCF0aGlzLkMpdGhyb3dcImFib3J0XCI7aWYodGhpcy5pJiYoIXFhKGIpfHxcIlwiPT1iKSl0aHJvd1wiYWJvcnRcIjtcbmlmKHRoaXMuZyYmKCFxYShiKXx8XCJcIj09Ynx8IWVhKGEpKSl0aHJvd1wiYWJvcnRcIjtpZih1ZCh0aGlzLmMpfHx1ZCh0aGlzLkspKXRocm93XCJhYm9ydFwiO2lmKHRoaXMuZyYmXCJ0MFwiIT10aGlzLmMpdGhyb3dcImFib3J0XCI7fX07ZnVuY3Rpb24gdWQoYSl7cmV0dXJuIDA8PWEuaW5kZXhPZihcIi5cIil8fDA8PWEuaW5kZXhPZihcIjpcIil9O3ZhciBZZCxaZCwkZCxBO1lkPW5ldyBlZTskZD1uZXcgZWU7QT1uZXcgZWU7WmQ9e2VjOjQ1LGVjb21tZXJjZTo0NixsaW5raWQ6NDd9O1xudmFyIHU9ZnVuY3Rpb24oYSxiLGMpe2I9PU58fGIuZ2V0KFYpO3ZhciBkPVlkLmdldChhKTtpZighZWEoZCkpcmV0dXJuITE7Yi5wbHVnaW5zXz1iLnBsdWdpbnNffHxuZXcgZWU7aWYoYi5wbHVnaW5zXy5nZXQoYSkpcmV0dXJuITA7Yi5wbHVnaW5zXy5zZXQoYSxuZXcgZChiLGN8fHt9KSk7cmV0dXJuITB9LHk9ZnVuY3Rpb24oYSxiLGMsZCxlKXtpZighZWEoWWQuZ2V0KGIpKSYmISRkLmdldChiKSl7WmQuaGFzT3duUHJvcGVydHkoYikmJkooWmRbYl0pO2lmKHAudGVzdChiKSl7Sig1Mik7YT1OLmooYSk7aWYoIWEpcmV0dXJuITA7Yz1kfHx7fTtkPXtpZDpiLEI6Yy5kYXRhTGF5ZXJ8fFwiZGF0YUxheWVyXCIsaWE6ISFhLmdldChcImFub255bWl6ZUlwXCIpLG5hOmUsRzohMX07YS5nZXQoXCImZ3RtXCIpPT1iJiYoZC5HPSEwKTt2YXIgZz1TdHJpbmcoYS5nZXQoXCJuYW1lXCIpKTtcInQwXCIhPWcmJihkLnRhcmdldD1nKTtHKFN0cmluZyhhLmdldChcInRyYWNraW5nSWRcIikpKXx8KGQuamE9U3RyaW5nKGEuZ2V0KFEpKSxcbmQua2E9TnVtYmVyKGEuZ2V0KG4pKSxjPWMucGFsaW5kcm9tZT9yOnEsYz0oYz1NLmNvb2tpZS5yZXBsYWNlKC9efCg7ICspL2csXCI7XCIpLm1hdGNoKGMpKT9jLnNvcnQoKS5qb2luKFwiXCIpLnN1YnN0cmluZygxKTp2b2lkIDAsZC5sYT1jLGQucWE9RShhLmIuZ2V0KGtiKXx8XCJcIixcImdjbGlkXCIpKTthPWQuQjtjPShuZXcgRGF0ZSkuZ2V0VGltZSgpO09bYV09T1thXXx8W107Yz17XCJndG0uc3RhcnRcIjpjfTtlfHwoYy5ldmVudD1cImd0bS5qc1wiKTtPW2FdLnB1c2goYyk7Yz10KGQpfSFjJiZaZC5oYXNPd25Qcm9wZXJ0eShiKT8oSigzOSksYz1iK1wiLmpzXCIpOkooNDMpO2MmJihjJiYwPD1jLmluZGV4T2YoXCIvXCIpfHwoYz0oQmF8fFVkKCk/XCJodHRwczpcIjpcImh0dHA6XCIpK1wiLy93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vcGx1Z2lucy91YS9cIitjKSxkPWFlKGMpLGE9ZC5wcm90b2NvbCxjPU0ubG9jYXRpb24ucHJvdG9jb2wsKFwiaHR0cHM6XCI9PWF8fGE9PWN8fChcImh0dHA6XCIhPWE/MDpcImh0dHA6XCI9PVxuYykpJiZCKGQpJiYod2EoZC51cmwsdm9pZCAwLGUpLCRkLnNldChiLCEwKSkpfX0sdj1mdW5jdGlvbihhLGIpe3ZhciBjPUEuZ2V0KGEpfHxbXTtjLnB1c2goYik7QS5zZXQoYSxjKX0sQz1mdW5jdGlvbihhLGIpe1lkLnNldChhLGIpO2I9QS5nZXQoYSl8fFtdO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKWJbY10oKTtBLnNldChhLFtdKX0sQj1mdW5jdGlvbihhKXt2YXIgYj1hZShNLmxvY2F0aW9uLmhyZWYpO2lmKEQoYS51cmwsXCJodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9ndG0vanM/aWQ9XCIpKXJldHVybiEwO2lmKGEucXVlcnl8fDA8PWEudXJsLmluZGV4T2YoXCI/XCIpfHwwPD1hLnBhdGguaW5kZXhPZihcIjovL1wiKSlyZXR1cm4hMTtpZihhLmhvc3Q9PWIuaG9zdCYmYS5wb3J0PT1iLnBvcnQpcmV0dXJuITA7Yj1cImh0dHA6XCI9PWEucHJvdG9jb2w/ODA6NDQzO3JldHVyblwid3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tXCI9PWEuaG9zdCYmKGEucG9ydHx8Yik9PWImJlxuRChhLnBhdGgsXCIvcGx1Z2lucy9cIik/ITA6ITF9LGFlPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9KGEuaG9zdG5hbWV8fFwiXCIpLnNwbGl0KFwiOlwiKVswXS50b0xvd2VyQ2FzZSgpLGM9KGEucHJvdG9jb2x8fFwiXCIpLnRvTG93ZXJDYXNlKCksYz0xKmEucG9ydHx8KFwiaHR0cDpcIj09Yz84MDpcImh0dHBzOlwiPT1jPzQ0MzpcIlwiKTthPWEucGF0aG5hbWV8fFwiXCI7RChhLFwiL1wiKXx8KGE9XCIvXCIrYSk7cmV0dXJuW2IsXCJcIitjLGFdfXZhciBjPU0uY3JlYXRlRWxlbWVudChcImFcIik7Yy5ocmVmPU0ubG9jYXRpb24uaHJlZjt2YXIgZD0oYy5wcm90b2NvbHx8XCJcIikudG9Mb3dlckNhc2UoKSxlPWIoYyksZz1jLnNlYXJjaHx8XCJcIixjYT1kK1wiLy9cIitlWzBdKyhlWzFdP1wiOlwiK2VbMV06XCJcIik7RChhLFwiLy9cIik/YT1kK2E6RChhLFwiL1wiKT9hPWNhK2E6IWF8fEQoYSxcIj9cIik/YT1jYStlWzJdKyhhfHxnKTowPmEuc3BsaXQoXCIvXCIpWzBdLmluZGV4T2YoXCI6XCIpJiYoYT1jYStlWzJdLnN1YnN0cmluZygwLFxuZVsyXS5sYXN0SW5kZXhPZihcIi9cIikpK1wiL1wiK2EpO2MuaHJlZj1hO2Q9YihjKTtyZXR1cm57cHJvdG9jb2w6KGMucHJvdG9jb2x8fFwiXCIpLnRvTG93ZXJDYXNlKCksaG9zdDpkWzBdLHBvcnQ6ZFsxXSxwYXRoOmRbMl0scXVlcnk6Yy5zZWFyY2h8fFwiXCIsdXJsOmF8fFwiXCJ9fTt2YXIgWj17Z2E6ZnVuY3Rpb24oKXtaLmY9W119fTtaLmdhKCk7Wi5EPWZ1bmN0aW9uKGEpe3ZhciBiPVouSi5hcHBseShaLGFyZ3VtZW50cyksYj1aLmYuY29uY2F0KGIpO2ZvcihaLmY9W107MDxiLmxlbmd0aCYmIVoudihiWzBdKSYmIShiLnNoaWZ0KCksMDxaLmYubGVuZ3RoKTspO1ouZj1aLmYuY29uY2F0KGIpfTtaLko9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKXRyeXt2YXIgZD1uZXcgc2MoYXJndW1lbnRzW2NdKTtkLmc/QyhkLmFbMF0sZC5hWzFdKTooZC5pJiYoZC5oYT15KGQuYyxkLmFbMF0sZC5YLGQuVykpLGIucHVzaChkKSl9Y2F0Y2goZSl7fXJldHVybiBifTtcbloudj1mdW5jdGlvbihhKXt0cnl7aWYoYS51KWEudS5jYWxsKE8sTi5qKFwidDBcIikpO2Vsc2V7dmFyIGI9YS5jPT1nYj9OOk4uaihhLmMpO2lmKGEuQSlcInQwXCIhPWEuY3x8Ti5jcmVhdGUuYXBwbHkoTixhLmEpO2Vsc2UgaWYoYS5iYSlOLnJlbW92ZShhLmMpO2Vsc2UgaWYoYilpZihhLmkpe2lmKGEuaGEmJihhLmhhPXkoYS5jLGEuYVswXSxhLlgsYS5XKSksIXUoYS5hWzBdLGIsYS5XKSlyZXR1cm4hMH1lbHNlIGlmKGEuSyl7dmFyIGM9YS5DLGQ9YS5hLGU9Yi5wbHVnaW5zXy5nZXQoYS5LKTtlW2NdLmFwcGx5KGUsZCl9ZWxzZSBiW2EuQ10uYXBwbHkoYixhLmEpfX1jYXRjaChnKXt9fTt2YXIgTj1mdW5jdGlvbihhKXtKKDEpO1ouRC5hcHBseShaLFthcmd1bWVudHNdKX07Ti5oPXt9O04uUD1bXTtOLkw9MDtOLmFuc3dlcj00Mjt2YXIgdWM9W05hLFcsVl07Ti5jcmVhdGU9ZnVuY3Rpb24oYSl7dmFyIGI9emEodWMsW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtiW1ZdfHwoYltWXT1cInQwXCIpO3ZhciBjPVwiXCIrYltWXTtpZihOLmhbY10pcmV0dXJuIE4uaFtjXTtiPW5ldyBwYyhiKTtOLmhbY109YjtOLlAucHVzaChiKTtyZXR1cm4gYn07Ti5yZW1vdmU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7YjxOLlAubGVuZ3RoO2IrKylpZihOLlBbYl0uZ2V0KFYpPT1hKXtOLlAuc3BsaWNlKGIsMSk7Ti5oW2FdPW51bGw7YnJlYWt9fTtOLmo9ZnVuY3Rpb24oYSl7cmV0dXJuIE4uaFthXX07Ti5nZXRBbGw9ZnVuY3Rpb24oKXtyZXR1cm4gTi5QLnNsaWNlKDApfTtcbk4uTj1mdW5jdGlvbigpe1wiZ2FcIiE9Z2ImJkooNDkpO3ZhciBhPU9bZ2JdO2lmKCFhfHw0MiE9YS5hbnN3ZXIpe04uTD1hJiZhLmw7Ti5sb2FkZWQ9ITA7dmFyIGI9T1tnYl09TjtYKFwiY3JlYXRlXCIsYixiLmNyZWF0ZSk7WChcInJlbW92ZVwiLGIsYi5yZW1vdmUpO1goXCJnZXRCeU5hbWVcIixiLGIuaiw1KTtYKFwiZ2V0QWxsXCIsYixiLmdldEFsbCw2KTtiPXBjLnByb3RvdHlwZTtYKFwiZ2V0XCIsYixiLmdldCw3KTtYKFwic2V0XCIsYixiLnNldCw0KTtYKFwic2VuZFwiLGIsYi5zZW5kKTtYKFwicmVxdWlyZVN5bmNcIixiLGIubWEpO2I9WWEucHJvdG90eXBlO1goXCJnZXRcIixiLGIuZ2V0KTtYKFwic2V0XCIsYixiLnNldCk7aWYoIVVkKCkmJiFCYSl7YTp7Zm9yKHZhciBiPU0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIiksYz0wO2M8Yi5sZW5ndGgmJjEwMD5jO2MrKyl7dmFyIGQ9YltjXS5zcmM7aWYoZCYmMD09ZC5pbmRleE9mKFwiaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzXCIpKXtKKDMzKTtcbmI9ITA7YnJlYWsgYX19Yj0hMX1iJiYoQmE9ITApfVVkKCl8fEJhfHwhRWQobmV3IE9kKDFFNCkpfHwoSigzNiksQmE9ITApOyhPLmdhcGx1Z2lucz1PLmdhcGx1Z2luc3x8e30pLkxpbmtlcj1EYztiPURjLnByb3RvdHlwZTtDKFwibGlua2VyXCIsRGMpO1goXCJkZWNvcmF0ZVwiLGIsYi5jYSwyMCk7WChcImF1dG9MaW5rXCIsYixiLlMsMjUpO0MoXCJkaXNwbGF5ZmVhdHVyZXNcIixmZCk7QyhcImFkZmVhdHVyZXNcIixmZCk7YT1hJiZhLnE7a2EoYSk/Wi5ELmFwcGx5KE4sYSk6Sig1MCl9fTtOLmRhPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPU4uZ2V0QWxsKCksYj0wO2I8YS5sZW5ndGg7YisrKWFbYl0uZ2V0KFYpfTt2YXIgST1OLk4sZ2E9T1tnYl07Z2EmJmdhLnI/SSgpOnooSSk7eihmdW5jdGlvbigpe1ouRChbXCJwcm92aWRlXCIsXCJyZW5kZXJcIix1YV0pfSk7ZnVuY3Rpb24gTGEoYSl7dmFyIGI9MSxjLGQ7aWYoYSlmb3IoYj0wLGQ9YS5sZW5ndGgtMTswPD1kO2QtLSljPWEuY2hhckNvZGVBdChkKSxiPShiPDw2JjI2ODQzNTQ1NSkrYysoYzw8MTQpLGM9YiYyNjYzMzgzMDQsYj0wIT1jP2JeYz4+MjE6YjtyZXR1cm4gYn07fSkod2luZG93KTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgQWpheE1vbml0b3IsIEJhciwgRG9jdW1lbnRNb25pdG9yLCBFbGVtZW50TW9uaXRvciwgRWxlbWVudFRyYWNrZXIsIEV2ZW50TGFnTW9uaXRvciwgRXZlbnRlZCwgRXZlbnRzLCBOb1RhcmdldEVycm9yLCBQYWNlLCBSZXF1ZXN0SW50ZXJjZXB0LCBTT1VSQ0VfS0VZUywgU2NhbGVyLCBTb2NrZXRSZXF1ZXN0VHJhY2tlciwgWEhSUmVxdWVzdFRyYWNrZXIsIGFuaW1hdGlvbiwgYXZnQW1wbGl0dWRlLCBiYXIsIGNhbmNlbEFuaW1hdGlvbiwgY2FuY2VsQW5pbWF0aW9uRnJhbWUsIGRlZmF1bHRPcHRpb25zLCBleHRlbmQsIGV4dGVuZE5hdGl2ZSwgZ2V0RnJvbURPTSwgZ2V0SW50ZXJjZXB0LCBoYW5kbGVQdXNoU3RhdGUsIGlnbm9yZVN0YWNrLCBpbml0LCBub3csIG9wdGlvbnMsIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgcmVzdWx0LCBydW5BbmltYXRpb24sIHNjYWxlcnMsIHNob3VsZElnbm9yZVVSTCwgc2hvdWxkVHJhY2ssIHNvdXJjZSwgc291cmNlcywgdW5pU2NhbGVyLCBfV2ViU29ja2V0LCBfWERvbWFpblJlcXVlc3QsIF9YTUxIdHRwUmVxdWVzdCwgX2ksIF9pbnRlcmNlcHQsIF9sZW4sIF9wdXNoU3RhdGUsIF9yZWYsIF9yZWYxLCBfcmVwbGFjZVN0YXRlLFxuICAgIF9fc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBfX2luZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjYXRjaHVwVGltZTogMTAwLFxuICAgIGluaXRpYWxSYXRlOiAuMDMsXG4gICAgbWluVGltZTogMjUwLFxuICAgIGdob3N0VGltZTogMTAwLFxuICAgIG1heFByb2dyZXNzUGVyRnJhbWU6IDIwLFxuICAgIGVhc2VGYWN0b3I6IDEuMjUsXG4gICAgc3RhcnRPblBhZ2VMb2FkOiB0cnVlLFxuICAgIHJlc3RhcnRPblB1c2hTdGF0ZTogdHJ1ZSxcbiAgICByZXN0YXJ0T25SZXF1ZXN0QWZ0ZXI6IDUwMCxcbiAgICB0YXJnZXQ6ICdib2R5JyxcbiAgICBlbGVtZW50czoge1xuICAgICAgY2hlY2tJbnRlcnZhbDogMTAwLFxuICAgICAgc2VsZWN0b3JzOiBbJ2JvZHknXVxuICAgIH0sXG4gICAgZXZlbnRMYWc6IHtcbiAgICAgIG1pblNhbXBsZXM6IDEwLFxuICAgICAgc2FtcGxlQ291bnQ6IDMsXG4gICAgICBsYWdUaHJlc2hvbGQ6IDNcbiAgICB9LFxuICAgIGFqYXg6IHtcbiAgICAgIHRyYWNrTWV0aG9kczogWydHRVQnXSxcbiAgICAgIHRyYWNrV2ViU29ja2V0czogdHJ1ZSxcbiAgICAgIGlnbm9yZVVSTHM6IFtdXG4gICAgfVxuICB9O1xuXG4gIG5vdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfcmVmO1xuICAgIHJldHVybiAoX3JlZiA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCA/IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09IFwiZnVuY3Rpb25cIiA/IHBlcmZvcm1hbmNlLm5vdygpIDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsID8gX3JlZiA6ICsobmV3IERhdGUpO1xuICB9O1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgaWYgKHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PSBudWxsKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZuLCA1MCk7XG4gICAgfTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuICB9XG5cbiAgcnVuQW5pbWF0aW9uID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgbGFzdCwgdGljaztcbiAgICBsYXN0ID0gbm93KCk7XG4gICAgdGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRpZmY7XG4gICAgICBkaWZmID0gbm93KCkgLSBsYXN0O1xuICAgICAgaWYgKGRpZmYgPj0gMzMpIHtcbiAgICAgICAgbGFzdCA9IG5vdygpO1xuICAgICAgICByZXR1cm4gZm4oZGlmZiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCh0aWNrLCAzMyAtIGRpZmYpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRpY2soKTtcbiAgfTtcblxuICByZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncywga2V5LCBvYmo7XG4gICAgb2JqID0gYXJndW1lbnRzWzBdLCBrZXkgPSBhcmd1bWVudHNbMV0sIGFyZ3MgPSAzIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IFtdO1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XS5hcHBseShvYmosIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICB9O1xuXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXksIG91dCwgc291cmNlLCBzb3VyY2VzLCB2YWwsIF9pLCBfbGVuO1xuICAgIG91dCA9IGFyZ3VtZW50c1swXSwgc291cmNlcyA9IDIgPD0gYXJndW1lbnRzLmxlbmd0aCA/IF9fc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBzb3VyY2VzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VzW19pXTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKCFfX2hhc1Byb3AuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgIHZhbCA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIGlmICgob3V0W2tleV0gIT0gbnVsbCkgJiYgdHlwZW9mIG91dFtrZXldID09PSAnb2JqZWN0JyAmJiAodmFsICE9IG51bGwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBleHRlbmQob3V0W2tleV0sIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIGF2Z0FtcGxpdHVkZSA9IGZ1bmN0aW9uKGFycikge1xuICAgIHZhciBjb3VudCwgc3VtLCB2LCBfaSwgX2xlbjtcbiAgICBzdW0gPSBjb3VudCA9IDA7XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBhcnIubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIHYgPSBhcnJbX2ldO1xuICAgICAgc3VtICs9IE1hdGguYWJzKHYpO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIHN1bSAvIGNvdW50O1xuICB9O1xuXG4gIGdldEZyb21ET00gPSBmdW5jdGlvbihrZXksIGpzb24pIHtcbiAgICB2YXIgZGF0YSwgZSwgZWw7XG4gICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICBrZXkgPSAnb3B0aW9ucyc7XG4gICAgfVxuICAgIGlmIChqc29uID09IG51bGwpIHtcbiAgICAgIGpzb24gPSB0cnVlO1xuICAgIH1cbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1wYWNlLVwiICsga2V5ICsgXCJdXCIpO1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YSA9IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGFjZS1cIiArIGtleSk7XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgZSA9IF9lcnJvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsID8gY29uc29sZS5lcnJvcihcIkVycm9yIHBhcnNpbmcgaW5saW5lIHBhY2Ugb3B0aW9uc1wiLCBlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG5cbiAgRXZlbnRlZCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBFdmVudGVkKCkge31cblxuICAgIEV2ZW50ZWQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIsIGN0eCwgb25jZSkge1xuICAgICAgdmFyIF9iYXNlO1xuICAgICAgaWYgKG9uY2UgPT0gbnVsbCkge1xuICAgICAgICBvbmNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5iaW5kaW5ncyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICgoX2Jhc2UgPSB0aGlzLmJpbmRpbmdzKVtldmVudF0gPT0gbnVsbCkge1xuICAgICAgICBfYmFzZVtldmVudF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgY3R4OiBjdHgsXG4gICAgICAgIG9uY2U6IG9uY2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBFdmVudGVkLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIsIGN0eCkge1xuICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnQsIGhhbmRsZXIsIGN0eCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIEV2ZW50ZWQucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICB2YXIgaSwgX3JlZiwgX3Jlc3VsdHM7XG4gICAgICBpZiAoKChfcmVmID0gdGhpcy5iaW5kaW5ncykgIT0gbnVsbCA/IF9yZWZbZXZlbnRdIDogdm9pZCAwKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLmJpbmRpbmdzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdzW2V2ZW50XVtpXS5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuYmluZGluZ3NbZXZlbnRdLnNwbGljZShpLCAxKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goaSsrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFdmVudGVkLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncywgY3R4LCBldmVudCwgaGFuZGxlciwgaSwgb25jZSwgX3JlZiwgX3JlZjEsIF9yZXN1bHRzO1xuICAgICAgZXZlbnQgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgICAgaWYgKChfcmVmID0gdGhpcy5iaW5kaW5ncykgIT0gbnVsbCA/IF9yZWZbZXZlbnRdIDogdm9pZCAwKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIF9yZWYxID0gdGhpcy5iaW5kaW5nc1tldmVudF1baV0sIGhhbmRsZXIgPSBfcmVmMS5oYW5kbGVyLCBjdHggPSBfcmVmMS5jdHgsIG9uY2UgPSBfcmVmMS5vbmNlO1xuICAgICAgICAgIGhhbmRsZXIuYXBwbHkoY3R4ICE9IG51bGwgPyBjdHggOiB0aGlzLCBhcmdzKTtcbiAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKGkrKyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEV2ZW50ZWQ7XG5cbiAgfSkoKTtcblxuICBQYWNlID0gd2luZG93LlBhY2UgfHwge307XG5cbiAgd2luZG93LlBhY2UgPSBQYWNlO1xuXG4gIGV4dGVuZChQYWNlLCBFdmVudGVkLnByb3RvdHlwZSk7XG5cbiAgb3B0aW9ucyA9IFBhY2Uub3B0aW9ucyA9IGV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIHdpbmRvdy5wYWNlT3B0aW9ucywgZ2V0RnJvbURPTSgpKTtcblxuICBfcmVmID0gWydhamF4JywgJ2RvY3VtZW50JywgJ2V2ZW50TGFnJywgJ2VsZW1lbnRzJ107XG4gIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgIHNvdXJjZSA9IF9yZWZbX2ldO1xuICAgIGlmIChvcHRpb25zW3NvdXJjZV0gPT09IHRydWUpIHtcbiAgICAgIG9wdGlvbnNbc291cmNlXSA9IGRlZmF1bHRPcHRpb25zW3NvdXJjZV07XG4gICAgfVxuICB9XG5cbiAgTm9UYXJnZXRFcnJvciA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTm9UYXJnZXRFcnJvciwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIE5vVGFyZ2V0RXJyb3IoKSB7XG4gICAgICBfcmVmMSA9IE5vVGFyZ2V0RXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gX3JlZjE7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vVGFyZ2V0RXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIEJhciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICB9XG5cbiAgICBCYXIucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0YXJnZXRFbGVtZW50O1xuICAgICAgaWYgKHRoaXMuZWwgPT0gbnVsbCkge1xuICAgICAgICB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgIGlmICghdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBOb1RhcmdldEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5lbC5jbGFzc05hbWUgPSBcInBhY2UgcGFjZS1hY3RpdmVcIjtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKC9wYWNlLWRvbmUvZywgJycpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArPSAnIHBhY2UtcnVubmluZyc7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJwYWNlLXByb2dyZXNzXCI+XFxuICA8ZGl2IGNsYXNzPVwicGFjZS1wcm9ncmVzcy1pbm5lclwiPjwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XCJwYWNlLWFjdGl2aXR5XCI+PC9kaXY+JztcbiAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQuZmlyc3RDaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgdGFyZ2V0RWxlbWVudC5pbnNlcnRCZWZvcmUodGhpcy5lbCwgdGFyZ2V0RWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5lbDtcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbDtcbiAgICAgIGVsID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZSgncGFjZS1hY3RpdmUnLCAnJyk7XG4gICAgICBlbC5jbGFzc05hbWUgKz0gJyBwYWNlLWluYWN0aXZlJztcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUucmVwbGFjZSgncGFjZS1ydW5uaW5nJywgJycpO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICs9ICcgcGFjZS1kb25lJztcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihwcm9nKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gcHJvZztcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICAgIH07XG5cbiAgICBCYXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5nZXRFbGVtZW50KCkpO1xuICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgIE5vVGFyZ2V0RXJyb3IgPSBfZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5lbCA9IHZvaWQgMDtcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbCwga2V5LCBwcm9ncmVzc1N0ciwgdHJhbnNmb3JtLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy50YXJnZXQpID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZWwgPSB0aGlzLmdldEVsZW1lbnQoKTtcbiAgICAgIHRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyB0aGlzLnByb2dyZXNzICsgXCIlLCAwLCAwKVwiO1xuICAgICAgX3JlZjIgPSBbJ3dlYmtpdFRyYW5zZm9ybScsICdtc1RyYW5zZm9ybScsICd0cmFuc2Zvcm0nXTtcbiAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICBrZXkgPSBfcmVmMltfal07XG4gICAgICAgIGVsLmNoaWxkcmVuWzBdLnN0eWxlW2tleV0gPSB0cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMubGFzdFJlbmRlcmVkUHJvZ3Jlc3MgfHwgdGhpcy5sYXN0UmVuZGVyZWRQcm9ncmVzcyB8IDAgIT09IHRoaXMucHJvZ3Jlc3MgfCAwKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9ncmVzcy10ZXh0JywgXCJcIiArICh0aGlzLnByb2dyZXNzIHwgMCkgKyBcIiVcIik7XG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzID49IDEwMCkge1xuICAgICAgICAgIHByb2dyZXNzU3RyID0gJzk5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9ncmVzc1N0ciA9IHRoaXMucHJvZ3Jlc3MgPCAxMCA/IFwiMFwiIDogXCJcIjtcbiAgICAgICAgICBwcm9ncmVzc1N0ciArPSB0aGlzLnByb2dyZXNzIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBlbC5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3MnLCBcIlwiICsgcHJvZ3Jlc3NTdHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubGFzdFJlbmRlcmVkUHJvZ3Jlc3MgPSB0aGlzLnByb2dyZXNzO1xuICAgIH07XG5cbiAgICBCYXIucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzID49IDEwMDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhcjtcblxuICB9KSgpO1xuXG4gIEV2ZW50cyA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBFdmVudHMoKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzID0ge307XG4gICAgfVxuXG4gICAgRXZlbnRzLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gICAgICB2YXIgYmluZGluZywgX2osIF9sZW4xLCBfcmVmMiwgX3Jlc3VsdHM7XG4gICAgICBpZiAodGhpcy5iaW5kaW5nc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIF9yZWYyID0gdGhpcy5iaW5kaW5nc1tuYW1lXTtcbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgICAgYmluZGluZyA9IF9yZWYyW19qXTtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKGJpbmRpbmcuY2FsbCh0aGlzLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEV2ZW50cy5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgICAgdmFyIF9iYXNlO1xuICAgICAgaWYgKChfYmFzZSA9IHRoaXMuYmluZGluZ3MpW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgX2Jhc2VbbmFtZV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzW25hbWVdLnB1c2goZm4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gRXZlbnRzO1xuXG4gIH0pKCk7XG5cbiAgX1hNTEh0dHBSZXF1ZXN0ID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0O1xuXG4gIF9YRG9tYWluUmVxdWVzdCA9IHdpbmRvdy5YRG9tYWluUmVxdWVzdDtcblxuICBfV2ViU29ja2V0ID0gd2luZG93LldlYlNvY2tldDtcblxuICBleHRlbmROYXRpdmUgPSBmdW5jdGlvbih0bywgZnJvbSkge1xuICAgIHZhciBlLCBrZXksIF9yZXN1bHRzO1xuICAgIF9yZXN1bHRzID0gW107XG4gICAgZm9yIChrZXkgaW4gZnJvbS5wcm90b3R5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICgodG9ba2V5XSA9PSBudWxsKSAmJiB0eXBlb2YgZnJvbVtrZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCBrZXksIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbS5wcm90b3R5cGVba2V5XTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godG9ba2V5XSA9IGZyb20ucHJvdG90eXBlW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgICBlID0gX2Vycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3Jlc3VsdHM7XG4gIH07XG5cbiAgaWdub3JlU3RhY2sgPSBbXTtcblxuICBQYWNlLmlnbm9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzLCBmbiwgcmV0O1xuICAgIGZuID0gYXJndW1lbnRzWzBdLCBhcmdzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICBpZ25vcmVTdGFjay51bnNoaWZ0KCdpZ25vcmUnKTtcbiAgICByZXQgPSBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICBpZ25vcmVTdGFjay5zaGlmdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgUGFjZS50cmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzLCBmbiwgcmV0O1xuICAgIGZuID0gYXJndW1lbnRzWzBdLCBhcmdzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICBpZ25vcmVTdGFjay51bnNoaWZ0KCd0cmFjaycpO1xuICAgIHJldCA9IGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIGlnbm9yZVN0YWNrLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBzaG91bGRUcmFjayA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBfcmVmMjtcbiAgICBpZiAobWV0aG9kID09IG51bGwpIHtcbiAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgIH1cbiAgICBpZiAoaWdub3JlU3RhY2tbMF0gPT09ICd0cmFjaycpIHtcbiAgICAgIHJldHVybiAnZm9yY2UnO1xuICAgIH1cbiAgICBpZiAoIWlnbm9yZVN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLmFqYXgpIHtcbiAgICAgIGlmIChtZXRob2QgPT09ICdzb2NrZXQnICYmIG9wdGlvbnMuYWpheC50cmFja1dlYlNvY2tldHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKF9yZWYyID0gbWV0aG9kLnRvVXBwZXJDYXNlKCksIF9faW5kZXhPZi5jYWxsKG9wdGlvbnMuYWpheC50cmFja01ldGhvZHMsIF9yZWYyKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUmVxdWVzdEludGVyY2VwdCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVxdWVzdEludGVyY2VwdCwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIFJlcXVlc3RJbnRlcmNlcHQoKSB7XG4gICAgICB2YXIgbW9uaXRvclhIUixcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgUmVxdWVzdEludGVyY2VwdC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIG1vbml0b3JYSFIgPSBmdW5jdGlvbihyZXEpIHtcbiAgICAgICAgdmFyIF9vcGVuO1xuICAgICAgICBfb3BlbiA9IHJlcS5vcGVuO1xuICAgICAgICByZXR1cm4gcmVxLm9wZW4gPSBmdW5jdGlvbih0eXBlLCB1cmwsIGFzeW5jKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFRyYWNrKHR5cGUpKSB7XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdyZXF1ZXN0Jywge1xuICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgcmVxdWVzdDogcmVxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9vcGVuLmFwcGx5KHJlcSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbihmbGFncykge1xuICAgICAgICB2YXIgcmVxO1xuICAgICAgICByZXEgPSBuZXcgX1hNTEh0dHBSZXF1ZXN0KGZsYWdzKTtcbiAgICAgICAgbW9uaXRvclhIUihyZXEpO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV4dGVuZE5hdGl2ZSh3aW5kb3cuWE1MSHR0cFJlcXVlc3QsIF9YTUxIdHRwUmVxdWVzdCk7XG4gICAgICB9IGNhdGNoIChfZXJyb3IpIHt9XG4gICAgICBpZiAoX1hEb21haW5SZXF1ZXN0ICE9IG51bGwpIHtcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJlcTtcbiAgICAgICAgICByZXEgPSBuZXcgX1hEb21haW5SZXF1ZXN0O1xuICAgICAgICAgIG1vbml0b3JYSFIocmVxKTtcbiAgICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGV4dGVuZE5hdGl2ZSh3aW5kb3cuWERvbWFpblJlcXVlc3QsIF9YRG9tYWluUmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKF9lcnJvcikge31cbiAgICAgIH1cbiAgICAgIGlmICgoX1dlYlNvY2tldCAhPSBudWxsKSAmJiBvcHRpb25zLmFqYXgudHJhY2tXZWJTb2NrZXRzKSB7XG4gICAgICAgIHdpbmRvdy5XZWJTb2NrZXQgPSBmdW5jdGlvbih1cmwsIHByb3RvY29scykge1xuICAgICAgICAgIHZhciByZXE7XG4gICAgICAgICAgaWYgKHByb3RvY29scyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXEgPSBuZXcgX1dlYlNvY2tldCh1cmwsIHByb3RvY29scyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcSA9IG5ldyBfV2ViU29ja2V0KHVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRUcmFjaygnc29ja2V0JykpIHtcbiAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3JlcXVlc3QnLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzb2NrZXQnLFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgcHJvdG9jb2xzOiBwcm90b2NvbHMsXG4gICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXE7XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXh0ZW5kTmF0aXZlKHdpbmRvdy5XZWJTb2NrZXQsIF9XZWJTb2NrZXQpO1xuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHt9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlcXVlc3RJbnRlcmNlcHQ7XG5cbiAgfSkoRXZlbnRzKTtcblxuICBfaW50ZXJjZXB0ID0gbnVsbDtcblxuICBnZXRJbnRlcmNlcHQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2ludGVyY2VwdCA9PSBudWxsKSB7XG4gICAgICBfaW50ZXJjZXB0ID0gbmV3IFJlcXVlc3RJbnRlcmNlcHQ7XG4gICAgfVxuICAgIHJldHVybiBfaW50ZXJjZXB0O1xuICB9O1xuXG4gIHNob3VsZElnbm9yZVVSTCA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciBwYXR0ZXJuLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgIF9yZWYyID0gb3B0aW9ucy5hamF4Lmlnbm9yZVVSTHM7XG4gICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICBwYXR0ZXJuID0gX3JlZjJbX2pdO1xuICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodXJsLmluZGV4T2YocGF0dGVybikgIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3QodXJsKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBnZXRJbnRlcmNlcHQoKS5vbigncmVxdWVzdCcsIGZ1bmN0aW9uKF9hcmcpIHtcbiAgICB2YXIgYWZ0ZXIsIGFyZ3MsIHJlcXVlc3QsIHR5cGUsIHVybDtcbiAgICB0eXBlID0gX2FyZy50eXBlLCByZXF1ZXN0ID0gX2FyZy5yZXF1ZXN0LCB1cmwgPSBfYXJnLnVybDtcbiAgICBpZiAoc2hvdWxkSWdub3JlVVJMKHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFQYWNlLnJ1bm5pbmcgJiYgKG9wdGlvbnMucmVzdGFydE9uUmVxdWVzdEFmdGVyICE9PSBmYWxzZSB8fCBzaG91bGRUcmFjayh0eXBlKSA9PT0gJ2ZvcmNlJykpIHtcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBhZnRlciA9IG9wdGlvbnMucmVzdGFydE9uUmVxdWVzdEFmdGVyIHx8IDA7XG4gICAgICBpZiAodHlwZW9mIGFmdGVyID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgYWZ0ZXIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGlsbEFjdGl2ZSwgX2osIF9sZW4xLCBfcmVmMiwgX3JlZjMsIF9yZXN1bHRzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NvY2tldCcpIHtcbiAgICAgICAgICBzdGlsbEFjdGl2ZSA9IHJlcXVlc3QucmVhZHlTdGF0ZSA8IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RpbGxBY3RpdmUgPSAoMCA8IChfcmVmMiA9IHJlcXVlc3QucmVhZHlTdGF0ZSkgJiYgX3JlZjIgPCA0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RpbGxBY3RpdmUpIHtcbiAgICAgICAgICBQYWNlLnJlc3RhcnQoKTtcbiAgICAgICAgICBfcmVmMyA9IFBhY2Uuc291cmNlcztcbiAgICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYzLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgICAgc291cmNlID0gX3JlZjNbX2pdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFqYXhNb25pdG9yKSB7XG4gICAgICAgICAgICAgIHNvdXJjZS53YXRjaC5hcHBseShzb3VyY2UsIGFyZ3MpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgICB9XG4gICAgICB9LCBhZnRlcik7XG4gICAgfVxuICB9KTtcblxuICBBamF4TW9uaXRvciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBBamF4TW9uaXRvcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgICBnZXRJbnRlcmNlcHQoKS5vbigncmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMud2F0Y2guYXBwbHkoX3RoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBBamF4TW9uaXRvci5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbihfYXJnKSB7XG4gICAgICB2YXIgcmVxdWVzdCwgdHJhY2tlciwgdHlwZSwgdXJsO1xuICAgICAgdHlwZSA9IF9hcmcudHlwZSwgcmVxdWVzdCA9IF9hcmcucmVxdWVzdCwgdXJsID0gX2FyZy51cmw7XG4gICAgICBpZiAoc2hvdWxkSWdub3JlVVJMKHVybCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICdzb2NrZXQnKSB7XG4gICAgICAgIHRyYWNrZXIgPSBuZXcgU29ja2V0UmVxdWVzdFRyYWNrZXIocmVxdWVzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja2VyID0gbmV3IFhIUlJlcXVlc3RUcmFja2VyKHJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucHVzaCh0cmFja2VyKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFqYXhNb25pdG9yO1xuXG4gIH0pKCk7XG5cbiAgWEhSUmVxdWVzdFRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWEhSUmVxdWVzdFRyYWNrZXIocmVxdWVzdCkge1xuICAgICAgdmFyIGV2ZW50LCBzaXplLCBfaiwgX2xlbjEsIF9vbnJlYWR5c3RhdGVjaGFuZ2UsIF9yZWYyLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIGlmICh3aW5kb3cuUHJvZ3Jlc3NFdmVudCAhPSBudWxsKSB7XG4gICAgICAgIHNpemUgPSBudWxsO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgaWYgKGV2dC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSAxMDAgKiBldnQubG9hZGVkIC8gZXZ0LnRvdGFsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSBfdGhpcy5wcm9ncmVzcyArICgxMDAgLSBfdGhpcy5wcm9ncmVzcykgLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBfcmVmMiA9IFsnbG9hZCcsICdhYm9ydCcsICd0aW1lb3V0JywgJ2Vycm9yJ107XG4gICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgIGV2ZW50ID0gX3JlZjJbX2pdO1xuICAgICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSAxMDA7XG4gICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfb25yZWFkeXN0YXRlY2hhbmdlID0gcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2U7XG4gICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIF9yZWYzO1xuICAgICAgICAgIGlmICgoX3JlZjMgPSByZXF1ZXN0LnJlYWR5U3RhdGUpID09PSAwIHx8IF9yZWYzID09PSA0KSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gMykge1xuICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3MgPSA1MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBfb25yZWFkeXN0YXRlY2hhbmdlID09PSBcImZ1bmN0aW9uXCIgPyBfb25yZWFkeXN0YXRlY2hhbmdlLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFhIUlJlcXVlc3RUcmFja2VyO1xuXG4gIH0pKCk7XG5cbiAgU29ja2V0UmVxdWVzdFRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gU29ja2V0UmVxdWVzdFRyYWNrZXIocmVxdWVzdCkge1xuICAgICAgdmFyIGV2ZW50LCBfaiwgX2xlbjEsIF9yZWYyLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIF9yZWYyID0gWydlcnJvcicsICdvcGVuJ107XG4gICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMi5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgZXZlbnQgPSBfcmVmMltfal07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnByb2dyZXNzID0gMTAwO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFNvY2tldFJlcXVlc3RUcmFja2VyO1xuXG4gIH0pKCk7XG5cbiAgRWxlbWVudE1vbml0b3IgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudE1vbml0b3Iob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGVjdG9yLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgICBpZiAob3B0aW9ucy5zZWxlY3RvcnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdG9ycyA9IFtdO1xuICAgICAgfVxuICAgICAgX3JlZjIgPSBvcHRpb25zLnNlbGVjdG9ycztcbiAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICBzZWxlY3RvciA9IF9yZWYyW19qXTtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5wdXNoKG5ldyBFbGVtZW50VHJhY2tlcihzZWxlY3RvcikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBFbGVtZW50TW9uaXRvcjtcblxuICB9KSgpO1xuXG4gIEVsZW1lbnRUcmFja2VyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRUcmFja2VyKHNlbGVjdG9yKSB7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIHRoaXMuY2hlY2soKTtcbiAgICB9XG5cbiAgICBFbGVtZW50VHJhY2tlci5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb25lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmNoZWNrKCk7XG4gICAgICAgIH0pLCBvcHRpb25zLmVsZW1lbnRzLmNoZWNrSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFbGVtZW50VHJhY2tlci5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3MgPSAxMDA7XG4gICAgfTtcblxuICAgIHJldHVybiBFbGVtZW50VHJhY2tlcjtcblxuICB9KSgpO1xuXG4gIERvY3VtZW50TW9uaXRvciA9IChmdW5jdGlvbigpIHtcbiAgICBEb2N1bWVudE1vbml0b3IucHJvdG90eXBlLnN0YXRlcyA9IHtcbiAgICAgIGxvYWRpbmc6IDAsXG4gICAgICBpbnRlcmFjdGl2ZTogNTAsXG4gICAgICBjb21wbGV0ZTogMTAwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIERvY3VtZW50TW9uaXRvcigpIHtcbiAgICAgIHZhciBfb25yZWFkeXN0YXRlY2hhbmdlLCBfcmVmMixcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IChfcmVmMiA9IHRoaXMuc3RhdGVzW2RvY3VtZW50LnJlYWR5U3RhdGVdKSAhPSBudWxsID8gX3JlZjIgOiAxMDA7XG4gICAgICBfb25yZWFkeXN0YXRlY2hhbmdlID0gZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlO1xuICAgICAgZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZXNbZG9jdW1lbnQucmVhZHlTdGF0ZV0gIT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLnByb2dyZXNzID0gX3RoaXMuc3RhdGVzW2RvY3VtZW50LnJlYWR5U3RhdGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2YgX29ucmVhZHlzdGF0ZWNoYW5nZSA9PT0gXCJmdW5jdGlvblwiID8gX29ucmVhZHlzdGF0ZWNoYW5nZS5hcHBseShudWxsLCBhcmd1bWVudHMpIDogdm9pZCAwO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gRG9jdW1lbnRNb25pdG9yO1xuXG4gIH0pKCk7XG5cbiAgRXZlbnRMYWdNb25pdG9yID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50TGFnTW9uaXRvcigpIHtcbiAgICAgIHZhciBhdmcsIGludGVydmFsLCBsYXN0LCBwb2ludHMsIHNhbXBsZXMsXG4gICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgICAgYXZnID0gMDtcbiAgICAgIHNhbXBsZXMgPSBbXTtcbiAgICAgIHBvaW50cyA9IDA7XG4gICAgICBsYXN0ID0gbm93KCk7XG4gICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlmZjtcbiAgICAgICAgZGlmZiA9IG5vdygpIC0gbGFzdCAtIDUwO1xuICAgICAgICBsYXN0ID0gbm93KCk7XG4gICAgICAgIHNhbXBsZXMucHVzaChkaWZmKTtcbiAgICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID4gb3B0aW9ucy5ldmVudExhZy5zYW1wbGVDb3VudCkge1xuICAgICAgICAgIHNhbXBsZXMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBhdmcgPSBhdmdBbXBsaXR1ZGUoc2FtcGxlcyk7XG4gICAgICAgIGlmICgrK3BvaW50cyA+PSBvcHRpb25zLmV2ZW50TGFnLm1pblNhbXBsZXMgJiYgYXZnIDwgb3B0aW9ucy5ldmVudExhZy5sYWdUaHJlc2hvbGQpIHtcbiAgICAgICAgICBfdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnByb2dyZXNzID0gMTAwICogKDMgLyAoYXZnICsgMykpO1xuICAgICAgICB9XG4gICAgICB9LCA1MCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEV2ZW50TGFnTW9uaXRvcjtcblxuICB9KSgpO1xuXG4gIFNjYWxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBTY2FsZXIoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRoaXMubGFzdCA9IHRoaXMuc2luY2VMYXN0VXBkYXRlID0gMDtcbiAgICAgIHRoaXMucmF0ZSA9IG9wdGlvbnMuaW5pdGlhbFJhdGU7XG4gICAgICB0aGlzLmNhdGNodXAgPSAwO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMubGFzdFByb2dyZXNzID0gMDtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSByZXN1bHQodGhpcy5zb3VyY2UsICdwcm9ncmVzcycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNjYWxlci5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKGZyYW1lVGltZSwgdmFsKSB7XG4gICAgICB2YXIgc2NhbGluZztcbiAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICB2YWwgPSByZXN1bHQodGhpcy5zb3VyY2UsICdwcm9ncmVzcycpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA+PSAxMDApIHtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IHRoaXMubGFzdCkge1xuICAgICAgICB0aGlzLnNpbmNlTGFzdFVwZGF0ZSArPSBmcmFtZVRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5zaW5jZUxhc3RVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLnJhdGUgPSAodmFsIC0gdGhpcy5sYXN0KSAvIHRoaXMuc2luY2VMYXN0VXBkYXRlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2F0Y2h1cCA9ICh2YWwgLSB0aGlzLnByb2dyZXNzKSAvIG9wdGlvbnMuY2F0Y2h1cFRpbWU7XG4gICAgICAgIHRoaXMuc2luY2VMYXN0VXBkYXRlID0gMDtcbiAgICAgICAgdGhpcy5sYXN0ID0gdmFsO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA+IHRoaXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyArPSB0aGlzLmNhdGNodXAgKiBmcmFtZVRpbWU7XG4gICAgICB9XG4gICAgICBzY2FsaW5nID0gMSAtIE1hdGgucG93KHRoaXMucHJvZ3Jlc3MgLyAxMDAsIG9wdGlvbnMuZWFzZUZhY3Rvcik7XG4gICAgICB0aGlzLnByb2dyZXNzICs9IHNjYWxpbmcgKiB0aGlzLnJhdGUgKiBmcmFtZVRpbWU7XG4gICAgICB0aGlzLnByb2dyZXNzID0gTWF0aC5taW4odGhpcy5sYXN0UHJvZ3Jlc3MgKyBvcHRpb25zLm1heFByb2dyZXNzUGVyRnJhbWUsIHRoaXMucHJvZ3Jlc3MpO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IE1hdGgubWF4KDAsIHRoaXMucHJvZ3Jlc3MpO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IE1hdGgubWluKDEwMCwgdGhpcy5wcm9ncmVzcyk7XG4gICAgICB0aGlzLmxhc3RQcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3M7XG4gICAgICByZXR1cm4gdGhpcy5wcm9ncmVzcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNjYWxlcjtcblxuICB9KSgpO1xuXG4gIHNvdXJjZXMgPSBudWxsO1xuXG4gIHNjYWxlcnMgPSBudWxsO1xuXG4gIGJhciA9IG51bGw7XG5cbiAgdW5pU2NhbGVyID0gbnVsbDtcblxuICBhbmltYXRpb24gPSBudWxsO1xuXG4gIGNhbmNlbEFuaW1hdGlvbiA9IG51bGw7XG5cbiAgUGFjZS5ydW5uaW5nID0gZmFsc2U7XG5cbiAgaGFuZGxlUHVzaFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG9wdGlvbnMucmVzdGFydE9uUHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gUGFjZS5yZXN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgIT0gbnVsbCkge1xuICAgIF9wdXNoU3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGU7XG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVQdXNoU3RhdGUoKTtcbiAgICAgIHJldHVybiBfcHVzaFN0YXRlLmFwcGx5KHdpbmRvdy5oaXN0b3J5LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAod2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlICE9IG51bGwpIHtcbiAgICBfcmVwbGFjZVN0YXRlID0gd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlUHVzaFN0YXRlKCk7XG4gICAgICByZXR1cm4gX3JlcGxhY2VTdGF0ZS5hcHBseSh3aW5kb3cuaGlzdG9yeSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgU09VUkNFX0tFWVMgPSB7XG4gICAgYWpheDogQWpheE1vbml0b3IsXG4gICAgZWxlbWVudHM6IEVsZW1lbnRNb25pdG9yLFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE1vbml0b3IsXG4gICAgZXZlbnRMYWc6IEV2ZW50TGFnTW9uaXRvclxuICB9O1xuXG4gIChpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUsIF9qLCBfaywgX2xlbjEsIF9sZW4yLCBfcmVmMiwgX3JlZjMsIF9yZWY0O1xuICAgIFBhY2Uuc291cmNlcyA9IHNvdXJjZXMgPSBbXTtcbiAgICBfcmVmMiA9IFsnYWpheCcsICdlbGVtZW50cycsICdkb2N1bWVudCcsICdldmVudExhZyddO1xuICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgdHlwZSA9IF9yZWYyW19qXTtcbiAgICAgIGlmIChvcHRpb25zW3R5cGVdICE9PSBmYWxzZSkge1xuICAgICAgICBzb3VyY2VzLnB1c2gobmV3IFNPVVJDRV9LRVlTW3R5cGVdKG9wdGlvbnNbdHlwZV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgX3JlZjQgPSAoX3JlZjMgPSBvcHRpb25zLmV4dHJhU291cmNlcykgIT0gbnVsbCA/IF9yZWYzIDogW107XG4gICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjQubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7XG4gICAgICBzb3VyY2UgPSBfcmVmNFtfa107XG4gICAgICBzb3VyY2VzLnB1c2gobmV3IHNvdXJjZShvcHRpb25zKSk7XG4gICAgfVxuICAgIFBhY2UuYmFyID0gYmFyID0gbmV3IEJhcjtcbiAgICBzY2FsZXJzID0gW107XG4gICAgcmV0dXJuIHVuaVNjYWxlciA9IG5ldyBTY2FsZXI7XG4gIH0pKCk7XG5cbiAgUGFjZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgUGFjZS50cmlnZ2VyKCdzdG9wJyk7XG4gICAgUGFjZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgYmFyLmRlc3Ryb3koKTtcbiAgICBjYW5jZWxBbmltYXRpb24gPSB0cnVlO1xuICAgIGlmIChhbmltYXRpb24gIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgICBhbmltYXRpb24gPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdCgpO1xuICB9O1xuXG4gIFBhY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIFBhY2UudHJpZ2dlcigncmVzdGFydCcpO1xuICAgIFBhY2Uuc3RvcCgpO1xuICAgIHJldHVybiBQYWNlLnN0YXJ0KCk7XG4gIH07XG5cbiAgUGFjZS5nbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydDtcbiAgICBQYWNlLnJ1bm5pbmcgPSB0cnVlO1xuICAgIGJhci5yZW5kZXIoKTtcbiAgICBzdGFydCA9IG5vdygpO1xuICAgIGNhbmNlbEFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIHJldHVybiBhbmltYXRpb24gPSBydW5BbmltYXRpb24oZnVuY3Rpb24oZnJhbWVUaW1lLCBlbnF1ZXVlTmV4dEZyYW1lKSB7XG4gICAgICB2YXIgYXZnLCBjb3VudCwgZG9uZSwgZWxlbWVudCwgZWxlbWVudHMsIGksIGosIHJlbWFpbmluZywgc2NhbGVyLCBzY2FsZXJMaXN0LCBzdW0sIF9qLCBfaywgX2xlbjEsIF9sZW4yLCBfcmVmMjtcbiAgICAgIHJlbWFpbmluZyA9IDEwMCAtIGJhci5wcm9ncmVzcztcbiAgICAgIGNvdW50ID0gc3VtID0gMDtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChpID0gX2ogPSAwLCBfbGVuMSA9IHNvdXJjZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBpID0gKytfaikge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBzY2FsZXJMaXN0ID0gc2NhbGVyc1tpXSAhPSBudWxsID8gc2NhbGVyc1tpXSA6IHNjYWxlcnNbaV0gPSBbXTtcbiAgICAgICAgZWxlbWVudHMgPSAoX3JlZjIgPSBzb3VyY2UuZWxlbWVudHMpICE9IG51bGwgPyBfcmVmMiA6IFtzb3VyY2VdO1xuICAgICAgICBmb3IgKGogPSBfayA9IDAsIF9sZW4yID0gZWxlbWVudHMubGVuZ3RoOyBfayA8IF9sZW4yOyBqID0gKytfaykge1xuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50c1tqXTtcbiAgICAgICAgICBzY2FsZXIgPSBzY2FsZXJMaXN0W2pdICE9IG51bGwgPyBzY2FsZXJMaXN0W2pdIDogc2NhbGVyTGlzdFtqXSA9IG5ldyBTY2FsZXIoZWxlbWVudCk7XG4gICAgICAgICAgZG9uZSAmPSBzY2FsZXIuZG9uZTtcbiAgICAgICAgICBpZiAoc2NhbGVyLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIHN1bSArPSBzY2FsZXIudGljayhmcmFtZVRpbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhdmcgPSBzdW0gLyBjb3VudDtcbiAgICAgIGJhci51cGRhdGUodW5pU2NhbGVyLnRpY2soZnJhbWVUaW1lLCBhdmcpKTtcbiAgICAgIGlmIChiYXIuZG9uZSgpIHx8IGRvbmUgfHwgY2FuY2VsQW5pbWF0aW9uKSB7XG4gICAgICAgIGJhci51cGRhdGUoMTAwKTtcbiAgICAgICAgUGFjZS50cmlnZ2VyKCdkb25lJyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGJhci5maW5pc2goKTtcbiAgICAgICAgICBQYWNlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gUGFjZS50cmlnZ2VyKCdoaWRlJyk7XG4gICAgICAgIH0sIE1hdGgubWF4KG9wdGlvbnMuZ2hvc3RUaW1lLCBNYXRoLm1heChvcHRpb25zLm1pblRpbWUgLSAobm93KCkgLSBzdGFydCksIDApKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5xdWV1ZU5leHRGcmFtZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFBhY2Uuc3RhcnQgPSBmdW5jdGlvbihfb3B0aW9ucykge1xuICAgIGV4dGVuZChvcHRpb25zLCBfb3B0aW9ucyk7XG4gICAgUGFjZS5ydW5uaW5nID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgYmFyLnJlbmRlcigpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgTm9UYXJnZXRFcnJvciA9IF9lcnJvcjtcbiAgICB9XG4gICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFjZScpKSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dChQYWNlLnN0YXJ0LCA1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFBhY2UudHJpZ2dlcignc3RhcnQnKTtcbiAgICAgIHJldHVybiBQYWNlLmdvKCk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydwYWNlJ10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhY2U7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBQYWNlO1xuICB9IGVsc2Uge1xuICAgIGlmIChvcHRpb25zLnN0YXJ0T25QYWdlTG9hZCkge1xuICAgICAgUGFjZS5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vKiFcbiAqIFBhY2tlcnkgUEFDS0FHRUQgdjIuMS4xXG4gKiBHYXBsZXNzLCBkcmFnZ2FibGUgZ3JpZCBsYXlvdXRzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgUGFja2VyeSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cDovL3BhY2tlcnkubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNiBNZXRhZml6enlcbiAqL1xuXG4hZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwianF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LWJyaWRnZXRcIixbXCJqcXVlcnlcIl0sZnVuY3Rpb24oaSl7ZSh0LGkpfSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZSh0LHJlcXVpcmUoXCJqcXVlcnlcIikpOnQualF1ZXJ5QnJpZGdldD1lKHQsdC5qUXVlcnkpfSh3aW5kb3csZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKGkscyxhKXtmdW5jdGlvbiBoKHQsZSxuKXt2YXIgbyxzPVwiJCgpLlwiK2krJyhcIicrZSsnXCIpJztyZXR1cm4gdC5lYWNoKGZ1bmN0aW9uKHQsaCl7dmFyIHU9YS5kYXRhKGgsaSk7aWYoIXUpcmV0dXJuIHZvaWQgcihpK1wiIG5vdCBpbml0aWFsaXplZC4gQ2Fubm90IGNhbGwgbWV0aG9kcywgaS5lLiBcIitzKTt2YXIgYz11W2VdO2lmKCFjfHxcIl9cIj09ZS5jaGFyQXQoMCkpcmV0dXJuIHZvaWQgcihzK1wiIGlzIG5vdCBhIHZhbGlkIG1ldGhvZFwiKTt2YXIgZD1jLmFwcGx5KHUsbik7bz12b2lkIDA9PT1vP2Q6b30pLHZvaWQgMCE9PW8/bzp0fWZ1bmN0aW9uIHUodCxlKXt0LmVhY2goZnVuY3Rpb24odCxuKXt2YXIgbz1hLmRhdGEobixpKTtvPyhvLm9wdGlvbihlKSxvLl9pbml0KCkpOihvPW5ldyBzKG4sZSksYS5kYXRhKG4saSxvKSl9KX1hPWF8fGV8fHQualF1ZXJ5LGEmJihzLnByb3RvdHlwZS5vcHRpb258fChzLnByb3RvdHlwZS5vcHRpb249ZnVuY3Rpb24odCl7YS5pc1BsYWluT2JqZWN0KHQpJiYodGhpcy5vcHRpb25zPWEuZXh0ZW5kKCEwLHRoaXMub3B0aW9ucyx0KSl9KSxhLmZuW2ldPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZT1vLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBoKHRoaXMsdCxlKX1yZXR1cm4gdSh0aGlzLHQpLHRoaXN9LG4oYSkpfWZ1bmN0aW9uIG4odCl7IXR8fHQmJnQuYnJpZGdldHx8KHQuYnJpZGdldD1pKX12YXIgbz1BcnJheS5wcm90b3R5cGUuc2xpY2Uscz10LmNvbnNvbGUscj1cInVuZGVmaW5lZFwiPT10eXBlb2Ygcz9mdW5jdGlvbigpe306ZnVuY3Rpb24odCl7cy5lcnJvcih0KX07cmV0dXJuIG4oZXx8dC5qUXVlcnkpLGl9KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJnZXQtc2l6ZS9nZXQtc2l6ZVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGUoKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUoKTp0LmdldFNpemU9ZSgpfSh3aW5kb3csZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQpe3ZhciBlPXBhcnNlRmxvYXQodCksaT0tMT09dC5pbmRleE9mKFwiJVwiKSYmIWlzTmFOKGUpO3JldHVybiBpJiZlfWZ1bmN0aW9uIGUoKXt9ZnVuY3Rpb24gaSgpe2Zvcih2YXIgdD17d2lkdGg6MCxoZWlnaHQ6MCxpbm5lcldpZHRoOjAsaW5uZXJIZWlnaHQ6MCxvdXRlcldpZHRoOjAsb3V0ZXJIZWlnaHQ6MH0sZT0wO3U+ZTtlKyspe3ZhciBpPWhbZV07dFtpXT0wfXJldHVybiB0fWZ1bmN0aW9uIG4odCl7dmFyIGU9Z2V0Q29tcHV0ZWRTdHlsZSh0KTtyZXR1cm4gZXx8YShcIlN0eWxlIHJldHVybmVkIFwiK2UrXCIuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/IFNlZSBodHRwOi8vYml0Lmx5L2dldHNpemVidWcxXCIpLGV9ZnVuY3Rpb24gbygpe2lmKCFjKXtjPSEwO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5zdHlsZS53aWR0aD1cIjIwMHB4XCIsZS5zdHlsZS5wYWRkaW5nPVwiMXB4IDJweCAzcHggNHB4XCIsZS5zdHlsZS5ib3JkZXJTdHlsZT1cInNvbGlkXCIsZS5zdHlsZS5ib3JkZXJXaWR0aD1cIjFweCAycHggM3B4IDRweFwiLGUuc3R5bGUuYm94U2l6aW5nPVwiYm9yZGVyLWJveFwiO3ZhciBpPWRvY3VtZW50LmJvZHl8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtpLmFwcGVuZENoaWxkKGUpO3ZhciBvPW4oZSk7cy5pc0JveFNpemVPdXRlcj1yPTIwMD09dChvLndpZHRoKSxpLnJlbW92ZUNoaWxkKGUpfX1mdW5jdGlvbiBzKGUpe2lmKG8oKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKSksZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUubm9kZVR5cGUpe3ZhciBzPW4oZSk7aWYoXCJub25lXCI9PXMuZGlzcGxheSlyZXR1cm4gaSgpO3ZhciBhPXt9O2Eud2lkdGg9ZS5vZmZzZXRXaWR0aCxhLmhlaWdodD1lLm9mZnNldEhlaWdodDtmb3IodmFyIGM9YS5pc0JvcmRlckJveD1cImJvcmRlci1ib3hcIj09cy5ib3hTaXppbmcsZD0wO3U+ZDtkKyspe3ZhciBmPWhbZF0sbD1zW2ZdLHA9cGFyc2VGbG9hdChsKTthW2ZdPWlzTmFOKHApPzA6cH12YXIgZz1hLnBhZGRpbmdMZWZ0K2EucGFkZGluZ1JpZ2h0LG09YS5wYWRkaW5nVG9wK2EucGFkZGluZ0JvdHRvbSx5PWEubWFyZ2luTGVmdCthLm1hcmdpblJpZ2h0LHY9YS5tYXJnaW5Ub3ArYS5tYXJnaW5Cb3R0b20sXz1hLmJvcmRlckxlZnRXaWR0aCthLmJvcmRlclJpZ2h0V2lkdGgseD1hLmJvcmRlclRvcFdpZHRoK2EuYm9yZGVyQm90dG9tV2lkdGgsYj1jJiZyLEU9dChzLndpZHRoKTtFIT09ITEmJihhLndpZHRoPUUrKGI/MDpnK18pKTt2YXIgVD10KHMuaGVpZ2h0KTtyZXR1cm4gVCE9PSExJiYoYS5oZWlnaHQ9VCsoYj8wOm0reCkpLGEuaW5uZXJXaWR0aD1hLndpZHRoLShnK18pLGEuaW5uZXJIZWlnaHQ9YS5oZWlnaHQtKG0reCksYS5vdXRlcldpZHRoPWEud2lkdGgreSxhLm91dGVySGVpZ2h0PWEuaGVpZ2h0K3YsYX19dmFyIHIsYT1cInVuZGVmaW5lZFwiPT10eXBlb2YgY29uc29sZT9lOmZ1bmN0aW9uKHQpe2NvbnNvbGUuZXJyb3IodCl9LGg9W1wicGFkZGluZ0xlZnRcIixcInBhZGRpbmdSaWdodFwiLFwicGFkZGluZ1RvcFwiLFwicGFkZGluZ0JvdHRvbVwiLFwibWFyZ2luTGVmdFwiLFwibWFyZ2luUmlnaHRcIixcIm1hcmdpblRvcFwiLFwibWFyZ2luQm90dG9tXCIsXCJib3JkZXJMZWZ0V2lkdGhcIixcImJvcmRlclJpZ2h0V2lkdGhcIixcImJvcmRlclRvcFdpZHRoXCIsXCJib3JkZXJCb3R0b21XaWR0aFwiXSx1PWgubGVuZ3RoLGM9ITE7cmV0dXJuIHN9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIixlKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6dC5FdkVtaXR0ZXI9ZSgpfSh0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe312YXIgZT10LnByb3RvdHlwZTtyZXR1cm4gZS5vbj1mdW5jdGlvbih0LGUpe2lmKHQmJmUpe3ZhciBpPXRoaXMuX2V2ZW50cz10aGlzLl9ldmVudHN8fHt9LG49aVt0XT1pW3RdfHxbXTtyZXR1cm4tMT09bi5pbmRleE9mKGUpJiZuLnB1c2goZSksdGhpc319LGUub25jZT1mdW5jdGlvbih0LGUpe2lmKHQmJmUpe3RoaXMub24odCxlKTt2YXIgaT10aGlzLl9vbmNlRXZlbnRzPXRoaXMuX29uY2VFdmVudHN8fHt9LG49aVt0XT1pW3RdfHx7fTtyZXR1cm4gbltlXT0hMCx0aGlzfX0sZS5vZmY9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1t0XTtpZihpJiZpLmxlbmd0aCl7dmFyIG49aS5pbmRleE9mKGUpO3JldHVybi0xIT1uJiZpLnNwbGljZShuLDEpLHRoaXN9fSxlLmVtaXRFdmVudD1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzW3RdO2lmKGkmJmkubGVuZ3RoKXt2YXIgbj0wLG89aVtuXTtlPWV8fFtdO2Zvcih2YXIgcz10aGlzLl9vbmNlRXZlbnRzJiZ0aGlzLl9vbmNlRXZlbnRzW3RdO287KXt2YXIgcj1zJiZzW29dO3ImJih0aGlzLm9mZih0LG8pLGRlbGV0ZSBzW29dKSxvLmFwcGx5KHRoaXMsZSksbis9cj8wOjEsbz1pW25dfXJldHVybiB0aGlzfX0sdH0pLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImRlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvclwiLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUoKTp0Lm1hdGNoZXNTZWxlY3Rvcj1lKCl9KHdpbmRvdyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PWZ1bmN0aW9uKCl7dmFyIHQ9RWxlbWVudC5wcm90b3R5cGU7aWYodC5tYXRjaGVzKXJldHVyblwibWF0Y2hlc1wiO2lmKHQubWF0Y2hlc1NlbGVjdG9yKXJldHVyblwibWF0Y2hlc1NlbGVjdG9yXCI7Zm9yKHZhciBlPVtcIndlYmtpdFwiLFwibW96XCIsXCJtc1wiLFwib1wiXSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBuPWVbaV0sbz1uK1wiTWF0Y2hlc1NlbGVjdG9yXCI7aWYodFtvXSlyZXR1cm4gb319KCk7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7cmV0dXJuIGVbdF0oaSl9fSksZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZml6enktdWktdXRpbHMvdXRpbHNcIixbXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3JcIl0sZnVuY3Rpb24oaSl7cmV0dXJuIGUodCxpKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUodCxyZXF1aXJlKFwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvclwiKSk6dC5maXp6eVVJVXRpbHM9ZSh0LHQubWF0Y2hlc1NlbGVjdG9yKX0od2luZG93LGZ1bmN0aW9uKHQsZSl7dmFyIGk9e307aS5leHRlbmQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIGkgaW4gZSl0W2ldPWVbaV07cmV0dXJuIHR9LGkubW9kdWxvPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQlZStlKSVlfSxpLm1ha2VBcnJheT1mdW5jdGlvbih0KXt2YXIgZT1bXTtpZihBcnJheS5pc0FycmF5KHQpKWU9dDtlbHNlIGlmKHQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aClmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyllLnB1c2godFtpXSk7ZWxzZSBlLnB1c2godCk7cmV0dXJuIGV9LGkucmVtb3ZlRnJvbT1mdW5jdGlvbih0LGUpe3ZhciBpPXQuaW5kZXhPZihlKTstMSE9aSYmdC5zcGxpY2UoaSwxKX0saS5nZXRQYXJlbnQ9ZnVuY3Rpb24odCxpKXtmb3IoO3QhPWRvY3VtZW50LmJvZHk7KWlmKHQ9dC5wYXJlbnROb2RlLGUodCxpKSlyZXR1cm4gdH0saS5nZXRRdWVyeUVsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTp0fSxpLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPVwib25cIit0LnR5cGU7dGhpc1tlXSYmdGhpc1tlXSh0KX0saS5maWx0ZXJGaW5kRWxlbWVudHM9ZnVuY3Rpb24odCxuKXt0PWkubWFrZUFycmF5KHQpO3ZhciBvPVtdO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24odCl7aWYodCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtpZighbilyZXR1cm4gdm9pZCBvLnB1c2godCk7ZSh0LG4pJiZvLnB1c2godCk7Zm9yKHZhciBpPXQucXVlcnlTZWxlY3RvckFsbChuKSxzPTA7czxpLmxlbmd0aDtzKyspby5wdXNoKGlbc10pfX0pLG99LGkuZGVib3VuY2VNZXRob2Q9ZnVuY3Rpb24odCxlLGkpe3ZhciBuPXQucHJvdG90eXBlW2VdLG89ZStcIlRpbWVvdXRcIjt0LnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3ZhciB0PXRoaXNbb107dCYmY2xlYXJUaW1lb3V0KHQpO3ZhciBlPWFyZ3VtZW50cyxzPXRoaXM7dGhpc1tvXT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bi5hcHBseShzLGUpLGRlbGV0ZSBzW29dfSxpfHwxMDApfX0saS5kb2NSZWFkeT1mdW5jdGlvbih0KXtcImNvbXBsZXRlXCI9PWRvY3VtZW50LnJlYWR5U3RhdGU/dCgpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsdCl9LGkudG9EYXNoZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvKC4pKFtBLVpdKS9nLGZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gZStcIi1cIitpfSkudG9Mb3dlckNhc2UoKX07dmFyIG49dC5jb25zb2xlO3JldHVybiBpLmh0bWxJbml0PWZ1bmN0aW9uKGUsbyl7aS5kb2NSZWFkeShmdW5jdGlvbigpe3ZhciBzPWkudG9EYXNoZWQobykscj1cImRhdGEtXCIrcyxhPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIrcitcIl1cIiksaD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLVwiK3MpLHU9aS5tYWtlQXJyYXkoYSkuY29uY2F0KGkubWFrZUFycmF5KGgpKSxjPXIrXCItb3B0aW9uc1wiLGQ9dC5qUXVlcnk7dS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBpLHM9dC5nZXRBdHRyaWJ1dGUocil8fHQuZ2V0QXR0cmlidXRlKGMpO3RyeXtpPXMmJkpTT04ucGFyc2Uocyl9Y2F0Y2goYSl7cmV0dXJuIHZvaWQobiYmbi5lcnJvcihcIkVycm9yIHBhcnNpbmcgXCIrcitcIiBvbiBcIit0LmNsYXNzTmFtZStcIjogXCIrYSkpfXZhciBoPW5ldyBlKHQsaSk7ZCYmZC5kYXRhKHQsbyxoKX0pfSl9LGl9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJvdXRsYXllci9pdGVtXCIsW1wiZXYtZW1pdHRlci9ldi1lbWl0dGVyXCIsXCJnZXQtc2l6ZS9nZXQtc2l6ZVwiXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpLHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSk6KHQuT3V0bGF5ZXI9e30sdC5PdXRsYXllci5JdGVtPWUodC5FdkVtaXR0ZXIsdC5nZXRTaXplKSl9KHdpbmRvdyxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7Zm9yKHZhciBlIGluIHQpcmV0dXJuITE7cmV0dXJuIGU9bnVsbCwhMH1mdW5jdGlvbiBuKHQsZSl7dCYmKHRoaXMuZWxlbWVudD10LHRoaXMubGF5b3V0PWUsdGhpcy5wb3NpdGlvbj17eDowLHk6MH0sdGhpcy5fY3JlYXRlKCkpfWZ1bmN0aW9uIG8odCl7cmV0dXJuIHQucmVwbGFjZSgvKFtBLVpdKS9nLGZ1bmN0aW9uKHQpe3JldHVyblwiLVwiK3QudG9Mb3dlckNhc2UoKX0pfXZhciBzPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxyPVwic3RyaW5nXCI9PXR5cGVvZiBzLnRyYW5zaXRpb24/XCJ0cmFuc2l0aW9uXCI6XCJXZWJraXRUcmFuc2l0aW9uXCIsYT1cInN0cmluZ1wiPT10eXBlb2Ygcy50cmFuc2Zvcm0/XCJ0cmFuc2Zvcm1cIjpcIldlYmtpdFRyYW5zZm9ybVwiLGg9e1dlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsdHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIn1bcl0sdT17dHJhbnNmb3JtOmEsdHJhbnNpdGlvbjpyLHRyYW5zaXRpb25EdXJhdGlvbjpyK1wiRHVyYXRpb25cIix0cmFuc2l0aW9uUHJvcGVydHk6citcIlByb3BlcnR5XCIsdHJhbnNpdGlvbkRlbGF5OnIrXCJEZWxheVwifSxjPW4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpO2MuY29uc3RydWN0b3I9bixjLl9jcmVhdGU9ZnVuY3Rpb24oKXt0aGlzLl90cmFuc249e2luZ1Byb3BlcnRpZXM6e30sY2xlYW46e30sb25FbmQ6e319LHRoaXMuY3NzKHtwb3NpdGlvbjpcImFic29sdXRlXCJ9KX0sYy5oYW5kbGVFdmVudD1mdW5jdGlvbih0KXt2YXIgZT1cIm9uXCIrdC50eXBlO3RoaXNbZV0mJnRoaXNbZV0odCl9LGMuZ2V0U2l6ZT1mdW5jdGlvbigpe3RoaXMuc2l6ZT1lKHRoaXMuZWxlbWVudCl9LGMuY3NzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZWxlbWVudC5zdHlsZTtmb3IodmFyIGkgaW4gdCl7dmFyIG49dVtpXXx8aTtlW25dPXRbaV19fSxjLmdldFBvc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9Z2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpLGU9dGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpbkxlZnRcIiksaT10aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwib3JpZ2luVG9wXCIpLG49dFtlP1wibGVmdFwiOlwicmlnaHRcIl0sbz10W2k/XCJ0b3BcIjpcImJvdHRvbVwiXSxzPXRoaXMubGF5b3V0LnNpemUscj0tMSE9bi5pbmRleE9mKFwiJVwiKT9wYXJzZUZsb2F0KG4pLzEwMCpzLndpZHRoOnBhcnNlSW50KG4sMTApLGE9LTEhPW8uaW5kZXhPZihcIiVcIik/cGFyc2VGbG9hdChvKS8xMDAqcy5oZWlnaHQ6cGFyc2VJbnQobywxMCk7cj1pc05hTihyKT8wOnIsYT1pc05hTihhKT8wOmEsci09ZT9zLnBhZGRpbmdMZWZ0OnMucGFkZGluZ1JpZ2h0LGEtPWk/cy5wYWRkaW5nVG9wOnMucGFkZGluZ0JvdHRvbSx0aGlzLnBvc2l0aW9uLng9cix0aGlzLnBvc2l0aW9uLnk9YX0sYy5sYXlvdXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXMubGF5b3V0LnNpemUsZT17fSxpPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpLG49dGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKSxvPWk/XCJwYWRkaW5nTGVmdFwiOlwicGFkZGluZ1JpZ2h0XCIscz1pP1wibGVmdFwiOlwicmlnaHRcIixyPWk/XCJyaWdodFwiOlwibGVmdFwiLGE9dGhpcy5wb3NpdGlvbi54K3Rbb107ZVtzXT10aGlzLmdldFhWYWx1ZShhKSxlW3JdPVwiXCI7dmFyIGg9bj9cInBhZGRpbmdUb3BcIjpcInBhZGRpbmdCb3R0b21cIix1PW4/XCJ0b3BcIjpcImJvdHRvbVwiLGM9bj9cImJvdHRvbVwiOlwidG9wXCIsZD10aGlzLnBvc2l0aW9uLnkrdFtoXTtlW3VdPXRoaXMuZ2V0WVZhbHVlKGQpLGVbY109XCJcIix0aGlzLmNzcyhlKSx0aGlzLmVtaXRFdmVudChcImxheW91dFwiLFt0aGlzXSl9LGMuZ2V0WFZhbHVlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJob3Jpem9udGFsXCIpO3JldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiYmIWU/dC90aGlzLmxheW91dC5zaXplLndpZHRoKjEwMCtcIiVcIjp0K1wicHhcIn0sYy5nZXRZVmFsdWU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5sYXlvdXQuX2dldE9wdGlvbihcImhvcml6b250YWxcIik7cmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uJiZlP3QvdGhpcy5sYXlvdXQuc2l6ZS5oZWlnaHQqMTAwK1wiJVwiOnQrXCJweFwifSxjLl90cmFuc2l0aW9uVG89ZnVuY3Rpb24odCxlKXt0aGlzLmdldFBvc2l0aW9uKCk7dmFyIGk9dGhpcy5wb3NpdGlvbi54LG49dGhpcy5wb3NpdGlvbi55LG89cGFyc2VJbnQodCwxMCkscz1wYXJzZUludChlLDEwKSxyPW89PT10aGlzLnBvc2l0aW9uLngmJnM9PT10aGlzLnBvc2l0aW9uLnk7aWYodGhpcy5zZXRQb3NpdGlvbih0LGUpLHImJiF0aGlzLmlzVHJhbnNpdGlvbmluZylyZXR1cm4gdm9pZCB0aGlzLmxheW91dFBvc2l0aW9uKCk7dmFyIGE9dC1pLGg9ZS1uLHU9e307dS50cmFuc2Zvcm09dGhpcy5nZXRUcmFuc2xhdGUoYSxoKSx0aGlzLnRyYW5zaXRpb24oe3RvOnUsb25UcmFuc2l0aW9uRW5kOnt0cmFuc2Zvcm06dGhpcy5sYXlvdXRQb3NpdGlvbn0saXNDbGVhbmluZzohMH0pfSxjLmdldFRyYW5zbGF0ZT1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpLG49dGhpcy5sYXlvdXQuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKTtyZXR1cm4gdD1pP3Q6LXQsZT1uP2U6LWUsXCJ0cmFuc2xhdGUzZChcIit0K1wicHgsIFwiK2UrXCJweCwgMClcIn0sYy5nb1RvPWZ1bmN0aW9uKHQsZSl7dGhpcy5zZXRQb3NpdGlvbih0LGUpLHRoaXMubGF5b3V0UG9zaXRpb24oKX0sYy5tb3ZlVG89Yy5fdHJhbnNpdGlvblRvLGMuc2V0UG9zaXRpb249ZnVuY3Rpb24odCxlKXt0aGlzLnBvc2l0aW9uLng9cGFyc2VJbnQodCwxMCksdGhpcy5wb3NpdGlvbi55PXBhcnNlSW50KGUsMTApfSxjLl9ub25UcmFuc2l0aW9uPWZ1bmN0aW9uKHQpe3RoaXMuY3NzKHQudG8pLHQuaXNDbGVhbmluZyYmdGhpcy5fcmVtb3ZlU3R5bGVzKHQudG8pO2Zvcih2YXIgZSBpbiB0Lm9uVHJhbnNpdGlvbkVuZCl0Lm9uVHJhbnNpdGlvbkVuZFtlXS5jYWxsKHRoaXMpfSxjLnRyYW5zaXRpb249ZnVuY3Rpb24odCl7aWYoIXBhcnNlRmxvYXQodGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24pKXJldHVybiB2b2lkIHRoaXMuX25vblRyYW5zaXRpb24odCk7dmFyIGU9dGhpcy5fdHJhbnNuO2Zvcih2YXIgaSBpbiB0Lm9uVHJhbnNpdGlvbkVuZCllLm9uRW5kW2ldPXQub25UcmFuc2l0aW9uRW5kW2ldO2ZvcihpIGluIHQudG8pZS5pbmdQcm9wZXJ0aWVzW2ldPSEwLHQuaXNDbGVhbmluZyYmKGUuY2xlYW5baV09ITApO2lmKHQuZnJvbSl7dGhpcy5jc3ModC5mcm9tKTt2YXIgbj10aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O249bnVsbH10aGlzLmVuYWJsZVRyYW5zaXRpb24odC50byksdGhpcy5jc3ModC50byksdGhpcy5pc1RyYW5zaXRpb25pbmc9ITB9O3ZhciBkPVwib3BhY2l0eSxcIitvKGEpO2MuZW5hYmxlVHJhbnNpdGlvbj1mdW5jdGlvbigpe2lmKCF0aGlzLmlzVHJhbnNpdGlvbmluZyl7dmFyIHQ9dGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247dD1cIm51bWJlclwiPT10eXBlb2YgdD90K1wibXNcIjp0LHRoaXMuY3NzKHt0cmFuc2l0aW9uUHJvcGVydHk6ZCx0cmFuc2l0aW9uRHVyYXRpb246dCx0cmFuc2l0aW9uRGVsYXk6dGhpcy5zdGFnZ2VyRGVsYXl8fDB9KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihoLHRoaXMsITEpfX0sYy5vbndlYmtpdFRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24odCl7dGhpcy5vbnRyYW5zaXRpb25lbmQodCl9LGMub25vdHJhbnNpdGlvbmVuZD1mdW5jdGlvbih0KXt0aGlzLm9udHJhbnNpdGlvbmVuZCh0KX07dmFyIGY9e1wiLXdlYmtpdC10cmFuc2Zvcm1cIjpcInRyYW5zZm9ybVwifTtjLm9udHJhbnNpdGlvbmVuZD1mdW5jdGlvbih0KXtpZih0LnRhcmdldD09PXRoaXMuZWxlbWVudCl7dmFyIGU9dGhpcy5fdHJhbnNuLG49Zlt0LnByb3BlcnR5TmFtZV18fHQucHJvcGVydHlOYW1lO2lmKGRlbGV0ZSBlLmluZ1Byb3BlcnRpZXNbbl0saShlLmluZ1Byb3BlcnRpZXMpJiZ0aGlzLmRpc2FibGVUcmFuc2l0aW9uKCksbiBpbiBlLmNsZWFuJiYodGhpcy5lbGVtZW50LnN0eWxlW3QucHJvcGVydHlOYW1lXT1cIlwiLGRlbGV0ZSBlLmNsZWFuW25dKSxuIGluIGUub25FbmQpe3ZhciBvPWUub25FbmRbbl07by5jYWxsKHRoaXMpLGRlbGV0ZSBlLm9uRW5kW25dfXRoaXMuZW1pdEV2ZW50KFwidHJhbnNpdGlvbkVuZFwiLFt0aGlzXSl9fSxjLmRpc2FibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCksdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoaCx0aGlzLCExKSx0aGlzLmlzVHJhbnNpdGlvbmluZz0hMX0sYy5fcmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Zvcih2YXIgaSBpbiB0KWVbaV09XCJcIjt0aGlzLmNzcyhlKX07dmFyIGw9e3RyYW5zaXRpb25Qcm9wZXJ0eTpcIlwiLHRyYW5zaXRpb25EdXJhdGlvbjpcIlwiLHRyYW5zaXRpb25EZWxheTpcIlwifTtyZXR1cm4gYy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzPWZ1bmN0aW9uKCl7dGhpcy5jc3MobCl9LGMuc3RhZ2dlcj1mdW5jdGlvbih0KXt0PWlzTmFOKHQpPzA6dCx0aGlzLnN0YWdnZXJEZWxheT10K1wibXNcIn0sYy5yZW1vdmVFbGVtPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KSx0aGlzLmNzcyh7ZGlzcGxheTpcIlwifSksdGhpcy5lbWl0RXZlbnQoXCJyZW1vdmVcIixbdGhpc10pfSxjLnJlbW92ZT1mdW5jdGlvbigpe3JldHVybiByJiZwYXJzZUZsb2F0KHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uKT8odGhpcy5vbmNlKFwidHJhbnNpdGlvbkVuZFwiLGZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVFbGVtKCl9KSx2b2lkIHRoaXMuaGlkZSgpKTp2b2lkIHRoaXMucmVtb3ZlRWxlbSgpfSxjLnJldmVhbD1mdW5jdGlvbigpe2RlbGV0ZSB0aGlzLmlzSGlkZGVuLHRoaXMuY3NzKHtkaXNwbGF5OlwiXCJ9KTt2YXIgdD10aGlzLmxheW91dC5vcHRpb25zLGU9e30saT10aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoXCJ2aXNpYmxlU3R5bGVcIik7ZVtpXT10aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCx0aGlzLnRyYW5zaXRpb24oe2Zyb206dC5oaWRkZW5TdHlsZSx0bzp0LnZpc2libGVTdHlsZSxpc0NsZWFuaW5nOiEwLG9uVHJhbnNpdGlvbkVuZDplfSl9LGMub25SZXZlYWxUcmFuc2l0aW9uRW5kPWZ1bmN0aW9uKCl7dGhpcy5pc0hpZGRlbnx8dGhpcy5lbWl0RXZlbnQoXCJyZXZlYWxcIil9LGMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmxheW91dC5vcHRpb25zW3RdO2lmKGUub3BhY2l0eSlyZXR1cm5cIm9wYWNpdHlcIjtmb3IodmFyIGkgaW4gZSlyZXR1cm4gaX0sYy5oaWRlPWZ1bmN0aW9uKCl7dGhpcy5pc0hpZGRlbj0hMCx0aGlzLmNzcyh7ZGlzcGxheTpcIlwifSk7dmFyIHQ9dGhpcy5sYXlvdXQub3B0aW9ucyxlPXt9LGk9dGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KFwiaGlkZGVuU3R5bGVcIik7ZVtpXT10aGlzLm9uSGlkZVRyYW5zaXRpb25FbmQsdGhpcy50cmFuc2l0aW9uKHtmcm9tOnQudmlzaWJsZVN0eWxlLHRvOnQuaGlkZGVuU3R5bGUsaXNDbGVhbmluZzohMCxvblRyYW5zaXRpb25FbmQ6ZX0pfSxjLm9uSGlkZVRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVuJiYodGhpcy5jc3Moe2Rpc3BsYXk6XCJub25lXCJ9KSx0aGlzLmVtaXRFdmVudChcImhpZGVcIikpfSxjLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmNzcyh7cG9zaXRpb246XCJcIixsZWZ0OlwiXCIscmlnaHQ6XCJcIix0b3A6XCJcIixib3R0b206XCJcIix0cmFuc2l0aW9uOlwiXCIsdHJhbnNmb3JtOlwiXCJ9KX0sbn0pLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIm91dGxheWVyL291dGxheWVyXCIsW1wiZXYtZW1pdHRlci9ldi1lbWl0dGVyXCIsXCJnZXQtc2l6ZS9nZXQtc2l6ZVwiLFwiZml6enktdWktdXRpbHMvdXRpbHNcIixcIi4vaXRlbVwiXSxmdW5jdGlvbihpLG4sbyxzKXtyZXR1cm4gZSh0LGksbixvLHMpfSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZSh0LHJlcXVpcmUoXCJldi1lbWl0dGVyXCIpLHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSxyZXF1aXJlKFwiZml6enktdWktdXRpbHNcIikscmVxdWlyZShcIi4vaXRlbVwiKSk6dC5PdXRsYXllcj1lKHQsdC5FdkVtaXR0ZXIsdC5nZXRTaXplLHQuZml6enlVSVV0aWxzLHQuT3V0bGF5ZXIuSXRlbSl9KHdpbmRvdyxmdW5jdGlvbih0LGUsaSxuLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHModCxlKXt2YXIgaT1uLmdldFF1ZXJ5RWxlbWVudCh0KTtpZighaSlyZXR1cm4gdm9pZChoJiZoLmVycm9yKFwiQmFkIGVsZW1lbnQgZm9yIFwiK3RoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlK1wiOiBcIisoaXx8dCkpKTt0aGlzLmVsZW1lbnQ9aSx1JiYodGhpcy4kZWxlbWVudD11KHRoaXMuZWxlbWVudCkpLHRoaXMub3B0aW9ucz1uLmV4dGVuZCh7fSx0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzKSx0aGlzLm9wdGlvbihlKTt2YXIgbz0rK2Q7dGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRD1vLGZbb109dGhpcyx0aGlzLl9jcmVhdGUoKTt2YXIgcz10aGlzLl9nZXRPcHRpb24oXCJpbml0TGF5b3V0XCIpO3MmJnRoaXMubGF5b3V0KCl9ZnVuY3Rpb24gcih0KXtmdW5jdGlvbiBlKCl7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZX1mdW5jdGlvbiBhKHQpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3ZhciBlPXQubWF0Y2goLyheXFxkKlxcLj9cXGQqKShcXHcqKS8pLGk9ZSYmZVsxXSxuPWUmJmVbMl07aWYoIWkubGVuZ3RoKXJldHVybiAwO2k9cGFyc2VGbG9hdChpKTt2YXIgbz1wW25dfHwxO3JldHVybiBpKm99dmFyIGg9dC5jb25zb2xlLHU9dC5qUXVlcnksYz1mdW5jdGlvbigpe30sZD0wLGY9e307cy5uYW1lc3BhY2U9XCJvdXRsYXllclwiLHMuSXRlbT1vLHMuZGVmYXVsdHM9e2NvbnRhaW5lclN0eWxlOntwb3NpdGlvbjpcInJlbGF0aXZlXCJ9LGluaXRMYXlvdXQ6ITAsb3JpZ2luTGVmdDohMCxvcmlnaW5Ub3A6ITAscmVzaXplOiEwLHJlc2l6ZUNvbnRhaW5lcjohMCx0cmFuc2l0aW9uRHVyYXRpb246XCIwLjRzXCIsaGlkZGVuU3R5bGU6e29wYWNpdHk6MCx0cmFuc2Zvcm06XCJzY2FsZSgwLjAwMSlcIn0sdmlzaWJsZVN0eWxlOntvcGFjaXR5OjEsdHJhbnNmb3JtOlwic2NhbGUoMSlcIn19O3ZhciBsPXMucHJvdG90eXBlO24uZXh0ZW5kKGwsZS5wcm90b3R5cGUpLGwub3B0aW9uPWZ1bmN0aW9uKHQpe24uZXh0ZW5kKHRoaXMub3B0aW9ucyx0KX0sbC5fZ2V0T3B0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuY29uc3RydWN0b3IuY29tcGF0T3B0aW9uc1t0XTtyZXR1cm4gZSYmdm9pZCAwIT09dGhpcy5vcHRpb25zW2VdP3RoaXMub3B0aW9uc1tlXTp0aGlzLm9wdGlvbnNbdF19LHMuY29tcGF0T3B0aW9ucz17aW5pdExheW91dDpcImlzSW5pdExheW91dFwiLGhvcml6b250YWw6XCJpc0hvcml6b250YWxcIixsYXlvdXRJbnN0YW50OlwiaXNMYXlvdXRJbnN0YW50XCIsb3JpZ2luTGVmdDpcImlzT3JpZ2luTGVmdFwiLG9yaWdpblRvcDpcImlzT3JpZ2luVG9wXCIscmVzaXplOlwiaXNSZXNpemVCb3VuZFwiLHJlc2l6ZUNvbnRhaW5lcjpcImlzUmVzaXppbmdDb250YWluZXJcIn0sbC5fY3JlYXRlPWZ1bmN0aW9uKCl7dGhpcy5yZWxvYWRJdGVtcygpLHRoaXMuc3RhbXBzPVtdLHRoaXMuc3RhbXAodGhpcy5vcHRpb25zLnN0YW1wKSxuLmV4dGVuZCh0aGlzLmVsZW1lbnQuc3R5bGUsdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlKTt2YXIgdD10aGlzLl9nZXRPcHRpb24oXCJyZXNpemVcIik7dCYmdGhpcy5iaW5kUmVzaXplKCl9LGwucmVsb2FkSXRlbXM9ZnVuY3Rpb24oKXt0aGlzLml0ZW1zPXRoaXMuX2l0ZW1pemUodGhpcy5lbGVtZW50LmNoaWxkcmVuKX0sbC5faXRlbWl6ZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyh0KSxpPXRoaXMuY29uc3RydWN0b3IuSXRlbSxuPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHM9ZVtvXSxyPW5ldyBpKHMsdGhpcyk7bi5wdXNoKHIpfXJldHVybiBufSxsLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuLmZpbHRlckZpbmRFbGVtZW50cyh0LHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IpfSxsLmdldEl0ZW1FbGVtZW50cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZW1zLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50fSl9LGwubGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy5fcmVzZXRMYXlvdXQoKSx0aGlzLl9tYW5hZ2VTdGFtcHMoKTt2YXIgdD10aGlzLl9nZXRPcHRpb24oXCJsYXlvdXRJbnN0YW50XCIpLGU9dm9pZCAwIT09dD90OiF0aGlzLl9pc0xheW91dEluaXRlZDt0aGlzLmxheW91dEl0ZW1zKHRoaXMuaXRlbXMsZSksdGhpcy5faXNMYXlvdXRJbml0ZWQ9ITB9LGwuX2luaXQ9bC5sYXlvdXQsbC5fcmVzZXRMYXlvdXQ9ZnVuY3Rpb24oKXt0aGlzLmdldFNpemUoKX0sbC5nZXRTaXplPWZ1bmN0aW9uKCl7dGhpcy5zaXplPWkodGhpcy5lbGVtZW50KX0sbC5fZ2V0TWVhc3VyZW1lbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPXRoaXMub3B0aW9uc1t0XTtvPyhcInN0cmluZ1wiPT10eXBlb2Ygbz9uPXRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKG8pOm8gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCYmKG49byksdGhpc1t0XT1uP2kobilbZV06byk6dGhpc1t0XT0wfSxsLmxheW91dEl0ZW1zPWZ1bmN0aW9uKHQsZSl7dD10aGlzLl9nZXRJdGVtc0ZvckxheW91dCh0KSx0aGlzLl9sYXlvdXRJdGVtcyh0LGUpLHRoaXMuX3Bvc3RMYXlvdXQoKX0sbC5fZ2V0SXRlbXNGb3JMYXlvdXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiF0LmlzSWdub3JlZH0pfSxsLl9sYXlvdXRJdGVtcz1mdW5jdGlvbih0LGUpe2lmKHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJsYXlvdXRcIix0KSx0JiZ0Lmxlbmd0aCl7dmFyIGk9W107dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbih0KTtuLml0ZW09dCxuLmlzSW5zdGFudD1lfHx0LmlzTGF5b3V0SW5zdGFudCxpLnB1c2gobil9LHRoaXMpLHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZShpKX19LGwuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbj1mdW5jdGlvbigpe3JldHVybnt4OjAseTowfX0sbC5fcHJvY2Vzc0xheW91dFF1ZXVlPWZ1bmN0aW9uKHQpe3RoaXMudXBkYXRlU3RhZ2dlcigpLHQuZm9yRWFjaChmdW5jdGlvbih0LGUpe3RoaXMuX3Bvc2l0aW9uSXRlbSh0Lml0ZW0sdC54LHQueSx0LmlzSW5zdGFudCxlKX0sdGhpcyl9LGwudXBkYXRlU3RhZ2dlcj1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5zdGFnZ2VyO3JldHVybiBudWxsPT09dHx8dm9pZCAwPT09dD92b2lkKHRoaXMuc3RhZ2dlcj0wKToodGhpcy5zdGFnZ2VyPWEodCksdGhpcy5zdGFnZ2VyKX0sbC5fcG9zaXRpb25JdGVtPWZ1bmN0aW9uKHQsZSxpLG4sbyl7bj90LmdvVG8oZSxpKToodC5zdGFnZ2VyKG8qdGhpcy5zdGFnZ2VyKSx0Lm1vdmVUbyhlLGkpKX0sbC5fcG9zdExheW91dD1mdW5jdGlvbigpe3RoaXMucmVzaXplQ29udGFpbmVyKCl9LGwucmVzaXplQ29udGFpbmVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0T3B0aW9uKFwicmVzaXplQ29udGFpbmVyXCIpO2lmKHQpe3ZhciBlPXRoaXMuX2dldENvbnRhaW5lclNpemUoKTtlJiYodGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZShlLndpZHRoLCEwKSx0aGlzLl9zZXRDb250YWluZXJNZWFzdXJlKGUuaGVpZ2h0LCExKSl9fSxsLl9nZXRDb250YWluZXJTaXplPWMsbC5fc2V0Q29udGFpbmVyTWVhc3VyZT1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMCE9PXQpe3ZhciBpPXRoaXMuc2l6ZTtpLmlzQm9yZGVyQm94JiYodCs9ZT9pLnBhZGRpbmdMZWZ0K2kucGFkZGluZ1JpZ2h0K2kuYm9yZGVyTGVmdFdpZHRoK2kuYm9yZGVyUmlnaHRXaWR0aDppLnBhZGRpbmdCb3R0b20raS5wYWRkaW5nVG9wK2kuYm9yZGVyVG9wV2lkdGgraS5ib3JkZXJCb3R0b21XaWR0aCksdD1NYXRoLm1heCh0LDApLHRoaXMuZWxlbWVudC5zdHlsZVtlP1wid2lkdGhcIjpcImhlaWdodFwiXT10K1wicHhcIn19LGwuX2VtaXRDb21wbGV0ZU9uSXRlbXM9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKCl7by5kaXNwYXRjaEV2ZW50KHQrXCJDb21wbGV0ZVwiLG51bGwsW2VdKX1mdW5jdGlvbiBuKCl7cisrLHI9PXMmJmkoKX12YXIgbz10aGlzLHM9ZS5sZW5ndGg7aWYoIWV8fCFzKXJldHVybiB2b2lkIGkoKTt2YXIgcj0wO2UuZm9yRWFjaChmdW5jdGlvbihlKXtlLm9uY2UodCxuKX0pfSxsLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24odCxlLGkpe3ZhciBuPWU/W2VdLmNvbmNhdChpKTppO2lmKHRoaXMuZW1pdEV2ZW50KHQsbiksdSlpZih0aGlzLiRlbGVtZW50PXRoaXMuJGVsZW1lbnR8fHUodGhpcy5lbGVtZW50KSxlKXt2YXIgbz11LkV2ZW50KGUpO28udHlwZT10LHRoaXMuJGVsZW1lbnQudHJpZ2dlcihvLGkpfWVsc2UgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHQsaSl9LGwuaWdub3JlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SXRlbSh0KTtlJiYoZS5pc0lnbm9yZWQ9ITApfSxsLnVuaWdub3JlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SXRlbSh0KTtlJiZkZWxldGUgZS5pc0lnbm9yZWR9LGwuc3RhbXA9ZnVuY3Rpb24odCl7dD10aGlzLl9maW5kKHQpLHQmJih0aGlzLnN0YW1wcz10aGlzLnN0YW1wcy5jb25jYXQodCksdC5mb3JFYWNoKHRoaXMuaWdub3JlLHRoaXMpKX0sbC51bnN0YW1wPWZ1bmN0aW9uKHQpe3Q9dGhpcy5fZmluZCh0KSx0JiZ0LmZvckVhY2goZnVuY3Rpb24odCl7bi5yZW1vdmVGcm9tKHRoaXMuc3RhbXBzLHQpLHRoaXMudW5pZ25vcmUodCl9LHRoaXMpfSxsLl9maW5kPWZ1bmN0aW9uKHQpe3JldHVybiB0PyhcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCkpLHQ9bi5tYWtlQXJyYXkodCkpOnZvaWQgMH0sbC5fbWFuYWdlU3RhbXBzPWZ1bmN0aW9uKCl7dGhpcy5zdGFtcHMmJnRoaXMuc3RhbXBzLmxlbmd0aCYmKHRoaXMuX2dldEJvdW5kaW5nUmVjdCgpLHRoaXMuc3RhbXBzLmZvckVhY2godGhpcy5fbWFuYWdlU3RhbXAsdGhpcykpfSxsLl9nZXRCb3VuZGluZ1JlY3Q9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZT10aGlzLnNpemU7dGhpcy5fYm91bmRpbmdSZWN0PXtsZWZ0OnQubGVmdCtlLnBhZGRpbmdMZWZ0K2UuYm9yZGVyTGVmdFdpZHRoLHRvcDp0LnRvcCtlLnBhZGRpbmdUb3ArZS5ib3JkZXJUb3BXaWR0aCxyaWdodDp0LnJpZ2h0LShlLnBhZGRpbmdSaWdodCtlLmJvcmRlclJpZ2h0V2lkdGgpLGJvdHRvbTp0LmJvdHRvbS0oZS5wYWRkaW5nQm90dG9tK2UuYm9yZGVyQm90dG9tV2lkdGgpfX0sbC5fbWFuYWdlU3RhbXA9YyxsLl9nZXRFbGVtZW50T2Zmc2V0PWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj10aGlzLl9ib3VuZGluZ1JlY3Qsbz1pKHQpLHM9e2xlZnQ6ZS5sZWZ0LW4ubGVmdC1vLm1hcmdpbkxlZnQsdG9wOmUudG9wLW4udG9wLW8ubWFyZ2luVG9wLHJpZ2h0Om4ucmlnaHQtZS5yaWdodC1vLm1hcmdpblJpZ2h0LGJvdHRvbTpuLmJvdHRvbS1lLmJvdHRvbS1vLm1hcmdpbkJvdHRvbX07cmV0dXJuIHN9LGwuaGFuZGxlRXZlbnQ9bi5oYW5kbGVFdmVudCxsLmJpbmRSZXNpemU9ZnVuY3Rpb24oKXt0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzKSx0aGlzLmlzUmVzaXplQm91bmQ9ITB9LGwudW5iaW5kUmVzaXplPWZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcyksdGhpcy5pc1Jlc2l6ZUJvdW5kPSExfSxsLm9ucmVzaXplPWZ1bmN0aW9uKCl7dGhpcy5yZXNpemUoKX0sbi5kZWJvdW5jZU1ldGhvZChzLFwib25yZXNpemVcIiwxMDApLGwucmVzaXplPWZ1bmN0aW9uKCl7dGhpcy5pc1Jlc2l6ZUJvdW5kJiZ0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkmJnRoaXMubGF5b3V0KCl9LGwubmVlZHNSZXNpemVMYXlvdXQ9ZnVuY3Rpb24oKXt2YXIgdD1pKHRoaXMuZWxlbWVudCksZT10aGlzLnNpemUmJnQ7cmV0dXJuIGUmJnQuaW5uZXJXaWR0aCE9PXRoaXMuc2l6ZS5pbm5lcldpZHRofSxsLmFkZEl0ZW1zPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2l0ZW1pemUodCk7cmV0dXJuIGUubGVuZ3RoJiYodGhpcy5pdGVtcz10aGlzLml0ZW1zLmNvbmNhdChlKSksZX0sbC5hcHBlbmRlZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmFkZEl0ZW1zKHQpO2UubGVuZ3RoJiYodGhpcy5sYXlvdXRJdGVtcyhlLCEwKSx0aGlzLnJldmVhbChlKSl9LGwucHJlcGVuZGVkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2l0ZW1pemUodCk7aWYoZS5sZW5ndGgpe3ZhciBpPXRoaXMuaXRlbXMuc2xpY2UoMCk7dGhpcy5pdGVtcz1lLmNvbmNhdChpKSx0aGlzLl9yZXNldExheW91dCgpLHRoaXMuX21hbmFnZVN0YW1wcygpLHRoaXMubGF5b3V0SXRlbXMoZSwhMCksdGhpcy5yZXZlYWwoZSksdGhpcy5sYXlvdXRJdGVtcyhpKX19LGwucmV2ZWFsPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJyZXZlYWxcIix0KSx0JiZ0Lmxlbmd0aCl7dmFyIGU9dGhpcy51cGRhdGVTdGFnZ2VyKCk7dC5mb3JFYWNoKGZ1bmN0aW9uKHQsaSl7dC5zdGFnZ2VyKGkqZSksdC5yZXZlYWwoKX0pfX0sbC5oaWRlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJoaWRlXCIsdCksdCYmdC5sZW5ndGgpe3ZhciBlPXRoaXMudXBkYXRlU3RhZ2dlcigpO3QuZm9yRWFjaChmdW5jdGlvbih0LGkpe3Quc3RhZ2dlcihpKmUpLHQuaGlkZSgpfSl9fSxsLnJldmVhbEl0ZW1FbGVtZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEl0ZW1zKHQpO3RoaXMucmV2ZWFsKGUpfSxsLmhpZGVJdGVtRWxlbWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJdGVtcyh0KTt0aGlzLmhpZGUoZSl9LGwuZ2V0SXRlbT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuaXRlbXMubGVuZ3RoO2UrKyl7dmFyIGk9dGhpcy5pdGVtc1tlXTtpZihpLmVsZW1lbnQ9PXQpcmV0dXJuIGl9fSxsLmdldEl0ZW1zPWZ1bmN0aW9uKHQpe3Q9bi5tYWtlQXJyYXkodCk7dmFyIGU9W107cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgaT10aGlzLmdldEl0ZW0odCk7aSYmZS5wdXNoKGkpfSx0aGlzKSxlfSxsLnJlbW92ZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEl0ZW1zKHQpO3RoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoXCJyZW1vdmVcIixlKSxlJiZlLmxlbmd0aCYmZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucmVtb3ZlKCksbi5yZW1vdmVGcm9tKHRoaXMuaXRlbXMsdCl9LHRoaXMpfSxsLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnQuc3R5bGU7dC5oZWlnaHQ9XCJcIix0LnBvc2l0aW9uPVwiXCIsdC53aWR0aD1cIlwiLHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbih0KXt0LmRlc3Ryb3koKX0pLHRoaXMudW5iaW5kUmVzaXplKCk7dmFyIGU9dGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtkZWxldGUgZltlXSxkZWxldGUgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCx1JiZ1LnJlbW92ZURhdGEodGhpcy5lbGVtZW50LHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlKX0scy5kYXRhPWZ1bmN0aW9uKHQpe3Q9bi5nZXRRdWVyeUVsZW1lbnQodCk7dmFyIGU9dCYmdC5vdXRsYXllckdVSUQ7cmV0dXJuIGUmJmZbZV19LHMuY3JlYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIGk9cihzKTtyZXR1cm4gaS5kZWZhdWx0cz1uLmV4dGVuZCh7fSxzLmRlZmF1bHRzKSxuLmV4dGVuZChpLmRlZmF1bHRzLGUpLGkuY29tcGF0T3B0aW9ucz1uLmV4dGVuZCh7fSxzLmNvbXBhdE9wdGlvbnMpLGkubmFtZXNwYWNlPXQsaS5kYXRhPXMuZGF0YSxpLkl0ZW09cihvKSxuLmh0bWxJbml0KGksdCksdSYmdS5icmlkZ2V0JiZ1LmJyaWRnZXQodCxpKSxpfTt2YXIgcD17bXM6MSxzOjFlM307cmV0dXJuIHMuSXRlbT1vLHN9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJwYWNrZXJ5L2pzL3JlY3RcIixlKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6KHQuUGFja2VyeT10LlBhY2tlcnl8fHt9LHQuUGFja2VyeS5SZWN0PWUoKSl9KHdpbmRvdyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSl7Zm9yKHZhciBpIGluIHQuZGVmYXVsdHMpdGhpc1tpXT10LmRlZmF1bHRzW2ldO2ZvcihpIGluIGUpdGhpc1tpXT1lW2ldfXQuZGVmYXVsdHM9e3g6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MH07dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuY29udGFpbnM9ZnVuY3Rpb24odCl7dmFyIGU9dC53aWR0aHx8MCxpPXQuaGVpZ2h0fHwwO3JldHVybiB0aGlzLng8PXQueCYmdGhpcy55PD10LnkmJnRoaXMueCt0aGlzLndpZHRoPj10LngrZSYmdGhpcy55K3RoaXMuaGVpZ2h0Pj10LnkraX0sZS5vdmVybGFwcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLngrdGhpcy53aWR0aCxpPXRoaXMueSt0aGlzLmhlaWdodCxuPXQueCt0LndpZHRoLG89dC55K3QuaGVpZ2h0O3JldHVybiB0aGlzLng8biYmZT50LngmJnRoaXMueTxvJiZpPnQueX0sZS5nZXRNYXhpbWFsRnJlZVJlY3RzPWZ1bmN0aW9uKGUpe2lmKCF0aGlzLm92ZXJsYXBzKGUpKXJldHVybiExO3ZhciBpLG49W10sbz10aGlzLngrdGhpcy53aWR0aCxzPXRoaXMueSt0aGlzLmhlaWdodCxyPWUueCtlLndpZHRoLGE9ZS55K2UuaGVpZ2h0O3JldHVybiB0aGlzLnk8ZS55JiYoaT1uZXcgdCh7eDp0aGlzLngseTp0aGlzLnksd2lkdGg6dGhpcy53aWR0aCxoZWlnaHQ6ZS55LXRoaXMueX0pLG4ucHVzaChpKSksbz5yJiYoaT1uZXcgdCh7eDpyLHk6dGhpcy55LHdpZHRoOm8tcixoZWlnaHQ6dGhpcy5oZWlnaHR9KSxuLnB1c2goaSkpLHM+YSYmKGk9bmV3IHQoe3g6dGhpcy54LHk6YSx3aWR0aDp0aGlzLndpZHRoLGhlaWdodDpzLWF9KSxuLnB1c2goaSkpLHRoaXMueDxlLngmJihpPW5ldyB0KHt4OnRoaXMueCx5OnRoaXMueSx3aWR0aDplLngtdGhpcy54LGhlaWdodDp0aGlzLmhlaWdodH0pLG4ucHVzaChpKSksbn0sZS5jYW5GaXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMud2lkdGg+PXQud2lkdGgmJnRoaXMuaGVpZ2h0Pj10LmhlaWdodH0sdH0pLGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShcInBhY2tlcnkvanMvcGFja2VyXCIsW1wiLi9yZWN0XCJdLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMpbW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwiLi9yZWN0XCIpKTtlbHNle3ZhciBpPXQuUGFja2VyeT10LlBhY2tlcnl8fHt9O2kuUGFja2VyPWUoaS5SZWN0KX19KHdpbmRvdyxmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQsZSxpKXt0aGlzLndpZHRoPXR8fDAsdGhpcy5oZWlnaHQ9ZXx8MCx0aGlzLnNvcnREaXJlY3Rpb249aXx8XCJkb3dud2FyZExlZnRUb1JpZ2h0XCIsdGhpcy5yZXNldCgpfXZhciBpPWUucHJvdG90eXBlO2kucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLnNwYWNlcz1bXTt2YXIgZT1uZXcgdCh7eDowLHk6MCx3aWR0aDp0aGlzLndpZHRoLGhlaWdodDp0aGlzLmhlaWdodH0pO3RoaXMuc3BhY2VzLnB1c2goZSksdGhpcy5zb3J0ZXI9blt0aGlzLnNvcnREaXJlY3Rpb25dfHxuLmRvd253YXJkTGVmdFRvUmlnaHR9LGkucGFjaz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuc3BhY2VzLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMuc3BhY2VzW2VdO2lmKGkuY2FuRml0KHQpKXt0aGlzLnBsYWNlSW5TcGFjZSh0LGkpO2JyZWFrfX19LGkuY29sdW1uUGFjaz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuc3BhY2VzLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMuc3BhY2VzW2VdLG49aS54PD10LngmJmkueCtpLndpZHRoPj10LngrdC53aWR0aCYmaS5oZWlnaHQ+PXQuaGVpZ2h0LS4wMTtpZihuKXt0Lnk9aS55LHRoaXMucGxhY2VkKHQpO2JyZWFrfX19LGkucm93UGFjaz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMuc3BhY2VzLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMuc3BhY2VzW2VdLG49aS55PD10LnkmJmkueStpLmhlaWdodD49dC55K3QuaGVpZ2h0JiZpLndpZHRoPj10LndpZHRoLS4wMTtpZihuKXt0Lng9aS54LHRoaXMucGxhY2VkKHQpO2JyZWFrfX19LGkucGxhY2VJblNwYWNlPWZ1bmN0aW9uKHQsZSl7dC54PWUueCx0Lnk9ZS55LHRoaXMucGxhY2VkKHQpfSxpLnBsYWNlZD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10saT0wO2k8dGhpcy5zcGFjZXMubGVuZ3RoO2krKyl7dmFyIG49dGhpcy5zcGFjZXNbaV0sbz1uLmdldE1heGltYWxGcmVlUmVjdHModCk7bz9lLnB1c2guYXBwbHkoZSxvKTplLnB1c2gobil9dGhpcy5zcGFjZXM9ZSx0aGlzLm1lcmdlU29ydFNwYWNlcygpfSxpLm1lcmdlU29ydFNwYWNlcz1mdW5jdGlvbigpe2UubWVyZ2VSZWN0cyh0aGlzLnNwYWNlcyksdGhpcy5zcGFjZXMuc29ydCh0aGlzLnNvcnRlcil9LGkuYWRkU3BhY2U9ZnVuY3Rpb24odCl7dGhpcy5zcGFjZXMucHVzaCh0KSx0aGlzLm1lcmdlU29ydFNwYWNlcygpfSxlLm1lcmdlUmVjdHM9ZnVuY3Rpb24odCl7dmFyIGU9MCxpPXRbZV07dDpmb3IoO2k7KXtmb3IodmFyIG49MCxvPXRbZStuXTtvOyl7aWYobz09aSluKys7ZWxzZXtpZihvLmNvbnRhaW5zKGkpKXt0LnNwbGljZShlLDEpLGk9dFtlXTtjb250aW51ZSB0fWkuY29udGFpbnMobyk/dC5zcGxpY2UoZStuLDEpOm4rK31vPXRbZStuXX1lKyssaT10W2VdfXJldHVybiB0fTt2YXIgbj17ZG93bndhcmRMZWZ0VG9SaWdodDpmdW5jdGlvbih0LGUpe3JldHVybiB0LnktZS55fHx0LngtZS54fSxyaWdodHdhcmRUb3BUb0JvdHRvbTpmdW5jdGlvbih0LGUpe3JldHVybiB0LngtZS54fHx0LnktZS55fX07cmV0dXJuIGV9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJwYWNrZXJ5L2pzL2l0ZW1cIixbXCJvdXRsYXllci9vdXRsYXllclwiLFwiLi9yZWN0XCJdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcIm91dGxheWVyXCIpLHJlcXVpcmUoXCIuL3JlY3RcIikpOnQuUGFja2VyeS5JdGVtPWUodC5PdXRsYXllcix0LlBhY2tlcnkuUmVjdCl9KHdpbmRvdyxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3ZhciBpPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxuPVwic3RyaW5nXCI9PXR5cGVvZiBpLnRyYW5zZm9ybT9cInRyYW5zZm9ybVwiOlwiV2Via2l0VHJhbnNmb3JtXCIsbz1mdW5jdGlvbigpe3QuSXRlbS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHM9by5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0Lkl0ZW0ucHJvdG90eXBlKSxyPXMuX2NyZWF0ZTtzLl9jcmVhdGU9ZnVuY3Rpb24oKXtyLmNhbGwodGhpcyksdGhpcy5yZWN0PW5ldyBlfTt2YXIgYT1zLm1vdmVUbztyZXR1cm4gcy5tb3ZlVG89ZnVuY3Rpb24odCxlKXt2YXIgaT1NYXRoLmFicyh0aGlzLnBvc2l0aW9uLngtdCksbj1NYXRoLmFicyh0aGlzLnBvc2l0aW9uLnktZSksbz10aGlzLmxheW91dC5kcmFnSXRlbUNvdW50JiYhdGhpcy5pc1BsYWNpbmcmJiF0aGlzLmlzVHJhbnNpdGlvbmluZyYmMT5pJiYxPm47cmV0dXJuIG8/dm9pZCB0aGlzLmdvVG8odCxlKTp2b2lkIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzLmVuYWJsZVBsYWNpbmc9ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMoKSx0aGlzLmlzVHJhbnNpdGlvbmluZyYmbiYmKHRoaXMuZWxlbWVudC5zdHlsZVtuXT1cIm5vbmVcIiksdGhpcy5pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5nZXRTaXplKCksdGhpcy5sYXlvdXQuX3NldFJlY3RTaXplKHRoaXMuZWxlbWVudCx0aGlzLnJlY3QpLHRoaXMuaXNQbGFjaW5nPSEwfSxzLmRpc2FibGVQbGFjaW5nPWZ1bmN0aW9uKCl7dGhpcy5pc1BsYWNpbmc9ITF9LHMucmVtb3ZlRWxlbT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCksdGhpcy5sYXlvdXQucGFja2VyLmFkZFNwYWNlKHRoaXMucmVjdCksdGhpcy5lbWl0RXZlbnQoXCJyZW1vdmVcIixbdGhpc10pfSxzLnNob3dEcm9wUGxhY2Vob2xkZXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmRyb3BQbGFjZWhvbGRlcjt0fHwodD10aGlzLmRyb3BQbGFjZWhvbGRlcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHQuY2xhc3NOYW1lPVwicGFja2VyeS1kcm9wLXBsYWNlaG9sZGVyXCIsdC5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIpLHQuc3R5bGUud2lkdGg9dGhpcy5zaXplLndpZHRoK1wicHhcIix0LnN0eWxlLmhlaWdodD10aGlzLnNpemUuaGVpZ2h0K1wicHhcIix0aGlzLnBvc2l0aW9uRHJvcFBsYWNlaG9sZGVyKCksdGhpcy5sYXlvdXQuZWxlbWVudC5hcHBlbmRDaGlsZCh0KX0scy5wb3NpdGlvbkRyb3BQbGFjZWhvbGRlcj1mdW5jdGlvbigpe3RoaXMuZHJvcFBsYWNlaG9sZGVyLnN0eWxlW25dPVwidHJhbnNsYXRlKFwiK3RoaXMucmVjdC54K1wicHgsIFwiK3RoaXMucmVjdC55K1wicHgpXCJ9LHMuaGlkZURyb3BQbGFjZWhvbGRlcj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZHJvcFBsYWNlaG9sZGVyLnBhcmVudE5vZGU7dCYmdC5yZW1vdmVDaGlsZCh0aGlzLmRyb3BQbGFjZWhvbGRlcil9LG99KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZ2V0LXNpemUvZ2V0LXNpemVcIixcIm91dGxheWVyL291dGxheWVyXCIsXCJwYWNrZXJ5L2pzL3JlY3RcIixcInBhY2tlcnkvanMvcGFja2VyXCIsXCJwYWNrZXJ5L2pzL2l0ZW1cIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwiZ2V0LXNpemVcIikscmVxdWlyZShcIm91dGxheWVyXCIpLHJlcXVpcmUoXCIuL3JlY3RcIikscmVxdWlyZShcIi4vcGFja2VyXCIpLHJlcXVpcmUoXCIuL2l0ZW1cIikpOnQuUGFja2VyeT1lKHQuZ2V0U2l6ZSx0Lk91dGxheWVyLHQuUGFja2VyeS5SZWN0LHQuUGFja2VyeS5QYWNrZXIsdC5QYWNrZXJ5Lkl0ZW0pfSh3aW5kb3csZnVuY3Rpb24odCxlLGksbixvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKHQsZSl7cmV0dXJuIHQucG9zaXRpb24ueS1lLnBvc2l0aW9uLnl8fHQucG9zaXRpb24ueC1lLnBvc2l0aW9uLnh9ZnVuY3Rpb24gcih0LGUpe3JldHVybiB0LnBvc2l0aW9uLngtZS5wb3NpdGlvbi54fHx0LnBvc2l0aW9uLnktZS5wb3NpdGlvbi55fWZ1bmN0aW9uIGEodCxlKXt2YXIgaT1lLngtdC54LG49ZS55LXQueTtyZXR1cm4gTWF0aC5zcXJ0KGkqaStuKm4pfWkucHJvdG90eXBlLmNhbkZpdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy53aWR0aD49dC53aWR0aC0xJiZ0aGlzLmhlaWdodD49dC5oZWlnaHQtMX07dmFyIGg9ZS5jcmVhdGUoXCJwYWNrZXJ5XCIpO2guSXRlbT1vO3ZhciB1PWgucHJvdG90eXBlO3UuX2NyZWF0ZT1mdW5jdGlvbigpe2UucHJvdG90eXBlLl9jcmVhdGUuY2FsbCh0aGlzKSx0aGlzLnBhY2tlcj1uZXcgbix0aGlzLnNoaWZ0UGFja2VyPW5ldyBuLHRoaXMuaXNFbmFibGVkPSEwLHRoaXMuZHJhZ0l0ZW1Db3VudD0wO3ZhciB0PXRoaXM7dGhpcy5oYW5kbGVEcmFnZ2FiaWxseT17ZHJhZ1N0YXJ0OmZ1bmN0aW9uKCl7dC5pdGVtRHJhZ1N0YXJ0KHRoaXMuZWxlbWVudCl9LGRyYWdNb3ZlOmZ1bmN0aW9uKCl7dC5pdGVtRHJhZ01vdmUodGhpcy5lbGVtZW50LHRoaXMucG9zaXRpb24ueCx0aGlzLnBvc2l0aW9uLnkpfSxkcmFnRW5kOmZ1bmN0aW9uKCl7dC5pdGVtRHJhZ0VuZCh0aGlzLmVsZW1lbnQpfX0sdGhpcy5oYW5kbGVVSURyYWdnYWJsZT17c3RhcnQ6ZnVuY3Rpb24oZSxpKXtpJiZ0Lml0ZW1EcmFnU3RhcnQoZS5jdXJyZW50VGFyZ2V0KX0sZHJhZzpmdW5jdGlvbihlLGkpe2kmJnQuaXRlbURyYWdNb3ZlKGUuY3VycmVudFRhcmdldCxpLnBvc2l0aW9uLmxlZnQsaS5wb3NpdGlvbi50b3ApfSxzdG9wOmZ1bmN0aW9uKGUsaSl7aSYmdC5pdGVtRHJhZ0VuZChlLmN1cnJlbnRUYXJnZXQpfX19LHUuX3Jlc2V0TGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy5nZXRTaXplKCksdGhpcy5fZ2V0TWVhc3VyZW1lbnRzKCk7dmFyIHQsZSxpO3RoaXMuX2dldE9wdGlvbihcImhvcml6b250YWxcIik/KHQ9MS8wLGU9dGhpcy5zaXplLmlubmVySGVpZ2h0K3RoaXMuZ3V0dGVyLGk9XCJyaWdodHdhcmRUb3BUb0JvdHRvbVwiKToodD10aGlzLnNpemUuaW5uZXJXaWR0aCt0aGlzLmd1dHRlcixlPTEvMCxpPVwiZG93bndhcmRMZWZ0VG9SaWdodFwiKSx0aGlzLnBhY2tlci53aWR0aD10aGlzLnNoaWZ0UGFja2VyLndpZHRoPXQsdGhpcy5wYWNrZXIuaGVpZ2h0PXRoaXMuc2hpZnRQYWNrZXIuaGVpZ2h0PWUsdGhpcy5wYWNrZXIuc29ydERpcmVjdGlvbj10aGlzLnNoaWZ0UGFja2VyLnNvcnREaXJlY3Rpb249aSx0aGlzLnBhY2tlci5yZXNldCgpLHRoaXMubWF4WT0wLHRoaXMubWF4WD0wfSx1Ll9nZXRNZWFzdXJlbWVudHM9ZnVuY3Rpb24oKXt0aGlzLl9nZXRNZWFzdXJlbWVudChcImNvbHVtbldpZHRoXCIsXCJ3aWR0aFwiKSx0aGlzLl9nZXRNZWFzdXJlbWVudChcInJvd0hlaWdodFwiLFwiaGVpZ2h0XCIpLHRoaXMuX2dldE1lYXN1cmVtZW50KFwiZ3V0dGVyXCIsXCJ3aWR0aFwiKX0sdS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX3NldFJlY3RTaXplKHQuZWxlbWVudCx0LnJlY3QpLHRoaXMuaXNTaGlmdGluZ3x8dGhpcy5kcmFnSXRlbUNvdW50PjApe3ZhciBlPXRoaXMuX2dldFBhY2tNZXRob2QoKTt0aGlzLnBhY2tlcltlXSh0LnJlY3QpfWVsc2UgdGhpcy5wYWNrZXIucGFjayh0LnJlY3QpO3JldHVybiB0aGlzLl9zZXRNYXhYWSh0LnJlY3QpLHQucmVjdH0sdS5zaGlmdExheW91dD1mdW5jdGlvbigpe3RoaXMuaXNTaGlmdGluZz0hMCx0aGlzLmxheW91dCgpLGRlbGV0ZSB0aGlzLmlzU2hpZnRpbmd9LHUuX2dldFBhY2tNZXRob2Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKFwiaG9yaXpvbnRhbFwiKT9cInJvd1BhY2tcIjpcImNvbHVtblBhY2tcIn0sdS5fc2V0TWF4WFk9ZnVuY3Rpb24odCl7dGhpcy5tYXhYPU1hdGgubWF4KHQueCt0LndpZHRoLHRoaXMubWF4WCksdGhpcy5tYXhZPU1hdGgubWF4KHQueSt0LmhlaWdodCx0aGlzLm1heFkpfSx1Ll9zZXRSZWN0U2l6ZT1mdW5jdGlvbihlLGkpe3ZhciBuPXQoZSksbz1uLm91dGVyV2lkdGgscz1uLm91dGVySGVpZ2h0OyhvfHxzKSYmKG89dGhpcy5fYXBwbHlHcmlkR3V0dGVyKG8sdGhpcy5jb2x1bW5XaWR0aCkscz10aGlzLl9hcHBseUdyaWRHdXR0ZXIocyx0aGlzLnJvd0hlaWdodCkpLGkud2lkdGg9TWF0aC5taW4obyx0aGlzLnBhY2tlci53aWR0aCksaS5oZWlnaHQ9TWF0aC5taW4ocyx0aGlzLnBhY2tlci5oZWlnaHQpfSx1Ll9hcHBseUdyaWRHdXR0ZXI9ZnVuY3Rpb24odCxlKXtpZighZSlyZXR1cm4gdCt0aGlzLmd1dHRlcjtlKz10aGlzLmd1dHRlcjt2YXIgaT10JWUsbj1pJiYxPmk/XCJyb3VuZFwiOlwiY2VpbFwiO3JldHVybiB0PU1hdGhbbl0odC9lKSplfSx1Ll9nZXRDb250YWluZXJTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2dldE9wdGlvbihcImhvcml6b250YWxcIik/e3dpZHRoOnRoaXMubWF4WC10aGlzLmd1dHRlcn06e2hlaWdodDp0aGlzLm1heFktdGhpcy5ndXR0ZXJ9fSx1Ll9tYW5hZ2VTdGFtcD1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMuZ2V0SXRlbSh0KTtpZihuJiZuLmlzUGxhY2luZyllPW4ucmVjdDtlbHNle3ZhciBvPXRoaXMuX2dldEVsZW1lbnRPZmZzZXQodCk7ZT1uZXcgaSh7eDp0aGlzLl9nZXRPcHRpb24oXCJvcmlnaW5MZWZ0XCIpP28ubGVmdDpvLnJpZ2h0LHk6dGhpcy5fZ2V0T3B0aW9uKFwib3JpZ2luVG9wXCIpP28udG9wOm8uYm90dG9tfSl9dGhpcy5fc2V0UmVjdFNpemUodCxlKSx0aGlzLnBhY2tlci5wbGFjZWQoZSksdGhpcy5fc2V0TWF4WFkoZSl9LHUuc29ydEl0ZW1zQnlQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldE9wdGlvbihcImhvcml6b250YWxcIik/cjpzO3RoaXMuaXRlbXMuc29ydCh0KX0sdS5maXQ9ZnVuY3Rpb24odCxlLGkpe3ZhciBuPXRoaXMuZ2V0SXRlbSh0KTtuJiYodGhpcy5zdGFtcChuLmVsZW1lbnQpLG4uZW5hYmxlUGxhY2luZygpLHRoaXMudXBkYXRlU2hpZnRUYXJnZXRzKG4pLGU9dm9pZCAwPT09ZT9uLnJlY3QueDplLGk9dm9pZCAwPT09aT9uLnJlY3QueTppLHRoaXMuc2hpZnQobixlLGkpLHRoaXMuX2JpbmRGaXRFdmVudHMobiksbi5tb3ZlVG8obi5yZWN0Lngsbi5yZWN0LnkpLHRoaXMuc2hpZnRMYXlvdXQoKSx0aGlzLnVuc3RhbXAobi5lbGVtZW50KSx0aGlzLnNvcnRJdGVtc0J5UG9zaXRpb24oKSxuLmRpc2FibGVQbGFjaW5nKCkpfSx1Ll9iaW5kRml0RXZlbnRzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtuKyssMj09biYmaS5kaXNwYXRjaEV2ZW50KFwiZml0Q29tcGxldGVcIixudWxsLFt0XSl9dmFyIGk9dGhpcyxuPTA7dC5vbmNlKFwibGF5b3V0XCIsZSksdGhpcy5vbmNlKFwibGF5b3V0Q29tcGxldGVcIixlKX0sdS5yZXNpemU9ZnVuY3Rpb24oKXt0aGlzLmlzUmVzaXplQm91bmQmJnRoaXMubmVlZHNSZXNpemVMYXlvdXQoKSYmKHRoaXMub3B0aW9ucy5zaGlmdFBlcmNlbnRSZXNpemU/dGhpcy5yZXNpemVTaGlmdFBlcmNlbnRMYXlvdXQoKTp0aGlzLmxheW91dCgpKX0sdS5uZWVkc1Jlc2l6ZUxheW91dD1mdW5jdGlvbigpe3ZhciBlPXQodGhpcy5lbGVtZW50KSxpPXRoaXMuX2dldE9wdGlvbihcImhvcml6b250YWxcIik/XCJpbm5lckhlaWdodFwiOlwiaW5uZXJXaWR0aFwiO3JldHVybiBlW2ldIT10aGlzLnNpemVbaV19LHUucmVzaXplU2hpZnRQZXJjZW50TGF5b3V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fZ2V0SXRlbXNGb3JMYXlvdXQodGhpcy5pdGVtcyksaT10aGlzLl9nZXRPcHRpb24oXCJob3Jpem9udGFsXCIpLG49aT9cInlcIjpcInhcIixvPWk/XCJoZWlnaHRcIjpcIndpZHRoXCIscz1pP1wicm93SGVpZ2h0XCI6XCJjb2x1bW5XaWR0aFwiLHI9aT9cImlubmVySGVpZ2h0XCI6XCJpbm5lcldpZHRoXCIsYT10aGlzW3NdO2lmKGE9YSYmYSt0aGlzLmd1dHRlcil7dGhpcy5fZ2V0TWVhc3VyZW1lbnRzKCk7dmFyIGg9dGhpc1tzXSt0aGlzLmd1dHRlcjtlLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9TWF0aC5yb3VuZCh0LnJlY3Rbbl0vYSk7dC5yZWN0W25dPWUqaH0pfWVsc2V7dmFyIHU9dCh0aGlzLmVsZW1lbnQpW3JdK3RoaXMuZ3V0dGVyLGM9dGhpcy5wYWNrZXJbb107ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucmVjdFtuXT10LnJlY3Rbbl0vYyp1fSl9dGhpcy5zaGlmdExheW91dCgpfSx1Lml0ZW1EcmFnU3RhcnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5pc0VuYWJsZWQpe3RoaXMuc3RhbXAodCk7dmFyIGU9dGhpcy5nZXRJdGVtKHQpO2UmJihlLmVuYWJsZVBsYWNpbmcoKSxlLnNob3dEcm9wUGxhY2Vob2xkZXIoKSx0aGlzLmRyYWdJdGVtQ291bnQrKyx0aGlzLnVwZGF0ZVNoaWZ0VGFyZ2V0cyhlKSl9fSx1LnVwZGF0ZVNoaWZ0VGFyZ2V0cz1mdW5jdGlvbih0KXt0aGlzLnNoaWZ0UGFja2VyLnJlc2V0KCksdGhpcy5fZ2V0Qm91bmRpbmdSZWN0KCk7dmFyIGU9dGhpcy5fZ2V0T3B0aW9uKFwib3JpZ2luTGVmdFwiKSxuPXRoaXMuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKTt0aGlzLnN0YW1wcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBvPXRoaXMuZ2V0SXRlbSh0KTtpZighb3x8IW8uaXNQbGFjaW5nKXt2YXIgcz10aGlzLl9nZXRFbGVtZW50T2Zmc2V0KHQpLHI9bmV3IGkoe3g6ZT9zLmxlZnQ6cy5yaWdodCx5Om4/cy50b3A6cy5ib3R0b219KTt0aGlzLl9zZXRSZWN0U2l6ZSh0LHIpLHRoaXMuc2hpZnRQYWNrZXIucGxhY2VkKHIpfX0sdGhpcyk7dmFyIG89dGhpcy5fZ2V0T3B0aW9uKFwiaG9yaXpvbnRhbFwiKSxzPW8/XCJyb3dIZWlnaHRcIjpcImNvbHVtbldpZHRoXCIscj1vP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiO3RoaXMuc2hpZnRUYXJnZXRLZXlzPVtdLHRoaXMuc2hpZnRUYXJnZXRzPVtdO3ZhciBhLGg9dGhpc1tzXTtpZihoPWgmJmgrdGhpcy5ndXR0ZXIpe3ZhciB1PU1hdGguY2VpbCh0LnJlY3Rbcl0vaCksYz1NYXRoLmZsb29yKCh0aGlzLnNoaWZ0UGFja2VyW3JdK3RoaXMuZ3V0dGVyKS9oKTthPShjLXUpKmg7Zm9yKHZhciBkPTA7Yz5kO2QrKyl7dmFyIGY9bz8wOmQqaCxsPW8/ZCpoOjA7dGhpcy5fYWRkU2hpZnRUYXJnZXQoZixsLGEpfX1lbHNlIGE9dGhpcy5zaGlmdFBhY2tlcltyXSt0aGlzLmd1dHRlci10LnJlY3Rbcl0sdGhpcy5fYWRkU2hpZnRUYXJnZXQoMCwwLGEpO3ZhciBwPXRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KHRoaXMuaXRlbXMpLGc9dGhpcy5fZ2V0UGFja01ldGhvZCgpO3AuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10LnJlY3Q7dGhpcy5fc2V0UmVjdFNpemUodC5lbGVtZW50LGUpLHRoaXMuc2hpZnRQYWNrZXJbZ10oZSksdGhpcy5fYWRkU2hpZnRUYXJnZXQoZS54LGUueSxhKTt2YXIgaT1vP2UueCtlLndpZHRoOmUueCxuPW8/ZS55OmUueStlLmhlaWdodDtpZih0aGlzLl9hZGRTaGlmdFRhcmdldChpLG4sYSksaClmb3IodmFyIHM9TWF0aC5yb3VuZChlW3JdL2gpLHU9MTtzPnU7dSsrKXt2YXIgYz1vP2k6ZS54K2gqdSxkPW8/ZS55K2gqdTpuO3RoaXMuX2FkZFNoaWZ0VGFyZ2V0KGMsZCxhKX19LHRoaXMpfSx1Ll9hZGRTaGlmdFRhcmdldD1mdW5jdGlvbih0LGUsaSl7dmFyIG49dGhpcy5fZ2V0T3B0aW9uKFwiaG9yaXpvbnRhbFwiKT9lOnQ7aWYoISgwIT09biYmbj5pKSl7dmFyIG89dCtcIixcIitlLHM9LTEhPXRoaXMuc2hpZnRUYXJnZXRLZXlzLmluZGV4T2Yobyk7c3x8KHRoaXMuc2hpZnRUYXJnZXRLZXlzLnB1c2gobyksdGhpcy5zaGlmdFRhcmdldHMucHVzaCh7eDp0LHk6ZX0pKX19LHUuc2hpZnQ9ZnVuY3Rpb24odCxlLGkpe3ZhciBuLG89MS8wLHM9e3g6ZSx5Oml9O3RoaXMuc2hpZnRUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9YSh0LHMpO28+ZSYmKG49dCxvPWUpfSksdC5yZWN0Lng9bi54LHQucmVjdC55PW4ueX07dmFyIGM9MTIwO3UuaXRlbURyYWdNb3ZlPWZ1bmN0aW9uKHQsZSxpKXtcbmZ1bmN0aW9uIG4oKXtzLnNoaWZ0KG8sZSxpKSxvLnBvc2l0aW9uRHJvcFBsYWNlaG9sZGVyKCkscy5sYXlvdXQoKX12YXIgbz10aGlzLmlzRW5hYmxlZCYmdGhpcy5nZXRJdGVtKHQpO2lmKG8pe2UtPXRoaXMuc2l6ZS5wYWRkaW5nTGVmdCxpLT10aGlzLnNpemUucGFkZGluZ1RvcDt2YXIgcz10aGlzLHI9bmV3IERhdGU7dGhpcy5faXRlbURyYWdUaW1lJiZyLXRoaXMuX2l0ZW1EcmFnVGltZTxjPyhjbGVhclRpbWVvdXQodGhpcy5kcmFnVGltZW91dCksdGhpcy5kcmFnVGltZW91dD1zZXRUaW1lb3V0KG4sYykpOihuKCksdGhpcy5faXRlbURyYWdUaW1lPXIpfX0sdS5pdGVtRHJhZ0VuZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7bisrLDI9PW4mJihpLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImlzLXBvc2l0aW9uaW5nLXBvc3QtZHJhZ1wiKSxpLmhpZGVEcm9wUGxhY2Vob2xkZXIoKSxvLmRpc3BhdGNoRXZlbnQoXCJkcmFnSXRlbVBvc2l0aW9uZWRcIixudWxsLFtpXSkpfXZhciBpPXRoaXMuaXNFbmFibGVkJiZ0aGlzLmdldEl0ZW0odCk7aWYoaSl7Y2xlYXJUaW1lb3V0KHRoaXMuZHJhZ1RpbWVvdXQpLGkuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtcG9zaXRpb25pbmctcG9zdC1kcmFnXCIpO3ZhciBuPTAsbz10aGlzO2kub25jZShcImxheW91dFwiLGUpLHRoaXMub25jZShcImxheW91dENvbXBsZXRlXCIsZSksaS5tb3ZlVG8oaS5yZWN0LngsaS5yZWN0LnkpLHRoaXMubGF5b3V0KCksdGhpcy5kcmFnSXRlbUNvdW50PU1hdGgubWF4KDAsdGhpcy5kcmFnSXRlbUNvdW50LTEpLHRoaXMuc29ydEl0ZW1zQnlQb3NpdGlvbigpLGkuZGlzYWJsZVBsYWNpbmcoKSx0aGlzLnVuc3RhbXAoaS5lbGVtZW50KX19LHUuYmluZERyYWdnYWJpbGx5RXZlbnRzPWZ1bmN0aW9uKHQpe3RoaXMuX2JpbmREcmFnZ2FiaWxseUV2ZW50cyh0LFwib25cIil9LHUudW5iaW5kRHJhZ2dhYmlsbHlFdmVudHM9ZnVuY3Rpb24odCl7dGhpcy5fYmluZERyYWdnYWJpbGx5RXZlbnRzKHQsXCJvZmZcIil9LHUuX2JpbmREcmFnZ2FiaWxseUV2ZW50cz1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuaGFuZGxlRHJhZ2dhYmlsbHk7dFtlXShcImRyYWdTdGFydFwiLGkuZHJhZ1N0YXJ0KSx0W2VdKFwiZHJhZ01vdmVcIixpLmRyYWdNb3ZlKSx0W2VdKFwiZHJhZ0VuZFwiLGkuZHJhZ0VuZCl9LHUuYmluZFVJRHJhZ2dhYmxlRXZlbnRzPWZ1bmN0aW9uKHQpe3RoaXMuX2JpbmRVSURyYWdnYWJsZUV2ZW50cyh0LFwib25cIil9LHUudW5iaW5kVUlEcmFnZ2FibGVFdmVudHM9ZnVuY3Rpb24odCl7dGhpcy5fYmluZFVJRHJhZ2dhYmxlRXZlbnRzKHQsXCJvZmZcIil9LHUuX2JpbmRVSURyYWdnYWJsZUV2ZW50cz1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuaGFuZGxlVUlEcmFnZ2FibGU7dFtlXShcImRyYWdzdGFydFwiLGkuc3RhcnQpW2VdKFwiZHJhZ1wiLGkuZHJhZylbZV0oXCJkcmFnc3RvcFwiLGkuc3RvcCl9O3ZhciBkPXUuZGVzdHJveTtyZXR1cm4gdS5kZXN0cm95PWZ1bmN0aW9uKCl7ZC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5pc0VuYWJsZWQ9ITF9LGguUmVjdD1pLGguUGFja2VyPW4saH0pO1xuXG4vKipcbiAqIGpRdWVyeSBVbnZlaWxcbiAqIEEgdmVyeSBsaWdodHdlaWdodCBqUXVlcnkgcGx1Z2luIHRvIGxhenkgbG9hZCBpbWFnZXNcbiAqIGh0dHA6Ly9sdWlzLWFsbWVpZGEuZ2l0aHViLmNvbS91bnZlaWxcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBDb3B5cmlnaHQgMjAxMyBMdcOtcyBBbG1laWRhXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbHVpcy1hbG1laWRhXG4gKi9cblxuOyhmdW5jdGlvbigkKSB7XG5cbiAgJC5mbi51bnZlaWwgPSBmdW5jdGlvbih0aHJlc2hvbGQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG5cbiAgICB2YXIgJHcgPSAkKHdpbmRvdyksXG4gICAgICAgIHRoID0gdGhyZXNob2xkIHx8IDAsXG4gICAgICAgIHJldGluYSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSxcbiAgICAgICAgYXR0cmliID0gcmV0aW5hPyBcImRhdGEtc3JjLXJldGluYVwiIDogXCJkYXRhLXNyY1wiLFxuICAgICAgICBpbWFnZXMgPSB0aGlzLFxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgcXVldWVDb3VudGVyID0gMCxcbiAgICAgICAgbG9hZGVkO1xuXG4gICAgdGhpcy5vbmUoXCJ1bnZlaWxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYmVmb3JlVW52ZWlsID09PSBcImZ1bmN0aW9uXCIpIG9wdGlvbnMuYmVmb3JlVW52ZWlsLmNhbGwodGhpcyk7XG5cbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldEF0dHJpYnV0ZShhdHRyaWIpO1xuICAgICAgc291cmNlID0gc291cmNlIHx8IHRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIik7XG5cbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc291cmNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjay5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gdW52ZWlsKCkge1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB2YXIgaW52aWV3ID0gaW1hZ2VzLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gaWYoaSsrID49IDIpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgJGUgPSAkKHRoaXMpO1xuICAgICAgICBpZiAoJGUuaXMoXCI6aGlkZGVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHd0ID0gJHcuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICB3YiA9IHd0ICsgJHcuaGVpZ2h0KCksXG4gICAgICAgICAgICBldCA9ICRlLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgIGViID0gZXQgKyAkZS5oZWlnaHQoKTtcblxuICAgICAgICByZXR1cm4gZWIgPj0gd3QgLSB0aCAmJiBldCA8PSB3YiArIHRoO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBpbnZpZXdJbWFnZXMgPSBpbnZpZXcubGVuZ3RoO1xuXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW52aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBqID0gaTtcblxuICAgICAgICAvLyBBZGQgb25sb2FkLWV2ZW50IHdoZW4gbm90IGJpbmVkIHlldFxuICAgICAgICB2YXIgaW1nRXZlbnRzID0gd2luZG93LmpRdWVyeS5fZGF0YShpbnZpZXdbaV0sIFwiZXZlbnRzXCIpO1xuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuXG4gICAgICAgIHZhbGlkID0gdmFsaWQgJiYgKHR5cGVvZiBpbWdFdmVudHMgIT09IFwidW5kZWZpbmVkXCIpO1xuXG4gICAgICAgIGlmKHZhbGlkKSB7XG4gICAgICAgICAgdmFsaWQgPSB2YWxpZCAmJiAodHlwZW9mIGltZ0V2ZW50cy5sb2FkID09PSBcInVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHZhbGlkKSB7XG4gICAgICAgICAgcXVldWVDb3VudGVyKys7XG5cbiAgICAgICAgICB3aW5kb3cualF1ZXJ5KGludmlld1tpXSkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1ZXVlQ291bnRlci0tO1xuICAgICAgICAgICAgdmFyIGxvYWRQZXJjZW50YWdlID0gMTAwIC0gKHF1ZXVlQ291bnRlci9pbnZpZXdJbWFnZXMgKiAxMDApO1xuXG4gICAgICAgICAgICAvLyBpZihsb2FkUGVyY2VudGFnZSA+PSAwICYmIGxvYWRQZXJjZW50YWdlIDw9IDEwMCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaW1hZ2VTZXRQcm9ncmVzc0NhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIG9wdGlvbnMuaW1hZ2VTZXRQcm9ncmVzc0NhbGxiYWNrLmNhbGwodGhpcywgdGhpcywgbG9hZFBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBpZihxdWV1ZUNvdW50ZXIgPT0gMCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWZ0ZXJJbWFnZVNldEhhc0JlZW5Mb2FkZWQgPT09IFwiZnVuY3Rpb25cIikgb3B0aW9ucy5hZnRlckltYWdlU2V0SGFzQmVlbkxvYWRlZC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvYWRlZCA9IGludmlldy50cmlnZ2VyKFwidW52ZWlsXCIpO1xuICAgICAgaW1hZ2VzID0gaW1hZ2VzLm5vdChsb2FkZWQpO1xuXG4gICAgICAvKmNvbnNvbGUubG9nKFwiaW52aWV3OiBcIiwgaW52aWV3SW1hZ2VzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwibG9hZGVkOiBcIiwgbG9hZGVkLmxlbmd0aCk7XG4gICAgICBjb25zb2xlLmxvZyhcIm5vdCBsb2FkZWQ6IFwiLCBpbWFnZXMubGVuZ3RoKTsqL1xuICAgIH1cblxuICAgICR3Lm9uKFwic2Nyb2xsLnVudmVpbCByZXNpemUudW52ZWlsIGxvb2t1cC51bnZlaWxcIiwgdW52ZWlsKTtcblxuICAgIHVudmVpbCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbn0pKHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTtcblxudmFyIGlzTW9iaWxlRGV2aWNlID0gZmFsc2U7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICQoJ2ltZy5zdmcnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgdmFyICRpbWcgPSBqUXVlcnkodGhpcyk7XG4gICAgdmFyIGltZ0lEID0gJGltZy5hdHRyKCdpZCcpO1xuICAgIHZhciBpbWdDbGFzcyA9ICRpbWcuYXR0cignY2xhc3MnKTtcbiAgICB2YXIgaW1nVVJMID0gJGltZy5hdHRyKCdzcmMnKTtcblxuICAgIGpRdWVyeS5nZXQoaW1nVVJMLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAvLyBHZXQgdGhlIFNWRyB0YWcsIGlnbm9yZSB0aGUgcmVzdFxuICAgICAgdmFyICRzdmcgPSBqUXVlcnkoZGF0YSkuZmluZCgnc3ZnJyk7XG5cbiAgICAgIC8vIEFkZCByZXBsYWNlZCBpbWFnZSdzIElEIHRvIHRoZSBuZXcgU1ZHXG4gICAgICBpZih0eXBlb2YgaW1nSUQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICRzdmcgPSAkc3ZnLmF0dHIoJ2lkJywgaW1nSUQpO1xuICAgICAgfVxuICAgICAgLy8gQWRkIHJlcGxhY2VkIGltYWdlJ3MgY2xhc3NlcyB0byB0aGUgbmV3IFNWR1xuICAgICAgaWYodHlwZW9mIGltZ0NsYXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAkc3ZnID0gJHN2Zy5hdHRyKCdjbGFzcycsIGltZ0NsYXNzKycgcmVwbGFjZWQtc3ZnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgaW52YWxpZCBYTUwgdGFncyBhcyBwZXIgaHR0cDovL3ZhbGlkYXRvci53My5vcmdcbiAgICAgICRzdmcgPSAkc3ZnLnJlbW92ZUF0dHIoJ3htbG5zOmEnKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHZpZXdwb3J0IGlzIHNldCwgaWYgdGhlIHZpZXdwb3J0IGlzIG5vdCBzZXQgdGhlIFNWRyB3b250J3Qgc2NhbGUuXG4gICAgICBpZighJHN2Zy5hdHRyKCd2aWV3Qm94JykgJiYgJHN2Zy5hdHRyKCdoZWlnaHQnKSAmJiAkc3ZnLmF0dHIoJ3dpZHRoJykpIHtcbiAgICAgICAgJHN2Zy5hdHRyKCd2aWV3Qm94JywgJzAgMCAnICsgJHN2Zy5hdHRyKCdoZWlnaHQnKSArICcgJyArICRzdmcuYXR0cignd2lkdGgnKSlcbiAgICAgIH1cblxuICAgICAgLy8gUmVwbGFjZSBpbWFnZSB3aXRoIG5ldyBTVkdcbiAgICAgICRpbWcucmVwbGFjZVdpdGgoJHN2Zyk7XG5cbiAgICB9LCAneG1sJyk7XG4gIH0pO1xuXG4gIGlmKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcGFkfGlyaXN8a2luZGxlfEFuZHJvaWR8U2lsa3xsZ2UgfG1hZW1vfG1pZHB8bW1wfG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC5zdWJzdHIoMCw0KSkpIHtcblxuICAgIGlzTW9iaWxlRGV2aWNlID0gdHJ1ZTtcbiAgfVxuXG4gICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oZWwpIHtcbiAgICBjYWxjdWxhdGVHcmlkV3JhcHBlclNpemUoXCIuaW1nLXdyYXBwZXJcIik7XG4gICAgd2F0Y2hBZmZpeCgpO1xuXG4gICAgJCh3aW5kb3cpLnRyaWdnZXIoXCJsb29rdXBcIik7XG4gICAgJGdyaWQucGFja2VyeSgpO1xuICB9KTtcblxuICB2YXIgJGdyaWQgPSAkKCcuZ3JpZCcpLnBhY2tlcnkoe1xuICAgIGl0ZW1TZWxlY3RvcjogJy5ncmlkLWl0ZW0nLFxuICAgIGNvbHVtbldpZHRoOiAnLmdyaWQtc2l6ZXInLFxuICAgIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZVxuICB9KTtcblxuICAvLyBpbXByb3ZlcyBsYXlvdXQgaW4gY29zdCBvZiBwZXJmb3JtYW5jZVxuICAvKnZhciBsYXN0Q2hlY2tlZCA9IDA7XG5cbiAgJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBpZihsYXN0Q2hlY2tlZCArIDEwMDAgPCBub3cpIHtcbiAgICAgICRncmlkLnBhY2tlcnkoKTtcbiAgICAgIGxhc3RDaGVja2VkID0gbm93O1xuICAgIH1cblxuICAgIGlmKCQod2luZG93KS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKSA9PSAkKGRvY3VtZW50KS5oZWlnaHQoKSkge1xuICAgICAgJGdyaWQucGFja2VyeSgpO1xuICAgIH1cbiAgfSk7Ki9cblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAkZ3JpZC5wYWNrZXJ5KCk7IH0sIDEwMDApO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAkZ3JpZC5wYWNrZXJ5KCk7IH0sIDIwMDApO1xuXG4gIHZhciB1bnZlaWxDb3VudGVyID0gJChcIi51bnZlaWxcIikubGVuZ3RoO1xuICB2YXIgbGFzdFBlcmNlbnRhZ2UgPSAwO1xuICB2YXIgcHJvY2Vzc1N0YWNrID0gMDtcblxuICAkKFwiLnVudmVpbFwiKS51bnZlaWwoMjAwLCBmdW5jdGlvbigpIHtcbiAgICAkKHRoaXMpLnBhcmVudHMoJy5ncmlkLWl0ZW0nKS5hZGRDbGFzcygnLXVudmVpbGVkJyk7XG5cbiAgICAkKHdpbmRvdykudHJpZ2dlcihcImxvb2t1cFwiKTtcblxuICAgICRncmlkLnBhY2tlcnkoKTtcbiAgfSxcbiAge1xuICAgIGJlZm9yZVVudmVpbDogZnVuY3Rpb24odGVzdCkge1xuICAgICAgcHJvY2Vzc1N0YWNrKys7XG5cbiAgICAgIGlmKGxhc3RQZXJjZW50YWdlID09IDApIHtcbiAgICAgICAgJCgnLnBhY2UtcHJvZ3Jlc3MnKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwJSwgMHB4LCAwcHgpJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciAkc3Bpbm5lciA9ICQoJy5zcGlubmVyJyk7XG5cbiAgICAgIGlmKCEkc3Bpbm5lci5oYXNDbGFzcygnLWhpZGRlbicpKSB7XG4gICAgICAgICRzcGlubmVyLmFkZENsYXNzKCctaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhZnRlckltYWdlU2V0SGFzQmVlbkxvYWRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBqdXN0IHRvIGJlIHN1cmVcbiAgICAgICQoJy5wYWNlLXByb2dyZXNzJykuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoMTAwJSwgMHB4LCAwcHgpJyk7XG4gICAgfSxcbiAgICBpbWFnZVNldFByb2dyZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGltYWdlLCBwZXJjZW50KSB7XG4gICAgICAkKGltYWdlKS5hZGRDbGFzcygnLXVudmVpbGVkJyk7XG4gICAgICBwcm9jZXNzU3RhY2stLTtcblxuICAgICAgJCgnLnBhY2UtcHJvZ3Jlc3MnKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnK3BlcmNlbnQrJyUsIDBweCwgMHB4KScpO1xuXG4gICAgICBpZihsYXN0UGVyY2VudGFnZSA8PSBwZXJjZW50KSB7XG4gICAgICAgIGxhc3RQZXJjZW50YWdlID0gcGVyY2VudDtcbiAgICAgICAgJCgnLnBhY2UtcHJvZ3Jlc3MnKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnK3BlcmNlbnQrJyUsIDBweCwgMHB4KScpO1xuXG4gICAgICAgIGlmKGxhc3RQZXJjZW50YWdlID49IDEwMCkge1xuICAgICAgICAgIGxhc3RQZXJjZW50YWdlID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgY2FsY3VsYXRlR3JpZFdyYXBwZXJTaXplKFwiLmltZy13cmFwcGVyXCIpO1xuICBzY3JvbGxUb3BCdXR0b24oNDAwKTtcbiAgd2F0Y2hBZmZpeCgpO1xuICB3YXRjaEFmZml4TWluU2l6ZSgpO1xufSk7XG5cblxuZnVuY3Rpb24gY2FsY3VsYXRlR3JpZFdyYXBwZXJTaXplKHNlbGVjdG9yKSB7XG4gICQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsKSB7XG4gICAgdmFyIGhlaWdodCAgPSAkKGVsKS5kYXRhKCdoZWlnaHQnKTtcbiAgICB2YXIgd2lkdGggICA9ICQoZWwpLmRhdGEoJ3dpZHRoJyk7XG4gICAgdmFyIGN1cnJlbnRXaWR0aCAgPSAkKGVsKS5vdXRlcldpZHRoKCk7XG5cbiAgICB2YXIgY3JvcEZhY3RvciA9IChjdXJyZW50V2lkdGggLyB3aWR0aCkgKiAxMDA7XG4gICAgdmFyIGNyb3BwZWRIZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCAqIGNyb3BGYWN0b3IgLyAxMDApO1xuXG4gICAgJChlbCkuaGVpZ2h0KGNyb3BwZWRIZWlnaHQgKyBcInB4XCIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd2F0Y2hBZmZpeCgpIHtcbiAgLy8gRW5hYmxlIC8gRGlzYWJsZSBhZmZpeFxuICB2YXIgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICB2YXIgYWZmaXhIZWlnaHQgICA9ICQoJy5qcy1ibG9nLWFmZml4JykuaGVpZ2h0KCk7XG5cbiAgaWYoYWZmaXhIZWlnaHQgPiB3aW5kb3dIZWlnaHQpIHtcbiAgICAkKHdpbmRvdykub2ZmKCcuYWZmaXgnKTtcbiAgfVxuICBlbHNlIHtcbiAgICAkKHdpbmRvdykub24oJy5hZmZpeCcpO1xuXG4gICAgJCgnLmpzLWJsb2ctYWZmaXgnKS5hZmZpeCh7XG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiAzMDVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXRjaEFmZml4TWluU2l6ZSgpIHtcbiAgdmFyIGNvbnRlbnRIZWlnaHQgPSAkKCcuYmxvZ3Bvc3RzJykuaGVpZ2h0KCk7XG4gIHZhciBhZmZpeEhlaWdodCAgID0gJCgnLmpzLWJsb2ctYWZmaXgnKS5oZWlnaHQoKTtcblxuICAkKCcuYmxvZ3Bvc3RzJykuY3NzKCdtaW4taGVpZ2h0JywgYWZmaXhIZWlnaHQgKyBcInB4XCIpO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxUb3BCdXR0b24ob2Zmc2V0KSB7XG4gIG9mZnNldCA9IChvZmZzZXQpID8gb2Zmc2V0IDogNDAwO1xuXG5cdHZhciBiYWNrX3RvX3RvcF9idXR0b24gPSBbJzxhIGhyZWY9XCIjdG9wXCIgY2xhc3M9XCJiYWNrLXRvLXRvcFwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29ucyBnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcIj48L3NwYW4+PC9hPiddLmpvaW4oXCJcIik7XG5cdCQoXCJib2R5XCIpLmFwcGVuZChiYWNrX3RvX3RvcF9idXR0b24pO1xuXG5cdC8vIEhpZGUgdGhlIGJ1dHRvblxuXHQkKFwiLmJhY2stdG8tdG9wXCIpLmhpZGUoKTtcblxuXHQvLyBTY3JvbGxzcHlcblx0JChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3RWYWwgPSAwO1xuICAgIHZhciBjdXJWYWwgPSAwO1xuICAgIHZhciBkaXJlY3Rpb24gPSAnZG93bic7XG5cblx0XHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHtcblxuICAgICAgY3VyVmFsID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcbiAgICAgIGRpcmVjdGlvbiA9IChjdXJWYWwgPiBsYXN0VmFsKSA/ICdkb3duJyA6ICd1cCc7XG5cbiAgICAgIGlmKGRpcmVjdGlvbiA9PSAnZG93bicpIHtcbiAgICAgICAgJCgnLmJhY2stdG8tdG9wJykuZmFkZU91dCgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gIFx0XHRcdGlmKCQodGhpcykuc2Nyb2xsVG9wKCkgPiBvZmZzZXQpIHsgLy8gcmVhY2hlZCBzY3JvbGwgb2Zmc2V0XG4gICAgICAgICAgaWYoZGlyZWN0aW9uID09ICd1cCcpIHtcbiAgICAgICAgICAgICQoJy5iYWNrLXRvLXRvcCcpLmZhZGVJbigpO1xuICAgICAgICAgIH1cbiAgXHRcdFx0fVxuICAgICAgICBlbHNlIHtcbiAgXHRcdFx0XHQkKCcuYmFjay10by10b3AnKS5mYWRlT3V0KCk7XG4gIFx0XHRcdH1cbiAgICAgIH1cblxuICAgICAgbGFzdFZhbCA9IGN1clZhbDtcblx0XHR9KTtcblxuXHRcdCQoJy5iYWNrLXRvLXRvcCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdCQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xuXHRcdFx0XHRzY3JvbGxUb3A6IDBcblx0XHRcdH0sIDgwMCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWpFd0xXcHhkV1Z5ZVM1cWN5SXNJamt3TFdGbVptbDRMbXB6SWl3aVlXNWhiSGwwYVdOekxtcHpJaXdpY0dGalpTNXFjeUlzSW5CaFkydGxjbmt1YW5NaUxDSjFiblpsYVd3dWFuTWlMQ0oxZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVU0xSzFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkRiRXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVU01UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZEZGpaQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZEWWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkRja2RCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkluTmpjbWx3ZEM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSVZ4dUlDb2dhbEYxWlhKNUlFcGhkbUZUWTNKcGNIUWdUR2xpY21GeWVTQjJNeTR4TGpGY2JpQXFJR2gwZEhCek9pOHZhbkYxWlhKNUxtTnZiUzljYmlBcVhHNGdLaUJKYm1Oc2RXUmxjeUJUYVhwNmJHVXVhbk5jYmlBcUlHaDBkSEJ6T2k4dmMybDZlbXhsYW5NdVkyOXRMMXh1SUNwY2JpQXFJRU52Y0hseWFXZG9kQ0JxVVhWbGNua2dSbTkxYm1SaGRHbHZiaUJoYm1RZ2IzUm9aWElnWTI5dWRISnBZblYwYjNKelhHNGdLaUJTWld4bFlYTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlHeHBZMlZ1YzJWY2JpQXFJR2gwZEhCek9pOHZhbkYxWlhKNUxtOXlaeTlzYVdObGJuTmxYRzRnS2x4dUlDb2dSR0YwWlRvZ01qQXhOaTB3T1MweU1sUXlNam96TUZwY2JpQXFMMXh1S0NCbWRXNWpkR2x2YmlnZ1oyeHZZbUZzTENCbVlXTjBiM0o1SUNrZ2UxeHVYRzVjZEZ3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1Y2RHbG1JQ2dnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnWENKdlltcGxZM1JjSWlBbUppQjBlWEJsYjJZZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFQwOUlGd2liMkpxWldOMFhDSWdLU0I3WEc1Y2JseDBYSFF2THlCR2IzSWdRMjl0Ylc5dVNsTWdZVzVrSUVOdmJXMXZia3BUTFd4cGEyVWdaVzUyYVhKdmJtMWxiblJ6SUhkb1pYSmxJR0VnY0hKdmNHVnlJR0IzYVc1a2IzZGdYRzVjZEZ4MEx5OGdhWE1nY0hKbGMyVnVkQ3dnWlhobFkzVjBaU0IwYUdVZ1ptRmpkRzl5ZVNCaGJtUWdaMlYwSUdwUmRXVnllUzVjYmx4MFhIUXZMeUJHYjNJZ1pXNTJhWEp2Ym0xbGJuUnpJSFJvWVhRZ1pHOGdibTkwSUdoaGRtVWdZU0JnZDJsdVpHOTNZQ0IzYVhSb0lHRWdZR1J2WTNWdFpXNTBZRnh1WEhSY2RDOHZJQ2h6ZFdOb0lHRnpJRTV2WkdVdWFuTXBMQ0JsZUhCdmMyVWdZU0JtWVdOMGIzSjVJR0Z6SUcxdlpIVnNaUzVsZUhCdmNuUnpMbHh1WEhSY2RDOHZJRlJvYVhNZ1lXTmpaVzUwZFdGMFpYTWdkR2hsSUc1bFpXUWdabTl5SUhSb1pTQmpjbVZoZEdsdmJpQnZaaUJoSUhKbFlXd2dZSGRwYm1SdmQyQXVYRzVjZEZ4MEx5OGdaUzVuTGlCMllYSWdhbEYxWlhKNUlEMGdjbVZ4ZFdseVpTaGNJbXB4ZFdWeWVWd2lLU2gzYVc1a2IzY3BPMXh1WEhSY2RDOHZJRk5sWlNCMGFXTnJaWFFnSXpFME5UUTVJR1p2Y2lCdGIzSmxJR2x1Wm04dVhHNWNkRngwYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JuYkc5aVlXd3VaRzlqZFcxbGJuUWdQMXh1WEhSY2RGeDBabUZqZEc5eWVTZ2daMnh2WW1Gc0xDQjBjblZsSUNrZ09seHVYSFJjZEZ4MFpuVnVZM1JwYjI0b0lIY2dLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJWGN1Wkc5amRXMWxiblFnS1NCN1hHNWNkRngwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDQmNJbXBSZFdWeWVTQnlaWEYxYVhKbGN5QmhJSGRwYm1SdmR5QjNhWFJvSUdFZ1pHOWpkVzFsYm5SY0lpQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJtWVdOMGIzSjVLQ0IzSUNrN1hHNWNkRngwWEhSOU8xeHVYSFI5SUdWc2MyVWdlMXh1WEhSY2RHWmhZM1J2Y25rb0lHZHNiMkpoYkNBcE8xeHVYSFI5WEc1Y2JpOHZJRkJoYzNNZ2RHaHBjeUJwWmlCM2FXNWtiM2NnYVhNZ2JtOTBJR1JsWm1sdVpXUWdlV1YwWEc1OUlDa29JSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ1B5QjNhVzVrYjNjZ09pQjBhR2x6TENCbWRXNWpkR2x2YmlnZ2QybHVaRzkzTENCdWIwZHNiMkpoYkNBcElIdGNibHh1THk4Z1JXUm5aU0E4UFNBeE1pQXRJREV6S3l3Z1JtbHlaV1p2ZUNBOFBURTRJQzBnTkRVckxDQkpSU0F4TUNBdElERXhMQ0JUWVdaaGNta2dOUzR4SUMwZ09Tc3NJR2xQVXlBMklDMGdPUzR4WEc0dkx5QjBhSEp2ZHlCbGVHTmxjSFJwYjI1eklIZG9aVzRnYm05dUxYTjBjbWxqZENCamIyUmxJQ2hsTG1jdUxDQkJVMUF1VGtWVUlEUXVOU2tnWVdOalpYTnpaWE1nYzNSeWFXTjBJRzF2WkdWY2JpOHZJR0Z5WjNWdFpXNTBjeTVqWVd4c1pXVXVZMkZzYkdWeUlDaDBjbUZqTFRFek16TTFLUzRnUW5WMElHRnpJRzltSUdwUmRXVnllU0F6TGpBZ0tESXdNVFlwTENCemRISnBZM1FnYlc5a1pTQnphRzkxYkdRZ1ltVWdZMjl0Ylc5dVhHNHZMeUJsYm05MVoyZ2dkR2hoZENCaGJHd2djM1ZqYUNCaGRIUmxiWEIwY3lCaGNtVWdaM1ZoY21SbFpDQnBiaUJoSUhSeWVTQmliRzlqYXk1Y2Jsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNTJZWElnWVhKeUlEMGdXMTA3WEc1Y2JuWmhjaUJrYjJOMWJXVnVkQ0E5SUhkcGJtUnZkeTVrYjJOMWJXVnVkRHRjYmx4dWRtRnlJR2RsZEZCeWIzUnZJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bU8xeHVYRzUyWVhJZ2MyeHBZMlVnUFNCaGNuSXVjMnhwWTJVN1hHNWNiblpoY2lCamIyNWpZWFFnUFNCaGNuSXVZMjl1WTJGME8xeHVYRzUyWVhJZ2NIVnphQ0E5SUdGeWNpNXdkWE5vTzF4dVhHNTJZWElnYVc1a1pYaFBaaUE5SUdGeWNpNXBibVJsZUU5bU8xeHVYRzUyWVhJZ1kyeGhjM015ZEhsd1pTQTlJSHQ5TzF4dVhHNTJZWElnZEc5VGRISnBibWNnUFNCamJHRnpjekowZVhCbExuUnZVM1J5YVc1bk8xeHVYRzUyWVhJZ2FHRnpUM2R1SUQwZ1kyeGhjM015ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVkbUZ5SUdadVZHOVRkSEpwYm1jZ1BTQm9ZWE5QZDI0dWRHOVRkSEpwYm1jN1hHNWNiblpoY2lCUFltcGxZM1JHZFc1amRHbHZibE4wY21sdVp5QTlJR1p1Vkc5VGRISnBibWN1WTJGc2JDZ2dUMkpxWldOMElDazdYRzVjYm5aaGNpQnpkWEJ3YjNKMElEMGdlMzA3WEc1Y2JseHVYRzVjZEdaMWJtTjBhVzl1SUVSUFRVVjJZV3dvSUdOdlpHVXNJR1J2WXlBcElIdGNibHgwWEhSa2IyTWdQU0JrYjJNZ2ZId2daRzlqZFcxbGJuUTdYRzVjYmx4MFhIUjJZWElnYzJOeWFYQjBJRDBnWkc5akxtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aWMyTnlhWEIwWENJZ0tUdGNibHh1WEhSY2RITmpjbWx3ZEM1MFpYaDBJRDBnWTI5a1pUdGNibHgwWEhSa2IyTXVhR1ZoWkM1aGNIQmxibVJEYUdsc1pDZ2djMk55YVhCMElDa3VjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNnZ2MyTnlhWEIwSUNrN1hHNWNkSDFjYmk4cUlHZHNiMkpoYkNCVGVXMWliMndnS2k5Y2JpOHZJRVJsWm1sdWFXNW5JSFJvYVhNZ1oyeHZZbUZzSUdsdUlDNWxjMnhwYm5SeVl5NXFjMjl1SUhkdmRXeGtJR055WldGMFpTQmhJR1JoYm1kbGNpQnZaaUIxYzJsdVp5QjBhR1VnWjJ4dlltRnNYRzR2THlCMWJtZDFZWEprWldRZ2FXNGdZVzV2ZEdobGNpQndiR0ZqWlN3Z2FYUWdjMlZsYlhNZ2MyRm1aWElnZEc4Z1pHVm1hVzVsSUdkc2IySmhiQ0J2Ym14NUlHWnZjaUIwYUdseklHMXZaSFZzWlZ4dVhHNWNibHh1ZG1GeVhHNWNkSFpsY25OcGIyNGdQU0JjSWpNdU1TNHhYQ0lzWEc1Y2JseDBMeThnUkdWbWFXNWxJR0VnYkc5allXd2dZMjl3ZVNCdlppQnFVWFZsY25sY2JseDBhbEYxWlhKNUlEMGdablZ1WTNScGIyNG9JSE5sYkdWamRHOXlMQ0JqYjI1MFpYaDBJQ2tnZTF4dVhHNWNkRngwTHk4Z1ZHaGxJR3BSZFdWeWVTQnZZbXBsWTNRZ2FYTWdZV04wZFdGc2JIa2dhblZ6ZENCMGFHVWdhVzVwZENCamIyNXpkSEoxWTNSdmNpQW5aVzVvWVc1alpXUW5YRzVjZEZ4MEx5OGdUbVZsWkNCcGJtbDBJR2xtSUdwUmRXVnllU0JwY3lCallXeHNaV1FnS0dwMWMzUWdZV3hzYjNjZ1pYSnliM0lnZEc4Z1ltVWdkR2h5YjNkdUlHbG1JRzV2ZENCcGJtTnNkV1JsWkNsY2JseDBYSFJ5WlhSMWNtNGdibVYzSUdwUmRXVnllUzVtYmk1cGJtbDBLQ0J6Wld4bFkzUnZjaXdnWTI5dWRHVjRkQ0FwTzF4dVhIUjlMRnh1WEc1Y2RDOHZJRk4xY0hCdmNuUTZJRUZ1WkhKdmFXUWdQRDAwTGpBZ2IyNXNlVnh1WEhRdkx5Qk5ZV3RsSUhOMWNtVWdkMlVnZEhKcGJTQkNUMDBnWVc1a0lFNUNVMUJjYmx4MGNuUnlhVzBnUFNBdlhsdGNYSE5jWEhWR1JVWkdYRng0UVRCZEszeGJYRnh6WEZ4MVJrVkdSbHhjZUVFd1hTc2tMMmNzWEc1Y2JseDBMeThnVFdGMFkyaGxjeUJrWVhOb1pXUWdjM1J5YVc1bklHWnZjaUJqWVcxbGJHbDZhVzVuWEc1Y2RISnRjMUJ5WldacGVDQTlJQzllTFcxekxTOHNYRzVjZEhKa1lYTm9RV3h3YUdFZ1BTQXZMU2hiWVMxNlhTa3ZaeXhjYmx4dVhIUXZMeUJWYzJWa0lHSjVJR3BSZFdWeWVTNWpZVzFsYkVOaGMyVWdZWE1nWTJGc2JHSmhZMnNnZEc4Z2NtVndiR0ZqWlNncFhHNWNkR1pqWVcxbGJFTmhjMlVnUFNCbWRXNWpkR2x2YmlnZ1lXeHNMQ0JzWlhSMFpYSWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHeGxkSFJsY2k1MGIxVndjR1Z5UTJGelpTZ3BPMXh1WEhSOU8xeHVYRzVxVVhWbGNua3VabTRnUFNCcVVYVmxjbmt1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVYRzVjZEM4dklGUm9aU0JqZFhKeVpXNTBJSFpsY25OcGIyNGdiMllnYWxGMVpYSjVJR0psYVc1bklIVnpaV1JjYmx4MGFuRjFaWEo1T2lCMlpYSnphVzl1TEZ4dVhHNWNkR052Ym5OMGNuVmpkRzl5T2lCcVVYVmxjbmtzWEc1Y2JseDBMeThnVkdobElHUmxabUYxYkhRZ2JHVnVaM1JvSUc5bUlHRWdhbEYxWlhKNUlHOWlhbVZqZENCcGN5QXdYRzVjZEd4bGJtZDBhRG9nTUN4Y2JseHVYSFIwYjBGeWNtRjVPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjMnhwWTJVdVkyRnNiQ2dnZEdocGN5QXBPMXh1WEhSOUxGeHVYRzVjZEM4dklFZGxkQ0IwYUdVZ1RuUm9JR1ZzWlcxbGJuUWdhVzRnZEdobElHMWhkR05vWldRZ1pXeGxiV1Z1ZENCelpYUWdUMUpjYmx4MEx5OGdSMlYwSUhSb1pTQjNhRzlzWlNCdFlYUmphR1ZrSUdWc1pXMWxiblFnYzJWMElHRnpJR0VnWTJ4bFlXNGdZWEp5WVhsY2JseDBaMlYwT2lCbWRXNWpkR2x2YmlnZ2JuVnRJQ2tnZTF4dVhHNWNkRngwTHk4Z1VtVjBkWEp1SUdGc2JDQjBhR1VnWld4bGJXVnVkSE1nYVc0Z1lTQmpiR1ZoYmlCaGNuSmhlVnh1WEhSY2RHbG1JQ2dnYm5WdElEMDlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2MyeHBZMlV1WTJGc2JDZ2dkR2hwY3lBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGSmxkSFZ5YmlCcWRYTjBJSFJvWlNCdmJtVWdaV3hsYldWdWRDQm1jbTl0SUhSb1pTQnpaWFJjYmx4MFhIUnlaWFIxY200Z2JuVnRJRHdnTUNBL0lIUm9hWE5iSUc1MWJTQXJJSFJvYVhNdWJHVnVaM1JvSUYwZ09pQjBhR2x6V3lCdWRXMGdYVHRjYmx4MGZTeGNibHh1WEhRdkx5QlVZV3RsSUdGdUlHRnljbUY1SUc5bUlHVnNaVzFsYm5SeklHRnVaQ0J3ZFhOb0lHbDBJRzl1ZEc4Z2RHaGxJSE4wWVdOclhHNWNkQzh2SUNoeVpYUjFjbTVwYm1jZ2RHaGxJRzVsZHlCdFlYUmphR1ZrSUdWc1pXMWxiblFnYzJWMEtWeHVYSFJ3ZFhOb1UzUmhZMnM2SUdaMWJtTjBhVzl1S0NCbGJHVnRjeUFwSUh0Y2JseHVYSFJjZEM4dklFSjFhV3hrSUdFZ2JtVjNJR3BSZFdWeWVTQnRZWFJqYUdWa0lHVnNaVzFsYm5RZ2MyVjBYRzVjZEZ4MGRtRnlJSEpsZENBOUlHcFJkV1Z5ZVM1dFpYSm5aU2dnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTENCbGJHVnRjeUFwTzF4dVhHNWNkRngwTHk4Z1FXUmtJSFJvWlNCdmJHUWdiMkpxWldOMElHOXVkRzhnZEdobElITjBZV05ySUNoaGN5QmhJSEpsWm1WeVpXNWpaU2xjYmx4MFhIUnlaWFF1Y0hKbGRrOWlhbVZqZENBOUlIUm9hWE03WEc1Y2JseDBYSFF2THlCU1pYUjFjbTRnZEdobElHNWxkMng1TFdadmNtMWxaQ0JsYkdWdFpXNTBJSE5sZEZ4dVhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RIMHNYRzVjYmx4MEx5OGdSWGhsWTNWMFpTQmhJR05oYkd4aVlXTnJJR1p2Y2lCbGRtVnllU0JsYkdWdFpXNTBJR2x1SUhSb1pTQnRZWFJqYUdWa0lITmxkQzVjYmx4MFpXRmphRG9nWm5WdVkzUnBiMjRvSUdOaGJHeGlZV05ySUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJxVVhWbGNua3VaV0ZqYUNnZ2RHaHBjeXdnWTJGc2JHSmhZMnNnS1R0Y2JseDBmU3hjYmx4dVhIUnRZWEE2SUdaMWJtTjBhVzl1S0NCallXeHNZbUZqYXlBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXdkWE5vVTNSaFkyc29JR3BSZFdWeWVTNXRZWEFvSUhSb2FYTXNJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnBJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR05oYkd4aVlXTnJMbU5oYkd3b0lHVnNaVzBzSUdrc0lHVnNaVzBnS1R0Y2JseDBYSFI5SUNrZ0tUdGNibHgwZlN4Y2JseHVYSFJ6YkdsalpUb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11Y0hWemFGTjBZV05yS0NCemJHbGpaUzVoY0hCc2VTZ2dkR2hwY3l3Z1lYSm5kVzFsYm5SeklDa2dLVHRjYmx4MGZTeGNibHh1WEhSbWFYSnpkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdVpYRW9JREFnS1R0Y2JseDBmU3hjYmx4dVhIUnNZWE4wT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxjU2dnTFRFZ0tUdGNibHgwZlN4Y2JseHVYSFJsY1RvZ1puVnVZM1JwYjI0b0lHa2dLU0I3WEc1Y2RGeDBkbUZ5SUd4bGJpQTlJSFJvYVhNdWJHVnVaM1JvTEZ4dVhIUmNkRngwYWlBOUlDdHBJQ3NnS0NCcElEd2dNQ0EvSUd4bGJpQTZJREFnS1R0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lHb2dQajBnTUNBbUppQnFJRHdnYkdWdUlEOGdXeUIwYUdseld5QnFJRjBnWFNBNklGdGRJQ2s3WEc1Y2RIMHNYRzVjYmx4MFpXNWtPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2NtVjJUMkpxWldOMElIeDhJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9LVHRjYmx4MGZTeGNibHh1WEhRdkx5QkdiM0lnYVc1MFpYSnVZV3dnZFhObElHOXViSGt1WEc1Y2RDOHZJRUpsYUdGMlpYTWdiR2xyWlNCaGJpQkJjbkpoZVNkeklHMWxkR2h2WkN3Z2JtOTBJR3hwYTJVZ1lTQnFVWFZsY25rZ2JXVjBhRzlrTGx4dVhIUndkWE5vT2lCd2RYTm9MRnh1WEhSemIzSjBPaUJoY25JdWMyOXlkQ3hjYmx4MGMzQnNhV05sT2lCaGNuSXVjM0JzYVdObFhHNTlPMXh1WEc1cVVYVmxjbmt1WlhoMFpXNWtJRDBnYWxGMVpYSjVMbVp1TG1WNGRHVnVaQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIyWVhJZ2IzQjBhVzl1Y3l3Z2JtRnRaU3dnYzNKakxDQmpiM0I1TENCamIzQjVTWE5CY25KaGVTd2dZMnh2Ym1Vc1hHNWNkRngwZEdGeVoyVjBJRDBnWVhKbmRXMWxiblJ6V3lBd0lGMGdmSHdnZTMwc1hHNWNkRngwYVNBOUlERXNYRzVjZEZ4MGJHVnVaM1JvSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN4Y2JseDBYSFJrWldWd0lEMGdabUZzYzJVN1hHNWNibHgwTHk4Z1NHRnVaR3hsSUdFZ1pHVmxjQ0JqYjNCNUlITnBkSFZoZEdsdmJseHVYSFJwWmlBb0lIUjVjR1Z2WmlCMFlYSm5aWFFnUFQwOUlGd2lZbTl2YkdWaGJsd2lJQ2tnZTF4dVhIUmNkR1JsWlhBZ1BTQjBZWEpuWlhRN1hHNWNibHgwWEhRdkx5QlRhMmx3SUhSb1pTQmliMjlzWldGdUlHRnVaQ0IwYUdVZ2RHRnlaMlYwWEc1Y2RGeDBkR0Z5WjJWMElEMGdZWEpuZFcxbGJuUnpXeUJwSUYwZ2ZId2dlMzA3WEc1Y2RGeDBhU3NyTzF4dVhIUjlYRzVjYmx4MEx5OGdTR0Z1Wkd4bElHTmhjMlVnZDJobGJpQjBZWEpuWlhRZ2FYTWdZU0J6ZEhKcGJtY2diM0lnYzI5dFpYUm9hVzVuSUNod2IzTnphV0pzWlNCcGJpQmtaV1Z3SUdOdmNIa3BYRzVjZEdsbUlDZ2dkSGx3Wlc5bUlIUmhjbWRsZENBaFBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlBaGFsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lIUmhjbWRsZENBcElDa2dlMXh1WEhSY2RIUmhjbWRsZENBOUlIdDlPMXh1WEhSOVhHNWNibHgwTHk4Z1JYaDBaVzVrSUdwUmRXVnllU0JwZEhObGJHWWdhV1lnYjI1c2VTQnZibVVnWVhKbmRXMWxiblFnYVhNZ2NHRnpjMlZrWEc1Y2RHbG1JQ2dnYVNBOVBUMGdiR1Z1WjNSb0lDa2dlMXh1WEhSY2RIUmhjbWRsZENBOUlIUm9hWE03WEc1Y2RGeDBhUzB0TzF4dVhIUjlYRzVjYmx4MFptOXlJQ2dnT3lCcElEd2diR1Z1WjNSb095QnBLeXNnS1NCN1hHNWNibHgwWEhRdkx5QlBibXg1SUdSbFlXd2dkMmwwYUNCdWIyNHRiblZzYkM5MWJtUmxabWx1WldRZ2RtRnNkV1Z6WEc1Y2RGeDBhV1lnS0NBb0lHOXdkR2x2Ym5NZ1BTQmhjbWQxYldWdWRITmJJR2tnWFNBcElDRTlJRzUxYkd3Z0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVWNGRHVnVaQ0IwYUdVZ1ltRnpaU0J2WW1wbFkzUmNibHgwWEhSY2RHWnZjaUFvSUc1aGJXVWdhVzRnYjNCMGFXOXVjeUFwSUh0Y2JseDBYSFJjZEZ4MGMzSmpJRDBnZEdGeVoyVjBXeUJ1WVcxbElGMDdYRzVjZEZ4MFhIUmNkR052Y0hrZ1BTQnZjSFJwYjI1eld5QnVZVzFsSUYwN1hHNWNibHgwWEhSY2RGeDBMeThnVUhKbGRtVnVkQ0J1WlhabGNpMWxibVJwYm1jZ2JHOXZjRnh1WEhSY2RGeDBYSFJwWmlBb0lIUmhjbWRsZENBOVBUMGdZMjl3ZVNBcElIdGNibHgwWEhSY2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRkpsWTNWeWMyVWdhV1lnZDJVbmNtVWdiV1Z5WjJsdVp5QndiR0ZwYmlCdlltcGxZM1J6SUc5eUlHRnljbUY1YzF4dVhIUmNkRngwWEhScFppQW9JR1JsWlhBZ0ppWWdZMjl3ZVNBbUppQW9JR3BSZFdWeWVTNXBjMUJzWVdsdVQySnFaV04wS0NCamIzQjVJQ2tnZkh4Y2JseDBYSFJjZEZ4MFhIUW9JR052Y0hsSmMwRnljbUY1SUQwZ2FsRjFaWEo1TG1selFYSnlZWGtvSUdOdmNIa2dLU0FwSUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhScFppQW9JR052Y0hsSmMwRnljbUY1SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWTI5d2VVbHpRWEp5WVhrZ1BTQm1ZV3h6WlR0Y2JseDBYSFJjZEZ4MFhIUmNkR05zYjI1bElEMGdjM0pqSUNZbUlHcFJkV1Z5ZVM1cGMwRnljbUY1S0NCemNtTWdLU0EvSUhOeVl5QTZJRnRkTzF4dVhHNWNkRngwWEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBYSFJjZEdOc2IyNWxJRDBnYzNKaklDWW1JR3BSZFdWeWVTNXBjMUJzWVdsdVQySnFaV04wS0NCemNtTWdLU0EvSUhOeVl5QTZJSHQ5TzF4dVhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEM4dklFNWxkbVZ5SUcxdmRtVWdiM0pwWjJsdVlXd2diMkpxWldOMGN5d2dZMnh2Ym1VZ2RHaGxiVnh1WEhSY2RGeDBYSFJjZEhSaGNtZGxkRnNnYm1GdFpTQmRJRDBnYWxGMVpYSjVMbVY0ZEdWdVpDZ2daR1ZsY0N3Z1kyeHZibVVzSUdOdmNIa2dLVHRjYmx4dVhIUmNkRngwWEhRdkx5QkViMjRuZENCaWNtbHVaeUJwYmlCMWJtUmxabWx1WldRZ2RtRnNkV1Z6WEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lHTnZjSGtnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSMFlYSm5aWFJiSUc1aGJXVWdYU0E5SUdOdmNIazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2THlCU1pYUjFjbTRnZEdobElHMXZaR2xtYVdWa0lHOWlhbVZqZEZ4dVhIUnlaWFIxY200Z2RHRnlaMlYwTzF4dWZUdGNibHh1YWxGMVpYSjVMbVY0ZEdWdVpDZ2dlMXh1WEc1Y2RDOHZJRlZ1YVhGMVpTQm1iM0lnWldGamFDQmpiM0I1SUc5bUlHcFJkV1Z5ZVNCdmJpQjBhR1VnY0dGblpWeHVYSFJsZUhCaGJtUnZPaUJjSW1wUmRXVnllVndpSUNzZ0tDQjJaWEp6YVc5dUlDc2dUV0YwYUM1eVlXNWtiMjBvS1NBcExuSmxjR3hoWTJVb0lDOWNYRVF2Wnl3Z1hDSmNJaUFwTEZ4dVhHNWNkQzh2SUVGemMzVnRaU0JxVVhWbGNua2dhWE1nY21WaFpIa2dkMmwwYUc5MWRDQjBhR1VnY21WaFpIa2diVzlrZFd4bFhHNWNkR2x6VW1WaFpIazZJSFJ5ZFdVc1hHNWNibHgwWlhKeWIzSTZJR1oxYm1OMGFXOXVLQ0J0YzJjZ0tTQjdYRzVjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0NCdGMyY2dLVHRjYmx4MGZTeGNibHh1WEhSdWIyOXdPaUJtZFc1amRHbHZiaWdwSUh0OUxGeHVYRzVjZEdselJuVnVZM1JwYjI0NklHWjFibU4wYVc5dUtDQnZZbW9nS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNTBlWEJsS0NCdlltb2dLU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lPMXh1WEhSOUxGeHVYRzVjZEdselFYSnlZWGs2SUVGeWNtRjVMbWx6UVhKeVlYa3NYRzVjYmx4MGFYTlhhVzVrYjNjNklHWjFibU4wYVc5dUtDQnZZbW9nS1NCN1hHNWNkRngwY21WMGRYSnVJRzlpYWlBaFBTQnVkV3hzSUNZbUlHOWlhaUE5UFQwZ2IySnFMbmRwYm1SdmR6dGNibHgwZlN4Y2JseHVYSFJwYzA1MWJXVnlhV002SUdaMWJtTjBhVzl1S0NCdlltb2dLU0I3WEc1Y2JseDBYSFF2THlCQmN5QnZaaUJxVVhWbGNua2dNeTR3TENCcGMwNTFiV1Z5YVdNZ2FYTWdiR2x0YVhSbFpDQjBiMXh1WEhSY2RDOHZJSE4wY21sdVozTWdZVzVrSUc1MWJXSmxjbk1nS0hCeWFXMXBkR2wyWlhNZ2IzSWdiMkpxWldOMGN5bGNibHgwWEhRdkx5QjBhR0YwSUdOaGJpQmlaU0JqYjJWeVkyVmtJSFJ2SUdacGJtbDBaU0J1ZFcxaVpYSnpJQ2huYUMweU5qWXlLVnh1WEhSY2RIWmhjaUIwZVhCbElEMGdhbEYxWlhKNUxuUjVjR1VvSUc5aWFpQXBPMXh1WEhSY2RISmxkSFZ5YmlBb0lIUjVjR1VnUFQwOUlGd2liblZ0WW1WeVhDSWdmSHdnZEhsd1pTQTlQVDBnWENKemRISnBibWRjSWlBcElDWW1YRzVjYmx4MFhIUmNkQzh2SUhCaGNuTmxSbXh2WVhRZ1RtRk9jeUJ1ZFcxbGNtbGpMV05oYzNRZ1ptRnNjMlVnY0c5emFYUnBkbVZ6SUNoY0lsd2lLVnh1WEhSY2RGeDBMeThnTGk0dVluVjBJRzFwYzJsdWRHVnljSEpsZEhNZ2JHVmhaR2x1WnkxdWRXMWlaWElnYzNSeWFXNW5jeXdnY0dGeWRHbGpkV3hoY214NUlHaGxlQ0JzYVhSbGNtRnNjeUFvWENJd2VDNHVMbHdpS1Z4dVhIUmNkRngwTHk4Z2MzVmlkSEpoWTNScGIyNGdabTl5WTJWeklHbHVabWx1YVhScFpYTWdkRzhnVG1GT1hHNWNkRngwWEhRaGFYTk9ZVTRvSUc5aWFpQXRJSEJoY25ObFJteHZZWFFvSUc5aWFpQXBJQ2s3WEc1Y2RIMHNYRzVjYmx4MGFYTlFiR0ZwYms5aWFtVmpkRG9nWm5WdVkzUnBiMjRvSUc5aWFpQXBJSHRjYmx4MFhIUjJZWElnY0hKdmRHOHNJRU4wYjNJN1hHNWNibHgwWEhRdkx5QkVaWFJsWTNRZ2IySjJhVzkxY3lCdVpXZGhkR2wyWlhOY2JseDBYSFF2THlCVmMyVWdkRzlUZEhKcGJtY2dhVzV6ZEdWaFpDQnZaaUJxVVhWbGNua3VkSGx3WlNCMGJ5QmpZWFJqYUNCb2IzTjBJRzlpYW1WamRITmNibHgwWEhScFppQW9JQ0Z2WW1vZ2ZId2dkRzlUZEhKcGJtY3VZMkZzYkNnZ2IySnFJQ2tnSVQwOUlGd2lXMjlpYW1WamRDQlBZbXBsWTNSZFhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwZlZ4dVhHNWNkRngwY0hKdmRHOGdQU0JuWlhSUWNtOTBieWdnYjJKcUlDazdYRzVjYmx4MFhIUXZMeUJQWW1wbFkzUnpJSGRwZEdnZ2JtOGdjSEp2ZEc5MGVYQmxJQ2hsTG1jdUxDQmdUMkpxWldOMExtTnlaV0YwWlNnZ2JuVnNiQ0FwWUNrZ1lYSmxJSEJzWVdsdVhHNWNkRngwYVdZZ0tDQWhjSEp2ZEc4Z0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJQWW1wbFkzUnpJSGRwZEdnZ2NISnZkRzkwZVhCbElHRnlaU0J3YkdGcGJpQnBabVlnZEdobGVTQjNaWEpsSUdOdmJuTjBjblZqZEdWa0lHSjVJR0VnWjJ4dlltRnNJRTlpYW1WamRDQm1kVzVqZEdsdmJseHVYSFJjZEVOMGIzSWdQU0JvWVhOUGQyNHVZMkZzYkNnZ2NISnZkRzhzSUZ3aVkyOXVjM1J5ZFdOMGIzSmNJaUFwSUNZbUlIQnliM1J2TG1OdmJuTjBjblZqZEc5eU8xeHVYSFJjZEhKbGRIVnliaUIwZVhCbGIyWWdRM1J2Y2lBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHWnVWRzlUZEhKcGJtY3VZMkZzYkNnZ1EzUnZjaUFwSUQwOVBTQlBZbXBsWTNSR2RXNWpkR2x2YmxOMGNtbHVaenRjYmx4MGZTeGNibHh1WEhScGMwVnRjSFI1VDJKcVpXTjBPaUJtZFc1amRHbHZiaWdnYjJKcUlDa2dlMXh1WEc1Y2RGeDBMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0ZFc1MWMyVmtMWFpoY25NZ0tpOWNibHgwWEhRdkx5QlRaV1VnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJWemJHbHVkQzlsYzJ4cGJuUXZhWE56ZFdWekx6WXhNalZjYmx4MFhIUjJZWElnYm1GdFpUdGNibHh1WEhSY2RHWnZjaUFvSUc1aGJXVWdhVzRnYjJKcUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MGZTeGNibHh1WEhSMGVYQmxPaUJtZFc1amRHbHZiaWdnYjJKcUlDa2dlMXh1WEhSY2RHbG1JQ2dnYjJKcUlEMDlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2IySnFJQ3NnWENKY0lqdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlRkWEJ3YjNKME9pQkJibVJ5YjJsa0lEdzlNaTR6SUc5dWJIa2dLR1oxYm1OMGFXOXVhWE5vSUZKbFowVjRjQ2xjYmx4MFhIUnlaWFIxY200Z2RIbHdaVzltSUc5aWFpQTlQVDBnWENKdlltcGxZM1JjSWlCOGZDQjBlWEJsYjJZZ2IySnFJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQMXh1WEhSY2RGeDBZMnhoYzNNeWRIbHdaVnNnZEc5VGRISnBibWN1WTJGc2JDZ2diMkpxSUNrZ1hTQjhmQ0JjSW05aWFtVmpkRndpSURwY2JseDBYSFJjZEhSNWNHVnZaaUJ2WW1vN1hHNWNkSDBzWEc1Y2JseDBMeThnUlhaaGJIVmhkR1Z6SUdFZ2MyTnlhWEIwSUdsdUlHRWdaMnh2WW1Gc0lHTnZiblJsZUhSY2JseDBaMnh2WW1Gc1JYWmhiRG9nWm5WdVkzUnBiMjRvSUdOdlpHVWdLU0I3WEc1Y2RGeDBSRTlOUlhaaGJDZ2dZMjlrWlNBcE8xeHVYSFI5TEZ4dVhHNWNkQzh2SUVOdmJuWmxjblFnWkdGemFHVmtJSFJ2SUdOaGJXVnNRMkZ6WlRzZ2RYTmxaQ0JpZVNCMGFHVWdZM056SUdGdVpDQmtZWFJoSUcxdlpIVnNaWE5jYmx4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQwNUlDMGdNVEVzSUVWa1oyVWdNVElnTFNBeE0xeHVYSFF2THlCTmFXTnliM052Wm5RZ1ptOXlaMjkwSUhSdklHaDFiWEFnZEdobGFYSWdkbVZ1Wkc5eUlIQnlaV1pwZUNBb0l6azFOeklwWEc1Y2RHTmhiV1ZzUTJGelpUb2dablZ1WTNScGIyNG9JSE4wY21sdVp5QXBJSHRjYmx4MFhIUnlaWFIxY200Z2MzUnlhVzVuTG5KbGNHeGhZMlVvSUhKdGMxQnlaV1pwZUN3Z1hDSnRjeTFjSWlBcExuSmxjR3hoWTJVb0lISmtZWE5vUVd4d2FHRXNJR1pqWVcxbGJFTmhjMlVnS1R0Y2JseDBmU3hjYmx4dVhIUnViMlJsVG1GdFpUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHNWhiV1VnS1NCN1hHNWNkRngwY21WMGRYSnVJR1ZzWlcwdWJtOWtaVTVoYldVZ0ppWWdaV3hsYlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNCdVlXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNkSDBzWEc1Y2JseDBaV0ZqYURvZ1puVnVZM1JwYjI0b0lHOWlhaXdnWTJGc2JHSmhZMnNnS1NCN1hHNWNkRngwZG1GeUlHeGxibWQwYUN3Z2FTQTlJREE3WEc1Y2JseDBYSFJwWmlBb0lHbHpRWEp5WVhsTWFXdGxLQ0J2WW1vZ0tTQXBJSHRjYmx4MFhIUmNkR3hsYm1kMGFDQTlJRzlpYWk1c1pXNW5kR2c3WEc1Y2RGeDBYSFJtYjNJZ0tDQTdJR2tnUENCc1pXNW5kR2c3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQmpZV3hzWW1GamF5NWpZV3hzS0NCdlltcGJJR2tnWFN3Z2FTd2diMkpxV3lCcElGMGdLU0E5UFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWm05eUlDZ2dhU0JwYmlCdlltb2dLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dZMkZzYkdKaFkyc3VZMkZzYkNnZ2IySnFXeUJwSUYwc0lHa3NJRzlpYWxzZ2FTQmRJQ2tnUFQwOUlHWmhiSE5sSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUc5aWFqdGNibHgwZlN4Y2JseHVYSFF2THlCVGRYQndiM0owT2lCQmJtUnliMmxrSUR3OU5DNHdJRzl1YkhsY2JseDBkSEpwYlRvZ1puVnVZM1JwYjI0b0lIUmxlSFFnS1NCN1hHNWNkRngwY21WMGRYSnVJSFJsZUhRZ1BUMGdiblZzYkNBL1hHNWNkRngwWEhSY0lsd2lJRHBjYmx4MFhIUmNkQ2dnZEdWNGRDQXJJRndpWENJZ0tTNXlaWEJzWVdObEtDQnlkSEpwYlN3Z1hDSmNJaUFwTzF4dVhIUjlMRnh1WEc1Y2RDOHZJSEpsYzNWc2RITWdhWE1nWm05eUlHbHVkR1Z5Ym1Gc0lIVnpZV2RsSUc5dWJIbGNibHgwYldGclpVRnljbUY1T2lCbWRXNWpkR2x2YmlnZ1lYSnlMQ0J5WlhOMWJIUnpJQ2tnZTF4dVhIUmNkSFpoY2lCeVpYUWdQU0J5WlhOMWJIUnpJSHg4SUZ0ZE8xeHVYRzVjZEZ4MGFXWWdLQ0JoY25JZ0lUMGdiblZzYkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnYVhOQmNuSmhlVXhwYTJVb0lFOWlhbVZqZENnZ1lYSnlJQ2tnS1NBcElIdGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtMWxjbWRsS0NCeVpYUXNYRzVjZEZ4MFhIUmNkRngwZEhsd1pXOW1JR0Z5Y2lBOVBUMGdYQ0p6ZEhKcGJtZGNJaUEvWEc1Y2RGeDBYSFJjZEZ4MFd5QmhjbklnWFNBNklHRnljbHh1WEhSY2RGeDBYSFFwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwY0hWemFDNWpZV3hzS0NCeVpYUXNJR0Z5Y2lBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJ5WlhRN1hHNWNkSDBzWEc1Y2JseDBhVzVCY25KaGVUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHRnljaXdnYVNBcElIdGNibHgwWEhSeVpYUjFjbTRnWVhKeUlEMDlJRzUxYkd3Z1B5QXRNU0E2SUdsdVpHVjRUMll1WTJGc2JDZ2dZWEp5TENCbGJHVnRMQ0JwSUNrN1hHNWNkSDBzWEc1Y2JseDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0E4UFRRdU1DQnZibXg1TENCUWFHRnVkRzl0U2xNZ01TQnZibXg1WEc1Y2RDOHZJSEIxYzJndVlYQndiSGtvWHl3Z1lYSnlZWGxzYVd0bEtTQjBhSEp2ZDNNZ2IyNGdZVzVqYVdWdWRDQlhaV0pMYVhSY2JseDBiV1Z5WjJVNklHWjFibU4wYVc5dUtDQm1hWEp6ZEN3Z2MyVmpiMjVrSUNrZ2UxeHVYSFJjZEhaaGNpQnNaVzRnUFNBcmMyVmpiMjVrTG14bGJtZDBhQ3hjYmx4MFhIUmNkR29nUFNBd0xGeHVYSFJjZEZ4MGFTQTlJR1pwY25OMExteGxibWQwYUR0Y2JseHVYSFJjZEdadmNpQW9JRHNnYWlBOElHeGxianNnYWlzcklDa2dlMXh1WEhSY2RGeDBabWx5YzNSYklHa3JLeUJkSUQwZ2MyVmpiMjVrV3lCcUlGMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFptbHljM1F1YkdWdVozUm9JRDBnYVR0Y2JseHVYSFJjZEhKbGRIVnliaUJtYVhKemREdGNibHgwZlN4Y2JseHVYSFJuY21Wd09pQm1kVzVqZEdsdmJpZ2daV3hsYlhNc0lHTmhiR3hpWVdOckxDQnBiblpsY25RZ0tTQjdYRzVjZEZ4MGRtRnlJR05oYkd4aVlXTnJTVzUyWlhKelpTeGNibHgwWEhSY2RHMWhkR05vWlhNZ1BTQmJYU3hjYmx4MFhIUmNkR2tnUFNBd0xGeHVYSFJjZEZ4MGJHVnVaM1JvSUQwZ1pXeGxiWE11YkdWdVozUm9MRnh1WEhSY2RGeDBZMkZzYkdKaFkydEZlSEJsWTNRZ1BTQWhhVzUyWlhKME8xeHVYRzVjZEZ4MEx5OGdSMjhnZEdoeWIzVm5hQ0IwYUdVZ1lYSnlZWGtzSUc5dWJIa2djMkYyYVc1bklIUm9aU0JwZEdWdGMxeHVYSFJjZEM4dklIUm9ZWFFnY0dGemN5QjBhR1VnZG1Gc2FXUmhkRzl5SUdaMWJtTjBhVzl1WEc1Y2RGeDBabTl5SUNnZ095QnBJRHdnYkdWdVozUm9PeUJwS3lzZ0tTQjdYRzVjZEZ4MFhIUmpZV3hzWW1GamEwbHVkbVZ5YzJVZ1BTQWhZMkZzYkdKaFkyc29JR1ZzWlcxeld5QnBJRjBzSUdrZ0tUdGNibHgwWEhSY2RHbG1JQ2dnWTJGc2JHSmhZMnRKYm5abGNuTmxJQ0U5UFNCallXeHNZbUZqYTBWNGNHVmpkQ0FwSUh0Y2JseDBYSFJjZEZ4MGJXRjBZMmhsY3k1d2RYTm9LQ0JsYkdWdGMxc2dhU0JkSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJRzFoZEdOb1pYTTdYRzVjZEgwc1hHNWNibHgwTHk4Z1lYSm5JR2x6SUdadmNpQnBiblJsY201aGJDQjFjMkZuWlNCdmJteDVYRzVjZEcxaGNEb2dablZ1WTNScGIyNG9JR1ZzWlcxekxDQmpZV3hzWW1GamF5d2dZWEpuSUNrZ2UxeHVYSFJjZEhaaGNpQnNaVzVuZEdnc0lIWmhiSFZsTEZ4dVhIUmNkRngwYVNBOUlEQXNYRzVjZEZ4MFhIUnlaWFFnUFNCYlhUdGNibHh1WEhSY2RDOHZJRWR2SUhSb2NtOTFaMmdnZEdobElHRnljbUY1TENCMGNtRnVjMnhoZEdsdVp5QmxZV05vSUc5bUlIUm9aU0JwZEdWdGN5QjBieUIwYUdWcGNpQnVaWGNnZG1Gc2RXVnpYRzVjZEZ4MGFXWWdLQ0JwYzBGeWNtRjVUR2xyWlNnZ1pXeGxiWE1nS1NBcElIdGNibHgwWEhSY2RHeGxibWQwYUNBOUlHVnNaVzF6TG14bGJtZDBhRHRjYmx4MFhIUmNkR1p2Y2lBb0lEc2dhU0E4SUd4bGJtZDBhRHNnYVNzcklDa2dlMXh1WEhSY2RGeDBYSFIyWVd4MVpTQTlJR05oYkd4aVlXTnJLQ0JsYkdWdGMxc2dhU0JkTENCcExDQmhjbWNnS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUhaaGJIVmxJQ0U5SUc1MWJHd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBMbkIxYzJnb0lIWmhiSFZsSUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHh1WEhSY2RDOHZJRWR2SUhSb2NtOTFaMmdnWlhabGNua2dhMlY1SUc5dUlIUm9aU0J2WW1wbFkzUXNYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEdadmNpQW9JR2tnYVc0Z1pXeGxiWE1nS1NCN1hHNWNkRngwWEhSY2RIWmhiSFZsSUQwZ1kyRnNiR0poWTJzb0lHVnNaVzF6V3lCcElGMHNJR2tzSUdGeVp5QXBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dkbUZzZFdVZ0lUMGdiblZzYkNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhRdWNIVnphQ2dnZG1Gc2RXVWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVac1lYUjBaVzRnWVc1NUlHNWxjM1JsWkNCaGNuSmhlWE5jYmx4MFhIUnlaWFIxY200Z1kyOXVZMkYwTG1Gd2NHeDVLQ0JiWFN3Z2NtVjBJQ2s3WEc1Y2RIMHNYRzVjYmx4MEx5OGdRU0JuYkc5aVlXd2dSMVZKUkNCamIzVnVkR1Z5SUdadmNpQnZZbXBsWTNSelhHNWNkR2QxYVdRNklERXNYRzVjYmx4MEx5OGdRbWx1WkNCaElHWjFibU4wYVc5dUlIUnZJR0VnWTI5dWRHVjRkQ3dnYjNCMGFXOXVZV3hzZVNCd1lYSjBhV0ZzYkhrZ1lYQndiSGxwYm1jZ1lXNTVYRzVjZEM4dklHRnlaM1Z0Wlc1MGN5NWNibHgwY0hKdmVIazZJR1oxYm1OMGFXOXVLQ0JtYml3Z1kyOXVkR1Y0ZENBcElIdGNibHgwWEhSMllYSWdkRzF3TENCaGNtZHpMQ0J3Y205NGVUdGNibHh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR052Ym5SbGVIUWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0tTQjdYRzVjZEZ4MFhIUjBiWEFnUFNCbWJsc2dZMjl1ZEdWNGRDQmRPMXh1WEhSY2RGeDBZMjl1ZEdWNGRDQTlJR1p1TzF4dVhIUmNkRngwWm00Z1BTQjBiWEE3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVVhWcFkyc2dZMmhsWTJzZ2RHOGdaR1YwWlhKdGFXNWxJR2xtSUhSaGNtZGxkQ0JwY3lCallXeHNZV0pzWlN3Z2FXNGdkR2hsSUhOd1pXTmNibHgwWEhRdkx5QjBhR2x6SUhSb2NtOTNjeUJoSUZSNWNHVkZjbkp2Y2l3Z1luVjBJSGRsSUhkcGJHd2dhblZ6ZENCeVpYUjFjbTRnZFc1a1pXWnBibVZrTGx4dVhIUmNkR2xtSUNnZ0lXcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQm1iaUFwSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVGFXMTFiR0YwWldRZ1ltbHVaRnh1WEhSY2RHRnlaM01nUFNCemJHbGpaUzVqWVd4c0tDQmhjbWQxYldWdWRITXNJRElnS1R0Y2JseDBYSFJ3Y205NGVTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1p1TG1Gd2NHeDVLQ0JqYjI1MFpYaDBJSHg4SUhSb2FYTXNJR0Z5WjNNdVkyOXVZMkYwS0NCemJHbGpaUzVqWVd4c0tDQmhjbWQxYldWdWRITWdLU0FwSUNrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEM4dklGTmxkQ0IwYUdVZ1ozVnBaQ0J2WmlCMWJtbHhkV1VnYUdGdVpHeGxjaUIwYnlCMGFHVWdjMkZ0WlNCdlppQnZjbWxuYVc1aGJDQm9ZVzVrYkdWeUxDQnpieUJwZENCallXNGdZbVVnY21WdGIzWmxaRnh1WEhSY2RIQnliM2g1TG1kMWFXUWdQU0JtYmk1bmRXbGtJRDBnWm00dVozVnBaQ0I4ZkNCcVVYVmxjbmt1WjNWcFpDc3JPMXh1WEc1Y2RGeDBjbVYwZFhKdUlIQnliM2g1TzF4dVhIUjlMRnh1WEc1Y2RHNXZkem9nUkdGMFpTNXViM2NzWEc1Y2JseDBMeThnYWxGMVpYSjVMbk4xY0hCdmNuUWdhWE1nYm05MElIVnpaV1FnYVc0Z1EyOXlaU0JpZFhRZ2IzUm9aWElnY0hKdmFtVmpkSE1nWVhSMFlXTm9JSFJvWldseVhHNWNkQzh2SUhCeWIzQmxjblJwWlhNZ2RHOGdhWFFnYzI4Z2FYUWdibVZsWkhNZ2RHOGdaWGhwYzNRdVhHNWNkSE4xY0hCdmNuUTZJSE4xY0hCdmNuUmNibjBnS1R0Y2JseHVhV1lnS0NCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdLU0I3WEc1Y2RHcFJkV1Z5ZVM1bWJsc2dVM2x0WW05c0xtbDBaWEpoZEc5eUlGMGdQU0JoY25KYklGTjViV0p2YkM1cGRHVnlZWFJ2Y2lCZE8xeHVmVnh1WEc0dkx5QlFiM0IxYkdGMFpTQjBhR1VnWTJ4aGMzTXlkSGx3WlNCdFlYQmNibXBSZFdWeWVTNWxZV05vS0NCY0lrSnZiMnhsWVc0Z1RuVnRZbVZ5SUZOMGNtbHVaeUJHZFc1amRHbHZiaUJCY25KaGVTQkVZWFJsSUZKbFowVjRjQ0JQWW1wbFkzUWdSWEp5YjNJZ1UzbHRZbTlzWENJdWMzQnNhWFFvSUZ3aUlGd2lJQ2tzWEc1bWRXNWpkR2x2YmlnZ2FTd2dibUZ0WlNBcElIdGNibHgwWTJ4aGMzTXlkSGx3WlZzZ1hDSmJiMkpxWldOMElGd2lJQ3NnYm1GdFpTQXJJRndpWFZ3aUlGMGdQU0J1WVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1OUlDazdYRzVjYm1aMWJtTjBhVzl1SUdselFYSnlZWGxNYVd0bEtDQnZZbW9nS1NCN1hHNWNibHgwTHk4Z1UzVndjRzl5ZERvZ2NtVmhiQ0JwVDFNZ09DNHlJRzl1YkhrZ0tHNXZkQ0J5WlhCeWIyUjFZMmxpYkdVZ2FXNGdjMmx0ZFd4aGRHOXlLVnh1WEhRdkx5QmdhVzVnSUdOb1pXTnJJSFZ6WldRZ2RHOGdjSEpsZG1WdWRDQktTVlFnWlhKeWIzSWdLR2RvTFRJeE5EVXBYRzVjZEM4dklHaGhjMDkzYmlCcGMyNG5kQ0IxYzJWa0lHaGxjbVVnWkhWbElIUnZJR1poYkhObElHNWxaMkYwYVhabGMxeHVYSFF2THlCeVpXZGhjbVJwYm1jZ1RtOWtaV3hwYzNRZ2JHVnVaM1JvSUdsdUlFbEZYRzVjZEhaaGNpQnNaVzVuZEdnZ1BTQWhJVzlpYWlBbUppQmNJbXhsYm1kMGFGd2lJR2x1SUc5aWFpQW1KaUJ2WW1vdWJHVnVaM1JvTEZ4dVhIUmNkSFI1Y0dVZ1BTQnFVWFZsY25rdWRIbHdaU2dnYjJKcUlDazdYRzVjYmx4MGFXWWdLQ0IwZVhCbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ2ZId2dhbEYxWlhKNUxtbHpWMmx1Wkc5M0tDQnZZbW9nS1NBcElIdGNibHgwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdkSGx3WlNBOVBUMGdYQ0poY25KaGVWd2lJSHg4SUd4bGJtZDBhQ0E5UFQwZ01DQjhmRnh1WEhSY2RIUjVjR1Z2WmlCc1pXNW5kR2dnUFQwOUlGd2liblZ0WW1WeVhDSWdKaVlnYkdWdVozUm9JRDRnTUNBbUppQW9JR3hsYm1kMGFDQXRJREVnS1NCcGJpQnZZbW83WEc1OVhHNTJZWElnVTJsNmVteGxJRDFjYmk4cUlWeHVJQ29nVTJsNmVteGxJRU5UVXlCVFpXeGxZM1J2Y2lCRmJtZHBibVVnZGpJdU15NHpYRzRnS2lCb2RIUndjem92TDNOcGVucHNaV3B6TG1OdmJTOWNiaUFxWEc0Z0tpQkRiM0I1Y21sbmFIUWdhbEYxWlhKNUlFWnZkVzVrWVhScGIyNGdZVzVrSUc5MGFHVnlJR052Ym5SeWFXSjFkRzl5YzF4dUlDb2dVbVZzWldGelpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCc2FXTmxibk5sWEc0Z0tpQm9kSFJ3T2k4dmFuRjFaWEo1TG05eVp5OXNhV05sYm5ObFhHNGdLbHh1SUNvZ1JHRjBaVG9nTWpBeE5pMHdPQzB3T0Z4dUlDb3ZYRzRvWm5WdVkzUnBiMjRvSUhkcGJtUnZkeUFwSUh0Y2JseHVkbUZ5SUdrc1hHNWNkSE4xY0hCdmNuUXNYRzVjZEVWNGNISXNYRzVjZEdkbGRGUmxlSFFzWEc1Y2RHbHpXRTFNTEZ4dVhIUjBiMnRsYm1sNlpTeGNibHgwWTI5dGNHbHNaU3hjYmx4MGMyVnNaV04wTEZ4dVhIUnZkWFJsY20xdmMzUkRiMjUwWlhoMExGeHVYSFJ6YjNKMFNXNXdkWFFzWEc1Y2RHaGhjMFIxY0d4cFkyRjBaU3hjYmx4dVhIUXZMeUJNYjJOaGJDQmtiMk4xYldWdWRDQjJZWEp6WEc1Y2RITmxkRVJ2WTNWdFpXNTBMRnh1WEhSa2IyTjFiV1Z1ZEN4Y2JseDBaRzlqUld4bGJTeGNibHgwWkc5amRXMWxiblJKYzBoVVRVd3NYRzVjZEhKaWRXZG5lVkZUUVN4Y2JseDBjbUoxWjJkNVRXRjBZMmhsY3l4Y2JseDBiV0YwWTJobGN5eGNibHgwWTI5dWRHRnBibk1zWEc1Y2JseDBMeThnU1c1emRHRnVZMlV0YzNCbFkybG1hV01nWkdGMFlWeHVYSFJsZUhCaGJtUnZJRDBnWENKemFYcDZiR1ZjSWlBcklERWdLaUJ1WlhjZ1JHRjBaU2dwTEZ4dVhIUndjbVZtWlhKeVpXUkViMk1nUFNCM2FXNWtiM2N1Wkc5amRXMWxiblFzWEc1Y2RHUnBjbkoxYm5NZ1BTQXdMRnh1WEhSa2IyNWxJRDBnTUN4Y2JseDBZMnhoYzNORFlXTm9aU0E5SUdOeVpXRjBaVU5oWTJobEtDa3NYRzVjZEhSdmEyVnVRMkZqYUdVZ1BTQmpjbVZoZEdWRFlXTm9aU2dwTEZ4dVhIUmpiMjF3YVd4bGNrTmhZMmhsSUQwZ1kzSmxZWFJsUTJGamFHVW9LU3hjYmx4MGMyOXlkRTl5WkdWeUlEMGdablZ1WTNScGIyNG9JR0VzSUdJZ0tTQjdYRzVjZEZ4MGFXWWdLQ0JoSUQwOVBTQmlJQ2tnZTF4dVhIUmNkRngwYUdGelJIVndiR2xqWVhSbElEMGdkSEoxWlR0Y2JseDBYSFI5WEc1Y2RGeDBjbVYwZFhKdUlEQTdYRzVjZEgwc1hHNWNibHgwTHk4Z1NXNXpkR0Z1WTJVZ2JXVjBhRzlrYzF4dVhIUm9ZWE5QZDI0Z1BTQW9lMzBwTG1oaGMwOTNibEJ5YjNCbGNuUjVMRnh1WEhSaGNuSWdQU0JiWFN4Y2JseDBjRzl3SUQwZ1lYSnlMbkJ2Y0N4Y2JseDBjSFZ6YUY5dVlYUnBkbVVnUFNCaGNuSXVjSFZ6YUN4Y2JseDBjSFZ6YUNBOUlHRnljaTV3ZFhOb0xGeHVYSFJ6YkdsalpTQTlJR0Z5Y2k1emJHbGpaU3hjYmx4MEx5OGdWWE5sSUdFZ2MzUnlhWEJ3WldRdFpHOTNiaUJwYm1SbGVFOW1JR0Z6SUdsMEozTWdabUZ6ZEdWeUlIUm9ZVzRnYm1GMGFYWmxYRzVjZEM4dklHaDBkSEJ6T2k4dmFuTndaWEptTG1OdmJTOTBhRzl5TFdsdVpHVjRiMll0ZG5NdFptOXlMelZjYmx4MGFXNWtaWGhQWmlBOUlHWjFibU4wYVc5dUtDQnNhWE4wTENCbGJHVnRJQ2tnZTF4dVhIUmNkSFpoY2lCcElEMGdNQ3hjYmx4MFhIUmNkR3hsYmlBOUlHeHBjM1F1YkdWdVozUm9PMXh1WEhSY2RHWnZjaUFvSURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQnNhWE4wVzJsZElEMDlQU0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdhVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUMweE8xeHVYSFI5TEZ4dVhHNWNkR0p2YjJ4bFlXNXpJRDBnWENKamFHVmphMlZrZkhObGJHVmpkR1ZrZkdGemVXNWpmR0YxZEc5bWIyTjFjM3hoZFhSdmNHeGhlWHhqYjI1MGNtOXNjM3hrWldabGNueGthWE5oWW14bFpIeG9hV1JrWlc1OGFYTnRZWEI4Ykc5dmNIeHRkV3gwYVhCc1pYeHZjR1Z1ZkhKbFlXUnZibXg1ZkhKbGNYVnBjbVZrZkhOamIzQmxaRndpTEZ4dVhHNWNkQzh2SUZKbFozVnNZWElnWlhod2NtVnpjMmx2Ym5OY2JseHVYSFF2THlCb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOWpjM016TFhObGJHVmpkRzl5Y3k4amQyaHBkR1Z6Y0dGalpWeHVYSFIzYUdsMFpYTndZV05sSUQwZ1hDSmJYRnhjWEhneU1GeGNYRngwWEZ4Y1hISmNYRnhjYmx4Y1hGeG1YVndpTEZ4dVhHNWNkQzh2SUdoMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0wwTlRVekl4TDNONWJtUmhkR0V1YUhSdGJDTjJZV3gxWlMxa1pXWXRhV1JsYm5ScFptbGxjbHh1WEhScFpHVnVkR2xtYVdWeUlEMGdYQ0lvUHpwY1hGeGNYRnhjWEM1OFcxeGNYRngzTFYxOFcxNWNYREF0WEZ4Y1hIaGhNRjBwSzF3aUxGeHVYRzVjZEM4dklFRjBkSEpwWW5WMFpTQnpaV3hsWTNSdmNuTTZJR2gwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDNObGJHVmpkRzl5Y3k4allYUjBjbWxpZFhSbExYTmxiR1ZqZEc5eWMxeHVYSFJoZEhSeWFXSjFkR1Z6SUQwZ1hDSmNYRnhjVzF3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUtpaGNJaUFySUdsa1pXNTBhV1pwWlhJZ0t5QmNJaWtvUHpwY0lpQXJJSGRvYVhSbGMzQmhZMlVnSzF4dVhIUmNkQzh2SUU5d1pYSmhkRzl5SUNoallYQjBkWEpsSURJcFhHNWNkRngwWENJcUtGc3FYaVI4SVg1ZFB6MHBYQ0lnS3lCM2FHbDBaWE53WVdObElDdGNibHgwWEhRdkx5QmNJa0YwZEhKcFluVjBaU0IyWVd4MVpYTWdiWFZ6ZENCaVpTQkRVMU1nYVdSbGJuUnBabWxsY25NZ1cyTmhjSFIxY21VZ05WMGdiM0lnYzNSeWFXNW5jeUJiWTJGd2RIVnlaU0F6SUc5eUlHTmhjSFIxY21VZ05GMWNJbHh1WEhSY2RGd2lLaWcvT2ljb0tEODZYRnhjWEZ4Y1hGd3VmRnRlWEZ4Y1hGeGNYRnduWFNrcUtTZDhYRnhjSWlnb1B6cGNYRnhjWEZ4Y1hDNThXMTVjWEZ4Y1hGeGNYRnhjWENKZEtTb3BYRnhjSW53b1hDSWdLeUJwWkdWdWRHbG1hV1Z5SUNzZ1hDSXBLWHdwWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3RjYmx4MFhIUmNJaXBjWEZ4Y1hWd2lMRnh1WEc1Y2RIQnpaWFZrYjNNZ1BTQmNJam9vWENJZ0t5QnBaR1Z1ZEdsbWFXVnlJQ3NnWENJcEtEODZYRnhjWENnb1hDSWdLMXh1WEhSY2RDOHZJRlJ2SUhKbFpIVmpaU0IwYUdVZ2JuVnRZbVZ5SUc5bUlITmxiR1ZqZEc5eWN5QnVaV1ZrYVc1bklIUnZhMlZ1YVhwbElHbHVJSFJvWlNCd2NtVkdhV3gwWlhJc0lIQnlaV1psY2lCaGNtZDFiV1Z1ZEhNNlhHNWNkRngwTHk4Z01TNGdjWFZ2ZEdWa0lDaGpZWEIwZFhKbElETTdJR05oY0hSMWNtVWdOQ0J2Y2lCallYQjBkWEpsSURVcFhHNWNkRngwWENJb0p5Z29QenBjWEZ4Y1hGeGNYQzU4VzE1Y1hGeGNYRnhjWENkZEtTb3BKM3hjWEZ3aUtDZy9PbHhjWEZ4Y1hGeGNMbnhiWGx4Y1hGeGNYRnhjWEZ4Y0lsMHBLaWxjWEZ3aUtYeGNJaUFyWEc1Y2RGeDBMeThnTWk0Z2MybHRjR3hsSUNoallYQjBkWEpsSURZcFhHNWNkRngwWENJb0tEODZYRnhjWEZ4Y1hGd3VmRnRlWEZ4Y1hGeGNYRndvS1Z0Y1hGeGNYVjE4WENJZ0t5QmhkSFJ5YVdKMWRHVnpJQ3NnWENJcEtpbDhYQ0lnSzF4dVhIUmNkQzh2SURNdUlHRnVlWFJvYVc1bklHVnNjMlVnS0dOaGNIUjFjbVVnTWlsY2JseDBYSFJjSWk0cVhDSWdLMXh1WEhSY2RGd2lLVnhjWEZ3cGZDbGNJaXhjYmx4dVhIUXZMeUJNWldGa2FXNW5JR0Z1WkNCdWIyNHRaWE5qWVhCbFpDQjBjbUZwYkdsdVp5QjNhR2wwWlhOd1lXTmxMQ0JqWVhCMGRYSnBibWNnYzI5dFpTQnViMjR0ZDJocGRHVnpjR0ZqWlNCamFHRnlZV04wWlhKeklIQnlaV05sWkdsdVp5QjBhR1VnYkdGMGRHVnlYRzVjZEhKM2FHbDBaWE53WVdObElEMGdibVYzSUZKbFowVjRjQ2dnZDJocGRHVnpjR0ZqWlNBcklGd2lLMXdpTENCY0ltZGNJaUFwTEZ4dVhIUnlkSEpwYlNBOUlHNWxkeUJTWldkRmVIQW9JRndpWGx3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUszd29LRDg2WG54YlhseGNYRnhjWEZ4Y1hTa29QenBjWEZ4Y1hGeGNYQzRwS2lsY0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lpc2tYQ0lzSUZ3aVoxd2lJQ2tzWEc1Y2JseDBjbU52YlcxaElEMGdibVYzSUZKbFowVjRjQ2dnWENKZVhDSWdLeUIzYUdsMFpYTndZV05sSUNzZ1hDSXFMRndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS2x3aUlDa3NYRzVjZEhKamIyMWlhVzVoZEc5eWN5QTlJRzVsZHlCU1pXZEZlSEFvSUZ3aVhsd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lLaWhiUGl0K1hYeGNJaUFySUhkb2FYUmxjM0JoWTJVZ0t5QmNJaWxjSWlBcklIZG9hWFJsYzNCaFkyVWdLeUJjSWlwY0lpQXBMRnh1WEc1Y2RISmhkSFJ5YVdKMWRHVlJkVzkwWlhNZ1BTQnVaWGNnVW1WblJYaHdLQ0JjSWoxY0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lpb29XMTVjWEZ4Y1hTZGNYRndpWFNvL0tWd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lLbHhjWEZ4ZFhDSXNJRndpWjF3aUlDa3NYRzVjYmx4MGNuQnpaWFZrYnlBOUlHNWxkeUJTWldkRmVIQW9JSEJ6WlhWa2IzTWdLU3hjYmx4MGNtbGtaVzUwYVdacFpYSWdQU0J1WlhjZ1VtVm5SWGh3S0NCY0lsNWNJaUFySUdsa1pXNTBhV1pwWlhJZ0t5QmNJaVJjSWlBcExGeHVYRzVjZEcxaGRHTm9SWGh3Y2lBOUlIdGNibHgwWEhSY0lrbEVYQ0k2SUc1bGR5QlNaV2RGZUhBb0lGd2lYaU1vWENJZ0t5QnBaR1Z1ZEdsbWFXVnlJQ3NnWENJcFhDSWdLU3hjYmx4MFhIUmNJa05NUVZOVFhDSTZJRzVsZHlCU1pXZEZlSEFvSUZ3aVhseGNYRnd1S0Z3aUlDc2dhV1JsYm5ScFptbGxjaUFySUZ3aUtWd2lJQ2tzWEc1Y2RGeDBYQ0pVUVVkY0lqb2dibVYzSUZKbFowVjRjQ2dnWENKZUtGd2lJQ3NnYVdSbGJuUnBabWxsY2lBcklGd2lmRnNxWFNsY0lpQXBMRnh1WEhSY2RGd2lRVlJVVWx3aU9pQnVaWGNnVW1WblJYaHdLQ0JjSWw1Y0lpQXJJR0YwZEhKcFluVjBaWE1nS1N4Y2JseDBYSFJjSWxCVFJWVkVUMXdpT2lCdVpYY2dVbVZuUlhod0tDQmNJbDVjSWlBcklIQnpaWFZrYjNNZ0tTeGNibHgwWEhSY0lrTklTVXhFWENJNklHNWxkeUJTWldkRmVIQW9JRndpWGpvb2IyNXNlWHhtYVhKemRIeHNZWE4wZkc1MGFIeHVkR2d0YkdGemRDa3RLR05vYVd4a2ZHOW1MWFI1Y0dVcEtEODZYRnhjWENoY0lpQXJJSGRvYVhSbGMzQmhZMlVnSzF4dVhIUmNkRngwWENJcUtHVjJaVzU4YjJSa2ZDZ29XeXN0WFh3cEtGeGNYRnhrS2lsdWZDbGNJaUFySUhkb2FYUmxjM0JoWTJVZ0t5QmNJaW9vUHpvb1d5c3RYWHdwWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3RjYmx4MFhIUmNkRndpS2loY1hGeGNaQ3NwZkNrcFhDSWdLeUIzYUdsMFpYTndZV05sSUNzZ1hDSXFYRnhjWENsOEtWd2lMQ0JjSW1sY0lpQXBMRnh1WEhSY2RGd2lZbTl2YkZ3aU9pQnVaWGNnVW1WblJYaHdLQ0JjSWw0b1B6cGNJaUFySUdKdmIyeGxZVzV6SUNzZ1hDSXBKRndpTENCY0ltbGNJaUFwTEZ4dVhIUmNkQzh2SUVadmNpQjFjMlVnYVc0Z2JHbGljbUZ5YVdWeklHbHRjR3hsYldWdWRHbHVaeUF1YVhNb0tWeHVYSFJjZEM4dklGZGxJSFZ6WlNCMGFHbHpJR1p2Y2lCUVQxTWdiV0YwWTJocGJtY2dhVzRnWUhObGJHVmpkR0JjYmx4MFhIUmNJbTVsWldSelEyOXVkR1Y0ZEZ3aU9pQnVaWGNnVW1WblJYaHdLQ0JjSWw1Y0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lpcGJQaXQrWFh3NktHVjJaVzU4YjJSa2ZHVnhmR2QwZkd4MGZHNTBhSHhtYVhKemRIeHNZWE4wS1NnL09seGNYRndvWENJZ0sxeHVYSFJjZEZ4MGQyaHBkR1Z6Y0dGalpTQXJJRndpS2lnb1B6b3RYRnhjWEdRcFAxeGNYRnhrS2lsY0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lpcGNYRnhjS1h3cEtEODlXMTR0WFh3a0tWd2lMQ0JjSW1sY0lpQXBYRzVjZEgwc1hHNWNibHgwY21sdWNIVjBjeUE5SUM5ZUtEODZhVzV3ZFhSOGMyVnNaV04wZkhSbGVIUmhjbVZoZkdKMWRIUnZiaWtrTDJrc1hHNWNkSEpvWldGa1pYSWdQU0F2WG1oY1hHUWtMMmtzWEc1Y2JseDBjbTVoZEdsMlpTQTlJQzllVzE1N1hTdGNYSHRjWEhNcVhGeGJibUYwYVhabElGeGNkeThzWEc1Y2JseDBMeThnUldGemFXeDVMWEJoY25ObFlXSnNaUzl5WlhSeWFXVjJZV0pzWlNCSlJDQnZjaUJVUVVjZ2IzSWdRMHhCVTFNZ2MyVnNaV04wYjNKelhHNWNkSEp4ZFdsamEwVjRjSElnUFNBdlhpZy9PaU1vVzF4Y2R5MWRLeWw4S0Z4Y2R5c3BmRnhjTGloYlhGeDNMVjByS1Nra0x5eGNibHh1WEhSeWMybGliR2x1WnlBOUlDOWJLMzVkTHl4Y2JseHVYSFF2THlCRFUxTWdaWE5qWVhCbGMxeHVYSFF2THlCb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOURVMU15TVM5emVXNWtZWFJoTG1oMGJXd2paWE5qWVhCbFpDMWphR0Z5WVdOMFpYSnpYRzVjZEhKMWJtVnpZMkZ3WlNBOUlHNWxkeUJTWldkRmVIQW9JRndpWEZ4Y1hGeGNYRndvVzF4Y1hGeGtZUzFtWFhzeExEWjlYQ0lnS3lCM2FHbDBaWE53WVdObElDc2dYQ0kvZkNoY0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lpbDhMaWxjSWl3Z1hDSnBaMXdpSUNrc1hHNWNkR1oxYm1WelkyRndaU0E5SUdaMWJtTjBhVzl1S0NCZkxDQmxjMk5oY0dWa0xDQmxjMk5oY0dWa1YyaHBkR1Z6Y0dGalpTQXBJSHRjYmx4MFhIUjJZWElnYUdsbmFDQTlJRndpTUhoY0lpQXJJR1Z6WTJGd1pXUWdMU0F3ZURFd01EQXdPMXh1WEhSY2RDOHZJRTVoVGlCdFpXRnVjeUJ1YjI0dFkyOWtaWEJ2YVc1MFhHNWNkRngwTHk4Z1UzVndjRzl5ZERvZ1JtbHlaV1p2ZUR3eU5GeHVYSFJjZEM4dklGZHZjbXRoY205MWJtUWdaWEp5YjI1bGIzVnpJRzUxYldWeWFXTWdhVzUwWlhKd2NtVjBZWFJwYjI0Z2IyWWdLMXdpTUhoY0lseHVYSFJjZEhKbGRIVnliaUJvYVdkb0lDRTlQU0JvYVdkb0lIeDhJR1Z6WTJGd1pXUlhhR2wwWlhOd1lXTmxJRDljYmx4MFhIUmNkR1Z6WTJGd1pXUWdPbHh1WEhSY2RGeDBhR2xuYUNBOElEQWdQMXh1WEhSY2RGeDBYSFF2THlCQ1RWQWdZMjlrWlhCdmFXNTBYRzVjZEZ4MFhIUmNkRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvSUdocFoyZ2dLeUF3ZURFd01EQXdJQ2tnT2x4dVhIUmNkRngwWEhRdkx5QlRkWEJ3YkdWdFpXNTBZV3dnVUd4aGJtVWdZMjlrWlhCdmFXNTBJQ2h6ZFhKeWIyZGhkR1VnY0dGcGNpbGNibHgwWEhSY2RGeDBVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2dnYUdsbmFDQStQaUF4TUNCOElEQjRSRGd3TUN3Z2FHbG5hQ0FtSURCNE0wWkdJSHdnTUhoRVF6QXdJQ2s3WEc1Y2RIMHNYRzVjYmx4MEx5OGdRMU5USUhOMGNtbHVaeTlwWkdWdWRHbG1hV1Z5SUhObGNtbGhiR2w2WVhScGIyNWNibHgwTHk4Z2FIUjBjSE02THk5a2NtRm1kSE11WTNOemQyY3ViM0puTDJOemMyOXRMeU5qYjIxdGIyNHRjMlZ5YVdGc2FYcHBibWN0YVdScGIyMXpYRzVjZEhKamMzTmxjMk5oY0dVZ1BTQXZLRnRjWERBdFhGeDRNV1pjWEhnM1psMThYaTAvWEZ4a0tYeGVMU1I4VzE1Y1hEQXRYRng0TVdaY1hIZzNaaTFjWEhWR1JrWkdYRngzTFYwdlp5eGNibHgwWm1OemMyVnpZMkZ3WlNBOUlHWjFibU4wYVc5dUtDQmphQ3dnWVhORGIyUmxVRzlwYm5RZ0tTQjdYRzVjZEZ4MGFXWWdLQ0JoYzBOdlpHVlFiMmx1ZENBcElIdGNibHh1WEhSY2RGeDBMeThnVlNzd01EQXdJRTVWVEV3Z1ltVmpiMjFsY3lCVkswWkdSa1FnVWtWUVRFRkRSVTFGVGxRZ1EwaEJVa0ZEVkVWU1hHNWNkRngwWEhScFppQW9JR05vSUQwOVBTQmNJbHhjTUZ3aUlDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdYQ0pjWEhWR1JrWkVYQ0k3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFTnZiblJ5YjJ3Z1kyaGhjbUZqZEdWeWN5QmhibVFnS0dSbGNHVnVaR1Z1ZENCMWNHOXVJSEJ2YzJsMGFXOXVLU0J1ZFcxaVpYSnpJR2RsZENCbGMyTmhjR1ZrSUdGeklHTnZaR1VnY0c5cGJuUnpYRzVjZEZ4MFhIUnlaWFIxY200Z1kyZ3VjMnhwWTJVb0lEQXNJQzB4SUNrZ0t5QmNJbHhjWEZ4Y0lpQXJJR05vTG1Ob1lYSkRiMlJsUVhRb0lHTm9MbXhsYm1kMGFDQXRJREVnS1M1MGIxTjBjbWx1WnlnZ01UWWdLU0FySUZ3aUlGd2lPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRTkwYUdWeUlIQnZkR1Z1ZEdsaGJHeDVMWE53WldOcFlXd2dRVk5EU1VrZ1kyaGhjbUZqZEdWeWN5Qm5aWFFnWW1GamEzTnNZWE5vTFdWelkyRndaV1JjYmx4MFhIUnlaWFIxY200Z1hDSmNYRnhjWENJZ0t5QmphRHRjYmx4MGZTeGNibHh1WEhRdkx5QlZjMlZrSUdadmNpQnBabkpoYldWelhHNWNkQzh2SUZObFpTQnpaWFJFYjJOMWJXVnVkQ2dwWEc1Y2RDOHZJRkpsYlc5MmFXNW5JSFJvWlNCbWRXNWpkR2x2YmlCM2NtRndjR1Z5SUdOaGRYTmxjeUJoSUZ3aVVHVnliV2x6YzJsdmJpQkVaVzVwWldSY0lseHVYSFF2THlCbGNuSnZjaUJwYmlCSlJWeHVYSFIxYm14dllXUklZVzVrYkdWeUlEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBjMlYwUkc5amRXMWxiblFvS1R0Y2JseDBmU3hjYmx4dVhIUmthWE5oWW14bFpFRnVZMlZ6ZEc5eUlEMGdZV1JrUTI5dFltbHVZWFJ2Y2loY2JseDBYSFJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TG1ScGMyRmliR1ZrSUQwOVBTQjBjblZsSUNZbUlDaGNJbVp2Y20xY0lpQnBiaUJsYkdWdElIeDhJRndpYkdGaVpXeGNJaUJwYmlCbGJHVnRLVHRjYmx4MFhIUjlMRnh1WEhSY2RIc2daR2x5T2lCY0luQmhjbVZ1ZEU1dlpHVmNJaXdnYm1WNGREb2dYQ0pzWldkbGJtUmNJaUI5WEc1Y2RDazdYRzVjYmk4dklFOXdkR2x0YVhwbElHWnZjaUJ3ZFhOb0xtRndjR3g1S0NCZkxDQk9iMlJsVEdsemRDQXBYRzUwY25rZ2UxeHVYSFJ3ZFhOb0xtRndjR3g1S0Z4dVhIUmNkQ2hoY25JZ1BTQnpiR2xqWlM1allXeHNLQ0J3Y21WbVpYSnlaV1JFYjJNdVkyaHBiR1JPYjJSbGN5QXBLU3hjYmx4MFhIUndjbVZtWlhKeVpXUkViMk11WTJocGJHUk9iMlJsYzF4dVhIUXBPMXh1WEhRdkx5QlRkWEJ3YjNKME9pQkJibVJ5YjJsa1BEUXVNRnh1WEhRdkx5QkVaWFJsWTNRZ2MybHNaVzUwYkhrZ1ptRnBiR2x1WnlCd2RYTm9MbUZ3Y0d4NVhHNWNkR0Z5Y2xzZ2NISmxabVZ5Y21Wa1JHOWpMbU5vYVd4a1RtOWtaWE11YkdWdVozUm9JRjB1Ym05a1pWUjVjR1U3WEc1OUlHTmhkR05vSUNnZ1pTQXBJSHRjYmx4MGNIVnphQ0E5SUhzZ1lYQndiSGs2SUdGeWNpNXNaVzVuZEdnZ1AxeHVYRzVjZEZ4MEx5OGdUR1YyWlhKaFoyVWdjMnhwWTJVZ2FXWWdjRzl6YzJsaWJHVmNibHgwWEhSbWRXNWpkR2x2YmlnZ2RHRnlaMlYwTENCbGJITWdLU0I3WEc1Y2RGeDBYSFJ3ZFhOb1gyNWhkR2wyWlM1aGNIQnNlU2dnZEdGeVoyVjBMQ0J6YkdsalpTNWpZV3hzS0dWc2N5a2dLVHRjYmx4MFhIUjlJRHBjYmx4dVhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRlBEbGNibHgwWEhRdkx5QlBkR2hsY25kcGMyVWdZWEJ3Wlc1a0lHUnBjbVZqZEd4NVhHNWNkRngwWm5WdVkzUnBiMjRvSUhSaGNtZGxkQ3dnWld4eklDa2dlMXh1WEhSY2RGeDBkbUZ5SUdvZ1BTQjBZWEpuWlhRdWJHVnVaM1JvTEZ4dVhIUmNkRngwWEhScElEMGdNRHRjYmx4MFhIUmNkQzh2SUVOaGJpZDBJSFJ5ZFhOMElFNXZaR1ZNYVhOMExteGxibWQwYUZ4dVhIUmNkRngwZDJocGJHVWdLQ0FvZEdGeVoyVjBXMm9ySzEwZ1BTQmxiSE5iYVNzclhTa2dLU0I3ZlZ4dVhIUmNkRngwZEdGeVoyVjBMbXhsYm1kMGFDQTlJR29nTFNBeE8xeHVYSFJjZEgxY2JseDBmVHRjYm4xY2JseHVablZ1WTNScGIyNGdVMmw2ZW14bEtDQnpaV3hsWTNSdmNpd2dZMjl1ZEdWNGRDd2djbVZ6ZFd4MGN5d2djMlZsWkNBcElIdGNibHgwZG1GeUlHMHNJR2tzSUdWc1pXMHNJRzVwWkN3Z2JXRjBZMmdzSUdkeWIzVndjeXdnYm1WM1UyVnNaV04wYjNJc1hHNWNkRngwYm1WM1EyOXVkR1Y0ZENBOUlHTnZiblJsZUhRZ0ppWWdZMjl1ZEdWNGRDNXZkMjVsY2tSdlkzVnRaVzUwTEZ4dVhHNWNkRngwTHk4Z2JtOWtaVlI1Y0dVZ1pHVm1ZWFZzZEhNZ2RHOGdPU3dnYzJsdVkyVWdZMjl1ZEdWNGRDQmtaV1poZFd4MGN5QjBieUJrYjJOMWJXVnVkRnh1WEhSY2RHNXZaR1ZVZVhCbElEMGdZMjl1ZEdWNGRDQS9JR052Ym5SbGVIUXVibTlrWlZSNWNHVWdPaUE1TzF4dVhHNWNkSEpsYzNWc2RITWdQU0J5WlhOMWJIUnpJSHg4SUZ0ZE8xeHVYRzVjZEM4dklGSmxkSFZ5YmlCbFlYSnNlU0JtY205dElHTmhiR3h6SUhkcGRHZ2dhVzUyWVd4cFpDQnpaV3hsWTNSdmNpQnZjaUJqYjI1MFpYaDBYRzVjZEdsbUlDZ2dkSGx3Wlc5bUlITmxiR1ZqZEc5eUlDRTlQU0JjSW5OMGNtbHVaMXdpSUh4OElDRnpaV3hsWTNSdmNpQjhmRnh1WEhSY2RHNXZaR1ZVZVhCbElDRTlQU0F4SUNZbUlHNXZaR1ZVZVhCbElDRTlQU0E1SUNZbUlHNXZaR1ZVZVhCbElDRTlQU0F4TVNBcElIdGNibHh1WEhSY2RISmxkSFZ5YmlCeVpYTjFiSFJ6TzF4dVhIUjlYRzVjYmx4MEx5OGdWSEo1SUhSdklITm9iM0owWTNWMElHWnBibVFnYjNCbGNtRjBhVzl1Y3lBb1lYTWdiM0J3YjNObFpDQjBieUJtYVd4MFpYSnpLU0JwYmlCSVZFMU1JR1J2WTNWdFpXNTBjMXh1WEhScFppQW9JQ0Z6WldWa0lDa2dlMXh1WEc1Y2RGeDBhV1lnS0NBb0lHTnZiblJsZUhRZ1B5QmpiMjUwWlhoMExtOTNibVZ5Ukc5amRXMWxiblFnZkh3Z1kyOXVkR1Y0ZENBNklIQnlaV1psY25KbFpFUnZZeUFwSUNFOVBTQmtiMk4xYldWdWRDQXBJSHRjYmx4MFhIUmNkSE5sZEVSdlkzVnRaVzUwS0NCamIyNTBaWGgwSUNrN1hHNWNkRngwZlZ4dVhIUmNkR052Ym5SbGVIUWdQU0JqYjI1MFpYaDBJSHg4SUdSdlkzVnRaVzUwTzF4dVhHNWNkRngwYVdZZ0tDQmtiMk4xYldWdWRFbHpTRlJOVENBcElIdGNibHh1WEhSY2RGeDBMeThnU1dZZ2RHaGxJSE5sYkdWamRHOXlJR2x6SUhOMVptWnBZMmxsYm5Sc2VTQnphVzF3YkdVc0lIUnllU0IxYzJsdVp5QmhJRndpWjJWMEtrSjVLbHdpSUVSUFRTQnRaWFJvYjJSY2JseDBYSFJjZEM4dklDaGxlR05sY0hScGJtY2dSRzlqZFcxbGJuUkdjbUZuYldWdWRDQmpiMjUwWlhoMExDQjNhR1Z5WlNCMGFHVWdiV1YwYUc5a2N5QmtiMjRuZENCbGVHbHpkQ2xjYmx4MFhIUmNkR2xtSUNnZ2JtOWtaVlI1Y0dVZ0lUMDlJREV4SUNZbUlDaHRZWFJqYUNBOUlISnhkV2xqYTBWNGNISXVaWGhsWXlnZ2MyVnNaV04wYjNJZ0tTa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTVVFnYzJWc1pXTjBiM0pjYmx4MFhIUmNkRngwYVdZZ0tDQW9iU0E5SUcxaGRHTm9XekZkS1NBcElIdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFUnZZM1Z0Wlc1MElHTnZiblJsZUhSY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUc1dlpHVlVlWEJsSUQwOVBTQTVJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NBb1pXeGxiU0E5SUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9JRzBnS1NrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nU1VVc0lFOXdaWEpoTENCWFpXSnJhWFJjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVkU5RVR6b2dhV1JsYm5ScFpua2dkbVZ5YzJsdmJuTmNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdaMlYwUld4bGJXVnVkRUo1U1dRZ1kyRnVJRzFoZEdOb0lHVnNaVzFsYm5SeklHSjVJRzVoYldVZ2FXNXpkR1ZoWkNCdlppQkpSRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdWc1pXMHVhV1FnUFQwOUlHMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwY21WemRXeDBjeTV3ZFhOb0tDQmxiR1Z0SUNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhKbGMzVnNkSE03WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1JXeGxiV1Z1ZENCamIyNTBaWGgwWEc1Y2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVXNJRTl3WlhKaExDQlhaV0pyYVhSY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZSUFJFODZJR2xrWlc1MGFXWjVJSFpsY25OcGIyNXpYRzVjZEZ4MFhIUmNkRngwWEhRdkx5Qm5aWFJGYkdWdFpXNTBRbmxKWkNCallXNGdiV0YwWTJnZ1pXeGxiV1Z1ZEhNZ1lua2dibUZ0WlNCcGJuTjBaV0ZrSUc5bUlFbEVYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9JRzVsZDBOdmJuUmxlSFFnSmlZZ0tHVnNaVzBnUFNCdVpYZERiMjUwWlhoMExtZGxkRVZzWlcxbGJuUkNlVWxrS0NCdElDa3BJQ1ltWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5SaGFXNXpLQ0JqYjI1MFpYaDBMQ0JsYkdWdElDa2dKaVpjYmx4MFhIUmNkRngwWEhSY2RGeDBaV3hsYlM1cFpDQTlQVDBnYlNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhSekxuQjFjMmdvSUdWc1pXMGdLVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUZSNWNHVWdjMlZzWldOMGIzSmNibHgwWEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnYldGMFkyaGJNbDBnS1NCN1hHNWNkRngwWEhSY2RGeDBjSFZ6YUM1aGNIQnNlU2dnY21WemRXeDBjeXdnWTI5dWRHVjRkQzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNnZ2MyVnNaV04wYjNJZ0tTQXBPMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1WEc1Y2RGeDBYSFJjZEM4dklFTnNZWE56SUhObGJHVmpkRzl5WEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lDaHRJRDBnYldGMFkyaGJNMTBwSUNZbUlITjFjSEJ2Y25RdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU0FtSmx4dVhIUmNkRngwWEhSY2RHTnZiblJsZUhRdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkSEIxYzJndVlYQndiSGtvSUhKbGMzVnNkSE1zSUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEhOQ2VVTnNZWE56VG1GdFpTZ2diU0FwSUNrN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVkdGclpTQmhaSFpoYm5SaFoyVWdiMllnY1hWbGNubFRaV3hsWTNSdmNrRnNiRnh1WEhSY2RGeDBhV1lnS0NCemRYQndiM0owTG5GellTQW1KbHh1WEhSY2RGeDBYSFFoWTI5dGNHbHNaWEpEWVdOb1pWc2djMlZzWldOMGIzSWdLeUJjSWlCY0lpQmRJQ1ltWEc1Y2RGeDBYSFJjZENnaGNtSjFaMmQ1VVZOQklIeDhJQ0Z5WW5WblozbFJVMEV1ZEdWemRDZ2djMlZzWldOMGIzSWdLU2tnS1NCN1hHNWNibHgwWEhSY2RGeDBhV1lnS0NCdWIyUmxWSGx3WlNBaFBUMGdNU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnVaWGREYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmx4MFhIUmNkRngwWEhSdVpYZFRaV3hsWTNSdmNpQTlJSE5sYkdWamRHOXlPMXh1WEc1Y2RGeDBYSFJjZEM4dklIRlRRU0JzYjI5cmN5QnZkWFJ6YVdSbElFVnNaVzFsYm5RZ1kyOXVkR1Y0ZEN3Z2QyaHBZMmdnYVhNZ2JtOTBJSGRvWVhRZ2QyVWdkMkZ1ZEZ4dVhIUmNkRngwWEhRdkx5QlVhR0Z1YTNNZ2RHOGdRVzVrY21WM0lFUjFjRzl1ZENCbWIzSWdkR2hwY3lCM2IzSnJZWEp2ZFc1a0lIUmxZMmh1YVhGMVpWeHVYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUaGNibHgwWEhSY2RGeDBMeThnUlhoamJIVmtaU0J2WW1wbFkzUWdaV3hsYldWdWRITmNibHgwWEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnWTI5dWRHVjRkQzV1YjJSbFRtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElDRTlQU0JjSW05aWFtVmpkRndpSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1EyRndkSFZ5WlNCMGFHVWdZMjl1ZEdWNGRDQkpSQ3dnYzJWMGRHbHVaeUJwZENCbWFYSnpkQ0JwWmlCdVpXTmxjM05oY25sY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUNodWFXUWdQU0JqYjI1MFpYaDBMbWRsZEVGMGRISnBZblYwWlNnZ1hDSnBaRndpSUNrcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGJtbGtJRDBnYm1sa0xuSmxjR3hoWTJVb0lISmpjM05sYzJOaGNHVXNJR1pqYzNObGMyTmhjR1VnS1R0Y2JseDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWTI5dWRHVjRkQzV6WlhSQmRIUnlhV0oxZEdVb0lGd2lhV1JjSWl3Z0tHNXBaQ0E5SUdWNGNHRnVaRzhwSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdVSEpsWm1sNElHVjJaWEo1SUhObGJHVmpkRzl5SUdsdUlIUm9aU0JzYVhOMFhHNWNkRngwWEhSY2RGeDBaM0p2ZFhCeklEMGdkRzlyWlc1cGVtVW9JSE5sYkdWamRHOXlJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGFTQTlJR2R5YjNWd2N5NXNaVzVuZEdnN1hHNWNkRngwWEhSY2RGeDBkMmhwYkdVZ0tDQnBMUzBnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJuY205MWNITmJhVjBnUFNCY0lpTmNJaUFySUc1cFpDQXJJRndpSUZ3aUlDc2dkRzlUWld4bFkzUnZjaWdnWjNKdmRYQnpXMmxkSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEc1bGQxTmxiR1ZqZEc5eUlEMGdaM0p2ZFhCekxtcHZhVzRvSUZ3aUxGd2lJQ2s3WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJGZUhCaGJtUWdZMjl1ZEdWNGRDQm1iM0lnYzJsaWJHbHVaeUJ6Wld4bFkzUnZjbk5jYmx4MFhIUmNkRngwWEhSdVpYZERiMjUwWlhoMElEMGdjbk5wWW14cGJtY3VkR1Z6ZENnZ2MyVnNaV04wYjNJZ0tTQW1KaUIwWlhOMFEyOXVkR1Y0ZENnZ1kyOXVkR1Y0ZEM1d1lYSmxiblJPYjJSbElDa2dmSHhjYmx4MFhIUmNkRngwWEhSY2RHTnZiblJsZUhRN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJwWmlBb0lHNWxkMU5sYkdWamRHOXlJQ2tnZTF4dVhIUmNkRngwWEhSY2RIUnllU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUndkWE5vTG1Gd2NHeDVLQ0J5WlhOMWJIUnpMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUnVaWGREYjI1MFpYaDBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29JRzVsZDFObGJHVmpkRzl5SUNsY2JseDBYSFJjZEZ4MFhIUmNkQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2NtVnpkV3gwY3p0Y2JseDBYSFJjZEZ4MFhIUjlJR05oZEdOb0lDZ2djWE5oUlhKeWIzSWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGZTQm1hVzVoYkd4NUlIdGNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dibWxrSUQwOVBTQmxlSEJoYm1SdklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmpiMjUwWlhoMExuSmxiVzkyWlVGMGRISnBZblYwWlNnZ1hDSnBaRndpSUNrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBMeThnUVd4c0lHOTBhR1Z5YzF4dVhIUnlaWFIxY200Z2MyVnNaV04wS0NCelpXeGxZM1J2Y2k1eVpYQnNZV05sS0NCeWRISnBiU3dnWENJa01Wd2lJQ2tzSUdOdmJuUmxlSFFzSUhKbGMzVnNkSE1zSUhObFpXUWdLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdVZ2EyVjVMWFpoYkhWbElHTmhZMmhsY3lCdlppQnNhVzFwZEdWa0lITnBlbVZjYmlBcUlFQnlaWFIxY201eklIdG1kVzVqZEdsdmJpaHpkSEpwYm1jc0lHOWlhbVZqZENsOUlGSmxkSFZ5Ym5NZ2RHaGxJRTlpYW1WamRDQmtZWFJoSUdGbWRHVnlJSE4wYjNKcGJtY2dhWFFnYjI0Z2FYUnpaV3htSUhkcGRHaGNiaUFxWEhSd2NtOXdaWEowZVNCdVlXMWxJSFJvWlNBb2MzQmhZMlV0YzNWbVptbDRaV1FwSUhOMGNtbHVaeUJoYm1RZ0tHbG1JSFJvWlNCallXTm9aU0JwY3lCc1lYSm5aWElnZEdoaGJpQkZlSEJ5TG1OaFkyaGxUR1Z1WjNSb0tWeHVJQ3BjZEdSbGJHVjBhVzVuSUhSb1pTQnZiR1JsYzNRZ1pXNTBjbmxjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFEyRmphR1VvS1NCN1hHNWNkSFpoY2lCclpYbHpJRDBnVzEwN1hHNWNibHgwWm5WdVkzUnBiMjRnWTJGamFHVW9JR3RsZVN3Z2RtRnNkV1VnS1NCN1hHNWNkRngwTHk4Z1ZYTmxJQ2hyWlhrZ0t5QmNJaUJjSWlrZ2RHOGdZWFp2YVdRZ1kyOXNiR2x6YVc5dUlIZHBkR2dnYm1GMGFYWmxJSEJ5YjNSdmRIbHdaU0J3Y205d1pYSjBhV1Z6SUNoelpXVWdTWE56ZFdVZ0l6RTFOeWxjYmx4MFhIUnBaaUFvSUd0bGVYTXVjSFZ6YUNnZ2EyVjVJQ3NnWENJZ1hDSWdLU0ErSUVWNGNISXVZMkZqYUdWTVpXNW5kR2dnS1NCN1hHNWNkRngwWEhRdkx5QlBibXg1SUd0bFpYQWdkR2hsSUcxdmMzUWdjbVZqWlc1MElHVnVkSEpwWlhOY2JseDBYSFJjZEdSbGJHVjBaU0JqWVdOb1pWc2dhMlY1Y3k1emFHbG1kQ2dwSUYwN1hHNWNkRngwZlZ4dVhIUmNkSEpsZEhWeWJpQW9ZMkZqYUdWYklHdGxlU0FySUZ3aUlGd2lJRjBnUFNCMllXeDFaU2s3WEc1Y2RIMWNibHgwY21WMGRYSnVJR05oWTJobE8xeHVmVnh1WEc0dktpcGNiaUFxSUUxaGNtc2dZU0JtZFc1amRHbHZiaUJtYjNJZ2MzQmxZMmxoYkNCMWMyVWdZbmtnVTJsNmVteGxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJpQlVhR1VnWm5WdVkzUnBiMjRnZEc4Z2JXRnlhMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnRZWEpyUm5WdVkzUnBiMjRvSUdadUlDa2dlMXh1WEhSbWJsc2daWGh3WVc1a2J5QmRJRDBnZEhKMVpUdGNibHgwY21WMGRYSnVJR1p1TzF4dWZWeHVYRzR2S2lwY2JpQXFJRk4xY0hCdmNuUWdkR1Z6ZEdsdVp5QjFjMmx1WnlCaGJpQmxiR1Z0Wlc1MFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmlCUVlYTnpaV1FnZEdobElHTnlaV0YwWldRZ1pXeGxiV1Z1ZENCaGJtUWdjbVYwZFhKdWN5QmhJR0p2YjJ4bFlXNGdjbVZ6ZFd4MFhHNGdLaTljYm1aMWJtTjBhVzl1SUdGemMyVnlkQ2dnWm00Z0tTQjdYRzVjZEhaaGNpQmxiQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0ptYVdWc1pITmxkRndpS1R0Y2JseHVYSFIwY25rZ2UxeHVYSFJjZEhKbGRIVnliaUFoSVdadUtDQmxiQ0FwTzF4dVhIUjlJR05oZEdOb0lDaGxLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUjlJR1pwYm1Gc2JIa2dlMXh1WEhSY2RDOHZJRkpsYlc5MlpTQm1jbTl0SUdsMGN5QndZWEpsYm5RZ1lua2daR1ZtWVhWc2RGeHVYSFJjZEdsbUlDZ2daV3d1Y0dGeVpXNTBUbTlrWlNBcElIdGNibHgwWEhSY2RHVnNMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb0lHVnNJQ2s3WEc1Y2RGeDBmVnh1WEhSY2RDOHZJSEpsYkdWaGMyVWdiV1Z0YjNKNUlHbHVJRWxGWEc1Y2RGeDBaV3dnUFNCdWRXeHNPMXh1WEhSOVhHNTlYRzVjYmk4cUtseHVJQ29nUVdSa2N5QjBhR1VnYzJGdFpTQm9ZVzVrYkdWeUlHWnZjaUJoYkd3Z2IyWWdkR2hsSUhOd1pXTnBabWxsWkNCaGRIUnljMXh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdGMGRISnpJRkJwY0dVdGMyVndZWEpoZEdWa0lHeHBjM1FnYjJZZ1lYUjBjbWxpZFhSbGMxeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYUdGdVpHeGxjaUJVYUdVZ2JXVjBhRzlrSUhSb1lYUWdkMmxzYkNCaVpTQmhjSEJzYVdWa1hHNGdLaTljYm1aMWJtTjBhVzl1SUdGa1pFaGhibVJzWlNnZ1lYUjBjbk1zSUdoaGJtUnNaWElnS1NCN1hHNWNkSFpoY2lCaGNuSWdQU0JoZEhSeWN5NXpjR3hwZENoY0lueGNJaWtzWEc1Y2RGeDBhU0E5SUdGeWNpNXNaVzVuZEdnN1hHNWNibHgwZDJocGJHVWdLQ0JwTFMwZ0tTQjdYRzVjZEZ4MFJYaHdjaTVoZEhSeVNHRnVaR3hsV3lCaGNuSmJhVjBnWFNBOUlHaGhibVJzWlhJN1hHNWNkSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ1pHOWpkVzFsYm5RZ2IzSmtaWElnYjJZZ2RIZHZJSE5wWW14cGJtZHpYRzRnS2lCQWNHRnlZVzBnZTBWc1pXMWxiblI5SUdGY2JpQXFJRUJ3WVhKaGJTQjdSV3hsYldWdWRIMGdZbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwNTFiV0psY24wZ1VtVjBkWEp1Y3lCc1pYTnpJSFJvWVc0Z01DQnBaaUJoSUhCeVpXTmxaR1Z6SUdJc0lHZHlaV0YwWlhJZ2RHaGhiaUF3SUdsbUlHRWdabTlzYkc5M2N5QmlYRzRnS2k5Y2JtWjFibU4wYVc5dUlITnBZbXhwYm1kRGFHVmpheWdnWVN3Z1lpQXBJSHRjYmx4MGRtRnlJR04xY2lBOUlHSWdKaVlnWVN4Y2JseDBYSFJrYVdabUlEMGdZM1Z5SUNZbUlHRXVibTlrWlZSNWNHVWdQVDA5SURFZ0ppWWdZaTV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KbHh1WEhSY2RGeDBZUzV6YjNWeVkyVkpibVJsZUNBdElHSXVjMjkxY21ObFNXNWtaWGc3WEc1Y2JseDBMeThnVlhObElFbEZJSE52ZFhKalpVbHVaR1Y0SUdsbUlHRjJZV2xzWVdKc1pTQnZiaUJpYjNSb0lHNXZaR1Z6WEc1Y2RHbG1JQ2dnWkdsbVppQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pHbG1aanRjYmx4MGZWeHVYRzVjZEM4dklFTm9aV05ySUdsbUlHSWdabTlzYkc5M2N5QmhYRzVjZEdsbUlDZ2dZM1Z5SUNrZ2UxeHVYSFJjZEhkb2FXeGxJQ2dnS0dOMWNpQTlJR04xY2k1dVpYaDBVMmxpYkdsdVp5a2dLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHTjFjaUE5UFQwZ1lpQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJQzB4TzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJoSUQ4Z01TQTZJQzB4TzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdZU0JtZFc1amRHbHZiaUIwYnlCMWMyVWdhVzRnY0hObGRXUnZjeUJtYjNJZ2FXNXdkWFFnZEhsd1pYTmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IwZVhCbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVWx1Y0hWMFVITmxkV1J2S0NCMGVYQmxJQ2tnZTF4dVhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwZG1GeUlHNWhiV1VnUFNCbGJHVnRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNkRngwY21WMGRYSnVJRzVoYldVZ1BUMDlJRndpYVc1d2RYUmNJaUFtSmlCbGJHVnRMblI1Y0dVZ1BUMDlJSFI1Y0dVN1hHNWNkSDA3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVYwZFhKdWN5QmhJR1oxYm1OMGFXOXVJSFJ2SUhWelpTQnBiaUJ3YzJWMVpHOXpJR1p2Y2lCaWRYUjBiMjV6WEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RIbHdaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWQ2RYUjBiMjVRYzJWMVpHOG9JSFI1Y0dVZ0tTQjdYRzVjZEhKbGRIVnliaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUjJZWElnYm1GdFpTQTlJR1ZzWlcwdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4MFhIUnlaWFIxY200Z0tHNWhiV1VnUFQwOUlGd2lhVzV3ZFhSY0lpQjhmQ0J1WVcxbElEMDlQU0JjSW1KMWRIUnZibHdpS1NBbUppQmxiR1Z0TG5SNWNHVWdQVDA5SUhSNWNHVTdYRzVjZEgwN1hHNTlYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUJoSUdaMWJtTjBhVzl1SUhSdklIVnpaU0JwYmlCd2MyVjFaRzl6SUdadmNpQTZaVzVoWW14bFpDODZaR2x6WVdKc1pXUmNiaUFxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnWkdsellXSnNaV1FnZEhKMVpTQm1iM0lnT21ScGMyRmliR1ZrT3lCbVlXeHpaU0JtYjNJZ09tVnVZV0pzWldSY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxSR2x6WVdKc1pXUlFjMlYxWkc4b0lHUnBjMkZpYkdWa0lDa2dlMXh1WEc1Y2RDOHZJRXR1YjNkdUlEcGthWE5oWW14bFpDQm1ZV3h6WlNCd2IzTnBkR2wyWlhNNklHWnBaV3hrYzJWMFcyUnBjMkZpYkdWa1hTQStJR3hsWjJWdVpEcHVkR2d0YjJZdGRIbHdaU2h1S3pJcElEcGpZVzR0WkdsellXSnNaVnh1WEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2JseDBYSFF2THlCUGJteDVJR05sY25SaGFXNGdaV3hsYldWdWRITWdZMkZ1SUcxaGRHTm9JRHBsYm1GaWJHVmtJRzl5SURwa2FYTmhZbXhsWkZ4dVhIUmNkQzh2SUdoMGRIQnpPaTh2YUhSdGJDNXpjR1ZqTG5kb1lYUjNaeTV2Y21jdmJYVnNkR2x3WVdkbEwzTmpjbWx3ZEdsdVp5NW9kRzFzSTNObGJHVmpkRzl5TFdWdVlXSnNaV1JjYmx4MFhIUXZMeUJvZEhSd2N6b3ZMMmgwYld3dWMzQmxZeTUzYUdGMGQyY3ViM0puTDIxMWJIUnBjR0ZuWlM5elkzSnBjSFJwYm1jdWFIUnRiQ056Wld4bFkzUnZjaTFrYVhOaFlteGxaRnh1WEhSY2RHbG1JQ2dnWENKbWIzSnRYQ0lnYVc0Z1pXeGxiU0FwSUh0Y2JseHVYSFJjZEZ4MEx5OGdRMmhsWTJzZ1ptOXlJR2x1YUdWeWFYUmxaQ0JrYVhOaFlteGxaRzVsYzNNZ2IyNGdjbVZzWlhaaGJuUWdibTl1TFdScGMyRmliR1ZrSUdWc1pXMWxiblJ6T2x4dVhIUmNkRngwTHk4Z0tpQnNhWE4wWldRZ1ptOXliUzFoYzNOdlkybGhkR1ZrSUdWc1pXMWxiblJ6SUdsdUlHRWdaR2x6WVdKc1pXUWdabWxsYkdSelpYUmNibHgwWEhSY2RDOHZJQ0FnYUhSMGNITTZMeTlvZEcxc0xuTndaV011ZDJoaGRIZG5MbTl5Wnk5dGRXeDBhWEJoWjJVdlptOXliWE11YUhSdGJDTmpZWFJsWjI5eWVTMXNhWE4wWldSY2JseDBYSFJjZEM4dklDQWdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeTl0ZFd4MGFYQmhaMlV2Wm05eWJYTXVhSFJ0YkNOamIyNWpaWEIwTFdabExXUnBjMkZpYkdWa1hHNWNkRngwWEhRdkx5QXFJRzl3ZEdsdmJpQmxiR1Z0Wlc1MGN5QnBiaUJoSUdScGMyRmliR1ZrSUc5d2RHZHliM1Z3WEc1Y2RGeDBYSFF2THlBZ0lHaDBkSEJ6T2k4dmFIUnRiQzV6Y0dWakxuZG9ZWFIzWnk1dmNtY3ZiWFZzZEdsd1lXZGxMMlp2Y20xekxtaDBiV3dqWTI5dVkyVndkQzF2Y0hScGIyNHRaR2x6WVdKc1pXUmNibHgwWEhSY2RDOHZJRUZzYkNCemRXTm9JR1ZzWlcxbGJuUnpJR2hoZG1VZ1lTQmNJbVp2Y20xY0lpQndjbTl3WlhKMGVTNWNibHgwWEhSY2RHbG1JQ2dnWld4bGJTNXdZWEpsYm5ST2IyUmxJQ1ltSUdWc1pXMHVaR2x6WVdKc1pXUWdQVDA5SUdaaGJITmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRTl3ZEdsdmJpQmxiR1Z0Wlc1MGN5QmtaV1psY2lCMGJ5QmhJSEJoY21WdWRDQnZjSFJuY205MWNDQnBaaUJ3Y21WelpXNTBYRzVjZEZ4MFhIUmNkR2xtSUNnZ1hDSnNZV0psYkZ3aUlHbHVJR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmNJbXhoWW1Wc1hDSWdhVzRnWld4bGJTNXdZWEpsYm5ST2IyUmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlHVnNaVzB1Y0dGeVpXNTBUbTlrWlM1a2FYTmhZbXhsWkNBOVBUMGdaR2x6WVdKc1pXUTdYRzVjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbGJHVnRMbVJwYzJGaWJHVmtJRDA5UFNCa2FYTmhZbXhsWkR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0EySUMwZ01URmNibHgwWEhSY2RGeDBMeThnVlhObElIUm9aU0JwYzBScGMyRmliR1ZrSUhOb2IzSjBZM1YwSUhCeWIzQmxjblI1SUhSdklHTm9aV05ySUdadmNpQmthWE5oWW14bFpDQm1hV1ZzWkhObGRDQmhibU5sYzNSdmNuTmNibHgwWEhSY2RGeDBjbVYwZFhKdUlHVnNaVzB1YVhORWFYTmhZbXhsWkNBOVBUMGdaR2x6WVdKc1pXUWdmSHhjYmx4dVhIUmNkRngwWEhSY2RDOHZJRmRvWlhKbElIUm9aWEpsSUdseklHNXZJR2x6UkdsellXSnNaV1FzSUdOb1pXTnJJRzFoYm5WaGJHeDVYRzVjZEZ4MFhIUmNkRngwTHlvZ2FuTm9hVzUwSUMxWE1ERTRJQ292WEc1Y2RGeDBYSFJjZEZ4MFpXeGxiUzVwYzBScGMyRmliR1ZrSUNFOVBTQWhaR2x6WVdKc1pXUWdKaVpjYmx4MFhIUmNkRngwWEhSY2RHUnBjMkZpYkdWa1FXNWpaWE4wYjNJb0lHVnNaVzBnS1NBOVBUMGdaR2x6WVdKc1pXUTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TG1ScGMyRmliR1ZrSUQwOVBTQmthWE5oWW14bFpEdGNibHh1WEhSY2RDOHZJRlJ5ZVNCMGJ5QjNhVzV1YjNjZ2IzVjBJR1ZzWlcxbGJuUnpJSFJvWVhRZ1kyRnVKM1FnWW1VZ1pHbHpZV0pzWldRZ1ltVm1iM0psSUhSeWRYTjBhVzVuSUhSb1pTQmthWE5oWW14bFpDQndjbTl3WlhKMGVTNWNibHgwWEhRdkx5QlRiMjFsSUhacFkzUnBiWE1nWjJWMElHTmhkV2RvZENCcGJpQnZkWElnYm1WMElDaHNZV0psYkN3Z2JHVm5aVzVrTENCdFpXNTFMQ0IwY21GamF5a3NJR0oxZENCcGRDQnphRzkxYkdSdUozUmNibHgwWEhRdkx5QmxkbVZ1SUdWNGFYTjBJRzl1SUhSb1pXMHNJR3hsZENCaGJHOXVaU0JvWVhabElHRWdZbTl2YkdWaGJpQjJZV3gxWlM1Y2JseDBYSFI5SUdWc2MyVWdhV1lnS0NCY0lteGhZbVZzWENJZ2FXNGdaV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRMbVJwYzJGaWJHVmtJRDA5UFNCa2FYTmhZbXhsWkR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCU1pXMWhhVzVwYm1jZ1pXeGxiV1Z1ZEhNZ1lYSmxJRzVsYVhSb1pYSWdPbVZ1WVdKc1pXUWdibTl5SURwa2FYTmhZbXhsWkZ4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlNaWFIxY201eklHRWdablZ1WTNScGIyNGdkRzhnZFhObElHbHVJSEJ6WlhWa2IzTWdabTl5SUhCdmMybDBhVzl1WVd4elhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmx4dUlDb3ZYRzVtZFc1amRHbHZiaUJqY21WaGRHVlFiM05wZEdsdmJtRnNVSE5sZFdSdktDQm1iaUFwSUh0Y2JseDBjbVYwZFhKdUlHMWhjbXRHZFc1amRHbHZiaWhtZFc1amRHbHZiaWdnWVhKbmRXMWxiblFnS1NCN1hHNWNkRngwWVhKbmRXMWxiblFnUFNBcllYSm5kVzFsYm5RN1hHNWNkRngwY21WMGRYSnVJRzFoY210R2RXNWpkR2x2YmlobWRXNWpkR2x2YmlnZ2MyVmxaQ3dnYldGMFkyaGxjeUFwSUh0Y2JseDBYSFJjZEhaaGNpQnFMRnh1WEhSY2RGeDBYSFJ0WVhSamFFbHVaR1Y0WlhNZ1BTQm1iaWdnVzEwc0lITmxaV1F1YkdWdVozUm9MQ0JoY21kMWJXVnVkQ0FwTEZ4dVhIUmNkRngwWEhScElEMGdiV0YwWTJoSmJtUmxlR1Z6TG14bGJtZDBhRHRjYmx4dVhIUmNkRngwTHk4Z1RXRjBZMmdnWld4bGJXVnVkSE1nWm05MWJtUWdZWFFnZEdobElITndaV05wWm1sbFpDQnBibVJsZUdWelhHNWNkRngwWEhSM2FHbHNaU0FvSUdrdExTQXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQnpaV1ZrV3lBb2FpQTlJRzFoZEdOb1NXNWtaWGhsYzF0cFhTa2dYU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnpaV1ZrVzJwZElEMGdJU2h0WVhSamFHVnpXMnBkSUQwZ2MyVmxaRnRxWFNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHgwZlNrN1hHNTlYRzVjYmk4cUtseHVJQ29nUTJobFkydHpJR0VnYm05a1pTQm1iM0lnZG1Gc2FXUnBkSGtnWVhNZ1lTQlRhWHA2YkdVZ1kyOXVkR1Y0ZEZ4dUlDb2dRSEJoY21GdElIdEZiR1Z0Wlc1MGZFOWlhbVZqZEQxOUlHTnZiblJsZUhSY2JpQXFJRUJ5WlhSMWNtNXpJSHRGYkdWdFpXNTBmRTlpYW1WamRIeENiMjlzWldGdWZTQlVhR1VnYVc1d2RYUWdibTlrWlNCcFppQmhZMk5sY0hSaFlteGxMQ0J2ZEdobGNuZHBjMlVnWVNCbVlXeHplU0IyWVd4MVpWeHVJQ292WEc1bWRXNWpkR2x2YmlCMFpYTjBRMjl1ZEdWNGRDZ2dZMjl1ZEdWNGRDQXBJSHRjYmx4MGNtVjBkWEp1SUdOdmJuUmxlSFFnSmlZZ2RIbHdaVzltSUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdZMjl1ZEdWNGREdGNibjFjYmx4dUx5OGdSWGh3YjNObElITjFjSEJ2Y25RZ2RtRnljeUJtYjNJZ1kyOXVkbVZ1YVdWdVkyVmNibk4xY0hCdmNuUWdQU0JUYVhwNmJHVXVjM1Z3Y0c5eWRDQTlJSHQ5TzF4dVhHNHZLaXBjYmlBcUlFUmxkR1ZqZEhNZ1dFMU1JRzV2WkdWelhHNGdLaUJBY0dGeVlXMGdlMFZzWlcxbGJuUjhUMkpxWldOMGZTQmxiR1Z0SUVGdUlHVnNaVzFsYm5RZ2IzSWdZU0JrYjJOMWJXVnVkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OUlGUnlkV1VnYVdabUlHVnNaVzBnYVhNZ1lTQnViMjR0U0ZSTlRDQllUVXdnYm05a1pWeHVJQ292WEc1cGMxaE5UQ0E5SUZOcGVucHNaUzVwYzFoTlRDQTlJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhRdkx5QmtiMk4xYldWdWRFVnNaVzFsYm5RZ2FYTWdkbVZ5YVdacFpXUWdabTl5SUdOaGMyVnpJSGRvWlhKbElHbDBJR1J2WlhOdUozUWdlV1YwSUdWNGFYTjBYRzVjZEM4dklDaHpkV05vSUdGeklHeHZZV1JwYm1jZ2FXWnlZVzFsY3lCcGJpQkpSU0F0SUNNME9ETXpLVnh1WEhSMllYSWdaRzlqZFcxbGJuUkZiR1Z0Wlc1MElEMGdaV3hsYlNBbUppQW9aV3hsYlM1dmQyNWxja1J2WTNWdFpXNTBJSHg4SUdWc1pXMHBMbVJ2WTNWdFpXNTBSV3hsYldWdWREdGNibHgwY21WMGRYSnVJR1J2WTNWdFpXNTBSV3hsYldWdWRDQS9JR1J2WTNWdFpXNTBSV3hsYldWdWRDNXViMlJsVG1GdFpTQWhQVDBnWENKSVZFMU1YQ0lnT2lCbVlXeHpaVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dVMlYwY3lCa2IyTjFiV1Z1ZEMxeVpXeGhkR1ZrSUhaaGNtbGhZbXhsY3lCdmJtTmxJR0poYzJWa0lHOXVJSFJvWlNCamRYSnlaVzUwSUdSdlkzVnRaVzUwWEc0Z0tpQkFjR0Z5WVcwZ2UwVnNaVzFsYm5SOFQySnFaV04wZlNCYlpHOWpYU0JCYmlCbGJHVnRaVzUwSUc5eUlHUnZZM1Z0Wlc1MElHOWlhbVZqZENCMGJ5QjFjMlVnZEc4Z2MyVjBJSFJvWlNCa2IyTjFiV1Z1ZEZ4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdVbVYwZFhKdWN5QjBhR1VnWTNWeWNtVnVkQ0JrYjJOMWJXVnVkRnh1SUNvdlhHNXpaWFJFYjJOMWJXVnVkQ0E5SUZOcGVucHNaUzV6WlhSRWIyTjFiV1Z1ZENBOUlHWjFibU4wYVc5dUtDQnViMlJsSUNrZ2UxeHVYSFIyWVhJZ2FHRnpRMjl0Y0dGeVpTd2djM1ZpVjJsdVpHOTNMRnh1WEhSY2RHUnZZeUE5SUc1dlpHVWdQeUJ1YjJSbExtOTNibVZ5Ukc5amRXMWxiblFnZkh3Z2JtOWtaU0E2SUhCeVpXWmxjbkpsWkVSdll6dGNibHh1WEhRdkx5QlNaWFIxY200Z1pXRnliSGtnYVdZZ1pHOWpJR2x6SUdsdWRtRnNhV1FnYjNJZ1lXeHlaV0ZrZVNCelpXeGxZM1JsWkZ4dVhIUnBaaUFvSUdSdll5QTlQVDBnWkc5amRXMWxiblFnZkh3Z1pHOWpMbTV2WkdWVWVYQmxJQ0U5UFNBNUlIeDhJQ0ZrYjJNdVpHOWpkVzFsYm5SRmJHVnRaVzUwSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYjJOMWJXVnVkRHRjYmx4MGZWeHVYRzVjZEM4dklGVndaR0YwWlNCbmJHOWlZV3dnZG1GeWFXRmliR1Z6WEc1Y2RHUnZZM1Z0Wlc1MElEMGdaRzlqTzF4dVhIUmtiMk5GYkdWdElEMGdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVYSFJrYjJOMWJXVnVkRWx6U0ZSTlRDQTlJQ0ZwYzFoTlRDZ2daRzlqZFcxbGJuUWdLVHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBNUxURXhMQ0JGWkdkbFhHNWNkQzh2SUVGalkyVnpjMmx1WnlCcFpuSmhiV1VnWkc5amRXMWxiblJ6SUdGbWRHVnlJSFZ1Ykc5aFpDQjBhSEp2ZDNNZ1hDSndaWEp0YVhOemFXOXVJR1JsYm1sbFpGd2lJR1Z5Y205eWN5QW9hbEYxWlhKNUlDTXhNemt6TmlsY2JseDBhV1lnS0NCd2NtVm1aWEp5WldSRWIyTWdJVDA5SUdSdlkzVnRaVzUwSUNZbVhHNWNkRngwS0hOMVlsZHBibVJ2ZHlBOUlHUnZZM1Z0Wlc1MExtUmxabUYxYkhSV2FXVjNLU0FtSmlCemRXSlhhVzVrYjNjdWRHOXdJQ0U5UFNCemRXSlhhVzVrYjNjZ0tTQjdYRzVjYmx4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBeE1Td2dSV1JuWlZ4dVhIUmNkR2xtSUNnZ2MzVmlWMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ0tTQjdYRzVjZEZ4MFhIUnpkV0pYYVc1a2IzY3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2dYQ0oxYm14dllXUmNJaXdnZFc1c2IyRmtTR0Z1Wkd4bGNpd2dabUZzYzJVZ0tUdGNibHh1WEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGSURrZ0xTQXhNQ0J2Ym14NVhHNWNkRngwZlNCbGJITmxJR2xtSUNnZ2MzVmlWMmx1Wkc5M0xtRjBkR0ZqYUVWMlpXNTBJQ2tnZTF4dVhIUmNkRngwYzNWaVYybHVaRzkzTG1GMGRHRmphRVYyWlc1MEtDQmNJbTl1ZFc1c2IyRmtYQ0lzSUhWdWJHOWhaRWhoYm1Sc1pYSWdLVHRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2S2lCQmRIUnlhV0oxZEdWelhHNWNkQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdLaTljYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlR3NFhHNWNkQzh2SUZabGNtbG1lU0IwYUdGMElHZGxkRUYwZEhKcFluVjBaU0J5WldGc2JIa2djbVYwZFhKdWN5QmhkSFJ5YVdKMWRHVnpJR0Z1WkNCdWIzUWdjSEp2Y0dWeWRHbGxjMXh1WEhRdkx5QW9aWGhqWlhCMGFXNW5JRWxGT0NCaWIyOXNaV0Z1Y3lsY2JseDBjM1Z3Y0c5eWRDNWhkSFJ5YVdKMWRHVnpJRDBnWVhOelpYSjBLR1oxYm1OMGFXOXVLQ0JsYkNBcElIdGNibHgwWEhSbGJDNWpiR0Z6YzA1aGJXVWdQU0JjSW1sY0lqdGNibHgwWEhSeVpYUjFjbTRnSVdWc0xtZGxkRUYwZEhKcFluVjBaU2hjSW1Oc1lYTnpUbUZ0WlZ3aUtUdGNibHgwZlNrN1hHNWNibHgwTHlvZ1oyVjBSV3hsYldWdWRDaHpLVUo1S2x4dVhIUXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElDb3ZYRzVjYmx4MEx5OGdRMmhsWTJzZ2FXWWdaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvWENJcVhDSXBJSEpsZEhWeWJuTWdiMjVzZVNCbGJHVnRaVzUwYzF4dVhIUnpkWEJ3YjNKMExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxJRDBnWVhOelpYSjBLR1oxYm1OMGFXOXVLQ0JsYkNBcElIdGNibHgwWEhSbGJDNWhjSEJsYm1SRGFHbHNaQ2dnWkc5amRXMWxiblF1WTNKbFlYUmxRMjl0YldWdWRDaGNJbHdpS1NBcE8xeHVYSFJjZEhKbGRIVnliaUFoWld3dVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9YQ0lxWENJcExteGxibWQwYUR0Y2JseDBmU2s3WEc1Y2JseDBMeThnVTNWd2NHOXlkRG9nU1VVOE9WeHVYSFJ6ZFhCd2IzSjBMbWRsZEVWc1pXMWxiblJ6UW5sRGJHRnpjMDVoYldVZ1BTQnlibUYwYVhabExuUmxjM1FvSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubERiR0Z6YzA1aGJXVWdLVHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlR3eE1GeHVYSFF2THlCRGFHVmpheUJwWmlCblpYUkZiR1Z0Wlc1MFFubEpaQ0J5WlhSMWNtNXpJR1ZzWlcxbGJuUnpJR0o1SUc1aGJXVmNibHgwTHk4Z1ZHaGxJR0p5YjJ0bGJpQm5aWFJGYkdWdFpXNTBRbmxKWkNCdFpYUm9iMlJ6SUdSdmJpZDBJSEJwWTJzZ2RYQWdjSEp2WjNKaGJXMWhkR2xqWVd4c2VTMXpaWFFnYm1GdFpYTXNYRzVjZEM4dklITnZJSFZ6WlNCaElISnZkVzVrWVdKdmRYUWdaMlYwUld4bGJXVnVkSE5DZVU1aGJXVWdkR1Z6ZEZ4dVhIUnpkWEJ3YjNKMExtZGxkRUo1U1dRZ1BTQmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmNkR1J2WTBWc1pXMHVZWEJ3Wlc1a1EyaHBiR1FvSUdWc0lDa3VhV1FnUFNCbGVIQmhibVJ2TzF4dVhIUmNkSEpsZEhWeWJpQWhaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVU1aGJXVWdmSHdnSVdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubE9ZVzFsS0NCbGVIQmhibVJ2SUNrdWJHVnVaM1JvTzF4dVhIUjlLVHRjYmx4dVhIUXZMeUJKUkNCbWFXeDBaWElnWVc1a0lHWnBibVJjYmx4MGFXWWdLQ0J6ZFhCd2IzSjBMbWRsZEVKNVNXUWdLU0I3WEc1Y2RGeDBSWGh3Y2k1bWFXeDBaWEpiWENKSlJGd2lYU0E5SUdaMWJtTjBhVzl1S0NCcFpDQXBJSHRjYmx4MFhIUmNkSFpoY2lCaGRIUnlTV1FnUFNCcFpDNXlaWEJzWVdObEtDQnlkVzVsYzJOaGNHVXNJR1oxYm1WelkyRndaU0FwTzF4dVhIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlM1blpYUkJkSFJ5YVdKMWRHVW9YQ0pwWkZ3aUtTQTlQVDBnWVhSMGNrbGtPMXh1WEhSY2RGeDBmVHRjYmx4MFhIUjlPMXh1WEhSY2RFVjRjSEl1Wm1sdVpGdGNJa2xFWENKZElEMGdablZ1WTNScGIyNG9JR2xrTENCamIyNTBaWGgwSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBRbmxKWkNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQmtiMk4xYldWdWRFbHpTRlJOVENBcElIdGNibHgwWEhSY2RGeDBkbUZ5SUdWc1pXMGdQU0JqYjI1MFpYaDBMbWRsZEVWc1pXMWxiblJDZVVsa0tDQnBaQ0FwTzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnWld4bGJTQS9JRnNnWld4bGJTQmRJRG9nVzEwN1hHNWNkRngwWEhSOVhHNWNkRngwZlR0Y2JseDBmU0JsYkhObElIdGNibHgwWEhSRmVIQnlMbVpwYkhSbGNsdGNJa2xFWENKZElEMGdJR1oxYm1OMGFXOXVLQ0JwWkNBcElIdGNibHgwWEhSY2RIWmhjaUJoZEhSeVNXUWdQU0JwWkM1eVpYQnNZV05sS0NCeWRXNWxjMk5oY0dVc0lHWjFibVZ6WTJGd1pTQXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnYm05a1pTQTlJSFI1Y0dWdlppQmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpVNXZaR1VnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnSmlaY2JseDBYSFJjZEZ4MFhIUmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpVNXZaR1VvWENKcFpGd2lLVHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzV2WkdVZ0ppWWdibTlrWlM1MllXeDFaU0E5UFQwZ1lYUjBja2xrTzF4dVhIUmNkRngwZlR0Y2JseDBYSFI5TzF4dVhHNWNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdOaUF0SURjZ2IyNXNlVnh1WEhSY2RDOHZJR2RsZEVWc1pXMWxiblJDZVVsa0lHbHpJRzV2ZENCeVpXeHBZV0pzWlNCaGN5QmhJR1pwYm1RZ2MyaHZjblJqZFhSY2JseDBYSFJGZUhCeUxtWnBibVJiWENKSlJGd2lYU0E5SUdaMWJtTjBhVzl1S0NCcFpDd2dZMjl1ZEdWNGRDQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2RIbHdaVzltSUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEVKNVNXUWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnWkc5amRXMWxiblJKYzBoVVRVd2dLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnViMlJsTENCcExDQmxiR1Z0Y3l4Y2JseDBYSFJjZEZ4MFhIUmxiR1Z0SUQwZ1kyOXVkR1Y0ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2dnYVdRZ0tUdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lHVnNaVzBnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFF2THlCV1pYSnBabmtnZEdobElHbGtJR0YwZEhKcFluVjBaVnh1WEhSY2RGeDBYSFJjZEc1dlpHVWdQU0JsYkdWdExtZGxkRUYwZEhKcFluVjBaVTV2WkdVb1hDSnBaRndpS1R0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUc1dlpHVWdKaVlnYm05a1pTNTJZV3gxWlNBOVBUMGdhV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdXeUJsYkdWdElGMDdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBMeThnUm1Gc2JDQmlZV05ySUc5dUlHZGxkRVZzWlcxbGJuUnpRbmxPWVcxbFhHNWNkRngwWEhSY2RGeDBaV3hsYlhNZ1BTQmpiMjUwWlhoMExtZGxkRVZzWlcxbGJuUnpRbmxPWVcxbEtDQnBaQ0FwTzF4dVhIUmNkRngwWEhSY2RHa2dQU0F3TzF4dVhIUmNkRngwWEhSY2RIZG9hV3hsSUNnZ0tHVnNaVzBnUFNCbGJHVnRjMXRwS3l0ZEtTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHNXZaR1VnUFNCbGJHVnRMbWRsZEVGMGRISnBZblYwWlU1dlpHVW9YQ0pwWkZ3aUtUdGNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dibTlrWlNBbUppQnViMlJsTG5aaGJIVmxJRDA5UFNCcFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlGc2daV3hsYlNCZE8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJiWFR0Y2JseDBYSFJjZEgxY2JseDBYSFI5TzF4dVhIUjlYRzVjYmx4MEx5OGdWR0ZuWEc1Y2RFVjRjSEl1Wm1sdVpGdGNJbFJCUjF3aVhTQTlJSE4xY0hCdmNuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VnUDF4dVhIUmNkR1oxYm1OMGFXOXVLQ0IwWVdjc0lHTnZiblJsZUhRZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUhSNWNHVnZaaUJqYjI1MFpYaDBMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1kyOXVkR1Y0ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTZ2dkR0ZuSUNrN1hHNWNibHgwWEhSY2RDOHZJRVJ2WTNWdFpXNTBSbkpoWjIxbGJuUWdibTlrWlhNZ1pHOXVKM1FnYUdGMlpTQm5SVUpVVGx4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNnZ2MzVndjRzl5ZEM1eGMyRWdLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJqYjI1MFpYaDBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29JSFJoWnlBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ09seHVYRzVjZEZ4MFpuVnVZM1JwYjI0b0lIUmhaeXdnWTI5dWRHVjRkQ0FwSUh0Y2JseDBYSFJjZEhaaGNpQmxiR1Z0TEZ4dVhIUmNkRngwWEhSMGJYQWdQU0JiWFN4Y2JseDBYSFJjZEZ4MGFTQTlJREFzWEc1Y2RGeDBYSFJjZEM4dklFSjVJR2hoY0hCNUlHTnZhVzVqYVdSbGJtTmxMQ0JoSUNoaWNtOXJaVzRwSUdkRlFsUk9JR0Z3Y0dWaGNuTWdiMjRnUkc5amRXMWxiblJHY21GbmJXVnVkQ0J1YjJSbGN5QjBiMjljYmx4MFhIUmNkRngwY21WemRXeDBjeUE5SUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0lIUmhaeUFwTzF4dVhHNWNkRngwWEhRdkx5QkdhV3gwWlhJZ2IzVjBJSEJ2YzNOcFlteGxJR052YlcxbGJuUnpYRzVjZEZ4MFhIUnBaaUFvSUhSaFp5QTlQVDBnWENJcVhDSWdLU0I3WEc1Y2RGeDBYSFJjZEhkb2FXeGxJQ2dnS0dWc1pXMGdQU0J5WlhOMWJIUnpXMmtySzEwcElDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2daV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFJ0Y0M1d2RYTm9LQ0JsYkdWdElDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUnRjRHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkSEpsZEhWeWJpQnlaWE4xYkhSek8xeHVYSFJjZEgwN1hHNWNibHgwTHk4Z1EyeGhjM05jYmx4MFJYaHdjaTVtYVc1a1cxd2lRMHhCVTFOY0lsMGdQU0J6ZFhCd2IzSjBMbWRsZEVWc1pXMWxiblJ6UW5sRGJHRnpjMDVoYldVZ0ppWWdablZ1WTNScGIyNG9JR05zWVhOelRtRnRaU3dnWTI5dWRHVjRkQ0FwSUh0Y2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCamIyNTBaWGgwTG1kbGRFVnNaVzFsYm5SelFubERiR0Z6YzA1aGJXVWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnWkc5amRXMWxiblJKYzBoVVRVd2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBjMEo1UTJ4aGMzTk9ZVzFsS0NCamJHRnpjMDVoYldVZ0tUdGNibHgwWEhSOVhHNWNkSDA3WEc1Y2JseDBMeW9nVVZOQkwyMWhkR05vWlhOVFpXeGxZM1J2Y2x4dVhIUXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElDb3ZYRzVjYmx4MEx5OGdVVk5CSUdGdVpDQnRZWFJqYUdWelUyVnNaV04wYjNJZ2MzVndjRzl5ZEZ4dVhHNWNkQzh2SUcxaGRHTm9aWE5UWld4bFkzUnZjaWc2WVdOMGFYWmxLU0J5WlhCdmNuUnpJR1poYkhObElIZG9aVzRnZEhKMVpTQW9TVVU1TDA5d1pYSmhJREV4TGpVcFhHNWNkSEppZFdkbmVVMWhkR05vWlhNZ1BTQmJYVHRjYmx4dVhIUXZMeUJ4VTJFb09tWnZZM1Z6S1NCeVpYQnZjblJ6SUdaaGJITmxJSGRvWlc0Z2RISjFaU0FvUTJoeWIyMWxJREl4S1Z4dVhIUXZMeUJYWlNCaGJHeHZkeUIwYUdseklHSmxZMkYxYzJVZ2IyWWdZU0JpZFdjZ2FXNGdTVVU0THprZ2RHaGhkQ0IwYUhKdmQzTWdZVzRnWlhKeWIzSmNibHgwTHk4Z2QyaGxibVYyWlhJZ1lHUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblJnSUdseklHRmpZMlZ6YzJWa0lHOXVJR0Z1SUdsbWNtRnRaVnh1WEhRdkx5QlRieXdnZDJVZ1lXeHNiM2NnT21adlkzVnpJSFJ2SUhCaGMzTWdkR2h5YjNWbmFDQlJVMEVnWVd4c0lIUm9aU0IwYVcxbElIUnZJR0YyYjJsa0lIUm9aU0JKUlNCbGNuSnZjbHh1WEhRdkx5QlRaV1VnYUhSMGNITTZMeTlpZFdkekxtcHhkV1Z5ZVM1amIyMHZkR2xqYTJWMEx6RXpNemM0WEc1Y2RISmlkV2RuZVZGVFFTQTlJRnRkTzF4dVhHNWNkR2xtSUNnZ0tITjFjSEJ2Y25RdWNYTmhJRDBnY201aGRHbDJaUzUwWlhOMEtDQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0lDa3BJQ2tnZTF4dVhIUmNkQzh2SUVKMWFXeGtJRkZUUVNCeVpXZGxlRnh1WEhSY2RDOHZJRkpsWjJWNElITjBjbUYwWldkNUlHRmtiM0IwWldRZ1puSnZiU0JFYVdWbmJ5QlFaWEpwYm1sY2JseDBYSFJoYzNObGNuUW9ablZ1WTNScGIyNG9JR1ZzSUNrZ2UxeHVYSFJjZEZ4MEx5OGdVMlZzWldOMElHbHpJSE5sZENCMGJ5QmxiWEIwZVNCemRISnBibWNnYjI0Z2NIVnljRzl6WlZ4dVhIUmNkRngwTHk4Z1ZHaHBjeUJwY3lCMGJ5QjBaWE4wSUVsRkozTWdkSEpsWVhSdFpXNTBJRzltSUc1dmRDQmxlSEJzYVdOcGRHeDVYRzVjZEZ4MFhIUXZMeUJ6WlhSMGFXNW5JR0VnWW05dmJHVmhiaUJqYjI1MFpXNTBJR0YwZEhKcFluVjBaU3hjYmx4MFhIUmNkQzh2SUhOcGJtTmxJR2wwY3lCd2NtVnpaVzVqWlNCemFHOTFiR1FnWW1VZ1pXNXZkV2RvWEc1Y2RGeDBYSFF2THlCb2RIUndjem92TDJKMVozTXVhbkYxWlhKNUxtTnZiUzkwYVdOclpYUXZNVEl6TlRsY2JseDBYSFJjZEdSdlkwVnNaVzB1WVhCd1pXNWtRMmhwYkdRb0lHVnNJQ2t1YVc1dVpYSklWRTFNSUQwZ1hDSThZU0JwWkQwblhDSWdLeUJsZUhCaGJtUnZJQ3NnWENJblBqd3ZZVDVjSWlBclhHNWNkRngwWEhSY2RGd2lQSE5sYkdWamRDQnBaRDBuWENJZ0t5QmxlSEJoYm1SdklDc2dYQ0l0WEZ4eVhGeGNYQ2NnYlhOaGJHeHZkMk5oY0hSMWNtVTlKeWMrWENJZ0sxeHVYSFJjZEZ4MFhIUmNJanh2Y0hScGIyNGdjMlZzWldOMFpXUTlKeWMrUEM5dmNIUnBiMjQrUEM5elpXeGxZM1ErWENJN1hHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGT0N3Z1QzQmxjbUVnTVRFdE1USXVNVFpjYmx4MFhIUmNkQzh2SUU1dmRHaHBibWNnYzJodmRXeGtJR0psSUhObGJHVmpkR1ZrSUhkb1pXNGdaVzF3ZEhrZ2MzUnlhVzVuY3lCbWIyeHNiM2NnWGowZ2IzSWdKRDBnYjNJZ0tqMWNibHgwWEhSY2RDOHZJRlJvWlNCMFpYTjBJR0YwZEhKcFluVjBaU0J0ZFhOMElHSmxJSFZ1YTI1dmQyNGdhVzRnVDNCbGNtRWdZblYwSUZ3aWMyRm1aVndpSUdadmNpQlhhVzVTVkZ4dVhIUmNkRngwTHk4Z2FIUjBjSE02THk5dGMyUnVMbTFwWTNKdmMyOW1kQzVqYjIwdlpXNHRkWE12YkdsaWNtRnllUzlwWlM5b2FEUTJOVE00T0M1aGMzQjRJMkYwZEhKcFluVjBaVjl6WldOMGFXOXVYRzVjZEZ4MFhIUnBaaUFvSUdWc0xuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSmJiWE5oYkd4dmQyTmhjSFIxY21WZVBTY25YVndpS1M1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSY2RISmlkV2RuZVZGVFFTNXdkWE5vS0NCY0lsc3FYaVJkUFZ3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUtpZy9PaWNuZkZ4Y1hDSmNYRndpS1Z3aUlDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRk9GeHVYSFJjZEZ4MEx5OGdRbTl2YkdWaGJpQmhkSFJ5YVdKMWRHVnpJR0Z1WkNCY0luWmhiSFZsWENJZ1lYSmxJRzV2ZENCMGNtVmhkR1ZrSUdOdmNuSmxZM1JzZVZ4dVhIUmNkRngwYVdZZ0tDQWhaV3d1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hjSWx0elpXeGxZM1JsWkYxY0lpa3ViR1Z1WjNSb0lDa2dlMXh1WEhSY2RGeDBYSFJ5WW5WblozbFJVMEV1Y0hWemFDZ2dYQ0pjWEZ4Y1cxd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lLaWcvT25aaGJIVmxmRndpSUNzZ1ltOXZiR1ZoYm5NZ0t5QmNJaWxjSWlBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJEYUhKdmJXVThNamtzSUVGdVpISnZhV1E4TkM0MExDQlRZV1poY21rOE55NHdLeXdnYVU5VFBEY3VNQ3NzSUZCb1lXNTBiMjFLVXp3eExqa3VPQ3RjYmx4MFhIUmNkR2xtSUNnZ0lXVnNMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29JRndpVzJsa2ZqMWNJaUFySUdWNGNHRnVaRzhnS3lCY0lpMWRYQ0lnS1M1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSY2RISmlkV2RuZVZGVFFTNXdkWE5vS0Z3aWZqMWNJaWs3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGZGxZbXRwZEM5UGNHVnlZU0F0SURwamFHVmphMlZrSUhOb2IzVnNaQ0J5WlhSMWNtNGdjMlZzWldOMFpXUWdiM0IwYVc5dUlHVnNaVzFsYm5SelhHNWNkRngwWEhRdkx5Qm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OVVVaTh5TURFeEwxSkZReTFqYzNNekxYTmxiR1ZqZEc5eWN5MHlNREV4TURreU9TOGpZMmhsWTJ0bFpGeHVYSFJjZEZ4MEx5OGdTVVU0SUhSb2NtOTNjeUJsY25KdmNpQm9aWEpsSUdGdVpDQjNhV3hzSUc1dmRDQnpaV1VnYkdGMFpYSWdkR1Z6ZEhOY2JseDBYSFJjZEdsbUlDZ2dJV1ZzTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvWENJNlkyaGxZMnRsWkZ3aUtTNXNaVzVuZEdnZ0tTQjdYRzVjZEZ4MFhIUmNkSEppZFdkbmVWRlRRUzV3ZFhOb0tGd2lPbU5vWldOclpXUmNJaWs3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGTjFjSEJ2Y25RNklGTmhabUZ5YVNBNEt5d2dhVTlUSURnclhHNWNkRngwWEhRdkx5Qm9kSFJ3Y3pvdkwySjFaM011ZDJWaWEybDBMbTl5Wnk5emFHOTNYMkoxWnk1aloyay9hV1E5TVRNMk9EVXhYRzVjZEZ4MFhIUXZMeUJKYmkxd1lXZGxJR0J6Wld4bFkzUnZjaU5wWkNCemFXSnNhVzVuTFdOdmJXSnBibUYwYjNJZ2MyVnNaV04wYjNKZ0lHWmhhV3h6WEc1Y2RGeDBYSFJwWmlBb0lDRmxiQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ0JjSW1FalhDSWdLeUJsZUhCaGJtUnZJQ3NnWENJcktsd2lJQ2t1YkdWdVozUm9JQ2tnZTF4dVhIUmNkRngwWEhSeVluVm5aM2xSVTBFdWNIVnphQ2hjSWk0akxpdGJLMzVkWENJcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MFlYTnpaWEowS0daMWJtTjBhVzl1S0NCbGJDQXBJSHRjYmx4MFhIUmNkR1ZzTG1sdWJtVnlTRlJOVENBOUlGd2lQR0VnYUhKbFpqMG5KeUJrYVhOaFlteGxaRDBuWkdsellXSnNaV1FuUGp3dllUNWNJaUFyWEc1Y2RGeDBYSFJjZEZ3aVBITmxiR1ZqZENCa2FYTmhZbXhsWkQwblpHbHpZV0pzWldRblBqeHZjSFJwYjI0dlBqd3ZjMlZzWldOMFBsd2lPMXh1WEc1Y2RGeDBYSFF2THlCVGRYQndiM0owT2lCWGFXNWtiM2R6SURnZ1RtRjBhWFpsSUVGd2NITmNibHgwWEhSY2RDOHZJRlJvWlNCMGVYQmxJR0Z1WkNCdVlXMWxJR0YwZEhKcFluVjBaWE1nWVhKbElISmxjM1J5YVdOMFpXUWdaSFZ5YVc1bklDNXBibTVsY2toVVRVd2dZWE56YVdkdWJXVnVkRnh1WEhSY2RGeDBkbUZ5SUdsdWNIVjBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbWx1Y0hWMFhDSXBPMXh1WEhSY2RGeDBhVzV3ZFhRdWMyVjBRWFIwY21saWRYUmxLQ0JjSW5SNWNHVmNJaXdnWENKb2FXUmtaVzVjSWlBcE8xeHVYSFJjZEZ4MFpXd3VZWEJ3Wlc1a1EyaHBiR1FvSUdsdWNIVjBJQ2t1YzJWMFFYUjBjbWxpZFhSbEtDQmNJbTVoYldWY0lpd2dYQ0pFWENJZ0tUdGNibHh1WEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nU1VVNFhHNWNkRngwWEhRdkx5QkZibVp2Y21ObElHTmhjMlV0YzJWdWMybDBhWFpwZEhrZ2IyWWdibUZ0WlNCaGRIUnlhV0oxZEdWY2JseDBYSFJjZEdsbUlDZ2daV3d1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hjSWx0dVlXMWxQV1JkWENJcExteGxibWQwYUNBcElIdGNibHgwWEhSY2RGeDBjbUoxWjJkNVVWTkJMbkIxYzJnb0lGd2libUZ0WlZ3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUtsc3FYaVI4SVg1ZFB6MWNJaUFwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QkdSaUF6TGpVZ0xTQTZaVzVoWW14bFpDODZaR2x6WVdKc1pXUWdZVzVrSUdocFpHUmxiaUJsYkdWdFpXNTBjeUFvYUdsa1pHVnVJR1ZzWlcxbGJuUnpJR0Z5WlNCemRHbHNiQ0JsYm1GaWJHVmtLVnh1WEhSY2RGeDBMeThnU1VVNElIUm9jbTkzY3lCbGNuSnZjaUJvWlhKbElHRnVaQ0IzYVd4c0lHNXZkQ0J6WldVZ2JHRjBaWElnZEdWemRITmNibHgwWEhSY2RHbG1JQ2dnWld3dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoY0lqcGxibUZpYkdWa1hDSXBMbXhsYm1kMGFDQWhQVDBnTWlBcElIdGNibHgwWEhSY2RGeDBjbUoxWjJkNVVWTkJMbkIxYzJnb0lGd2lPbVZ1WVdKc1pXUmNJaXdnWENJNlpHbHpZV0pzWldSY0lpQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJUa3RNVEVyWEc1Y2RGeDBYSFF2THlCSlJTZHpJRHBrYVhOaFlteGxaQ0J6Wld4bFkzUnZjaUJrYjJWeklHNXZkQ0J3YVdOcklIVndJSFJvWlNCamFHbHNaSEpsYmlCdlppQmthWE5oWW14bFpDQm1hV1ZzWkhObGRITmNibHgwWEhSY2RHUnZZMFZzWlcwdVlYQndaVzVrUTJocGJHUW9JR1ZzSUNrdVpHbHpZV0pzWldRZ1BTQjBjblZsTzF4dVhIUmNkRngwYVdZZ0tDQmxiQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLRndpT21ScGMyRmliR1ZrWENJcExteGxibWQwYUNBaFBUMGdNaUFwSUh0Y2JseDBYSFJjZEZ4MGNtSjFaMmQ1VVZOQkxuQjFjMmdvSUZ3aU9tVnVZV0pzWldSY0lpd2dYQ0k2WkdsellXSnNaV1JjSWlBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJQY0dWeVlTQXhNQzB4TVNCa2IyVnpJRzV2ZENCMGFISnZkeUJ2YmlCd2IzTjBMV052YlcxaElHbHVkbUZzYVdRZ2NITmxkV1J2YzF4dVhIUmNkRngwWld3dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoY0lpb3NPbmhjSWlrN1hHNWNkRngwWEhSeVluVm5aM2xSVTBFdWNIVnphQ2hjSWl3dUtqcGNJaWs3WEc1Y2RGeDBmU2s3WEc1Y2RIMWNibHh1WEhScFppQW9JQ2h6ZFhCd2IzSjBMbTFoZEdOb1pYTlRaV3hsWTNSdmNpQTlJSEp1WVhScGRtVXVkR1Z6ZENnZ0tHMWhkR05vWlhNZ1BTQmtiMk5GYkdWdExtMWhkR05vWlhNZ2ZIeGNibHgwWEhSa2IyTkZiR1Z0TG5kbFltdHBkRTFoZEdOb1pYTlRaV3hsWTNSdmNpQjhmRnh1WEhSY2RHUnZZMFZzWlcwdWJXOTZUV0YwWTJobGMxTmxiR1ZqZEc5eUlIeDhYRzVjZEZ4MFpHOWpSV3hsYlM1dlRXRjBZMmhsYzFObGJHVmpkRzl5SUh4OFhHNWNkRngwWkc5alJXeGxiUzV0YzAxaGRHTm9aWE5UWld4bFkzUnZjaWtnS1NrZ0tTQjdYRzVjYmx4MFhIUmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmNkRngwTHk4Z1EyaGxZMnNnZEc4Z2MyVmxJR2xtSUdsMEozTWdjRzl6YzJsaWJHVWdkRzhnWkc4Z2JXRjBZMmhsYzFObGJHVmpkRzl5WEc1Y2RGeDBYSFF2THlCdmJpQmhJR1JwYzJOdmJtNWxZM1JsWkNCdWIyUmxJQ2hKUlNBNUtWeHVYSFJjZEZ4MGMzVndjRzl5ZEM1a2FYTmpiMjV1WldOMFpXUk5ZWFJqYUNBOUlHMWhkR05vWlhNdVkyRnNiQ2dnWld3c0lGd2lLbHdpSUNrN1hHNWNibHgwWEhSY2RDOHZJRlJvYVhNZ2MyaHZkV3hrSUdaaGFXd2dkMmwwYUNCaGJpQmxlR05sY0hScGIyNWNibHgwWEhSY2RDOHZJRWRsWTJ0dklHUnZaWE1nYm05MElHVnljbTl5TENCeVpYUjFjbTV6SUdaaGJITmxJR2x1YzNSbFlXUmNibHgwWEhSY2RHMWhkR05vWlhNdVkyRnNiQ2dnWld3c0lGd2lXM01oUFNjblhUcDRYQ0lnS1R0Y2JseDBYSFJjZEhKaWRXZG5lVTFoZEdOb1pYTXVjSFZ6YUNnZ1hDSWhQVndpTENCd2MyVjFaRzl6SUNrN1hHNWNkRngwZlNrN1hHNWNkSDFjYmx4dVhIUnlZblZuWjNsUlUwRWdQU0J5WW5WblozbFJVMEV1YkdWdVozUm9JQ1ltSUc1bGR5QlNaV2RGZUhBb0lISmlkV2RuZVZGVFFTNXFiMmx1S0Z3aWZGd2lLU0FwTzF4dVhIUnlZblZuWjNsTllYUmphR1Z6SUQwZ2NtSjFaMmQ1VFdGMFkyaGxjeTVzWlc1bmRHZ2dKaVlnYm1WM0lGSmxaMFY0Y0NnZ2NtSjFaMmQ1VFdGMFkyaGxjeTVxYjJsdUtGd2lmRndpS1NBcE8xeHVYRzVjZEM4cUlFTnZiblJoYVc1elhHNWNkQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdLaTljYmx4MGFHRnpRMjl0Y0dGeVpTQTlJSEp1WVhScGRtVXVkR1Z6ZENnZ1pHOWpSV3hsYlM1amIyMXdZWEpsUkc5amRXMWxiblJRYjNOcGRHbHZiaUFwTzF4dVhHNWNkQzh2SUVWc1pXMWxiblFnWTI5dWRHRnBibk1nWVc1dmRHaGxjbHh1WEhRdkx5QlFkWEp3YjNObFpuVnNiSGtnYzJWc1ppMWxlR05zZFhOcGRtVmNibHgwTHk4Z1FYTWdhVzRzSUdGdUlHVnNaVzFsYm5RZ1pHOWxjeUJ1YjNRZ1kyOXVkR0ZwYmlCcGRITmxiR1pjYmx4MFkyOXVkR0ZwYm5NZ1BTQm9ZWE5EYjIxd1lYSmxJSHg4SUhKdVlYUnBkbVV1ZEdWemRDZ2daRzlqUld4bGJTNWpiMjUwWVdsdWN5QXBJRDljYmx4MFhIUm1kVzVqZEdsdmJpZ2dZU3dnWWlBcElIdGNibHgwWEhSY2RIWmhjaUJoWkc5M2JpQTlJR0V1Ym05a1pWUjVjR1VnUFQwOUlEa2dQeUJoTG1SdlkzVnRaVzUwUld4bGJXVnVkQ0E2SUdFc1hHNWNkRngwWEhSY2RHSjFjQ0E5SUdJZ0ppWWdZaTV3WVhKbGJuUk9iMlJsTzF4dVhIUmNkRngwY21WMGRYSnVJR0VnUFQwOUlHSjFjQ0I4ZkNBaElTZ2dZblZ3SUNZbUlHSjFjQzV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KaUFvWEc1Y2RGeDBYSFJjZEdGa2IzZHVMbU52Ym5SaGFXNXpJRDljYmx4MFhIUmNkRngwWEhSaFpHOTNiaTVqYjI1MFlXbHVjeWdnWW5Wd0lDa2dPbHh1WEhSY2RGeDBYSFJjZEdFdVkyOXRjR0Z5WlVSdlkzVnRaVzUwVUc5emFYUnBiMjRnSmlZZ1lTNWpiMjF3WVhKbFJHOWpkVzFsYm5SUWIzTnBkR2x2YmlnZ1luVndJQ2tnSmlBeE5seHVYSFJjZEZ4MEtTazdYRzVjZEZ4MGZTQTZYRzVjZEZ4MFpuVnVZM1JwYjI0b0lHRXNJR0lnS1NCN1hHNWNkRngwWEhScFppQW9JR0lnS1NCN1hHNWNkRngwWEhSY2RIZG9hV3hsSUNnZ0tHSWdQU0JpTG5CaGNtVnVkRTV2WkdVcElDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dZaUE5UFQwZ1lTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RIMDdYRzVjYmx4MEx5b2dVMjl5ZEdsdVoxeHVYSFF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRJQ292WEc1Y2JseDBMeThnUkc5amRXMWxiblFnYjNKa1pYSWdjMjl5ZEdsdVoxeHVYSFJ6YjNKMFQzSmtaWElnUFNCb1lYTkRiMjF3WVhKbElEOWNibHgwWm5WdVkzUnBiMjRvSUdFc0lHSWdLU0I3WEc1Y2JseDBYSFF2THlCR2JHRm5JR1p2Y2lCa2RYQnNhV05oZEdVZ2NtVnRiM1poYkZ4dVhIUmNkR2xtSUNnZ1lTQTlQVDBnWWlBcElIdGNibHgwWEhSY2RHaGhjMFIxY0d4cFkyRjBaU0E5SUhSeWRXVTdYRzVjZEZ4MFhIUnlaWFIxY200Z01EdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlRiM0owSUc5dUlHMWxkR2h2WkNCbGVHbHpkR1Z1WTJVZ2FXWWdiMjVzZVNCdmJtVWdhVzV3ZFhRZ2FHRnpJR052YlhCaGNtVkViMk4xYldWdWRGQnZjMmwwYVc5dVhHNWNkRngwZG1GeUlHTnZiWEJoY21VZ1BTQWhZUzVqYjIxd1lYSmxSRzlqZFcxbGJuUlFiM05wZEdsdmJpQXRJQ0ZpTG1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVPMXh1WEhSY2RHbG1JQ2dnWTI5dGNHRnlaU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJqYjIxd1lYSmxPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU5oYkdOMWJHRjBaU0J3YjNOcGRHbHZiaUJwWmlCaWIzUm9JR2x1Y0hWMGN5QmlaV3h2Ym1jZ2RHOGdkR2hsSUhOaGJXVWdaRzlqZFcxbGJuUmNibHgwWEhSamIyMXdZWEpsSUQwZ0tDQmhMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2dZU0FwSUQwOVBTQW9JR0l1YjNkdVpYSkViMk4xYldWdWRDQjhmQ0JpSUNrZ1AxeHVYSFJjZEZ4MFlTNWpiMjF3WVhKbFJHOWpkVzFsYm5SUWIzTnBkR2x2YmlnZ1lpQXBJRHBjYmx4dVhIUmNkRngwTHk4Z1QzUm9aWEozYVhObElIZGxJR3R1YjNjZ2RHaGxlU0JoY21VZ1pHbHpZMjl1Ym1WamRHVmtYRzVjZEZ4MFhIUXhPMXh1WEc1Y2RGeDBMeThnUkdselkyOXVibVZqZEdWa0lHNXZaR1Z6WEc1Y2RGeDBhV1lnS0NCamIyMXdZWEpsSUNZZ01TQjhmRnh1WEhSY2RGeDBLQ0Z6ZFhCd2IzSjBMbk52Y25SRVpYUmhZMmhsWkNBbUppQmlMbU52YlhCaGNtVkViMk4xYldWdWRGQnZjMmwwYVc5dUtDQmhJQ2tnUFQwOUlHTnZiWEJoY21VcElDa2dlMXh1WEc1Y2RGeDBYSFF2THlCRGFHOXZjMlVnZEdobElHWnBjbk4wSUdWc1pXMWxiblFnZEdoaGRDQnBjeUJ5Wld4aGRHVmtJSFJ2SUc5MWNpQndjbVZtWlhKeVpXUWdaRzlqZFcxbGJuUmNibHgwWEhSY2RHbG1JQ2dnWVNBOVBUMGdaRzlqZFcxbGJuUWdmSHdnWVM1dmQyNWxja1J2WTNWdFpXNTBJRDA5UFNCd2NtVm1aWEp5WldSRWIyTWdKaVlnWTI5dWRHRnBibk1vY0hKbFptVnljbVZrUkc5akxDQmhLU0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUMweE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGFXWWdLQ0JpSUQwOVBTQmtiMk4xYldWdWRDQjhmQ0JpTG05M2JtVnlSRzlqZFcxbGJuUWdQVDA5SUhCeVpXWmxjbkpsWkVSdll5QW1KaUJqYjI1MFlXbHVjeWh3Y21WbVpYSnlaV1JFYjJNc0lHSXBJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnTVR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdUV0ZwYm5SaGFXNGdiM0pwWjJsdVlXd2diM0prWlhKY2JseDBYSFJjZEhKbGRIVnliaUJ6YjNKMFNXNXdkWFFnUDF4dVhIUmNkRngwWEhRb0lHbHVaR1Y0VDJZb0lITnZjblJKYm5CMWRDd2dZU0FwSUMwZ2FXNWtaWGhQWmlnZ2MyOXlkRWx1Y0hWMExDQmlJQ2tnS1NBNlhHNWNkRngwWEhSY2REQTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdOdmJYQmhjbVVnSmlBMElEOGdMVEVnT2lBeE8xeHVYSFI5SURwY2JseDBablZ1WTNScGIyNG9JR0VzSUdJZ0tTQjdYRzVjZEZ4MEx5OGdSWGhwZENCbFlYSnNlU0JwWmlCMGFHVWdibTlrWlhNZ1lYSmxJR2xrWlc1MGFXTmhiRnh1WEhSY2RHbG1JQ2dnWVNBOVBUMGdZaUFwSUh0Y2JseDBYSFJjZEdoaGMwUjFjR3hwWTJGMFpTQTlJSFJ5ZFdVN1hHNWNkRngwWEhSeVpYUjFjbTRnTUR0Y2JseDBYSFI5WEc1Y2JseDBYSFIyWVhJZ1kzVnlMRnh1WEhSY2RGeDBhU0E5SURBc1hHNWNkRngwWEhSaGRYQWdQU0JoTG5CaGNtVnVkRTV2WkdVc1hHNWNkRngwWEhSaWRYQWdQU0JpTG5CaGNtVnVkRTV2WkdVc1hHNWNkRngwWEhSaGNDQTlJRnNnWVNCZExGeHVYSFJjZEZ4MFluQWdQU0JiSUdJZ1hUdGNibHh1WEhSY2RDOHZJRkJoY21WdWRHeGxjM01nYm05a1pYTWdZWEpsSUdWcGRHaGxjaUJrYjJOMWJXVnVkSE1nYjNJZ1pHbHpZMjl1Ym1WamRHVmtYRzVjZEZ4MGFXWWdLQ0FoWVhWd0lIeDhJQ0ZpZFhBZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1lTQTlQVDBnWkc5amRXMWxiblFnUHlBdE1TQTZYRzVjZEZ4MFhIUmNkR0lnUFQwOUlHUnZZM1Z0Wlc1MElEOGdNU0E2WEc1Y2RGeDBYSFJjZEdGMWNDQS9JQzB4SURwY2JseDBYSFJjZEZ4MFluVndJRDhnTVNBNlhHNWNkRngwWEhSY2RITnZjblJKYm5CMWRDQS9YRzVjZEZ4MFhIUmNkQ2dnYVc1a1pYaFBaaWdnYzI5eWRFbHVjSFYwTENCaElDa2dMU0JwYm1SbGVFOW1LQ0J6YjNKMFNXNXdkWFFzSUdJZ0tTQXBJRHBjYmx4MFhIUmNkRngwTUR0Y2JseHVYSFJjZEM4dklFbG1JSFJvWlNCdWIyUmxjeUJoY21VZ2MybGliR2x1WjNNc0lIZGxJR05oYmlCa2J5QmhJSEYxYVdOcklHTm9aV05yWEc1Y2RGeDBmU0JsYkhObElHbG1JQ2dnWVhWd0lEMDlQU0JpZFhBZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2MybGliR2x1WjBOb1pXTnJLQ0JoTENCaUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdUM1JvWlhKM2FYTmxJSGRsSUc1bFpXUWdablZzYkNCc2FYTjBjeUJ2WmlCMGFHVnBjaUJoYm1ObGMzUnZjbk1nWm05eUlHTnZiWEJoY21semIyNWNibHgwWEhSamRYSWdQU0JoTzF4dVhIUmNkSGRvYVd4bElDZ2dLR04xY2lBOUlHTjFjaTV3WVhKbGJuUk9iMlJsS1NBcElIdGNibHgwWEhSY2RHRndMblZ1YzJocFpuUW9JR04xY2lBcE8xeHVYSFJjZEgxY2JseDBYSFJqZFhJZ1BTQmlPMXh1WEhSY2RIZG9hV3hsSUNnZ0tHTjFjaUE5SUdOMWNpNXdZWEpsYm5ST2IyUmxLU0FwSUh0Y2JseDBYSFJjZEdKd0xuVnVjMmhwWm5Rb0lHTjFjaUFwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZkaGJHc2daRzkzYmlCMGFHVWdkSEpsWlNCc2IyOXJhVzVuSUdadmNpQmhJR1JwYzJOeVpYQmhibU41WEc1Y2RGeDBkMmhwYkdVZ0tDQmhjRnRwWFNBOVBUMGdZbkJiYVYwZ0tTQjdYRzVjZEZ4MFhIUnBLeXM3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHa2dQMXh1WEhSY2RGeDBMeThnUkc4Z1lTQnphV0pzYVc1bklHTm9aV05ySUdsbUlIUm9aU0J1YjJSbGN5Qm9ZWFpsSUdFZ1kyOXRiVzl1SUdGdVkyVnpkRzl5WEc1Y2RGeDBYSFJ6YVdKc2FXNW5RMmhsWTJzb0lHRndXMmxkTENCaWNGdHBYU0FwSURwY2JseHVYSFJjZEZ4MEx5OGdUM1JvWlhKM2FYTmxJRzV2WkdWeklHbHVJRzkxY2lCa2IyTjFiV1Z1ZENCemIzSjBJR1pwY25OMFhHNWNkRngwWEhSaGNGdHBYU0E5UFQwZ2NISmxabVZ5Y21Wa1JHOWpJRDhnTFRFZ09seHVYSFJjZEZ4MFluQmJhVjBnUFQwOUlIQnlaV1psY25KbFpFUnZZeUEvSURFZ09seHVYSFJjZEZ4ME1EdGNibHgwZlR0Y2JseHVYSFJ5WlhSMWNtNGdaRzlqZFcxbGJuUTdYRzU5TzF4dVhHNVRhWHA2YkdVdWJXRjBZMmhsY3lBOUlHWjFibU4wYVc5dUtDQmxlSEJ5TENCbGJHVnRaVzUwY3lBcElIdGNibHgwY21WMGRYSnVJRk5wZW5wc1pTZ2daWGh3Y2l3Z2JuVnNiQ3dnYm5Wc2JDd2daV3hsYldWdWRITWdLVHRjYm4wN1hHNWNibE5wZW5wc1pTNXRZWFJqYUdWelUyVnNaV04wYjNJZ1BTQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z1pYaHdjaUFwSUh0Y2JseDBMeThnVTJWMElHUnZZM1Z0Wlc1MElIWmhjbk1nYVdZZ2JtVmxaR1ZrWEc1Y2RHbG1JQ2dnS0NCbGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daV3hsYlNBcElDRTlQU0JrYjJOMWJXVnVkQ0FwSUh0Y2JseDBYSFJ6WlhSRWIyTjFiV1Z1ZENnZ1pXeGxiU0FwTzF4dVhIUjlYRzVjYmx4MEx5OGdUV0ZyWlNCemRYSmxJSFJvWVhRZ1lYUjBjbWxpZFhSbElITmxiR1ZqZEc5eWN5QmhjbVVnY1hWdmRHVmtYRzVjZEdWNGNISWdQU0JsZUhCeUxuSmxjR3hoWTJVb0lISmhkSFJ5YVdKMWRHVlJkVzkwWlhNc0lGd2lQU2NrTVNkZFhDSWdLVHRjYmx4dVhIUnBaaUFvSUhOMWNIQnZjblF1YldGMFkyaGxjMU5sYkdWamRHOXlJQ1ltSUdSdlkzVnRaVzUwU1hOSVZFMU1JQ1ltWEc1Y2RGeDBJV052YlhCcGJHVnlRMkZqYUdWYklHVjRjSElnS3lCY0lpQmNJaUJkSUNZbVhHNWNkRngwS0NBaGNtSjFaMmQ1VFdGMFkyaGxjeUI4ZkNBaGNtSjFaMmQ1VFdGMFkyaGxjeTUwWlhOMEtDQmxlSEJ5SUNrZ0tTQW1KbHh1WEhSY2RDZ2dJWEppZFdkbmVWRlRRU0FnSUNBZ2ZId2dJWEppZFdkbmVWRlRRUzUwWlhOMEtDQmxlSEJ5SUNrZ0tTQXBJSHRjYmx4dVhIUmNkSFJ5ZVNCN1hHNWNkRngwWEhSMllYSWdjbVYwSUQwZ2JXRjBZMmhsY3k1allXeHNLQ0JsYkdWdExDQmxlSEJ5SUNrN1hHNWNibHgwWEhSY2RDOHZJRWxGSURrbmN5QnRZWFJqYUdWelUyVnNaV04wYjNJZ2NtVjBkWEp1Y3lCbVlXeHpaU0J2YmlCa2FYTmpiMjV1WldOMFpXUWdibTlrWlhOY2JseDBYSFJjZEdsbUlDZ2djbVYwSUh4OElITjFjSEJ2Y25RdVpHbHpZMjl1Ym1WamRHVmtUV0YwWTJnZ2ZIeGNibHgwWEhSY2RGeDBYSFF2THlCQmN5QjNaV3hzTENCa2FYTmpiMjV1WldOMFpXUWdibTlrWlhNZ1lYSmxJSE5oYVdRZ2RHOGdZbVVnYVc0Z1lTQmtiMk4xYldWdWRGeHVYSFJjZEZ4MFhIUmNkQzh2SUdaeVlXZHRaVzUwSUdsdUlFbEZJRGxjYmx4MFhIUmNkRngwWEhSbGJHVnRMbVJ2WTNWdFpXNTBJQ1ltSUdWc1pXMHVaRzlqZFcxbGJuUXVibTlrWlZSNWNHVWdJVDA5SURFeElDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVYwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBnWTJGMFkyZ2dLR1VwSUh0OVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z1UybDZlbXhsS0NCbGVIQnlMQ0JrYjJOMWJXVnVkQ3dnYm5Wc2JDd2dXeUJsYkdWdElGMGdLUzVzWlc1bmRHZ2dQaUF3TzF4dWZUdGNibHh1VTJsNmVteGxMbU52Ym5SaGFXNXpJRDBnWm5WdVkzUnBiMjRvSUdOdmJuUmxlSFFzSUdWc1pXMGdLU0I3WEc1Y2RDOHZJRk5sZENCa2IyTjFiV1Z1ZENCMllYSnpJR2xtSUc1bFpXUmxaRnh1WEhScFppQW9JQ2dnWTI5dWRHVjRkQzV2ZDI1bGNrUnZZM1Z0Wlc1MElIeDhJR052Ym5SbGVIUWdLU0FoUFQwZ1pHOWpkVzFsYm5RZ0tTQjdYRzVjZEZ4MGMyVjBSRzlqZFcxbGJuUW9JR052Ym5SbGVIUWdLVHRjYmx4MGZWeHVYSFJ5WlhSMWNtNGdZMjl1ZEdGcGJuTW9JR052Ym5SbGVIUXNJR1ZzWlcwZ0tUdGNibjA3WEc1Y2JsTnBlbnBzWlM1aGRIUnlJRDBnWm5WdVkzUnBiMjRvSUdWc1pXMHNJRzVoYldVZ0tTQjdYRzVjZEM4dklGTmxkQ0JrYjJOMWJXVnVkQ0IyWVhKeklHbG1JRzVsWldSbFpGeHVYSFJwWmlBb0lDZ2daV3hsYlM1dmQyNWxja1J2WTNWdFpXNTBJSHg4SUdWc1pXMGdLU0FoUFQwZ1pHOWpkVzFsYm5RZ0tTQjdYRzVjZEZ4MGMyVjBSRzlqZFcxbGJuUW9JR1ZzWlcwZ0tUdGNibHgwZlZ4dVhHNWNkSFpoY2lCbWJpQTlJRVY0Y0hJdVlYUjBja2hoYm1Sc1pWc2dibUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJRjBzWEc1Y2RGeDBMeThnUkc5dUozUWdaMlYwSUdadmIyeGxaQ0JpZVNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsSUhCeWIzQmxjblJwWlhNZ0tHcFJkV1Z5ZVNBak1UTTRNRGNwWEc1Y2RGeDBkbUZzSUQwZ1ptNGdKaVlnYUdGelQzZHVMbU5oYkd3b0lFVjRjSEl1WVhSMGNraGhibVJzWlN3Z2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElDa2dQMXh1WEhSY2RGeDBabTRvSUdWc1pXMHNJRzVoYldVc0lDRmtiMk4xYldWdWRFbHpTRlJOVENBcElEcGNibHgwWEhSY2RIVnVaR1ZtYVc1bFpEdGNibHh1WEhSeVpYUjFjbTRnZG1Gc0lDRTlQU0IxYm1SbFptbHVaV1FnUDF4dVhIUmNkSFpoYkNBNlhHNWNkRngwYzNWd2NHOXlkQzVoZEhSeWFXSjFkR1Z6SUh4OElDRmtiMk4xYldWdWRFbHpTRlJOVENBL1hHNWNkRngwWEhSbGJHVnRMbWRsZEVGMGRISnBZblYwWlNnZ2JtRnRaU0FwSURwY2JseDBYSFJjZENoMllXd2dQU0JsYkdWdExtZGxkRUYwZEhKcFluVjBaVTV2WkdVb2JtRnRaU2twSUNZbUlIWmhiQzV6Y0dWamFXWnBaV1FnUDF4dVhIUmNkRngwWEhSMllXd3VkbUZzZFdVZ09seHVYSFJjZEZ4MFhIUnVkV3hzTzF4dWZUdGNibHh1VTJsNmVteGxMbVZ6WTJGd1pTQTlJR1oxYm1OMGFXOXVLQ0J6Wld3Z0tTQjdYRzVjZEhKbGRIVnliaUFvYzJWc0lDc2dYQ0pjSWlrdWNtVndiR0ZqWlNnZ2NtTnpjMlZ6WTJGd1pTd2dabU56YzJWelkyRndaU0FwTzF4dWZUdGNibHh1VTJsNmVteGxMbVZ5Y205eUlEMGdablZ1WTNScGIyNG9JRzF6WnlBcElIdGNibHgwZEdoeWIzY2dibVYzSUVWeWNtOXlLQ0JjSWxONWJuUmhlQ0JsY25KdmNpd2dkVzV5WldOdloyNXBlbVZrSUdWNGNISmxjM05wYjI0NklGd2lJQ3NnYlhObklDazdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFUnZZM1Z0Wlc1MElITnZjblJwYm1jZ1lXNWtJSEpsYlc5MmFXNW5JR1IxY0d4cFkyRjBaWE5jYmlBcUlFQndZWEpoYlNCN1FYSnlZWGxNYVd0bGZTQnlaWE4xYkhSelhHNGdLaTljYmxOcGVucHNaUzUxYm1seGRXVlRiM0owSUQwZ1puVnVZM1JwYjI0b0lISmxjM1ZzZEhNZ0tTQjdYRzVjZEhaaGNpQmxiR1Z0TEZ4dVhIUmNkR1IxY0d4cFkyRjBaWE1nUFNCYlhTeGNibHgwWEhScUlEMGdNQ3hjYmx4MFhIUnBJRDBnTUR0Y2JseHVYSFF2THlCVmJteGxjM01nZDJVZ0ttdHViM2NxSUhkbElHTmhiaUJrWlhSbFkzUWdaSFZ3YkdsallYUmxjeXdnWVhOemRXMWxJSFJvWldseUlIQnlaWE5sYm1ObFhHNWNkR2hoYzBSMWNHeHBZMkYwWlNBOUlDRnpkWEJ3YjNKMExtUmxkR1ZqZEVSMWNHeHBZMkYwWlhNN1hHNWNkSE52Y25SSmJuQjFkQ0E5SUNGemRYQndiM0owTG5OdmNuUlRkR0ZpYkdVZ0ppWWdjbVZ6ZFd4MGN5NXpiR2xqWlNnZ01DQXBPMXh1WEhSeVpYTjFiSFJ6TG5OdmNuUW9JSE52Y25SUGNtUmxjaUFwTzF4dVhHNWNkR2xtSUNnZ2FHRnpSSFZ3YkdsallYUmxJQ2tnZTF4dVhIUmNkSGRvYVd4bElDZ2dLR1ZzWlcwZ1BTQnlaWE4xYkhSelcya3JLMTBwSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0JsYkdWdElEMDlQU0J5WlhOMWJIUnpXeUJwSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkR29nUFNCa2RYQnNhV05oZEdWekxuQjFjMmdvSUdrZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkRngwZDJocGJHVWdLQ0JxTFMwZ0tTQjdYRzVjZEZ4MFhIUnlaWE4xYkhSekxuTndiR2xqWlNnZ1pIVndiR2xqWVhSbGMxc2dhaUJkTENBeElDazdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBMeThnUTJ4bFlYSWdhVzV3ZFhRZ1lXWjBaWElnYzI5eWRHbHVaeUIwYnlCeVpXeGxZWE5sSUc5aWFtVmpkSE5jYmx4MEx5OGdVMlZsSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5cWNYVmxjbmt2YzJsNmVteGxMM0IxYkd3dk1qSTFYRzVjZEhOdmNuUkpibkIxZENBOUlHNTFiR3c3WEc1Y2JseDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNTlPMXh1WEc0dktpcGNiaUFxSUZWMGFXeHBkSGtnWm5WdVkzUnBiMjRnWm05eUlISmxkSEpwWlhacGJtY2dkR2hsSUhSbGVIUWdkbUZzZFdVZ2IyWWdZVzRnWVhKeVlYa2diMllnUkU5TklHNXZaR1Z6WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZkVWc1pXMWxiblI5SUdWc1pXMWNiaUFxTDF4dVoyVjBWR1Y0ZENBOUlGTnBlbnBzWlM1blpYUlVaWGgwSUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkSFpoY2lCdWIyUmxMRnh1WEhSY2RISmxkQ0E5SUZ3aVhDSXNYRzVjZEZ4MGFTQTlJREFzWEc1Y2RGeDBibTlrWlZSNWNHVWdQU0JsYkdWdExtNXZaR1ZVZVhCbE8xeHVYRzVjZEdsbUlDZ2dJVzV2WkdWVWVYQmxJQ2tnZTF4dVhIUmNkQzh2SUVsbUlHNXZJRzV2WkdWVWVYQmxMQ0IwYUdseklHbHpJR1Y0Y0dWamRHVmtJSFJ2SUdKbElHRnVJR0Z5Y21GNVhHNWNkRngwZDJocGJHVWdLQ0FvYm05a1pTQTlJR1ZzWlcxYmFTc3JYU2tnS1NCN1hHNWNkRngwWEhRdkx5QkVieUJ1YjNRZ2RISmhkbVZ5YzJVZ1kyOXRiV1Z1ZENCdWIyUmxjMXh1WEhSY2RGeDBjbVYwSUNzOUlHZGxkRlJsZUhRb0lHNXZaR1VnS1R0Y2JseDBYSFI5WEc1Y2RIMGdaV3h6WlNCcFppQW9JRzV2WkdWVWVYQmxJRDA5UFNBeElIeDhJRzV2WkdWVWVYQmxJRDA5UFNBNUlIeDhJRzV2WkdWVWVYQmxJRDA5UFNBeE1TQXBJSHRjYmx4MFhIUXZMeUJWYzJVZ2RHVjRkRU52Ym5SbGJuUWdabTl5SUdWc1pXMWxiblJ6WEc1Y2RGeDBMeThnYVc1dVpYSlVaWGgwSUhWellXZGxJSEpsYlc5MlpXUWdabTl5SUdOdmJuTnBjM1JsYm1ONUlHOW1JRzVsZHlCc2FXNWxjeUFvYWxGMVpYSjVJQ014TVRFMU15bGNibHgwWEhScFppQW9JSFI1Y0dWdlppQmxiR1Z0TG5SbGVIUkRiMjUwWlc1MElEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMHVkR1Y0ZEVOdmJuUmxiblE3WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RDOHZJRlJ5WVhabGNuTmxJR2wwY3lCamFHbHNaSEpsYmx4dVhIUmNkRngwWm05eUlDZ2daV3hsYlNBOUlHVnNaVzB1Wm1seWMzUkRhR2xzWkRzZ1pXeGxiVHNnWld4bGJTQTlJR1ZzWlcwdWJtVjRkRk5wWW14cGJtY2dLU0I3WEc1Y2RGeDBYSFJjZEhKbGRDQXJQU0JuWlhSVVpYaDBLQ0JsYkdWdElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5SUdWc2MyVWdhV1lnS0NCdWIyUmxWSGx3WlNBOVBUMGdNeUI4ZkNCdWIyUmxWSGx3WlNBOVBUMGdOQ0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdaV3hsYlM1dWIyUmxWbUZzZFdVN1hHNWNkSDFjYmx4MEx5OGdSRzhnYm05MElHbHVZMngxWkdVZ1kyOXRiV1Z1ZENCdmNpQndjbTlqWlhOemFXNW5JR2x1YzNSeWRXTjBhVzl1SUc1dlpHVnpYRzVjYmx4MGNtVjBkWEp1SUhKbGREdGNibjA3WEc1Y2JrVjRjSElnUFNCVGFYcDZiR1V1YzJWc1pXTjBiM0p6SUQwZ2UxeHVYRzVjZEM4dklFTmhiaUJpWlNCaFpHcDFjM1JsWkNCaWVTQjBhR1VnZFhObGNseHVYSFJqWVdOb1pVeGxibWQwYURvZ05UQXNYRzVjYmx4MFkzSmxZWFJsVUhObGRXUnZPaUJ0WVhKclJuVnVZM1JwYjI0c1hHNWNibHgwYldGMFkyZzZJRzFoZEdOb1JYaHdjaXhjYmx4dVhIUmhkSFJ5U0dGdVpHeGxPaUI3ZlN4Y2JseHVYSFJtYVc1a09pQjdmU3hjYmx4dVhIUnlaV3hoZEdsMlpUb2dlMXh1WEhSY2RGd2lQbHdpT2lCN0lHUnBjam9nWENKd1lYSmxiblJPYjJSbFhDSXNJR1pwY25OME9pQjBjblZsSUgwc1hHNWNkRngwWENJZ1hDSTZJSHNnWkdseU9pQmNJbkJoY21WdWRFNXZaR1ZjSWlCOUxGeHVYSFJjZEZ3aUsxd2lPaUI3SUdScGNqb2dYQ0p3Y21WMmFXOTFjMU5wWW14cGJtZGNJaXdnWm1seWMzUTZJSFJ5ZFdVZ2ZTeGNibHgwWEhSY0luNWNJam9nZXlCa2FYSTZJRndpY0hKbGRtbHZkWE5UYVdKc2FXNW5YQ0lnZlZ4dVhIUjlMRnh1WEc1Y2RIQnlaVVpwYkhSbGNqb2dlMXh1WEhSY2RGd2lRVlJVVWx3aU9pQm1kVzVqZEdsdmJpZ2diV0YwWTJnZ0tTQjdYRzVjZEZ4MFhIUnRZWFJqYUZzeFhTQTlJRzFoZEdOb1d6RmRMbkpsY0d4aFkyVW9JSEoxYm1WelkyRndaU3dnWm5WdVpYTmpZWEJsSUNrN1hHNWNibHgwWEhSY2RDOHZJRTF2ZG1VZ2RHaGxJR2RwZG1WdUlIWmhiSFZsSUhSdklHMWhkR05vV3pOZElIZG9aWFJvWlhJZ2NYVnZkR1ZrSUc5eUlIVnVjWFZ2ZEdWa1hHNWNkRngwWEhSdFlYUmphRnN6WFNBOUlDZ2diV0YwWTJoYk0xMGdmSHdnYldGMFkyaGJORjBnZkh3Z2JXRjBZMmhiTlYwZ2ZId2dYQ0pjSWlBcExuSmxjR3hoWTJVb0lISjFibVZ6WTJGd1pTd2dablZ1WlhOallYQmxJQ2s3WEc1Y2JseDBYSFJjZEdsbUlDZ2diV0YwWTJoYk1sMGdQVDA5SUZ3aWZqMWNJaUFwSUh0Y2JseDBYSFJjZEZ4MGJXRjBZMmhiTTEwZ1BTQmNJaUJjSWlBcklHMWhkR05vV3pOZElDc2dYQ0lnWENJN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlCdFlYUmphQzV6YkdsalpTZ2dNQ3dnTkNBcE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSY0lrTklTVXhFWENJNklHWjFibU4wYVc5dUtDQnRZWFJqYUNBcElIdGNibHgwWEhSY2RDOHFJRzFoZEdOb1pYTWdabkp2YlNCdFlYUmphRVY0Y0hKYlhDSkRTRWxNUkZ3aVhWeHVYSFJjZEZ4MFhIUXhJSFI1Y0dVZ0tHOXViSGw4Ym5Sb2ZDNHVMaWxjYmx4MFhIUmNkRngwTWlCM2FHRjBJQ2hqYUdsc1pIeHZaaTEwZVhCbEtWeHVYSFJjZEZ4MFhIUXpJR0Z5WjNWdFpXNTBJQ2hsZG1WdWZHOWtaSHhjWEdRcWZGeGNaQ3B1S0ZzckxWMWNYR1FyS1Q5OExpNHVLVnh1WEhSY2RGeDBYSFEwSUhodUxXTnZiWEJ2Ym1WdWRDQnZaaUI0Yml0NUlHRnlaM1Z0Wlc1MElDaGJLeTFkUDF4Y1pDcHVmQ2xjYmx4MFhIUmNkRngwTlNCemFXZHVJRzltSUhodUxXTnZiWEJ2Ym1WdWRGeHVYSFJjZEZ4MFhIUTJJSGdnYjJZZ2VHNHRZMjl0Y0c5dVpXNTBYRzVjZEZ4MFhIUmNkRGNnYzJsbmJpQnZaaUI1TFdOdmJYQnZibVZ1ZEZ4dVhIUmNkRngwWEhRNElIa2diMllnZVMxamIyMXdiMjVsYm5SY2JseDBYSFJjZENvdlhHNWNkRngwWEhSdFlYUmphRnN4WFNBOUlHMWhkR05vV3pGZExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JseDBYSFJjZEdsbUlDZ2diV0YwWTJoYk1WMHVjMnhwWTJVb0lEQXNJRE1nS1NBOVBUMGdYQ0p1ZEdoY0lpQXBJSHRjYmx4MFhIUmNkRngwTHk4Z2JuUm9MU29nY21WeGRXbHlaWE1nWVhKbmRXMWxiblJjYmx4MFhIUmNkRngwYVdZZ0tDQWhiV0YwWTJoYk0xMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFUybDZlbXhsTG1WeWNtOXlLQ0J0WVhSamFGc3dYU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnYm5WdFpYSnBZeUI0SUdGdVpDQjVJSEJoY21GdFpYUmxjbk1nWm05eUlFVjRjSEl1Wm1sc2RHVnlMa05JU1V4RVhHNWNkRngwWEhSY2RDOHZJSEpsYldWdFltVnlJSFJvWVhRZ1ptRnNjMlV2ZEhKMVpTQmpZWE4wSUhKbGMzQmxZM1JwZG1Wc2VTQjBieUF3THpGY2JseDBYSFJjZEZ4MGJXRjBZMmhiTkYwZ1BTQXJLQ0J0WVhSamFGczBYU0EvSUcxaGRHTm9XelZkSUNzZ0tHMWhkR05vV3paZElIeDhJREVwSURvZ01pQXFJQ2dnYldGMFkyaGJNMTBnUFQwOUlGd2laWFpsYmx3aUlIeDhJRzFoZEdOb1d6TmRJRDA5UFNCY0ltOWtaRndpSUNrZ0tUdGNibHgwWEhSY2RGeDBiV0YwWTJoYk5WMGdQU0FyS0NBb0lHMWhkR05vV3pkZElDc2diV0YwWTJoYk9GMGdLU0I4ZkNCdFlYUmphRnN6WFNBOVBUMGdYQ0p2WkdSY0lpQXBPMXh1WEc1Y2RGeDBYSFF2THlCdmRHaGxjaUIwZVhCbGN5QndjbTlvYVdKcGRDQmhjbWQxYldWdWRITmNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9JRzFoZEdOb1d6TmRJQ2tnZTF4dVhIUmNkRngwWEhSVGFYcDZiR1V1WlhKeWIzSW9JRzFoZEdOb1d6QmRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJ0WVhSamFEdGNibHgwWEhSOUxGeHVYRzVjZEZ4MFhDSlFVMFZWUkU5Y0lqb2dablZ1WTNScGIyNG9JRzFoZEdOb0lDa2dlMXh1WEhSY2RGeDBkbUZ5SUdWNFkyVnpjeXhjYmx4MFhIUmNkRngwZFc1eGRXOTBaV1FnUFNBaGJXRjBZMmhiTmwwZ0ppWWdiV0YwWTJoYk1sMDdYRzVjYmx4MFhIUmNkR2xtSUNnZ2JXRjBZMmhGZUhCeVcxd2lRMGhKVEVSY0lsMHVkR1Z6ZENnZ2JXRjBZMmhiTUYwZ0tTQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRUZqWTJWd2RDQnhkVzkwWldRZ1lYSm5kVzFsYm5SeklHRnpMV2x6WEc1Y2RGeDBYSFJwWmlBb0lHMWhkR05vV3pOZElDa2dlMXh1WEhSY2RGeDBYSFJ0WVhSamFGc3lYU0E5SUcxaGRHTm9XelJkSUh4OElHMWhkR05vV3pWZElIeDhJRndpWENJN1hHNWNibHgwWEhSY2RDOHZJRk4wY21sd0lHVjRZMlZ6Y3lCamFHRnlZV04wWlhKeklHWnliMjBnZFc1eGRXOTBaV1FnWVhKbmRXMWxiblJ6WEc1Y2RGeDBYSFI5SUdWc2MyVWdhV1lnS0NCMWJuRjFiM1JsWkNBbUppQnljSE5sZFdSdkxuUmxjM1FvSUhWdWNYVnZkR1ZrSUNrZ0ppWmNibHgwWEhSY2RGeDBMeThnUjJWMElHVjRZMlZ6Y3lCbWNtOXRJSFJ2YTJWdWFYcGxJQ2h5WldOMWNuTnBkbVZzZVNsY2JseDBYSFJjZEZ4MEtHVjRZMlZ6Y3lBOUlIUnZhMlZ1YVhwbEtDQjFibkYxYjNSbFpDd2dkSEoxWlNBcEtTQW1KbHh1WEhSY2RGeDBYSFF2THlCaFpIWmhibU5sSUhSdklIUm9aU0J1WlhoMElHTnNiM05wYm1jZ2NHRnlaVzUwYUdWemFYTmNibHgwWEhSY2RGeDBLR1Y0WTJWemN5QTlJSFZ1Y1hWdmRHVmtMbWx1WkdWNFQyWW9JRndpS1Z3aUxDQjFibkYxYjNSbFpDNXNaVzVuZEdnZ0xTQmxlR05sYzNNZ0tTQXRJSFZ1Y1hWdmRHVmtMbXhsYm1kMGFDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdaWGhqWlhOeklHbHpJR0VnYm1WbllYUnBkbVVnYVc1a1pYaGNibHgwWEhSY2RGeDBiV0YwWTJoYk1GMGdQU0J0WVhSamFGc3dYUzV6YkdsalpTZ2dNQ3dnWlhoalpYTnpJQ2s3WEc1Y2RGeDBYSFJjZEcxaGRHTm9XekpkSUQwZ2RXNXhkVzkwWldRdWMyeHBZMlVvSURBc0lHVjRZMlZ6Y3lBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJTWlhSMWNtNGdiMjVzZVNCallYQjBkWEpsY3lCdVpXVmtaV1FnWW5rZ2RHaGxJSEJ6WlhWa2J5Qm1hV3gwWlhJZ2JXVjBhRzlrSUNoMGVYQmxJR0Z1WkNCaGNtZDFiV1Z1ZENsY2JseDBYSFJjZEhKbGRIVnliaUJ0WVhSamFDNXpiR2xqWlNnZ01Dd2dNeUFwTzF4dVhIUmNkSDFjYmx4MGZTeGNibHh1WEhSbWFXeDBaWEk2SUh0Y2JseHVYSFJjZEZ3aVZFRkhYQ0k2SUdaMWJtTjBhVzl1S0NCdWIyUmxUbUZ0WlZObGJHVmpkRzl5SUNrZ2UxeHVYSFJjZEZ4MGRtRnlJRzV2WkdWT1lXMWxJRDBnYm05a1pVNWhiV1ZUWld4bFkzUnZjaTV5WlhCc1lXTmxLQ0J5ZFc1bGMyTmhjR1VzSUdaMWJtVnpZMkZ3WlNBcExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdibTlrWlU1aGJXVlRaV3hsWTNSdmNpQTlQVDBnWENJcVhDSWdQMXh1WEhSY2RGeDBYSFJtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUhSeWRXVTdJSDBnT2x4dVhIUmNkRngwWEhSbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1pXeGxiUzV1YjJSbFRtRnRaU0FtSmlCbGJHVnRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMDlJRzV2WkdWT1lXMWxPMXh1WEhSY2RGeDBYSFI5TzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJjSWtOTVFWTlRYQ0k2SUdaMWJtTjBhVzl1S0NCamJHRnpjMDVoYldVZ0tTQjdYRzVjZEZ4MFhIUjJZWElnY0dGMGRHVnliaUE5SUdOc1lYTnpRMkZqYUdWYklHTnNZWE56VG1GdFpTQXJJRndpSUZ3aUlGMDdYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQndZWFIwWlhKdUlIeDhYRzVjZEZ4MFhIUmNkQ2h3WVhSMFpYSnVJRDBnYm1WM0lGSmxaMFY0Y0NnZ1hDSW9YbnhjSWlBcklIZG9hWFJsYzNCaFkyVWdLeUJjSWlsY0lpQXJJR05zWVhOelRtRnRaU0FySUZ3aUtGd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lmQ1FwWENJZ0tTa2dKaVpjYmx4MFhIUmNkRngwWTJ4aGMzTkRZV05vWlNnZ1kyeGhjM05PWVcxbExDQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdjR0YwZEdWeWJpNTBaWE4wS0NCMGVYQmxiMllnWld4bGJTNWpiR0Z6YzA1aGJXVWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWWdaV3hsYlM1amJHRnpjMDVoYldVZ2ZId2dkSGx3Wlc5bUlHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbElDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlDWW1JR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxLRndpWTJ4aGMzTmNJaWtnZkh3Z1hDSmNJaUFwTzF4dVhIUmNkRngwWEhSOUtUdGNibHgwWEhSOUxGeHVYRzVjZEZ4MFhDSkJWRlJTWENJNklHWjFibU4wYVc5dUtDQnVZVzFsTENCdmNHVnlZWFJ2Y2l3Z1kyaGxZMnNnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnlaWE4xYkhRZ1BTQlRhWHA2YkdVdVlYUjBjaWdnWld4bGJTd2dibUZ0WlNBcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNnZ2NtVnpkV3gwSUQwOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlHOXdaWEpoZEc5eUlEMDlQU0JjSWlFOVhDSTdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwYVdZZ0tDQWhiM0JsY21GMGIzSWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSeWRXVTdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSeVpYTjFiSFFnS3owZ1hDSmNJanRjYmx4dVhIUmNkRngwWEhSeVpYUjFjbTRnYjNCbGNtRjBiM0lnUFQwOUlGd2lQVndpSUQ4Z2NtVnpkV3gwSUQwOVBTQmphR1ZqYXlBNlhHNWNkRngwWEhSY2RGeDBiM0JsY21GMGIzSWdQVDA5SUZ3aUlUMWNJaUEvSUhKbGMzVnNkQ0FoUFQwZ1kyaGxZMnNnT2x4dVhIUmNkRngwWEhSY2RHOXdaWEpoZEc5eUlEMDlQU0JjSWw0OVhDSWdQeUJqYUdWamF5QW1KaUJ5WlhOMWJIUXVhVzVrWlhoUFppZ2dZMmhsWTJzZ0tTQTlQVDBnTUNBNlhHNWNkRngwWEhSY2RGeDBiM0JsY21GMGIzSWdQVDA5SUZ3aUtqMWNJaUEvSUdOb1pXTnJJQ1ltSUhKbGMzVnNkQzVwYm1SbGVFOW1LQ0JqYUdWamF5QXBJRDRnTFRFZ09seHVYSFJjZEZ4MFhIUmNkRzl3WlhKaGRHOXlJRDA5UFNCY0lpUTlYQ0lnUHlCamFHVmpheUFtSmlCeVpYTjFiSFF1YzJ4cFkyVW9JQzFqYUdWamF5NXNaVzVuZEdnZ0tTQTlQVDBnWTJobFkyc2dPbHh1WEhSY2RGeDBYSFJjZEc5d1pYSmhkRzl5SUQwOVBTQmNJbjQ5WENJZ1B5QW9JRndpSUZ3aUlDc2djbVZ6ZFd4MExuSmxjR3hoWTJVb0lISjNhR2wwWlhOd1lXTmxMQ0JjSWlCY0lpQXBJQ3NnWENJZ1hDSWdLUzVwYm1SbGVFOW1LQ0JqYUdWamF5QXBJRDRnTFRFZ09seHVYSFJjZEZ4MFhIUmNkRzl3WlhKaGRHOXlJRDA5UFNCY0ludzlYQ0lnUHlCeVpYTjFiSFFnUFQwOUlHTm9aV05ySUh4OElISmxjM1ZzZEM1emJHbGpaU2dnTUN3Z1kyaGxZMnN1YkdWdVozUm9JQ3NnTVNBcElEMDlQU0JqYUdWamF5QXJJRndpTFZ3aUlEcGNibHgwWEhSY2RGeDBYSFJtWVd4elpUdGNibHgwWEhSY2RIMDdYRzVjZEZ4MGZTeGNibHh1WEhSY2RGd2lRMGhKVEVSY0lqb2dablZ1WTNScGIyNG9JSFI1Y0dVc0lIZG9ZWFFzSUdGeVozVnRaVzUwTENCbWFYSnpkQ3dnYkdGemRDQXBJSHRjYmx4MFhIUmNkSFpoY2lCemFXMXdiR1VnUFNCMGVYQmxMbk5zYVdObEtDQXdMQ0F6SUNrZ0lUMDlJRndpYm5Sb1hDSXNYRzVjZEZ4MFhIUmNkR1p2Y25kaGNtUWdQU0IwZVhCbExuTnNhV05sS0NBdE5DQXBJQ0U5UFNCY0lteGhjM1JjSWl4Y2JseDBYSFJjZEZ4MGIyWlVlWEJsSUQwZ2QyaGhkQ0E5UFQwZ1hDSnZaaTEwZVhCbFhDSTdYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQm1hWEp6ZENBOVBUMGdNU0FtSmlCc1lYTjBJRDA5UFNBd0lEOWNibHh1WEhSY2RGeDBYSFF2THlCVGFHOXlkR04xZENCbWIzSWdPbTUwYUMwcUtHNHBYRzVjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUFoSVdWc1pXMHVjR0Z5Wlc1MFRtOWtaVHRjYmx4MFhIUmNkRngwZlNBNlhHNWNibHgwWEhSY2RGeDBablZ1WTNScGIyNG9JR1ZzWlcwc0lHTnZiblJsZUhRc0lIaHRiQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnWTJGamFHVXNJSFZ1YVhGMVpVTmhZMmhsTENCdmRYUmxja05oWTJobExDQnViMlJsTENCdWIyUmxTVzVrWlhnc0lITjBZWEowTEZ4dVhIUmNkRngwWEhSY2RGeDBaR2x5SUQwZ2MybHRjR3hsSUNFOVBTQm1iM0ozWVhKa0lEOGdYQ0p1WlhoMFUybGliR2x1WjF3aUlEb2dYQ0p3Y21WMmFXOTFjMU5wWW14cGJtZGNJaXhjYmx4MFhIUmNkRngwWEhSY2RIQmhjbVZ1ZENBOUlHVnNaVzB1Y0dGeVpXNTBUbTlrWlN4Y2JseDBYSFJjZEZ4MFhIUmNkRzVoYldVZ1BTQnZabFI1Y0dVZ0ppWWdaV3hsYlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BMRnh1WEhSY2RGeDBYSFJjZEZ4MGRYTmxRMkZqYUdVZ1BTQWhlRzFzSUNZbUlDRnZabFI1Y0dVc1hHNWNkRngwWEhSY2RGeDBYSFJrYVdabUlEMGdabUZzYzJVN1hHNWNibHgwWEhSY2RGeDBYSFJwWmlBb0lIQmhjbVZ1ZENBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdPaWhtYVhKemRIeHNZWE4wZkc5dWJIa3BMU2hqYUdsc1pIeHZaaTEwZVhCbEtWeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQnphVzF3YkdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RIZG9hV3hsSUNnZ1pHbHlJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEc1dlpHVWdQU0JsYkdWdE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIZG9hV3hsSUNnZ0tHNXZaR1VnUFNCdWIyUmxXeUJrYVhJZ1hTa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JRzltVkhsd1pTQS9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEc1dlpHVXVibTlrWlU1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdibUZ0WlNBNlhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzV2WkdVdWJtOWtaVlI1Y0dVZ1BUMDlJREVnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCU1pYWmxjbk5sSUdScGNtVmpkR2x2YmlCbWIzSWdPbTl1YkhrdEtpQW9hV1lnZDJVZ2FHRjJaVzRuZENCNVpYUWdaRzl1WlNCemJ5bGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnpkR0Z5ZENBOUlHUnBjaUE5SUhSNWNHVWdQVDA5SUZ3aWIyNXNlVndpSUNZbUlDRnpkR0Z5ZENBbUppQmNJbTVsZUhSVGFXSnNhVzVuWENJN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUmNkSE4wWVhKMElEMGdXeUJtYjNKM1lYSmtJRDhnY0dGeVpXNTBMbVpwY25OMFEyaHBiR1FnT2lCd1lYSmxiblF1YkdGemRFTm9hV3hrSUYwN1hHNWNibHgwWEhSY2RGeDBYSFJjZEM4dklHNXZiaTE0Yld3Z09tNTBhQzFqYUdsc1pDZ3VMaTRwSUhOMGIzSmxjeUJqWVdOb1pTQmtZWFJoSUc5dUlHQndZWEpsYm5SZ1hHNWNkRngwWEhSY2RGeDBYSFJwWmlBb0lHWnZjbmRoY21RZ0ppWWdkWE5sUTJGamFHVWdLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1UyVmxheUJnWld4bGJXQWdabkp2YlNCaElIQnlaWFpwYjNWemJIa3RZMkZqYUdWa0lHbHVaR1Y0WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z0xpNHVhVzRnWVNCbmVtbHdMV1p5YVdWdVpHeDVJSGRoZVZ4dVhIUmNkRngwWEhSY2RGeDBYSFJ1YjJSbElEMGdjR0Z5Wlc1ME8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSdmRYUmxja05oWTJobElEMGdibTlrWlZzZ1pYaHdZVzVrYnlCZElIeDhJQ2h1YjJSbFd5QmxlSEJoYm1SdklGMGdQU0I3ZlNrN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUERrZ2IyNXNlVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJFWldabGJtUWdZV2RoYVc1emRDQmpiRzl1WldRZ1lYUjBjbTl3WlhKMGFXVnpJQ2hxVVhWbGNua2daMmd0TVRjd09TbGNibHgwWEhSY2RGeDBYSFJjZEZ4MGRXNXBjWFZsUTJGamFHVWdQU0J2ZFhSbGNrTmhZMmhsV3lCdWIyUmxMblZ1YVhGMVpVbEVJRjBnZkh4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRb2IzVjBaWEpEWVdOb1pWc2dibTlrWlM1MWJtbHhkV1ZKUkNCZElEMGdlMzBwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEdOaFkyaGxJRDBnZFc1cGNYVmxRMkZqYUdWYklIUjVjR1VnWFNCOGZDQmJYVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBibTlrWlVsdVpHVjRJRDBnWTJGamFHVmJJREFnWFNBOVBUMGdaR2x5Y25WdWN5QW1KaUJqWVdOb1pWc2dNU0JkTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJrYVdabUlEMGdibTlrWlVsdVpHVjRJQ1ltSUdOaFkyaGxXeUF5SUYwN1hHNWNkRngwWEhSY2RGeDBYSFJjZEc1dlpHVWdQU0J1YjJSbFNXNWtaWGdnSmlZZ2NHRnlaVzUwTG1Ob2FXeGtUbTlrWlhOYklHNXZaR1ZKYm1SbGVDQmRPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLRzV2WkdVZ1BTQXJLMjV2WkdWSmJtUmxlQ0FtSmlCdWIyUmxJQ1ltSUc1dlpHVmJJR1JwY2lCZElIeDhYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCR1lXeHNZbUZqYXlCMGJ5QnpaV1ZyYVc1bklHQmxiR1Z0WUNCbWNtOXRJSFJvWlNCemRHRnlkRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkQ2hrYVdabUlEMGdibTlrWlVsdVpHVjRJRDBnTUNrZ2ZId2djM1JoY25RdWNHOXdLQ2twSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVjJobGJpQm1iM1Z1WkN3Z1kyRmphR1VnYVc1a1pYaGxjeUJ2YmlCZ2NHRnlaVzUwWUNCaGJtUWdZbkpsWVd0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JRzV2WkdVdWJtOWtaVlI1Y0dVZ1BUMDlJREVnSmlZZ0t5dGthV1ptSUNZbUlHNXZaR1VnUFQwOUlHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjFibWx4ZFdWRFlXTm9aVnNnZEhsd1pTQmRJRDBnV3lCa2FYSnlkVzV6TENCdWIyUmxTVzVrWlhnc0lHUnBabVlnWFR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJWYzJVZ2NISmxkbWx2ZFhOc2VTMWpZV05vWldRZ1pXeGxiV1Z1ZENCcGJtUmxlQ0JwWmlCaGRtRnBiR0ZpYkdWY2JseDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQjFjMlZEWVdOb1pTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlBdUxpNXBiaUJoSUdkNmFYQXRabkpwWlc1a2JIa2dkMkY1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYm05a1pTQTlJR1ZzWlcwN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGIzVjBaWEpEWVdOb1pTQTlJRzV2WkdWYklHVjRjR0Z1Wkc4Z1hTQjhmQ0FvYm05a1pWc2daWGh3WVc1a2J5QmRJRDBnZTMwcE8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nU1VVZ1BEa2diMjVzZVZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklFUmxabVZ1WkNCaFoyRnBibk4wSUdOc2IyNWxaQ0JoZEhSeWIzQmxjblJwWlhNZ0tHcFJkV1Z5ZVNCbmFDMHhOekE1S1Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhWdWFYRjFaVU5oWTJobElEMGdiM1YwWlhKRFlXTm9aVnNnYm05a1pTNTFibWx4ZFdWSlJDQmRJSHg4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRb2IzVjBaWEpEWVdOb1pWc2dibTlrWlM1MWJtbHhkV1ZKUkNCZElEMGdlMzBwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyRmphR1VnUFNCMWJtbHhkV1ZEWVdOb1pWc2dkSGx3WlNCZElIeDhJRnRkTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEc1dlpHVkpibVJsZUNBOUlHTmhZMmhsV3lBd0lGMGdQVDA5SUdScGNuSjFibk1nSmlZZ1kyRmphR1ZiSURFZ1hUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmthV1ptSUQwZ2JtOWtaVWx1WkdWNE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdlRzFzSURwdWRHZ3RZMmhwYkdRb0xpNHVLVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJ2Y2lBNmJuUm9MV3hoYzNRdFkyaHBiR1FvTGk0dUtTQnZjaUE2Ym5Sb0tDMXNZWE4wS1Q4dGIyWXRkSGx3WlNndUxpNHBYRzVjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWkdsbVppQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1ZYTmxJSFJvWlNCellXMWxJR3h2YjNBZ1lYTWdZV0p2ZG1VZ2RHOGdjMlZsYXlCZ1pXeGxiV0FnWm5KdmJTQjBhR1VnYzNSaGNuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjNhR2xzWlNBb0lDaHViMlJsSUQwZ0t5dHViMlJsU1c1a1pYZ2dKaVlnYm05a1pTQW1KaUJ1YjJSbFd5QmthWElnWFNCOGZGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBLR1JwWm1ZZ1BTQnViMlJsU1c1a1pYZ2dQU0F3S1NCOGZDQnpkR0Z5ZEM1d2IzQW9LU2tnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ0tDQnZabFI1Y0dVZ1AxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ1YjJSbExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlHNWhiV1VnT2x4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnViMlJsTG01dlpHVlVlWEJsSUQwOVBTQXhJQ2tnSmlaY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBLeXRrYVdabUlDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRU5oWTJobElIUm9aU0JwYm1SbGVDQnZaaUJsWVdOb0lHVnVZMjkxYm5SbGNtVmtJR1ZzWlcxbGJuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQjFjMlZEWVdOb1pTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnZkWFJsY2tOaFkyaGxJRDBnYm05a1pWc2daWGh3WVc1a2J5QmRJSHg4SUNodWIyUmxXeUJsZUhCaGJtUnZJRjBnUFNCN2ZTazdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOE9TQnZibXg1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnUkdWbVpXNWtJR0ZuWVdsdWMzUWdZMnh2Ym1Wa0lHRjBkSEp2Y0dWeWRHbGxjeUFvYWxGMVpYSjVJR2RvTFRFM01Ea3BYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRXNXBjWFZsUTJGamFHVWdQU0J2ZFhSbGNrTmhZMmhsV3lCdWIyUmxMblZ1YVhGMVpVbEVJRjBnZkh4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZENodmRYUmxja05oWTJobFd5QnViMlJsTG5WdWFYRjFaVWxFSUYwZ1BTQjdmU2s3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFIxYm1seGRXVkRZV05vWlZzZ2RIbHdaU0JkSUQwZ1d5QmthWEp5ZFc1ekxDQmthV1ptSUYwN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUc1dlpHVWdQVDA5SUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnU1c1amIzSndiM0poZEdVZ2RHaGxJRzltWm5ObGRDd2dkR2hsYmlCamFHVmpheUJoWjJGcGJuTjBJR041WTJ4bElITnBlbVZjYmx4MFhIUmNkRngwWEhSY2RHUnBabVlnTFQwZ2JHRnpkRHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCa2FXWm1JRDA5UFNCbWFYSnpkQ0I4ZkNBb0lHUnBabVlnSlNCbWFYSnpkQ0E5UFQwZ01DQW1KaUJrYVdabUlDOGdabWx5YzNRZ1BqMGdNQ0FwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBYQ0pRVTBWVlJFOWNJam9nWm5WdVkzUnBiMjRvSUhCelpYVmtieXdnWVhKbmRXMWxiblFnS1NCN1hHNWNkRngwWEhRdkx5QndjMlYxWkc4dFkyeGhjM01nYm1GdFpYTWdZWEpsSUdOaGMyVXRhVzV6Wlc1emFYUnBkbVZjYmx4MFhIUmNkQzh2SUdoMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0wzTmxiR1ZqZEc5eWN5OGpjSE5sZFdSdkxXTnNZWE56WlhOY2JseDBYSFJjZEM4dklGQnlhVzl5YVhScGVtVWdZbmtnWTJGelpTQnpaVzV6YVhScGRtbDBlU0JwYmlCallYTmxJR04xYzNSdmJTQndjMlYxWkc5eklHRnlaU0JoWkdSbFpDQjNhWFJvSUhWd2NHVnlZMkZ6WlNCc1pYUjBaWEp6WEc1Y2RGeDBYSFF2THlCU1pXMWxiV0psY2lCMGFHRjBJSE5sZEVacGJIUmxjbk1nYVc1b1pYSnBkSE1nWm5KdmJTQndjMlYxWkc5elhHNWNkRngwWEhSMllYSWdZWEpuY3l4Y2JseDBYSFJjZEZ4MFptNGdQU0JGZUhCeUxuQnpaWFZrYjNOYklIQnpaWFZrYnlCZElIeDhJRVY0Y0hJdWMyVjBSbWxzZEdWeWMxc2djSE5sZFdSdkxuUnZURzkzWlhKRFlYTmxLQ2tnWFNCOGZGeHVYSFJjZEZ4MFhIUmNkRk5wZW5wc1pTNWxjbkp2Y2lnZ1hDSjFibk4xY0hCdmNuUmxaQ0J3YzJWMVpHODZJRndpSUNzZ2NITmxkV1J2SUNrN1hHNWNibHgwWEhSY2RDOHZJRlJvWlNCMWMyVnlJRzFoZVNCMWMyVWdZM0psWVhSbFVITmxkV1J2SUhSdklHbHVaR2xqWVhSbElIUm9ZWFJjYmx4MFhIUmNkQzh2SUdGeVozVnRaVzUwY3lCaGNtVWdibVZsWkdWa0lIUnZJR055WldGMFpTQjBhR1VnWm1sc2RHVnlJR1oxYm1OMGFXOXVYRzVjZEZ4MFhIUXZMeUJxZFhOMElHRnpJRk5wZW5wc1pTQmtiMlZ6WEc1Y2RGeDBYSFJwWmlBb0lHWnVXeUJsZUhCaGJtUnZJRjBnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCbWJpZ2dZWEpuZFcxbGJuUWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1FuVjBJRzFoYVc1MFlXbHVJSE4xY0hCdmNuUWdabTl5SUc5c1pDQnphV2R1WVhSMWNtVnpYRzVjZEZ4MFhIUnBaaUFvSUdadUxteGxibWQwYUNBK0lERWdLU0I3WEc1Y2RGeDBYSFJjZEdGeVozTWdQU0JiSUhCelpYVmtieXdnY0hObGRXUnZMQ0JjSWx3aUxDQmhjbWQxYldWdWRDQmRPMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdSWGh3Y2k1elpYUkdhV3gwWlhKekxtaGhjMDkzYmxCeWIzQmxjblI1S0NCd2MyVjFaRzh1ZEc5TWIzZGxja05oYzJVb0tTQXBJRDljYmx4MFhIUmNkRngwWEhSdFlYSnJSblZ1WTNScGIyNG9ablZ1WTNScGIyNG9JSE5sWldRc0lHMWhkR05vWlhNZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSMllYSWdhV1I0TEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJ0WVhSamFHVmtJRDBnWm00b0lITmxaV1FzSUdGeVozVnRaVzUwSUNrc1hHNWNkRngwWEhSY2RGeDBYSFJjZEdrZ1BTQnRZWFJqYUdWa0xteGxibWQwYUR0Y2JseDBYSFJjZEZ4MFhIUmNkSGRvYVd4bElDZ2dhUzB0SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhScFpIZ2dQU0JwYm1SbGVFOW1LQ0J6WldWa0xDQnRZWFJqYUdWa1cybGRJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSE5sWldSYklHbGtlQ0JkSUQwZ0lTZ2diV0YwWTJobGMxc2dhV1I0SUYwZ1BTQnRZWFJqYUdWa1cybGRJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlNrZ09seHVYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdadUtDQmxiR1Z0TENBd0xDQmhjbWR6SUNrN1hHNWNkRngwWEhSY2RGeDBmVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJR1p1TzF4dVhIUmNkSDFjYmx4MGZTeGNibHh1WEhSd2MyVjFaRzl6T2lCN1hHNWNkRngwTHk4Z1VHOTBaVzUwYVdGc2JIa2dZMjl0Y0d4bGVDQndjMlYxWkc5elhHNWNkRngwWENKdWIzUmNJam9nYldGeWEwWjFibU4wYVc5dUtHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUmNkQzh2SUZSeWFXMGdkR2hsSUhObGJHVmpkRzl5SUhCaGMzTmxaQ0IwYnlCamIyMXdhV3hsWEc1Y2RGeDBYSFF2THlCMGJ5QmhkbTlwWkNCMGNtVmhkR2x1WnlCc1pXRmthVzVuSUdGdVpDQjBjbUZwYkdsdVoxeHVYSFJjZEZ4MEx5OGdjM0JoWTJWeklHRnpJR052YldKcGJtRjBiM0p6WEc1Y2RGeDBYSFIyWVhJZ2FXNXdkWFFnUFNCYlhTeGNibHgwWEhSY2RGeDBjbVZ6ZFd4MGN5QTlJRnRkTEZ4dVhIUmNkRngwWEhSdFlYUmphR1Z5SUQwZ1kyOXRjR2xzWlNnZ2MyVnNaV04wYjNJdWNtVndiR0ZqWlNnZ2NuUnlhVzBzSUZ3aUpERmNJaUFwSUNrN1hHNWNibHgwWEhSY2RISmxkSFZ5YmlCdFlYUmphR1Z5V3lCbGVIQmhibVJ2SUYwZ1AxeHVYSFJjZEZ4MFhIUnRZWEpyUm5WdVkzUnBiMjRvWm5WdVkzUnBiMjRvSUhObFpXUXNJRzFoZEdOb1pYTXNJR052Ym5SbGVIUXNJSGh0YkNBcElIdGNibHgwWEhSY2RGeDBYSFIyWVhJZ1pXeGxiU3hjYmx4MFhIUmNkRngwWEhSY2RIVnViV0YwWTJobFpDQTlJRzFoZEdOb1pYSW9JSE5sWldRc0lHNTFiR3dzSUhodGJDd2dXMTBnS1N4Y2JseDBYSFJjZEZ4MFhIUmNkR2tnUFNCelpXVmtMbXhsYm1kMGFEdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFMWhkR05vSUdWc1pXMWxiblJ6SUhWdWJXRjBZMmhsWkNCaWVTQmdiV0YwWTJobGNtQmNibHgwWEhSY2RGeDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dLR1ZzWlcwZ1BTQjFibTFoZEdOb1pXUmJhVjBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSelpXVmtXMmxkSUQwZ0lTaHRZWFJqYUdWelcybGRJRDBnWld4bGJTazdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5S1NBNlhHNWNkRngwWEhSY2RHWjFibU4wYVc5dUtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXNXdkWFJiTUYwZ1BTQmxiR1Z0TzF4dVhIUmNkRngwWEhSY2RHMWhkR05vWlhJb0lHbHVjSFYwTENCdWRXeHNMQ0I0Yld3c0lISmxjM1ZzZEhNZ0tUdGNibHgwWEhSY2RGeDBYSFF2THlCRWIyNG5kQ0JyWldWd0lIUm9aU0JsYkdWdFpXNTBJQ2hwYzNOMVpTQWpNams1S1Z4dVhIUmNkRngwWEhSY2RHbHVjSFYwV3pCZElEMGdiblZzYkR0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z0lYSmxjM1ZzZEhNdWNHOXdLQ2s3WEc1Y2RGeDBYSFJjZEgwN1hHNWNkRngwZlNrc1hHNWNibHgwWEhSY0ltaGhjMXdpT2lCdFlYSnJSblZ1WTNScGIyNG9ablZ1WTNScGIyNG9JSE5sYkdWamRHOXlJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdVMmw2ZW14bEtDQnpaV3hsWTNSdmNpd2daV3hsYlNBcExteGxibWQwYUNBK0lEQTdYRzVjZEZ4MFhIUjlPMXh1WEhSY2RIMHBMRnh1WEc1Y2RGeDBYQ0pqYjI1MFlXbHVjMXdpT2lCdFlYSnJSblZ1WTNScGIyNG9ablZ1WTNScGIyNG9JSFJsZUhRZ0tTQjdYRzVjZEZ4MFhIUjBaWGgwSUQwZ2RHVjRkQzV5WlhCc1lXTmxLQ0J5ZFc1bGMyTmhjR1VzSUdaMWJtVnpZMkZ3WlNBcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnS0NCbGJHVnRMblJsZUhSRGIyNTBaVzUwSUh4OElHVnNaVzB1YVc1dVpYSlVaWGgwSUh4OElHZGxkRlJsZUhRb0lHVnNaVzBnS1NBcExtbHVaR1Y0VDJZb0lIUmxlSFFnS1NBK0lDMHhPMXh1WEhSY2RGeDBmVHRjYmx4MFhIUjlLU3hjYmx4dVhIUmNkQzh2SUZ3aVYyaGxkR2hsY2lCaGJpQmxiR1Z0Wlc1MElHbHpJSEpsY0hKbGMyVnVkR1ZrSUdKNUlHRWdPbXhoYm1jb0tTQnpaV3hsWTNSdmNseHVYSFJjZEM4dklHbHpJR0poYzJWa0lITnZiR1ZzZVNCdmJpQjBhR1VnWld4bGJXVnVkQ2R6SUd4aGJtZDFZV2RsSUhaaGJIVmxYRzVjZEZ4MEx5OGdZbVZwYm1jZ1pYRjFZV3dnZEc4Z2RHaGxJR2xrWlc1MGFXWnBaWElnUXl4Y2JseDBYSFF2THlCdmNpQmlaV2RwYm01cGJtY2dkMmwwYUNCMGFHVWdhV1JsYm5ScFptbGxjaUJESUdsdGJXVmthV0YwWld4NUlHWnZiR3h2ZDJWa0lHSjVJRndpTFZ3aUxseHVYSFJjZEM4dklGUm9aU0J0WVhSamFHbHVaeUJ2WmlCRElHRm5ZV2x1YzNRZ2RHaGxJR1ZzWlcxbGJuUW5jeUJzWVc1bmRXRm5aU0IyWVd4MVpTQnBjeUJ3WlhKbWIzSnRaV1FnWTJGelpTMXBibk5sYm5OcGRHbDJaV3g1TGx4dVhIUmNkQzh2SUZSb1pTQnBaR1Z1ZEdsbWFXVnlJRU1nWkc5bGN5QnViM1FnYUdGMlpTQjBieUJpWlNCaElIWmhiR2xrSUd4aGJtZDFZV2RsSUc1aGJXVXVYQ0pjYmx4MFhIUXZMeUJvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5elpXeGxZM1J2Y25NdkkyeGhibWN0Y0hObGRXUnZYRzVjZEZ4MFhDSnNZVzVuWENJNklHMWhjbXRHZFc1amRHbHZiaWdnWm5WdVkzUnBiMjRvSUd4aGJtY2dLU0I3WEc1Y2RGeDBYSFF2THlCc1lXNW5JSFpoYkhWbElHMTFjM1FnWW1VZ1lTQjJZV3hwWkNCcFpHVnVkR2xtYVdWeVhHNWNkRngwWEhScFppQW9JQ0Z5YVdSbGJuUnBabWxsY2k1MFpYTjBLR3hoYm1jZ2ZId2dYQ0pjSWlrZ0tTQjdYRzVjZEZ4MFhIUmNkRk5wZW5wc1pTNWxjbkp2Y2lnZ1hDSjFibk4xY0hCdmNuUmxaQ0JzWVc1bk9pQmNJaUFySUd4aGJtY2dLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR3hoYm1jZ1BTQnNZVzVuTG5KbGNHeGhZMlVvSUhKMWJtVnpZMkZ3WlN3Z1puVnVaWE5qWVhCbElDa3VkRzlNYjNkbGNrTmhjMlVvS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkRngwZG1GeUlHVnNaVzFNWVc1bk8xeHVYSFJjZEZ4MFhIUmtieUI3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0FvWld4bGJVeGhibWNnUFNCa2IyTjFiV1Z1ZEVselNGUk5UQ0EvWEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0TG14aGJtY2dPbHh1WEhSY2RGeDBYSFJjZEZ4MFpXeGxiUzVuWlhSQmRIUnlhV0oxZEdVb1hDSjRiV3c2YkdGdVoxd2lLU0I4ZkNCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNoY0lteGhibWRjSWlrcElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0VEdGdVp5QTlJR1ZzWlcxTVlXNW5MblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlV4aGJtY2dQVDA5SUd4aGJtY2dmSHdnWld4bGJVeGhibWN1YVc1a1pYaFBaaWdnYkdGdVp5QXJJRndpTFZ3aUlDa2dQVDA5SURBN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5SUhkb2FXeGxJQ2dnS0dWc1pXMGdQU0JsYkdWdExuQmhjbVZ1ZEU1dlpHVXBJQ1ltSUdWc1pXMHVibTlrWlZSNWNHVWdQVDA5SURFZ0tUdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkRngwZlR0Y2JseDBYSFI5S1N4Y2JseHVYSFJjZEM4dklFMXBjMk5sYkd4aGJtVnZkWE5jYmx4MFhIUmNJblJoY21kbGRGd2lPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSFpoY2lCb1lYTm9JRDBnZDJsdVpHOTNMbXh2WTJGMGFXOXVJQ1ltSUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvWVhOb08xeHVYSFJjZEZ4MGNtVjBkWEp1SUdoaGMyZ2dKaVlnYUdGemFDNXpiR2xqWlNnZ01TQXBJRDA5UFNCbGJHVnRMbWxrTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJjSW5KdmIzUmNJam9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlNBOVBUMGdaRzlqUld4bGJUdGNibHgwWEhSOUxGeHVYRzVjZEZ4MFhDSm1iMk4xYzF3aU9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRJRDA5UFNCa2IyTjFiV1Z1ZEM1aFkzUnBkbVZGYkdWdFpXNTBJQ1ltSUNnaFpHOWpkVzFsYm5RdWFHRnpSbTlqZFhNZ2ZId2daRzlqZFcxbGJuUXVhR0Z6Um05amRYTW9LU2tnSmlZZ0lTRW9aV3hsYlM1MGVYQmxJSHg4SUdWc1pXMHVhSEpsWmlCOGZDQitaV3hsYlM1MFlXSkpibVJsZUNrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEM4dklFSnZiMnhsWVc0Z2NISnZjR1Z5ZEdsbGMxeHVYSFJjZEZ3aVpXNWhZbXhsWkZ3aU9pQmpjbVZoZEdWRWFYTmhZbXhsWkZCelpYVmtieWdnWm1Gc2MyVWdLU3hjYmx4MFhIUmNJbVJwYzJGaWJHVmtYQ0k2SUdOeVpXRjBaVVJwYzJGaWJHVmtVSE5sZFdSdktDQjBjblZsSUNrc1hHNWNibHgwWEhSY0ltTm9aV05yWldSY0lqb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUXZMeUJKYmlCRFUxTXpMQ0E2WTJobFkydGxaQ0J6YUc5MWJHUWdjbVYwZFhKdUlHSnZkR2dnWTJobFkydGxaQ0JoYm1RZ2MyVnNaV04wWldRZ1pXeGxiV1Z1ZEhOY2JseDBYSFJjZEM4dklHaDBkSEE2THk5M2QzY3Vkek11YjNKbkwxUlNMekl3TVRFdlVrVkRMV056Y3pNdGMyVnNaV04wYjNKekxUSXdNVEV3T1RJNUx5TmphR1ZqYTJWa1hHNWNkRngwWEhSMllYSWdibTlrWlU1aGJXVWdQU0JsYkdWdExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdLRzV2WkdWT1lXMWxJRDA5UFNCY0ltbHVjSFYwWENJZ0ppWWdJU0ZsYkdWdExtTm9aV05yWldRcElIeDhJQ2h1YjJSbFRtRnRaU0E5UFQwZ1hDSnZjSFJwYjI1Y0lpQW1KaUFoSVdWc1pXMHVjMlZzWldOMFpXUXBPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUmNJbk5sYkdWamRHVmtYQ0k2SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwTHk4Z1FXTmpaWE56YVc1bklIUm9hWE1nY0hKdmNHVnlkSGtnYldGclpYTWdjMlZzWldOMFpXUXRZbmt0WkdWbVlYVnNkRnh1WEhSY2RGeDBMeThnYjNCMGFXOXVjeUJwYmlCVFlXWmhjbWtnZDI5eWF5QndjbTl3WlhKc2VWeHVYSFJjZEZ4MGFXWWdLQ0JsYkdWdExuQmhjbVZ1ZEU1dlpHVWdLU0I3WEc1Y2RGeDBYSFJjZEdWc1pXMHVjR0Z5Wlc1MFRtOWtaUzV6Wld4bFkzUmxaRWx1WkdWNE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1pXeGxiUzV6Wld4bFkzUmxaQ0E5UFQwZ2RISjFaVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnUTI5dWRHVnVkSE5jYmx4MFhIUmNJbVZ0Y0hSNVhDSTZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBMeThnYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdmMyVnNaV04wYjNKekx5TmxiWEIwZVMxd2MyVjFaRzljYmx4MFhIUmNkQzh2SURwbGJYQjBlU0JwY3lCdVpXZGhkR1ZrSUdKNUlHVnNaVzFsYm5RZ0tERXBJRzl5SUdOdmJuUmxiblFnYm05a1pYTWdLSFJsZUhRNklETTdJR05rWVhSaE9pQTBPeUJsYm5ScGRIa2djbVZtT2lBMUtTeGNibHgwWEhSY2RDOHZJQ0FnWW5WMElHNXZkQ0JpZVNCdmRHaGxjbk1nS0dOdmJXMWxiblE2SURnN0lIQnliMk5sYzNOcGJtY2dhVzV6ZEhKMVkzUnBiMjQ2SURjN0lHVjBZeTRwWEc1Y2RGeDBYSFF2THlCdWIyUmxWSGx3WlNBOElEWWdkMjl5YTNNZ1ltVmpZWFZ6WlNCaGRIUnlhV0oxZEdWeklDZ3lLU0JrYnlCdWIzUWdZWEJ3WldGeUlHRnpJR05vYVd4a2NtVnVYRzVjZEZ4MFhIUm1iM0lnS0NCbGJHVnRJRDBnWld4bGJTNW1hWEp6ZEVOb2FXeGtPeUJsYkdWdE95QmxiR1Z0SUQwZ1pXeGxiUzV1WlhoMFUybGliR2x1WnlBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NCbGJHVnRMbTV2WkdWVWVYQmxJRHdnTmlBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUmNJbkJoY21WdWRGd2lPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQWhSWGh3Y2k1d2MyVjFaRzl6VzF3aVpXMXdkSGxjSWwwb0lHVnNaVzBnS1R0Y2JseDBYSFI5TEZ4dVhHNWNkRngwTHk4Z1JXeGxiV1Z1ZEM5cGJuQjFkQ0IwZVhCbGMxeHVYSFJjZEZ3aWFHVmhaR1Z5WENJNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhKb1pXRmtaWEl1ZEdWemRDZ2daV3hsYlM1dWIyUmxUbUZ0WlNBcE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSY0ltbHVjSFYwWENJNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhKcGJuQjFkSE11ZEdWemRDZ2daV3hsYlM1dWIyUmxUbUZ0WlNBcE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSY0ltSjFkSFJ2Ymx3aU9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RIWmhjaUJ1WVcxbElEMGdaV3hsYlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1WEhSY2RGeDBjbVYwZFhKdUlHNWhiV1VnUFQwOUlGd2lhVzV3ZFhSY0lpQW1KaUJsYkdWdExuUjVjR1VnUFQwOUlGd2lZblYwZEc5dVhDSWdmSHdnYm1GdFpTQTlQVDBnWENKaWRYUjBiMjVjSWp0Y2JseDBYSFI5TEZ4dVhHNWNkRngwWENKMFpYaDBYQ0k2SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwZG1GeUlHRjBkSEk3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNCY0ltbHVjSFYwWENJZ0ppWmNibHgwWEhSY2RGeDBaV3hsYlM1MGVYQmxJRDA5UFNCY0luUmxlSFJjSWlBbUpseHVYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRlBEaGNibHgwWEhSY2RGeDBMeThnVG1WM0lFaFVUVXcxSUdGMGRISnBZblYwWlNCMllXeDFaWE1nS0dVdVp5NHNJRndpYzJWaGNtTm9YQ0lwSUdGd2NHVmhjaUIzYVhSb0lHVnNaVzB1ZEhsd1pTQTlQVDBnWENKMFpYaDBYQ0pjYmx4MFhIUmNkRngwS0NBb1lYUjBjaUE5SUdWc1pXMHVaMlYwUVhSMGNtbGlkWFJsS0Z3aWRIbHdaVndpS1NrZ1BUMGdiblZzYkNCOGZDQmhkSFJ5TG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUZ3aWRHVjRkRndpSUNrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEM4dklGQnZjMmwwYVc5dUxXbHVMV052Ykd4bFkzUnBiMjVjYmx4MFhIUmNJbVpwY25OMFhDSTZJR055WldGMFpWQnZjMmwwYVc5dVlXeFFjMlYxWkc4b1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1d5QXdJRjA3WEc1Y2RGeDBmU2tzWEc1Y2JseDBYSFJjSW14aGMzUmNJam9nWTNKbFlYUmxVRzl6YVhScGIyNWhiRkJ6WlhWa2J5aG1kVzVqZEdsdmJpZ2diV0YwWTJoSmJtUmxlR1Z6TENCc1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnV3lCc1pXNW5kR2dnTFNBeElGMDdYRzVjZEZ4MGZTa3NYRzVjYmx4MFhIUmNJbVZ4WENJNklHTnlaV0YwWlZCdmMybDBhVzl1WVd4UWMyVjFaRzhvWm5WdVkzUnBiMjRvSUcxaGRHTm9TVzVrWlhobGN5d2diR1Z1WjNSb0xDQmhjbWQxYldWdWRDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmJJR0Z5WjNWdFpXNTBJRHdnTUNBL0lHRnlaM1Z0Wlc1MElDc2diR1Z1WjNSb0lEb2dZWEpuZFcxbGJuUWdYVHRjYmx4MFhIUjlLU3hjYmx4dVhIUmNkRndpWlhabGJsd2lPaUJqY21WaGRHVlFiM05wZEdsdmJtRnNVSE5sZFdSdktHWjFibU4wYVc5dUtDQnRZWFJqYUVsdVpHVjRaWE1zSUd4bGJtZDBhQ0FwSUh0Y2JseDBYSFJjZEhaaGNpQnBJRDBnTUR0Y2JseDBYSFJjZEdadmNpQW9JRHNnYVNBOElHeGxibWQwYURzZ2FTQXJQU0F5SUNrZ2UxeHVYSFJjZEZ4MFhIUnRZWFJqYUVsdVpHVjRaWE11Y0hWemFDZ2dhU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJRzFoZEdOb1NXNWtaWGhsY3p0Y2JseDBYSFI5S1N4Y2JseHVYSFJjZEZ3aWIyUmtYQ0k2SUdOeVpXRjBaVkJ2YzJsMGFXOXVZV3hRYzJWMVpHOG9ablZ1WTNScGIyNG9JRzFoZEdOb1NXNWtaWGhsY3l3Z2JHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR2tnUFNBeE8xeHVYSFJjZEZ4MFptOXlJQ2dnT3lCcElEd2diR1Z1WjNSb095QnBJQ3M5SURJZ0tTQjdYRzVjZEZ4MFhIUmNkRzFoZEdOb1NXNWtaWGhsY3k1d2RYTm9LQ0JwSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSeVpYUjFjbTRnYldGMFkyaEpibVJsZUdWek8xeHVYSFJjZEgwcExGeHVYRzVjZEZ4MFhDSnNkRndpT2lCamNtVmhkR1ZRYjNOcGRHbHZibUZzVUhObGRXUnZLR1oxYm1OMGFXOXVLQ0J0WVhSamFFbHVaR1Y0WlhNc0lHeGxibWQwYUN3Z1lYSm5kVzFsYm5RZ0tTQjdYRzVjZEZ4MFhIUjJZWElnYVNBOUlHRnlaM1Z0Wlc1MElEd2dNQ0EvSUdGeVozVnRaVzUwSUNzZ2JHVnVaM1JvSURvZ1lYSm5kVzFsYm5RN1hHNWNkRngwWEhSbWIzSWdLQ0E3SUMwdGFTQStQU0F3T3lBcElIdGNibHgwWEhSY2RGeDBiV0YwWTJoSmJtUmxlR1Z6TG5CMWMyZ29JR2tnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEhKbGRIVnliaUJ0WVhSamFFbHVaR1Y0WlhNN1hHNWNkRngwZlNrc1hHNWNibHgwWEhSY0ltZDBYQ0k2SUdOeVpXRjBaVkJ2YzJsMGFXOXVZV3hRYzJWMVpHOG9ablZ1WTNScGIyNG9JRzFoZEdOb1NXNWtaWGhsY3l3Z2JHVnVaM1JvTENCaGNtZDFiV1Z1ZENBcElIdGNibHgwWEhSY2RIWmhjaUJwSUQwZ1lYSm5kVzFsYm5RZ1BDQXdJRDhnWVhKbmRXMWxiblFnS3lCc1pXNW5kR2dnT2lCaGNtZDFiV1Z1ZER0Y2JseDBYSFJjZEdadmNpQW9JRHNnS3l0cElEd2diR1Z1WjNSb095QXBJSHRjYmx4MFhIUmNkRngwYldGMFkyaEpibVJsZUdWekxuQjFjMmdvSUdrZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSY2RISmxkSFZ5YmlCdFlYUmphRWx1WkdWNFpYTTdYRzVjZEZ4MGZTbGNibHgwZlZ4dWZUdGNibHh1Ulhod2NpNXdjMlYxWkc5elcxd2liblJvWENKZElEMGdSWGh3Y2k1d2MyVjFaRzl6VzF3aVpYRmNJbDA3WEc1Y2JpOHZJRUZrWkNCaWRYUjBiMjR2YVc1d2RYUWdkSGx3WlNCd2MyVjFaRzl6WEc1bWIzSWdLQ0JwSUdsdUlIc2djbUZrYVc4NklIUnlkV1VzSUdOb1pXTnJZbTk0T2lCMGNuVmxMQ0JtYVd4bE9pQjBjblZsTENCd1lYTnpkMjl5WkRvZ2RISjFaU3dnYVcxaFoyVTZJSFJ5ZFdVZ2ZTQXBJSHRjYmx4MFJYaHdjaTV3YzJWMVpHOXpXeUJwSUYwZ1BTQmpjbVZoZEdWSmJuQjFkRkJ6WlhWa2J5Z2dhU0FwTzF4dWZWeHVabTl5SUNnZ2FTQnBiaUI3SUhOMVltMXBkRG9nZEhKMVpTd2djbVZ6WlhRNklIUnlkV1VnZlNBcElIdGNibHgwUlhod2NpNXdjMlYxWkc5eld5QnBJRjBnUFNCamNtVmhkR1ZDZFhSMGIyNVFjMlYxWkc4b0lHa2dLVHRjYm4xY2JseHVMeThnUldGemVTQkJVRWtnWm05eUlHTnlaV0YwYVc1bklHNWxkeUJ6WlhSR2FXeDBaWEp6WEc1bWRXNWpkR2x2YmlCelpYUkdhV3gwWlhKektDa2dlMzFjYm5ObGRFWnBiSFJsY25NdWNISnZkRzkwZVhCbElEMGdSWGh3Y2k1bWFXeDBaWEp6SUQwZ1JYaHdjaTV3YzJWMVpHOXpPMXh1Ulhod2NpNXpaWFJHYVd4MFpYSnpJRDBnYm1WM0lITmxkRVpwYkhSbGNuTW9LVHRjYmx4dWRHOXJaVzVwZW1VZ1BTQlRhWHA2YkdVdWRHOXJaVzVwZW1VZ1BTQm1kVzVqZEdsdmJpZ2djMlZzWldOMGIzSXNJSEJoY25ObFQyNXNlU0FwSUh0Y2JseDBkbUZ5SUcxaGRHTm9aV1FzSUcxaGRHTm9MQ0IwYjJ0bGJuTXNJSFI1Y0dVc1hHNWNkRngwYzI5R1lYSXNJR2R5YjNWd2N5d2djSEpsUm1sc2RHVnljeXhjYmx4MFhIUmpZV05vWldRZ1BTQjBiMnRsYmtOaFkyaGxXeUJ6Wld4bFkzUnZjaUFySUZ3aUlGd2lJRjA3WEc1Y2JseDBhV1lnS0NCallXTm9aV1FnS1NCN1hHNWNkRngwY21WMGRYSnVJSEJoY25ObFQyNXNlU0EvSURBZ09pQmpZV05vWldRdWMyeHBZMlVvSURBZ0tUdGNibHgwZlZ4dVhHNWNkSE52Um1GeUlEMGdjMlZzWldOMGIzSTdYRzVjZEdkeWIzVndjeUE5SUZ0ZE8xeHVYSFJ3Y21WR2FXeDBaWEp6SUQwZ1JYaHdjaTV3Y21WR2FXeDBaWEk3WEc1Y2JseDBkMmhwYkdVZ0tDQnpiMFpoY2lBcElIdGNibHh1WEhSY2RDOHZJRU52YlcxaElHRnVaQ0JtYVhKemRDQnlkVzVjYmx4MFhIUnBaaUFvSUNGdFlYUmphR1ZrSUh4OElDaHRZWFJqYUNBOUlISmpiMjF0WVM1bGVHVmpLQ0J6YjBaaGNpQXBLU0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2diV0YwWTJnZ0tTQjdYRzVjZEZ4MFhIUmNkQzh2SUVSdmJpZDBJR052Ym5OMWJXVWdkSEpoYVd4cGJtY2dZMjl0YldGeklHRnpJSFpoYkdsa1hHNWNkRngwWEhSY2RITnZSbUZ5SUQwZ2MyOUdZWEl1YzJ4cFkyVW9JRzFoZEdOb1d6QmRMbXhsYm1kMGFDQXBJSHg4SUhOdlJtRnlPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaM0p2ZFhCekxuQjFjMmdvSUNoMGIydGxibk1nUFNCYlhTa2dLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnRZWFJqYUdWa0lEMGdabUZzYzJVN1hHNWNibHgwWEhRdkx5QkRiMjFpYVc1aGRHOXljMXh1WEhSY2RHbG1JQ2dnS0cxaGRHTm9JRDBnY21OdmJXSnBibUYwYjNKekxtVjRaV01vSUhOdlJtRnlJQ2twSUNrZ2UxeHVYSFJjZEZ4MGJXRjBZMmhsWkNBOUlHMWhkR05vTG5Ob2FXWjBLQ2s3WEc1Y2RGeDBYSFIwYjJ0bGJuTXVjSFZ6YUNoN1hHNWNkRngwWEhSY2RIWmhiSFZsT2lCdFlYUmphR1ZrTEZ4dVhIUmNkRngwWEhRdkx5QkRZWE4wSUdSbGMyTmxibVJoYm5RZ1kyOXRZbWx1WVhSdmNuTWdkRzhnYzNCaFkyVmNibHgwWEhSY2RGeDBkSGx3WlRvZ2JXRjBZMmhiTUYwdWNtVndiR0ZqWlNnZ2NuUnlhVzBzSUZ3aUlGd2lJQ2xjYmx4MFhIUmNkSDBwTzF4dVhIUmNkRngwYzI5R1lYSWdQU0J6YjBaaGNpNXpiR2xqWlNnZ2JXRjBZMmhsWkM1c1pXNW5kR2dnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCR2FXeDBaWEp6WEc1Y2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCRmVIQnlMbVpwYkhSbGNpQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ0tHMWhkR05vSUQwZ2JXRjBZMmhGZUhCeVd5QjBlWEJsSUYwdVpYaGxZeWdnYzI5R1lYSWdLU2tnSmlZZ0tDRndjbVZHYVd4MFpYSnpXeUIwZVhCbElGMGdmSHhjYmx4MFhIUmNkRngwS0cxaGRHTm9JRDBnY0hKbFJtbHNkR1Z5YzFzZ2RIbHdaU0JkS0NCdFlYUmphQ0FwS1NrZ0tTQjdYRzVjZEZ4MFhIUmNkRzFoZEdOb1pXUWdQU0J0WVhSamFDNXphR2xtZENncE8xeHVYSFJjZEZ4MFhIUjBiMnRsYm5NdWNIVnphQ2g3WEc1Y2RGeDBYSFJjZEZ4MGRtRnNkV1U2SUcxaGRHTm9aV1FzWEc1Y2RGeDBYSFJjZEZ4MGRIbHdaVG9nZEhsd1pTeGNibHgwWEhSY2RGeDBYSFJ0WVhSamFHVnpPaUJ0WVhSamFGeHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkRngwYzI5R1lYSWdQU0J6YjBaaGNpNXpiR2xqWlNnZ2JXRjBZMmhsWkM1c1pXNW5kR2dnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lDRnRZWFJqYUdWa0lDa2dlMXh1WEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdVbVYwZFhKdUlIUm9aU0JzWlc1bmRHZ2diMllnZEdobElHbHVkbUZzYVdRZ1pYaGpaWE56WEc1Y2RDOHZJR2xtSUhkbEozSmxJR3AxYzNRZ2NHRnljMmx1WjF4dVhIUXZMeUJQZEdobGNuZHBjMlVzSUhSb2NtOTNJR0Z1SUdWeWNtOXlJRzl5SUhKbGRIVnliaUIwYjJ0bGJuTmNibHgwY21WMGRYSnVJSEJoY25ObFQyNXNlU0EvWEc1Y2RGeDBjMjlHWVhJdWJHVnVaM1JvSURwY2JseDBYSFJ6YjBaaGNpQS9YRzVjZEZ4MFhIUlRhWHA2YkdVdVpYSnliM0lvSUhObGJHVmpkRzl5SUNrZ09seHVYSFJjZEZ4MEx5OGdRMkZqYUdVZ2RHaGxJSFJ2YTJWdWMxeHVYSFJjZEZ4MGRHOXJaVzVEWVdOb1pTZ2djMlZzWldOMGIzSXNJR2R5YjNWd2N5QXBMbk5zYVdObEtDQXdJQ2s3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUIwYjFObGJHVmpkRzl5S0NCMGIydGxibk1nS1NCN1hHNWNkSFpoY2lCcElEMGdNQ3hjYmx4MFhIUnNaVzRnUFNCMGIydGxibk11YkdWdVozUm9MRnh1WEhSY2RITmxiR1ZqZEc5eUlEMGdYQ0pjSWp0Y2JseDBabTl5SUNnZ095QnBJRHdnYkdWdU95QnBLeXNnS1NCN1hHNWNkRngwYzJWc1pXTjBiM0lnS3owZ2RHOXJaVzV6VzJsZExuWmhiSFZsTzF4dVhIUjlYRzVjZEhKbGRIVnliaUJ6Wld4bFkzUnZjanRjYm4xY2JseHVablZ1WTNScGIyNGdZV1JrUTI5dFltbHVZWFJ2Y2lnZ2JXRjBZMmhsY2l3Z1kyOXRZbWx1WVhSdmNpd2dZbUZ6WlNBcElIdGNibHgwZG1GeUlHUnBjaUE5SUdOdmJXSnBibUYwYjNJdVpHbHlMRnh1WEhSY2RITnJhWEFnUFNCamIyMWlhVzVoZEc5eUxtNWxlSFFzWEc1Y2RGeDBhMlY1SUQwZ2MydHBjQ0I4ZkNCa2FYSXNYRzVjZEZ4MFkyaGxZMnRPYjI1RmJHVnRaVzUwY3lBOUlHSmhjMlVnSmlZZ2EyVjVJRDA5UFNCY0luQmhjbVZ1ZEU1dlpHVmNJaXhjYmx4MFhIUmtiMjVsVG1GdFpTQTlJR1J2Ym1Vckt6dGNibHh1WEhSeVpYUjFjbTRnWTI5dFltbHVZWFJ2Y2k1bWFYSnpkQ0EvWEc1Y2RGeDBMeThnUTJobFkyc2dZV2RoYVc1emRDQmpiRzl6WlhOMElHRnVZMlZ6ZEc5eUwzQnlaV05sWkdsdVp5QmxiR1Z0Wlc1MFhHNWNkRngwWm5WdVkzUnBiMjRvSUdWc1pXMHNJR052Ym5SbGVIUXNJSGh0YkNBcElIdGNibHgwWEhSY2RIZG9hV3hsSUNnZ0tHVnNaVzBnUFNCbGJHVnRXeUJrYVhJZ1hTa2dLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2daV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0I4ZkNCamFHVmphMDV2YmtWc1pXMWxiblJ6SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnRZWFJqYUdWeUtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEgwZ09seHVYRzVjZEZ4MEx5OGdRMmhsWTJzZ1lXZGhhVzV6ZENCaGJHd2dZVzVqWlhOMGIzSXZjSEpsWTJWa2FXNW5JR1ZzWlcxbGJuUnpYRzVjZEZ4MFpuVnVZM1JwYjI0b0lHVnNaVzBzSUdOdmJuUmxlSFFzSUhodGJDQXBJSHRjYmx4MFhIUmNkSFpoY2lCdmJHUkRZV05vWlN3Z2RXNXBjWFZsUTJGamFHVXNJRzkxZEdWeVEyRmphR1VzWEc1Y2RGeDBYSFJjZEc1bGQwTmhZMmhsSUQwZ1d5QmthWEp5ZFc1ekxDQmtiMjVsVG1GdFpTQmRPMXh1WEc1Y2RGeDBYSFF2THlCWFpTQmpZVzRuZENCelpYUWdZWEppYVhSeVlYSjVJR1JoZEdFZ2IyNGdXRTFNSUc1dlpHVnpMQ0J6YnlCMGFHVjVJR1J2YmlkMElHSmxibVZtYVhRZ1puSnZiU0JqYjIxaWFXNWhkRzl5SUdOaFkyaHBibWRjYmx4MFhIUmNkR2xtSUNnZ2VHMXNJQ2tnZTF4dVhIUmNkRngwWEhSM2FHbHNaU0FvSUNobGJHVnRJRDBnWld4bGJWc2daR2x5SUYwcElDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2daV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0I4ZkNCamFHVmphMDV2YmtWc1pXMWxiblJ6SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQnRZWFJqYUdWeUtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUjNhR2xzWlNBb0lDaGxiR1Z0SUQwZ1pXeGxiVnNnWkdseUlGMHBJQ2tnZTF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnTVNCOGZDQmphR1ZqYTA1dmJrVnNaVzFsYm5SeklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGIzVjBaWEpEWVdOb1pTQTlJR1ZzWlcxYklHVjRjR0Z1Wkc4Z1hTQjhmQ0FvWld4bGJWc2daWGh3WVc1a2J5QmRJRDBnZTMwcE8xeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4T1NCdmJteDVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkVaV1psYm1RZ1lXZGhhVzV6ZENCamJHOXVaV1FnWVhSMGNtOXdaWEowYVdWeklDaHFVWFZsY25rZ1oyZ3RNVGN3T1NsY2JseDBYSFJjZEZ4MFhIUmNkSFZ1YVhGMVpVTmhZMmhsSUQwZ2IzVjBaWEpEWVdOb1pWc2daV3hsYlM1MWJtbHhkV1ZKUkNCZElIeDhJQ2h2ZFhSbGNrTmhZMmhsV3lCbGJHVnRMblZ1YVhGMVpVbEVJRjBnUFNCN2ZTazdYRzVjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnYzJ0cGNDQW1KaUJ6YTJsd0lEMDlQU0JsYkdWdExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdWc1pXMGdQU0JsYkdWdFd5QmthWElnWFNCOGZDQmxiR1Z0TzF4dVhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnS0c5c1pFTmhZMmhsSUQwZ2RXNXBjWFZsUTJGamFHVmJJR3RsZVNCZEtTQW1KbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUnZiR1JEWVdOb1pWc2dNQ0JkSUQwOVBTQmthWEp5ZFc1eklDWW1JRzlzWkVOaFkyaGxXeUF4SUYwZ1BUMDlJR1J2Ym1WT1lXMWxJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklFRnpjMmxuYmlCMGJ5QnVaWGREWVdOb1pTQnpieUJ5WlhOMWJIUnpJR0poWTJzdGNISnZjR0ZuWVhSbElIUnZJSEJ5WlhacGIzVnpJR1ZzWlcxbGJuUnpYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlBb2JtVjNRMkZqYUdWYklESWdYU0E5SUc5c1pFTmhZMmhsV3lBeUlGMHBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1VtVjFjMlVnYm1WM1kyRmphR1VnYzI4Z2NtVnpkV3gwY3lCaVlXTnJMWEJ5YjNCaFoyRjBaU0IwYnlCd2NtVjJhVzkxY3lCbGJHVnRaVzUwYzF4dVhIUmNkRngwWEhSY2RGeDBYSFIxYm1seGRXVkRZV05vWlZzZ2EyVjVJRjBnUFNCdVpYZERZV05vWlR0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QkJJRzFoZEdOb0lHMWxZVzV6SUhkbEozSmxJR1J2Ym1VN0lHRWdabUZwYkNCdFpXRnVjeUIzWlNCb1lYWmxJSFJ2SUd0bFpYQWdZMmhsWTJ0cGJtZGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0FvYm1WM1EyRmphR1ZiSURJZ1hTQTlJRzFoZEdOb1pYSW9JR1ZzWlcwc0lHTnZiblJsZUhRc0lIaHRiQ0FwS1NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdWc1pXMWxiblJOWVhSamFHVnlLQ0J0WVhSamFHVnljeUFwSUh0Y2JseDBjbVYwZFhKdUlHMWhkR05vWlhKekxteGxibWQwYUNBK0lERWdQMXh1WEhSY2RHWjFibU4wYVc5dUtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLU0I3WEc1Y2RGeDBYSFIyWVhJZ2FTQTlJRzFoZEdOb1pYSnpMbXhsYm1kMGFEdGNibHgwWEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JQ0Z0WVhSamFHVnljMXRwWFNnZ1pXeGxiU3dnWTI5dWRHVjRkQ3dnZUcxc0lDa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFI5SURwY2JseDBYSFJ0WVhSamFHVnljMXN3WFR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYlhWc2RHbHdiR1ZEYjI1MFpYaDBjeWdnYzJWc1pXTjBiM0lzSUdOdmJuUmxlSFJ6TENCeVpYTjFiSFJ6SUNrZ2UxeHVYSFIyWVhJZ2FTQTlJREFzWEc1Y2RGeDBiR1Z1SUQwZ1kyOXVkR1Y0ZEhNdWJHVnVaM1JvTzF4dVhIUm1iM0lnS0NBN0lHa2dQQ0JzWlc0N0lHa3JLeUFwSUh0Y2JseDBYSFJUYVhwNmJHVW9JSE5sYkdWamRHOXlMQ0JqYjI1MFpYaDBjMXRwWFN3Z2NtVnpkV3gwY3lBcE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCeVpYTjFiSFJ6TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqYjI1a1pXNXpaU2dnZFc1dFlYUmphR1ZrTENCdFlYQXNJR1pwYkhSbGNpd2dZMjl1ZEdWNGRDd2dlRzFzSUNrZ2UxeHVYSFIyWVhJZ1pXeGxiU3hjYmx4MFhIUnVaWGRWYm0xaGRHTm9aV1FnUFNCYlhTeGNibHgwWEhScElEMGdNQ3hjYmx4MFhIUnNaVzRnUFNCMWJtMWhkR05vWldRdWJHVnVaM1JvTEZ4dVhIUmNkRzFoY0hCbFpDQTlJRzFoY0NBaFBTQnVkV3hzTzF4dVhHNWNkR1p2Y2lBb0lEc2dhU0E4SUd4bGJqc2dhU3NySUNrZ2UxeHVYSFJjZEdsbUlDZ2dLR1ZzWlcwZ1BTQjFibTFoZEdOb1pXUmJhVjBwSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0FoWm1sc2RHVnlJSHg4SUdacGJIUmxjaWdnWld4bGJTd2dZMjl1ZEdWNGRDd2dlRzFzSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRzVsZDFWdWJXRjBZMmhsWkM1d2RYTm9LQ0JsYkdWdElDazdYRzVjZEZ4MFhIUmNkR2xtSUNnZ2JXRndjR1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRzFoY0M1d2RYTm9LQ0JwSUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2JtVjNWVzV0WVhSamFHVmtPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJOWVhSamFHVnlLQ0J3Y21WR2FXeDBaWElzSUhObGJHVmpkRzl5TENCdFlYUmphR1Z5TENCd2IzTjBSbWxzZEdWeUxDQndiM04wUm1sdVpHVnlMQ0J3YjNOMFUyVnNaV04wYjNJZ0tTQjdYRzVjZEdsbUlDZ2djRzl6ZEVacGJIUmxjaUFtSmlBaGNHOXpkRVpwYkhSbGNsc2daWGh3WVc1a2J5QmRJQ2tnZTF4dVhIUmNkSEJ2YzNSR2FXeDBaWElnUFNCelpYUk5ZWFJqYUdWeUtDQndiM04wUm1sc2RHVnlJQ2s3WEc1Y2RIMWNibHgwYVdZZ0tDQndiM04wUm1sdVpHVnlJQ1ltSUNGd2IzTjBSbWx1WkdWeVd5QmxlSEJoYm1SdklGMGdLU0I3WEc1Y2RGeDBjRzl6ZEVacGJtUmxjaUE5SUhObGRFMWhkR05vWlhJb0lIQnZjM1JHYVc1a1pYSXNJSEJ2YzNSVFpXeGxZM1J2Y2lBcE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCdFlYSnJSblZ1WTNScGIyNG9ablZ1WTNScGIyNG9JSE5sWldRc0lISmxjM1ZzZEhNc0lHTnZiblJsZUhRc0lIaHRiQ0FwSUh0Y2JseDBYSFIyWVhJZ2RHVnRjQ3dnYVN3Z1pXeGxiU3hjYmx4MFhIUmNkSEJ5WlUxaGNDQTlJRnRkTEZ4dVhIUmNkRngwY0c5emRFMWhjQ0E5SUZ0ZExGeHVYSFJjZEZ4MGNISmxaWGhwYzNScGJtY2dQU0J5WlhOMWJIUnpMbXhsYm1kMGFDeGNibHh1WEhSY2RGeDBMeThnUjJWMElHbHVhWFJwWVd3Z1pXeGxiV1Z1ZEhNZ1puSnZiU0J6WldWa0lHOXlJR052Ym5SbGVIUmNibHgwWEhSY2RHVnNaVzF6SUQwZ2MyVmxaQ0I4ZkNCdGRXeDBhWEJzWlVOdmJuUmxlSFJ6S0NCelpXeGxZM1J2Y2lCOGZDQmNJaXBjSWl3Z1kyOXVkR1Y0ZEM1dWIyUmxWSGx3WlNBL0lGc2dZMjl1ZEdWNGRDQmRJRG9nWTI5dWRHVjRkQ3dnVzEwZ0tTeGNibHh1WEhSY2RGeDBMeThnVUhKbFptbHNkR1Z5SUhSdklHZGxkQ0J0WVhSamFHVnlJR2x1Y0hWMExDQndjbVZ6WlhKMmFXNW5JR0VnYldGd0lHWnZjaUJ6WldWa0xYSmxjM1ZzZEhNZ2MzbHVZMmh5YjI1cGVtRjBhVzl1WEc1Y2RGeDBYSFJ0WVhSamFHVnlTVzRnUFNCd2NtVkdhV3gwWlhJZ0ppWWdLQ0J6WldWa0lIeDhJQ0Z6Wld4bFkzUnZjaUFwSUQ5Y2JseDBYSFJjZEZ4MFkyOXVaR1Z1YzJVb0lHVnNaVzF6TENCd2NtVk5ZWEFzSUhCeVpVWnBiSFJsY2l3Z1kyOXVkR1Y0ZEN3Z2VHMXNJQ2tnT2x4dVhIUmNkRngwWEhSbGJHVnRjeXhjYmx4dVhIUmNkRngwYldGMFkyaGxjazkxZENBOUlHMWhkR05vWlhJZ1AxeHVYSFJjZEZ4MFhIUXZMeUJKWmlCM1pTQm9ZWFpsSUdFZ2NHOXpkRVpwYm1SbGNpd2diM0lnWm1sc2RHVnlaV1FnYzJWbFpDd2diM0lnYm05dUxYTmxaV1FnY0c5emRFWnBiSFJsY2lCdmNpQndjbVZsZUdsemRHbHVaeUJ5WlhOMWJIUnpMRnh1WEhSY2RGeDBYSFJ3YjNOMFJtbHVaR1Z5SUh4OElDZ2djMlZsWkNBL0lIQnlaVVpwYkhSbGNpQTZJSEJ5WldWNGFYTjBhVzVuSUh4OElIQnZjM1JHYVd4MFpYSWdLU0EvWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUF1TGk1cGJuUmxjbTFsWkdsaGRHVWdjSEp2WTJWemMybHVaeUJwY3lCdVpXTmxjM05oY25sY2JseDBYSFJjZEZ4MFhIUmJYU0E2WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUF1TGk1dmRHaGxjbmRwYzJVZ2RYTmxJSEpsYzNWc2RITWdaR2x5WldOMGJIbGNibHgwWEhSY2RGeDBYSFJ5WlhOMWJIUnpJRHBjYmx4MFhIUmNkRngwYldGMFkyaGxja2x1TzF4dVhHNWNkRngwTHk4Z1JtbHVaQ0J3Y21sdFlYSjVJRzFoZEdOb1pYTmNibHgwWEhScFppQW9JRzFoZEdOb1pYSWdLU0I3WEc1Y2RGeDBYSFJ0WVhSamFHVnlLQ0J0WVhSamFHVnlTVzRzSUcxaGRHTm9aWEpQZFhRc0lHTnZiblJsZUhRc0lIaHRiQ0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGd2NHeDVJSEJ2YzNSR2FXeDBaWEpjYmx4MFhIUnBaaUFvSUhCdmMzUkdhV3gwWlhJZ0tTQjdYRzVjZEZ4MFhIUjBaVzF3SUQwZ1kyOXVaR1Z1YzJVb0lHMWhkR05vWlhKUGRYUXNJSEJ2YzNSTllYQWdLVHRjYmx4MFhIUmNkSEJ2YzNSR2FXeDBaWElvSUhSbGJYQXNJRnRkTENCamIyNTBaWGgwTENCNGJXd2dLVHRjYmx4dVhIUmNkRngwTHk4Z1ZXNHRiV0YwWTJnZ1ptRnBiR2x1WnlCbGJHVnRaVzUwY3lCaWVTQnRiM1pwYm1jZ2RHaGxiU0JpWVdOcklIUnZJRzFoZEdOb1pYSkpibHh1WEhSY2RGeDBhU0E5SUhSbGJYQXViR1Z1WjNSb08xeHVYSFJjZEZ4MGQyaHBiR1VnS0NCcExTMGdLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dLR1ZzWlcwZ1BTQjBaVzF3VzJsZEtTQXBJSHRjYmx4MFhIUmNkRngwWEhSdFlYUmphR1Z5VDNWMFd5QndiM04wVFdGd1cybGRJRjBnUFNBaEtHMWhkR05vWlhKSmJsc2djRzl6ZEUxaGNGdHBYU0JkSUQwZ1pXeGxiU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lITmxaV1FnS1NCN1hHNWNkRngwWEhScFppQW9JSEJ2YzNSR2FXNWtaWElnZkh3Z2NISmxSbWxzZEdWeUlDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lIQnZjM1JHYVc1a1pYSWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5OGdSMlYwSUhSb1pTQm1hVzVoYkNCdFlYUmphR1Z5VDNWMElHSjVJR052Ym1SbGJuTnBibWNnZEdocGN5QnBiblJsY20xbFpHbGhkR1VnYVc1MGJ5QndiM04wUm1sdVpHVnlJR052Ym5SbGVIUnpYRzVjZEZ4MFhIUmNkRngwZEdWdGNDQTlJRnRkTzF4dVhIUmNkRngwWEhSY2RHa2dQU0J0WVhSamFHVnlUM1YwTG14bGJtZDBhRHRjYmx4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUdrdExTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnS0dWc1pXMGdQU0J0WVhSamFHVnlUM1YwVzJsZEtTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVW1WemRHOXlaU0J0WVhSamFHVnlTVzRnYzJsdVkyVWdaV3hsYlNCcGN5QnViM1FnZVdWMElHRWdabWx1WVd3Z2JXRjBZMmhjYmx4MFhIUmNkRngwWEhSY2RGeDBkR1Z0Y0M1d2RYTm9LQ0FvYldGMFkyaGxja2x1VzJsZElEMGdaV3hsYlNrZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwY0c5emRFWnBibVJsY2lnZ2JuVnNiQ3dnS0cxaGRHTm9aWEpQZFhRZ1BTQmJYU2tzSUhSbGJYQXNJSGh0YkNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwTHk4Z1RXOTJaU0J0WVhSamFHVmtJR1ZzWlcxbGJuUnpJR1p5YjIwZ2MyVmxaQ0IwYnlCeVpYTjFiSFJ6SUhSdklHdGxaWEFnZEdobGJTQnplVzVqYUhKdmJtbDZaV1JjYmx4MFhIUmNkRngwYVNBOUlHMWhkR05vWlhKUGRYUXViR1Z1WjNSb08xeHVYSFJjZEZ4MFhIUjNhR2xzWlNBb0lHa3RMU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUNobGJHVnRJRDBnYldGMFkyaGxjazkxZEZ0cFhTa2dKaVpjYmx4MFhIUmNkRngwWEhSY2RDaDBaVzF3SUQwZ2NHOXpkRVpwYm1SbGNpQS9JR2x1WkdWNFQyWW9JSE5sWldRc0lHVnNaVzBnS1NBNklIQnlaVTFoY0Z0cFhTa2dQaUF0TVNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MGMyVmxaRnQwWlcxd1hTQTlJQ0VvY21WemRXeDBjMXQwWlcxd1hTQTlJR1ZzWlcwcE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhHNWNkRngwTHk4Z1FXUmtJR1ZzWlcxbGJuUnpJSFJ2SUhKbGMzVnNkSE1zSUhSb2NtOTFaMmdnY0c5emRFWnBibVJsY2lCcFppQmtaV1pwYm1Wa1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRzFoZEdOb1pYSlBkWFFnUFNCamIyNWtaVzV6WlNoY2JseDBYSFJjZEZ4MGJXRjBZMmhsY2s5MWRDQTlQVDBnY21WemRXeDBjeUEvWEc1Y2RGeDBYSFJjZEZ4MGJXRjBZMmhsY2s5MWRDNXpjR3hwWTJVb0lIQnlaV1Y0YVhOMGFXNW5MQ0J0WVhSamFHVnlUM1YwTG14bGJtZDBhQ0FwSURwY2JseDBYSFJjZEZ4MFhIUnRZWFJqYUdWeVQzVjBYRzVjZEZ4MFhIUXBPMXh1WEhSY2RGeDBhV1lnS0NCd2IzTjBSbWx1WkdWeUlDa2dlMXh1WEhSY2RGeDBYSFJ3YjNOMFJtbHVaR1Z5S0NCdWRXeHNMQ0J5WlhOMWJIUnpMQ0J0WVhSamFHVnlUM1YwTENCNGJXd2dLVHRjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkSEIxYzJndVlYQndiSGtvSUhKbGMzVnNkSE1zSUcxaGRHTm9aWEpQZFhRZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDBwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ0WVhSamFHVnlSbkp2YlZSdmEyVnVjeWdnZEc5clpXNXpJQ2tnZTF4dVhIUjJZWElnWTJobFkydERiMjUwWlhoMExDQnRZWFJqYUdWeUxDQnFMRnh1WEhSY2RHeGxiaUE5SUhSdmEyVnVjeTVzWlc1bmRHZ3NYRzVjZEZ4MGJHVmhaR2x1WjFKbGJHRjBhWFpsSUQwZ1JYaHdjaTV5Wld4aGRHbDJaVnNnZEc5clpXNXpXekJkTG5SNWNHVWdYU3hjYmx4MFhIUnBiWEJzYVdOcGRGSmxiR0YwYVhabElEMGdiR1ZoWkdsdVoxSmxiR0YwYVhabElIeDhJRVY0Y0hJdWNtVnNZWFJwZG1WYlhDSWdYQ0pkTEZ4dVhIUmNkR2tnUFNCc1pXRmthVzVuVW1Wc1lYUnBkbVVnUHlBeElEb2dNQ3hjYmx4dVhIUmNkQzh2SUZSb1pTQm1iM1Z1WkdGMGFXOXVZV3dnYldGMFkyaGxjaUJsYm5OMWNtVnpJSFJvWVhRZ1pXeGxiV1Z1ZEhNZ1lYSmxJSEpsWVdOb1lXSnNaU0JtY205dElIUnZjQzFzWlhabGJDQmpiMjUwWlhoMEtITXBYRzVjZEZ4MGJXRjBZMmhEYjI1MFpYaDBJRDBnWVdSa1EyOXRZbWx1WVhSdmNpZ2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1pXeGxiU0E5UFQwZ1kyaGxZMnREYjI1MFpYaDBPMXh1WEhSY2RIMHNJR2x0Y0d4cFkybDBVbVZzWVhScGRtVXNJSFJ5ZFdVZ0tTeGNibHgwWEhSdFlYUmphRUZ1ZVVOdmJuUmxlSFFnUFNCaFpHUkRiMjFpYVc1aGRHOXlLQ0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnBibVJsZUU5bUtDQmphR1ZqYTBOdmJuUmxlSFFzSUdWc1pXMGdLU0ErSUMweE8xeHVYSFJjZEgwc0lHbHRjR3hwWTJsMFVtVnNZWFJwZG1Vc0lIUnlkV1VnS1N4Y2JseDBYSFJ0WVhSamFHVnljeUE5SUZzZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdOdmJuUmxlSFFzSUhodGJDQXBJSHRjYmx4MFhIUmNkSFpoY2lCeVpYUWdQU0FvSUNGc1pXRmthVzVuVW1Wc1lYUnBkbVVnSmlZZ0tDQjRiV3dnZkh3Z1kyOXVkR1Y0ZENBaFBUMGdiM1YwWlhKdGIzTjBRMjl1ZEdWNGRDQXBJQ2tnZkh3Z0tGeHVYSFJjZEZ4MFhIUW9ZMmhsWTJ0RGIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZENrdWJtOWtaVlI1Y0dVZ1AxeHVYSFJjZEZ4MFhIUmNkRzFoZEdOb1EyOXVkR1Y0ZENnZ1pXeGxiU3dnWTI5dWRHVjRkQ3dnZUcxc0lDa2dPbHh1WEhSY2RGeDBYSFJjZEcxaGRHTm9RVzU1UTI5dWRHVjRkQ2dnWld4bGJTd2dZMjl1ZEdWNGRDd2dlRzFzSUNrZ0tUdGNibHgwWEhSY2RDOHZJRUYyYjJsa0lHaGhibWRwYm1jZ2IyNTBieUJsYkdWdFpXNTBJQ2hwYzNOMVpTQWpNams1S1Z4dVhIUmNkRngwWTJobFkydERiMjUwWlhoMElEMGdiblZzYkR0Y2JseDBYSFJjZEhKbGRIVnliaUJ5WlhRN1hHNWNkRngwZlNCZE8xeHVYRzVjZEdadmNpQW9JRHNnYVNBOElHeGxianNnYVNzcklDa2dlMXh1WEhSY2RHbG1JQ2dnS0cxaGRHTm9aWElnUFNCRmVIQnlMbkpsYkdGMGFYWmxXeUIwYjJ0bGJuTmJhVjB1ZEhsd1pTQmRLU0FwSUh0Y2JseDBYSFJjZEcxaGRHTm9aWEp6SUQwZ1d5QmhaR1JEYjIxaWFXNWhkRzl5S0dWc1pXMWxiblJOWVhSamFHVnlLQ0J0WVhSamFHVnljeUFwTENCdFlYUmphR1Z5S1NCZE8xeHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJ0WVhSamFHVnlJRDBnUlhod2NpNW1hV3gwWlhKYklIUnZhMlZ1YzF0cFhTNTBlWEJsSUYwdVlYQndiSGtvSUc1MWJHd3NJSFJ2YTJWdWMxdHBYUzV0WVhSamFHVnpJQ2s3WEc1Y2JseDBYSFJjZEM4dklGSmxkSFZ5YmlCemNHVmphV0ZzSUhWd2IyNGdjMlZsYVc1bklHRWdjRzl6YVhScGIyNWhiQ0J0WVhSamFHVnlYRzVjZEZ4MFhIUnBaaUFvSUcxaGRHTm9aWEpiSUdWNGNHRnVaRzhnWFNBcElIdGNibHgwWEhSY2RGeDBMeThnUm1sdVpDQjBhR1VnYm1WNGRDQnlaV3hoZEdsMlpTQnZjR1Z5WVhSdmNpQW9hV1lnWVc1NUtTQm1iM0lnY0hKdmNHVnlJR2hoYm1Sc2FXNW5YRzVjZEZ4MFhIUmNkR29nUFNBcksyazdYRzVjZEZ4MFhIUmNkR1p2Y2lBb0lEc2dhaUE4SUd4bGJqc2dhaXNySUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1JYaHdjaTV5Wld4aGRHbDJaVnNnZEc5clpXNXpXMnBkTG5SNWNHVWdYU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnYzJWMFRXRjBZMmhsY2loY2JseDBYSFJjZEZ4MFhIUnBJRDRnTVNBbUppQmxiR1Z0Wlc1MFRXRjBZMmhsY2lnZ2JXRjBZMmhsY25NZ0tTeGNibHgwWEhSY2RGeDBYSFJwSUQ0Z01TQW1KaUIwYjFObGJHVmpkRzl5S0Z4dVhIUmNkRngwWEhSY2RGeDBMeThnU1dZZ2RHaGxJSEJ5WldObFpHbHVaeUIwYjJ0bGJpQjNZWE1nWVNCa1pYTmpaVzVrWVc1MElHTnZiV0pwYm1GMGIzSXNJR2x1YzJWeWRDQmhiaUJwYlhCc2FXTnBkQ0JoYm5rdFpXeGxiV1Z1ZENCZ0ttQmNibHgwWEhSY2RGeDBYSFJjZEhSdmEyVnVjeTV6YkdsalpTZ2dNQ3dnYVNBdElERWdLUzVqYjI1allYUW9leUIyWVd4MVpUb2dkRzlyWlc1eld5QnBJQzBnTWlCZExuUjVjR1VnUFQwOUlGd2lJRndpSUQ4Z1hDSXFYQ0lnT2lCY0lsd2lJSDBwWEc1Y2RGeDBYSFJjZEZ4MEtTNXlaWEJzWVdObEtDQnlkSEpwYlN3Z1hDSWtNVndpSUNrc1hHNWNkRngwWEhSY2RGeDBiV0YwWTJobGNpeGNibHgwWEhSY2RGeDBYSFJwSUR3Z2FpQW1KaUJ0WVhSamFHVnlSbkp2YlZSdmEyVnVjeWdnZEc5clpXNXpMbk5zYVdObEtDQnBMQ0JxSUNrZ0tTeGNibHgwWEhSY2RGeDBYSFJxSUR3Z2JHVnVJQ1ltSUcxaGRHTm9aWEpHY205dFZHOXJaVzV6S0NBb2RHOXJaVzV6SUQwZ2RHOXJaVzV6TG5Oc2FXTmxLQ0JxSUNrcElDa3NYRzVjZEZ4MFhIUmNkRngwYWlBOElHeGxiaUFtSmlCMGIxTmxiR1ZqZEc5eUtDQjBiMnRsYm5NZ0tWeHVYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBiV0YwWTJobGNuTXVjSFZ6YUNnZ2JXRjBZMmhsY2lBcE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCbGJHVnRaVzUwVFdGMFkyaGxjaWdnYldGMFkyaGxjbk1nS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYldGMFkyaGxja1p5YjIxSGNtOTFjRTFoZEdOb1pYSnpLQ0JsYkdWdFpXNTBUV0YwWTJobGNuTXNJSE5sZEUxaGRHTm9aWEp6SUNrZ2UxeHVYSFIyWVhJZ1lubFRaWFFnUFNCelpYUk5ZWFJqYUdWeWN5NXNaVzVuZEdnZ1BpQXdMRnh1WEhSY2RHSjVSV3hsYldWdWRDQTlJR1ZzWlcxbGJuUk5ZWFJqYUdWeWN5NXNaVzVuZEdnZ1BpQXdMRnh1WEhSY2RITjFjR1Z5VFdGMFkyaGxjaUE5SUdaMWJtTjBhVzl1S0NCelpXVmtMQ0JqYjI1MFpYaDBMQ0I0Yld3c0lISmxjM1ZzZEhNc0lHOTFkR1Z5Ylc5emRDQXBJSHRjYmx4MFhIUmNkSFpoY2lCbGJHVnRMQ0JxTENCdFlYUmphR1Z5TEZ4dVhIUmNkRngwWEhSdFlYUmphR1ZrUTI5MWJuUWdQU0F3TEZ4dVhIUmNkRngwWEhScElEMGdYQ0l3WENJc1hHNWNkRngwWEhSY2RIVnViV0YwWTJobFpDQTlJSE5sWldRZ0ppWWdXMTBzWEc1Y2RGeDBYSFJjZEhObGRFMWhkR05vWldRZ1BTQmJYU3hjYmx4MFhIUmNkRngwWTI5dWRHVjRkRUpoWTJ0MWNDQTlJRzkxZEdWeWJXOXpkRU52Ym5SbGVIUXNYRzVjZEZ4MFhIUmNkQzh2SUZkbElHMTFjM1FnWVd4M1lYbHpJR2hoZG1VZ1pXbDBhR1Z5SUhObFpXUWdaV3hsYldWdWRITWdiM0lnYjNWMFpYSnRiM04wSUdOdmJuUmxlSFJjYmx4MFhIUmNkRngwWld4bGJYTWdQU0J6WldWa0lIeDhJR0o1Uld4bGJXVnVkQ0FtSmlCRmVIQnlMbVpwYm1SYlhDSlVRVWRjSWwwb0lGd2lLbHdpTENCdmRYUmxjbTF2YzNRZ0tTeGNibHgwWEhSY2RGeDBMeThnVlhObElHbHVkR1ZuWlhJZ1pHbHljblZ1Y3lCcFptWWdkR2hwY3lCcGN5QjBhR1VnYjNWMFpYSnRiM04wSUcxaGRHTm9aWEpjYmx4MFhIUmNkRngwWkdseWNuVnVjMVZ1YVhGMVpTQTlJQ2hrYVhKeWRXNXpJQ3M5SUdOdmJuUmxlSFJDWVdOcmRYQWdQVDBnYm5Wc2JDQS9JREVnT2lCTllYUm9MbkpoYm1SdmJTZ3BJSHg4SURBdU1Ta3NYRzVjZEZ4MFhIUmNkR3hsYmlBOUlHVnNaVzF6TG14bGJtZDBhRHRjYmx4dVhIUmNkRngwYVdZZ0tDQnZkWFJsY20xdmMzUWdLU0I3WEc1Y2RGeDBYSFJjZEc5MWRHVnliVzl6ZEVOdmJuUmxlSFFnUFNCamIyNTBaWGgwSUQwOVBTQmtiMk4xYldWdWRDQjhmQ0JqYjI1MFpYaDBJSHg4SUc5MWRHVnliVzl6ZER0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdRV1JrSUdWc1pXMWxiblJ6SUhCaGMzTnBibWNnWld4bGJXVnVkRTFoZEdOb1pYSnpJR1JwY21WamRHeDVJSFJ2SUhKbGMzVnNkSE5jYmx4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRlBEa3NJRk5oWm1GeWFWeHVYSFJjZEZ4MEx5OGdWRzlzWlhKaGRHVWdUbTlrWlV4cGMzUWdjSEp2Y0dWeWRHbGxjeUFvU1VVNklGd2liR1Z1WjNSb1hDSTdJRk5oWm1GeWFUb2dQRzUxYldKbGNqNHBJRzFoZEdOb2FXNW5JR1ZzWlcxbGJuUnpJR0o1SUdsa1hHNWNkRngwWEhSbWIzSWdLQ0E3SUdrZ0lUMDlJR3hsYmlBbUppQW9aV3hsYlNBOUlHVnNaVzF6VzJsZEtTQWhQU0J1ZFd4c095QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2dnWW5sRmJHVnRaVzUwSUNZbUlHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RGeDBhaUE5SURBN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NBaFkyOXVkR1Y0ZENBbUppQmxiR1Z0TG05M2JtVnlSRzlqZFcxbGJuUWdJVDA5SUdSdlkzVnRaVzUwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYzJWMFJHOWpkVzFsYm5Rb0lHVnNaVzBnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSGh0YkNBOUlDRmtiMk4xYldWdWRFbHpTRlJOVER0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZDJocGJHVWdLQ0FvYldGMFkyaGxjaUE5SUdWc1pXMWxiblJOWVhSamFHVnljMXRxS3l0ZEtTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnYldGMFkyaGxjaWdnWld4bGJTd2dZMjl1ZEdWNGRDQjhmQ0JrYjJOMWJXVnVkQ3dnZUcxc0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVZ6ZFd4MGN5NXdkWE5vS0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJwWmlBb0lHOTFkR1Z5Ylc5emRDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHUnBjbkoxYm5NZ1BTQmthWEp5ZFc1elZXNXBjWFZsTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEM4dklGUnlZV05ySUhWdWJXRjBZMmhsWkNCbGJHVnRaVzUwY3lCbWIzSWdjMlYwSUdacGJIUmxjbk5jYmx4MFhIUmNkRngwYVdZZ0tDQmllVk5sZENBcElIdGNibHgwWEhSY2RGeDBYSFF2THlCVWFHVjVJSGRwYkd3Z2FHRjJaU0JuYjI1bElIUm9jbTkxWjJnZ1lXeHNJSEJ2YzNOcFlteGxJRzFoZEdOb1pYSnpYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQW9aV3hsYlNBOUlDRnRZWFJqYUdWeUlDWW1JR1ZzWlcwcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGJXRjBZMmhsWkVOdmRXNTBMUzA3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1RHVnVaM1JvWlc0Z2RHaGxJR0Z5Y21GNUlHWnZjaUJsZG1WeWVTQmxiR1Z0Wlc1MExDQnRZWFJqYUdWa0lHOXlJRzV2ZEZ4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYzJWbFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RIVnViV0YwWTJobFpDNXdkWE5vS0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUdCcFlDQnBjeUJ1YjNjZ2RHaGxJR052ZFc1MElHOW1JR1ZzWlcxbGJuUnpJSFpwYzJsMFpXUWdZV0p2ZG1Vc0lHRnVaQ0JoWkdScGJtY2dhWFFnZEc4Z1lHMWhkR05vWldSRGIzVnVkR0JjYmx4MFhIUmNkQzh2SUcxaGEyVnpJSFJvWlNCc1lYUjBaWElnYm05dWJtVm5ZWFJwZG1VdVhHNWNkRngwWEhSdFlYUmphR1ZrUTI5MWJuUWdLejBnYVR0Y2JseHVYSFJjZEZ4MEx5OGdRWEJ3YkhrZ2MyVjBJR1pwYkhSbGNuTWdkRzhnZFc1dFlYUmphR1ZrSUdWc1pXMWxiblJ6WEc1Y2RGeDBYSFF2THlCT1QxUkZPaUJVYUdseklHTmhiaUJpWlNCemEybHdjR1ZrSUdsbUlIUm9aWEpsSUdGeVpTQnVieUIxYm0xaGRHTm9aV1FnWld4bGJXVnVkSE1nS0drdVpTNHNJR0J0WVhSamFHVmtRMjkxYm5SZ1hHNWNkRngwWEhRdkx5QmxjWFZoYkhNZ1lHbGdLU3dnZFc1c1pYTnpJSGRsSUdScFpHNG5kQ0IyYVhOcGRDQmZZVzU1WHlCbGJHVnRaVzUwY3lCcGJpQjBhR1VnWVdKdmRtVWdiRzl2Y0NCaVpXTmhkWE5sSUhkbElHaGhkbVZjYmx4MFhIUmNkQzh2SUc1dklHVnNaVzFsYm5RZ2JXRjBZMmhsY25NZ1lXNWtJRzV2SUhObFpXUXVYRzVjZEZ4MFhIUXZMeUJKYm1OeVpXMWxiblJwYm1jZ1lXNGdhVzVwZEdsaGJHeDVMWE4wY21sdVp5QmNJakJjSWlCZ2FXQWdZV3hzYjNkeklHQnBZQ0IwYnlCeVpXMWhhVzRnWVNCemRISnBibWNnYjI1c2VTQnBiaUIwYUdGMFhHNWNkRngwWEhRdkx5QmpZWE5sTENCM2FHbGphQ0IzYVd4c0lISmxjM1ZzZENCcGJpQmhJRndpTURCY0lpQmdiV0YwWTJobFpFTnZkVzUwWUNCMGFHRjBJR1JwWm1abGNuTWdabkp2YlNCZ2FXQWdZblYwSUdseklHRnNjMjljYmx4MFhIUmNkQzh2SUc1MWJXVnlhV05oYkd4NUlIcGxjbTh1WEc1Y2RGeDBYSFJwWmlBb0lHSjVVMlYwSUNZbUlHa2dJVDA5SUcxaGRHTm9aV1JEYjNWdWRDQXBJSHRjYmx4MFhIUmNkRngwYWlBOUlEQTdYRzVjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLRzFoZEdOb1pYSWdQU0J6WlhSTllYUmphR1Z5YzF0cUt5dGRLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnRZWFJqYUdWeUtDQjFibTFoZEdOb1pXUXNJSE5sZEUxaGRHTm9aV1FzSUdOdmJuUmxlSFFzSUhodGJDQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0J6WldWa0lDa2dlMXh1WEhSY2RGeDBYSFJjZEM4dklGSmxhVzUwWldkeVlYUmxJR1ZzWlcxbGJuUWdiV0YwWTJobGN5QjBieUJsYkdsdGFXNWhkR1VnZEdobElHNWxaV1FnWm05eUlITnZjblJwYm1kY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUcxaGRHTm9aV1JEYjNWdWRDQStJREFnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0FoS0hWdWJXRjBZMmhsWkZ0cFhTQjhmQ0J6WlhSTllYUmphR1ZrVzJsZEtTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ6WlhSTllYUmphR1ZrVzJsZElEMGdjRzl3TG1OaGJHd29JSEpsYzNWc2RITWdLVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RDOHZJRVJwYzJOaGNtUWdhVzVrWlhnZ2NHeGhZMlZvYjJ4a1pYSWdkbUZzZFdWeklIUnZJR2RsZENCdmJteDVJR0ZqZEhWaGJDQnRZWFJqYUdWelhHNWNkRngwWEhSY2RGeDBjMlYwVFdGMFkyaGxaQ0E5SUdOdmJtUmxibk5sS0NCelpYUk5ZWFJqYUdWa0lDazdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QkJaR1FnYldGMFkyaGxjeUIwYnlCeVpYTjFiSFJ6WEc1Y2RGeDBYSFJjZEhCMWMyZ3VZWEJ3Ykhrb0lISmxjM1ZzZEhNc0lITmxkRTFoZEdOb1pXUWdLVHRjYmx4dVhIUmNkRngwWEhRdkx5QlRaV1ZrYkdWemN5QnpaWFFnYldGMFkyaGxjeUJ6ZFdOalpXVmthVzVuSUcxMWJIUnBjR3hsSUhOMVkyTmxjM05tZFd3Z2JXRjBZMmhsY25NZ2MzUnBjSFZzWVhSbElITnZjblJwYm1kY2JseDBYSFJjZEZ4MGFXWWdLQ0J2ZFhSbGNtMXZjM1FnSmlZZ0lYTmxaV1FnSmlZZ2MyVjBUV0YwWTJobFpDNXNaVzVuZEdnZ1BpQXdJQ1ltWEc1Y2RGeDBYSFJjZEZ4MEtDQnRZWFJqYUdWa1EyOTFiblFnS3lCelpYUk5ZWFJqYUdWeWN5NXNaVzVuZEdnZ0tTQStJREVnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJUYVhwNmJHVXVkVzVwY1hWbFUyOXlkQ2dnY21WemRXeDBjeUFwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRTkyWlhKeWFXUmxJRzFoYm1sd2RXeGhkR2x2YmlCdlppQm5iRzlpWVd4eklHSjVJRzVsYzNSbFpDQnRZWFJqYUdWeWMxeHVYSFJjZEZ4MGFXWWdLQ0J2ZFhSbGNtMXZjM1FnS1NCN1hHNWNkRngwWEhSY2RHUnBjbkoxYm5NZ1BTQmthWEp5ZFc1elZXNXBjWFZsTzF4dVhIUmNkRngwWEhSdmRYUmxjbTF2YzNSRGIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZEVKaFkydDFjRHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJSFZ1YldGMFkyaGxaRHRjYmx4MFhIUjlPMXh1WEc1Y2RISmxkSFZ5YmlCaWVWTmxkQ0EvWEc1Y2RGeDBiV0Z5YTBaMWJtTjBhVzl1S0NCemRYQmxjazFoZEdOb1pYSWdLU0E2WEc1Y2RGeDBjM1Z3WlhKTllYUmphR1Z5TzF4dWZWeHVYRzVqYjIxd2FXeGxJRDBnVTJsNmVteGxMbU52YlhCcGJHVWdQU0JtZFc1amRHbHZiaWdnYzJWc1pXTjBiM0lzSUcxaGRHTm9JQzhxSUVsdWRHVnlibUZzSUZWelpTQlBibXg1SUNvdklDa2dlMXh1WEhSMllYSWdhU3hjYmx4MFhIUnpaWFJOWVhSamFHVnljeUE5SUZ0ZExGeHVYSFJjZEdWc1pXMWxiblJOWVhSamFHVnljeUE5SUZ0ZExGeHVYSFJjZEdOaFkyaGxaQ0E5SUdOdmJYQnBiR1Z5UTJGamFHVmJJSE5sYkdWamRHOXlJQ3NnWENJZ1hDSWdYVHRjYmx4dVhIUnBaaUFvSUNGallXTm9aV1FnS1NCN1hHNWNkRngwTHk4Z1IyVnVaWEpoZEdVZ1lTQm1kVzVqZEdsdmJpQnZaaUJ5WldOMWNuTnBkbVVnWm5WdVkzUnBiMjV6SUhSb1lYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z1kyaGxZMnNnWldGamFDQmxiR1Z0Wlc1MFhHNWNkRngwYVdZZ0tDQWhiV0YwWTJnZ0tTQjdYRzVjZEZ4MFhIUnRZWFJqYUNBOUlIUnZhMlZ1YVhwbEtDQnpaV3hsWTNSdmNpQXBPMXh1WEhSY2RIMWNibHgwWEhScElEMGdiV0YwWTJndWJHVnVaM1JvTzF4dVhIUmNkSGRvYVd4bElDZ2dhUzB0SUNrZ2UxeHVYSFJjZEZ4MFkyRmphR1ZrSUQwZ2JXRjBZMmhsY2taeWIyMVViMnRsYm5Nb0lHMWhkR05vVzJsZElDazdYRzVjZEZ4MFhIUnBaaUFvSUdOaFkyaGxaRnNnWlhod1lXNWtieUJkSUNrZ2UxeHVYSFJjZEZ4MFhIUnpaWFJOWVhSamFHVnljeTV3ZFhOb0tDQmpZV05vWldRZ0tUdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHVnNaVzFsYm5STllYUmphR1Z5Y3k1d2RYTm9LQ0JqWVdOb1pXUWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJEWVdOb1pTQjBhR1VnWTI5dGNHbHNaV1FnWm5WdVkzUnBiMjVjYmx4MFhIUmpZV05vWldRZ1BTQmpiMjF3YVd4bGNrTmhZMmhsS0NCelpXeGxZM1J2Y2l3Z2JXRjBZMmhsY2taeWIyMUhjbTkxY0UxaGRHTm9aWEp6S0NCbGJHVnRaVzUwVFdGMFkyaGxjbk1zSUhObGRFMWhkR05vWlhKeklDa2dLVHRjYmx4dVhIUmNkQzh2SUZOaGRtVWdjMlZzWldOMGIzSWdZVzVrSUhSdmEyVnVhWHBoZEdsdmJseHVYSFJjZEdOaFkyaGxaQzV6Wld4bFkzUnZjaUE5SUhObGJHVmpkRzl5TzF4dVhIUjlYRzVjZEhKbGRIVnliaUJqWVdOb1pXUTdYRzU5TzF4dVhHNHZLaXBjYmlBcUlFRWdiRzkzTFd4bGRtVnNJSE5sYkdWamRHbHZiaUJtZFc1amRHbHZiaUIwYUdGMElIZHZjbXR6SUhkcGRHZ2dVMmw2ZW14bEozTWdZMjl0Y0dsc1pXUmNiaUFxSUNCelpXeGxZM1J2Y2lCbWRXNWpkR2x2Ym5OY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZFWjFibU4wYVc5dWZTQnpaV3hsWTNSdmNpQkJJSE5sYkdWamRHOXlJRzl5SUdFZ2NISmxMV052YlhCcGJHVmtYRzRnS2lBZ2MyVnNaV04wYjNJZ1puVnVZM1JwYjI0Z1luVnBiSFFnZDJsMGFDQlRhWHA2YkdVdVkyOXRjR2xzWlZ4dUlDb2dRSEJoY21GdElIdEZiR1Z0Wlc1MGZTQmpiMjUwWlhoMFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmJjbVZ6ZFd4MGMxMWNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnR6WldWa1hTQkJJSE5sZENCdlppQmxiR1Z0Wlc1MGN5QjBieUJ0WVhSamFDQmhaMkZwYm5OMFhHNGdLaTljYm5ObGJHVmpkQ0E5SUZOcGVucHNaUzV6Wld4bFkzUWdQU0JtZFc1amRHbHZiaWdnYzJWc1pXTjBiM0lzSUdOdmJuUmxlSFFzSUhKbGMzVnNkSE1zSUhObFpXUWdLU0I3WEc1Y2RIWmhjaUJwTENCMGIydGxibk1zSUhSdmEyVnVMQ0IwZVhCbExDQm1hVzVrTEZ4dVhIUmNkR052YlhCcGJHVmtJRDBnZEhsd1pXOW1JSE5sYkdWamRHOXlJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnYzJWc1pXTjBiM0lzWEc1Y2RGeDBiV0YwWTJnZ1BTQWhjMlZsWkNBbUppQjBiMnRsYm1sNlpTZ2dLSE5sYkdWamRHOXlJRDBnWTI5dGNHbHNaV1F1YzJWc1pXTjBiM0lnZkh3Z2MyVnNaV04wYjNJcElDazdYRzVjYmx4MGNtVnpkV3gwY3lBOUlISmxjM1ZzZEhNZ2ZId2dXMTA3WEc1Y2JseDBMeThnVkhKNUlIUnZJRzFwYm1sdGFYcGxJRzl3WlhKaGRHbHZibk1nYVdZZ2RHaGxjbVVnYVhNZ2IyNXNlU0J2Ym1VZ2MyVnNaV04wYjNJZ2FXNGdkR2hsSUd4cGMzUWdZVzVrSUc1dklITmxaV1JjYmx4MEx5OGdLSFJvWlNCc1lYUjBaWElnYjJZZ2QyaHBZMmdnWjNWaGNtRnVkR1ZsY3lCMWN5QmpiMjUwWlhoMEtWeHVYSFJwWmlBb0lHMWhkR05vTG14bGJtZDBhQ0E5UFQwZ01TQXBJSHRjYmx4dVhIUmNkQzh2SUZKbFpIVmpaU0JqYjI1MFpYaDBJR2xtSUhSb1pTQnNaV0ZrYVc1bklHTnZiWEJ2ZFc1a0lITmxiR1ZqZEc5eUlHbHpJR0Z1SUVsRVhHNWNkRngwZEc5clpXNXpJRDBnYldGMFkyaGJNRjBnUFNCdFlYUmphRnN3WFM1emJHbGpaU2dnTUNBcE8xeHVYSFJjZEdsbUlDZ2dkRzlyWlc1ekxteGxibWQwYUNBK0lESWdKaVlnS0hSdmEyVnVJRDBnZEc5clpXNXpXekJkS1M1MGVYQmxJRDA5UFNCY0lrbEVYQ0lnSmlaY2JseDBYSFJjZEZ4MFkyOXVkR1Y0ZEM1dWIyUmxWSGx3WlNBOVBUMGdPU0FtSmlCa2IyTjFiV1Z1ZEVselNGUk5UQ0FtSmlCRmVIQnlMbkpsYkdGMGFYWmxXeUIwYjJ0bGJuTmJNVjB1ZEhsd1pTQmRJQ2tnZTF4dVhHNWNkRngwWEhSamIyNTBaWGgwSUQwZ0tDQkZlSEJ5TG1acGJtUmJYQ0pKUkZ3aVhTZ2dkRzlyWlc0dWJXRjBZMmhsYzFzd1hTNXlaWEJzWVdObEtISjFibVZ6WTJGd1pTd2dablZ1WlhOallYQmxLU3dnWTI5dWRHVjRkQ0FwSUh4OElGdGRJQ2xiTUYwN1hHNWNkRngwWEhScFppQW9JQ0ZqYjI1MFpYaDBJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBjenRjYmx4dVhIUmNkRngwTHk4Z1VISmxZMjl0Y0dsc1pXUWdiV0YwWTJobGNuTWdkMmxzYkNCemRHbHNiQ0IyWlhKcFpua2dZVzVqWlhOMGNua3NJSE52SUhOMFpYQWdkWEFnWVNCc1pYWmxiRnh1WEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnWTI5dGNHbHNaV1FnS1NCN1hHNWNkRngwWEhSY2RHTnZiblJsZUhRZ1BTQmpiMjUwWlhoMExuQmhjbVZ1ZEU1dlpHVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSE5sYkdWamRHOXlJRDBnYzJWc1pXTjBiM0l1YzJ4cFkyVW9JSFJ2YTJWdWN5NXphR2xtZENncExuWmhiSFZsTG14bGJtZDBhQ0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVabGRHTm9JR0VnYzJWbFpDQnpaWFFnWm05eUlISnBaMmgwTFhSdkxXeGxablFnYldGMFkyaHBibWRjYmx4MFhIUnBJRDBnYldGMFkyaEZlSEJ5VzF3aWJtVmxaSE5EYjI1MFpYaDBYQ0pkTG5SbGMzUW9JSE5sYkdWamRHOXlJQ2tnUHlBd0lEb2dkRzlyWlc1ekxteGxibWQwYUR0Y2JseDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RIUnZhMlZ1SUQwZ2RHOXJaVzV6VzJsZE8xeHVYRzVjZEZ4MFhIUXZMeUJCWW05eWRDQnBaaUIzWlNCb2FYUWdZU0JqYjIxaWFXNWhkRzl5WEc1Y2RGeDBYSFJwWmlBb0lFVjRjSEl1Y21Wc1lYUnBkbVZiSUNoMGVYQmxJRDBnZEc5clpXNHVkSGx3WlNrZ1hTQXBJSHRjYmx4MFhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnBaaUFvSUNobWFXNWtJRDBnUlhod2NpNW1hVzVrV3lCMGVYQmxJRjBwSUNrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJUWldGeVkyZ3NJR1Y0Y0dGdVpHbHVaeUJqYjI1MFpYaDBJR1p2Y2lCc1pXRmthVzVuSUhOcFlteHBibWNnWTI5dFltbHVZWFJ2Y25OY2JseDBYSFJjZEZ4MGFXWWdLQ0FvYzJWbFpDQTlJR1pwYm1Rb1hHNWNkRngwWEhSY2RGeDBkRzlyWlc0dWJXRjBZMmhsYzFzd1hTNXlaWEJzWVdObEtDQnlkVzVsYzJOaGNHVXNJR1oxYm1WelkyRndaU0FwTEZ4dVhIUmNkRngwWEhSY2RISnphV0pzYVc1bkxuUmxjM1FvSUhSdmEyVnVjMXN3WFM1MGVYQmxJQ2tnSmlZZ2RHVnpkRU52Ym5SbGVIUW9JR052Ym5SbGVIUXVjR0Z5Wlc1MFRtOWtaU0FwSUh4OElHTnZiblJsZUhSY2JseDBYSFJjZEZ4MEtTa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJKWmlCelpXVmtJR2x6SUdWdGNIUjVJRzl5SUc1dklIUnZhMlZ1Y3lCeVpXMWhhVzRzSUhkbElHTmhiaUJ5WlhSMWNtNGdaV0Z5YkhsY2JseDBYSFJjZEZ4MFhIUjBiMnRsYm5NdWMzQnNhV05sS0NCcExDQXhJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGMyVnNaV04wYjNJZ1BTQnpaV1ZrTG14bGJtZDBhQ0FtSmlCMGIxTmxiR1ZqZEc5eUtDQjBiMnRsYm5NZ0tUdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lDRnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RIQjFjMmd1WVhCd2JIa29JSEpsYzNWc2RITXNJSE5sWldRZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1WEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBMeThnUTI5dGNHbHNaU0JoYm1RZ1pYaGxZM1YwWlNCaElHWnBiSFJsY21sdVp5Qm1kVzVqZEdsdmJpQnBaaUJ2Ym1VZ2FYTWdibTkwSUhCeWIzWnBaR1ZrWEc1Y2RDOHZJRkJ5YjNacFpHVWdZRzFoZEdOb1lDQjBieUJoZG05cFpDQnlaWFJ2YTJWdWFYcGhkR2x2YmlCcFppQjNaU0J0YjJScFptbGxaQ0IwYUdVZ2MyVnNaV04wYjNJZ1lXSnZkbVZjYmx4MEtDQmpiMjF3YVd4bFpDQjhmQ0JqYjIxd2FXeGxLQ0J6Wld4bFkzUnZjaXdnYldGMFkyZ2dLU0FwS0Z4dVhIUmNkSE5sWldRc1hHNWNkRngwWTI5dWRHVjRkQ3hjYmx4MFhIUWhaRzlqZFcxbGJuUkpjMGhVVFV3c1hHNWNkRngwY21WemRXeDBjeXhjYmx4MFhIUWhZMjl1ZEdWNGRDQjhmQ0J5YzJsaWJHbHVaeTUwWlhOMEtDQnpaV3hsWTNSdmNpQXBJQ1ltSUhSbGMzUkRiMjUwWlhoMEtDQmpiMjUwWlhoMExuQmhjbVZ1ZEU1dlpHVWdLU0I4ZkNCamIyNTBaWGgwWEc1Y2RDazdYRzVjZEhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1ZlR0Y2JseHVMeThnVDI1bExYUnBiV1VnWVhOemFXZHViV1Z1ZEhOY2JseHVMeThnVTI5eWRDQnpkR0ZpYVd4cGRIbGNibk4xY0hCdmNuUXVjMjl5ZEZOMFlXSnNaU0E5SUdWNGNHRnVaRzh1YzNCc2FYUW9YQ0pjSWlrdWMyOXlkQ2dnYzI5eWRFOXlaR1Z5SUNrdWFtOXBiaWhjSWx3aUtTQTlQVDBnWlhod1lXNWtienRjYmx4dUx5OGdVM1Z3Y0c5eWREb2dRMmh5YjIxbElERTBMVE0xSzF4dUx5OGdRV3gzWVhseklHRnpjM1Z0WlNCa2RYQnNhV05oZEdWeklHbG1JSFJvWlhrZ1lYSmxiaWQwSUhCaGMzTmxaQ0IwYnlCMGFHVWdZMjl0Y0dGeWFYTnZiaUJtZFc1amRHbHZibHh1YzNWd2NHOXlkQzVrWlhSbFkzUkVkWEJzYVdOaGRHVnpJRDBnSVNGb1lYTkVkWEJzYVdOaGRHVTdYRzVjYmk4dklFbHVhWFJwWVd4cGVtVWdZV2RoYVc1emRDQjBhR1VnWkdWbVlYVnNkQ0JrYjJOMWJXVnVkRnh1YzJWMFJHOWpkVzFsYm5Rb0tUdGNibHh1THk4Z1UzVndjRzl5ZERvZ1YyVmlhMmwwUERVek55NHpNaUF0SUZOaFptRnlhU0EyTGpBdU15OURhSEp2YldVZ01qVWdLR1pwZUdWa0lHbHVJRU5vY205dFpTQXlOeWxjYmk4dklFUmxkR0ZqYUdWa0lHNXZaR1Z6SUdOdmJtWnZkVzVrYVc1bmJIa2dabTlzYkc5M0lDcGxZV05vSUc5MGFHVnlLbHh1YzNWd2NHOXlkQzV6YjNKMFJHVjBZV05vWldRZ1BTQmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUXZMeUJUYUc5MWJHUWdjbVYwZFhKdUlERXNJR0oxZENCeVpYUjFjbTV6SURRZ0tHWnZiR3h2ZDJsdVp5bGNibHgwY21WMGRYSnVJR1ZzTG1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVLQ0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2labWxsYkdSelpYUmNJaWtnS1NBbUlERTdYRzU5S1R0Y2JseHVMeThnVTNWd2NHOXlkRG9nU1VVOE9GeHVMeThnVUhKbGRtVnVkQ0JoZEhSeWFXSjFkR1V2Y0hKdmNHVnlkSGtnWENKcGJuUmxjbkJ2YkdGMGFXOXVYQ0pjYmk4dklHaDBkSEJ6T2k4dmJYTmtiaTV0YVdOeWIzTnZablF1WTI5dEwyVnVMWFZ6TDJ4cFluSmhjbmt2YlhNMU16WTBNamtsTWpoV1V5NDROU1V5T1M1aGMzQjRYRzVwWmlBb0lDRmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmxiQzVwYm01bGNraFVUVXdnUFNCY0lqeGhJR2h5WldZOUp5TW5Qand2WVQ1Y0lqdGNibHgwY21WMGRYSnVJR1ZzTG1acGNuTjBRMmhwYkdRdVoyVjBRWFIwY21saWRYUmxLRndpYUhKbFpsd2lLU0E5UFQwZ1hDSWpYQ0lnTzF4dWZTa2dLU0I3WEc1Y2RHRmtaRWhoYm1Sc1pTZ2dYQ0owZVhCbGZHaHlaV1o4YUdWcFoyaDBmSGRwWkhSb1hDSXNJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnVZVzFsTENCcGMxaE5UQ0FwSUh0Y2JseDBYSFJwWmlBb0lDRnBjMWhOVENBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNnZ2JtRnRaU3dnYm1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQmNJblI1Y0dWY0lpQS9JREVnT2lBeUlDazdYRzVjZEZ4MGZWeHVYSFI5S1R0Y2JuMWNibHh1THk4Z1UzVndjRzl5ZERvZ1NVVThPVnh1THk4Z1ZYTmxJR1JsWm1GMWJIUldZV3gxWlNCcGJpQndiR0ZqWlNCdlppQm5aWFJCZEhSeWFXSjFkR1VvWENKMllXeDFaVndpS1Z4dWFXWWdLQ0FoYzNWd2NHOXlkQzVoZEhSeWFXSjFkR1Z6SUh4OElDRmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmxiQzVwYm01bGNraFVUVXdnUFNCY0lqeHBibkIxZEM4K1hDSTdYRzVjZEdWc0xtWnBjbk4wUTJocGJHUXVjMlYwUVhSMGNtbGlkWFJsS0NCY0luWmhiSFZsWENJc0lGd2lYQ0lnS1R0Y2JseDBjbVYwZFhKdUlHVnNMbVpwY25OMFEyaHBiR1F1WjJWMFFYUjBjbWxpZFhSbEtDQmNJblpoYkhWbFhDSWdLU0E5UFQwZ1hDSmNJanRjYm4wcElDa2dlMXh1WEhSaFpHUklZVzVrYkdVb0lGd2lkbUZzZFdWY0lpd2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHNWhiV1VzSUdseldFMU1JQ2tnZTF4dVhIUmNkR2xtSUNnZ0lXbHpXRTFNSUNZbUlHVnNaVzB1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQTlQVDBnWENKcGJuQjFkRndpSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMHVaR1ZtWVhWc2RGWmhiSFZsTzF4dVhIUmNkSDFjYmx4MGZTazdYRzU5WEc1Y2JpOHZJRk4xY0hCdmNuUTZJRWxGUERsY2JpOHZJRlZ6WlNCblpYUkJkSFJ5YVdKMWRHVk9iMlJsSUhSdklHWmxkR05vSUdKdmIyeGxZVzV6SUhkb1pXNGdaMlYwUVhSMGNtbGlkWFJsSUd4cFpYTmNibWxtSUNnZ0lXRnpjMlZ5ZENobWRXNWpkR2x2YmlnZ1pXd2dLU0I3WEc1Y2RISmxkSFZ5YmlCbGJDNW5aWFJCZEhSeWFXSjFkR1VvWENKa2FYTmhZbXhsWkZ3aUtTQTlQU0J1ZFd4c08xeHVmU2tnS1NCN1hHNWNkR0ZrWkVoaGJtUnNaU2dnWW05dmJHVmhibk1zSUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0J1WVcxbExDQnBjMWhOVENBcElIdGNibHgwWEhSMllYSWdkbUZzTzF4dVhIUmNkR2xtSUNnZ0lXbHpXRTFNSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMWJJRzVoYldVZ1hTQTlQVDBnZEhKMVpTQS9JRzVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0E2WEc1Y2RGeDBYSFJjZEZ4MEtIWmhiQ0E5SUdWc1pXMHVaMlYwUVhSMGNtbGlkWFJsVG05a1pTZ2dibUZ0WlNBcEtTQW1KaUIyWVd3dWMzQmxZMmxtYVdWa0lEOWNibHgwWEhSY2RGeDBYSFIyWVd3dWRtRnNkV1VnT2x4dVhIUmNkRngwWEhSdWRXeHNPMXh1WEhSY2RIMWNibHgwZlNrN1hHNTlYRzVjYm5KbGRIVnliaUJUYVhwNmJHVTdYRzVjYm4wcEtDQjNhVzVrYjNjZ0tUdGNibHh1WEc1Y2JtcFJkV1Z5ZVM1bWFXNWtJRDBnVTJsNmVteGxPMXh1YWxGMVpYSjVMbVY0Y0hJZ1BTQlRhWHA2YkdVdWMyVnNaV04wYjNKek8xeHVYRzR2THlCRVpYQnlaV05oZEdWa1hHNXFVWFZsY25rdVpYaHdjbHNnWENJNlhDSWdYU0E5SUdwUmRXVnllUzVsZUhCeUxuQnpaWFZrYjNNN1hHNXFVWFZsY25rdWRXNXBjWFZsVTI5eWRDQTlJR3BSZFdWeWVTNTFibWx4ZFdVZ1BTQlRhWHA2YkdVdWRXNXBjWFZsVTI5eWREdGNibXBSZFdWeWVTNTBaWGgwSUQwZ1UybDZlbXhsTG1kbGRGUmxlSFE3WEc1cVVYVmxjbmt1YVhOWVRVeEViMk1nUFNCVGFYcDZiR1V1YVhOWVRVdzdYRzVxVVhWbGNua3VZMjl1ZEdGcGJuTWdQU0JUYVhwNmJHVXVZMjl1ZEdGcGJuTTdYRzVxVVhWbGNua3VaWE5qWVhCbFUyVnNaV04wYjNJZ1BTQlRhWHA2YkdVdVpYTmpZWEJsTzF4dVhHNWNibHh1WEc1MllYSWdaR2x5SUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdScGNpd2dkVzUwYVd3Z0tTQjdYRzVjZEhaaGNpQnRZWFJqYUdWa0lEMGdXMTBzWEc1Y2RGeDBkSEoxYm1OaGRHVWdQU0IxYm5ScGJDQWhQVDBnZFc1a1pXWnBibVZrTzF4dVhHNWNkSGRvYVd4bElDZ2dLQ0JsYkdWdElEMGdaV3hsYlZzZ1pHbHlJRjBnS1NBbUppQmxiR1Z0TG01dlpHVlVlWEJsSUNFOVBTQTVJQ2tnZTF4dVhIUmNkR2xtSUNnZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2RISjFibU5oZEdVZ0ppWWdhbEYxWlhKNUtDQmxiR1Z0SUNrdWFYTW9JSFZ1ZEdsc0lDa2dLU0I3WEc1Y2RGeDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBiV0YwWTJobFpDNXdkWE5vS0NCbGJHVnRJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNWNkSEpsZEhWeWJpQnRZWFJqYUdWa08xeHVmVHRjYmx4dVhHNTJZWElnYzJsaWJHbHVaM01nUFNCbWRXNWpkR2x2YmlnZ2Jpd2daV3hsYlNBcElIdGNibHgwZG1GeUlHMWhkR05vWldRZ1BTQmJYVHRjYmx4dVhIUm1iM0lnS0NBN0lHNDdJRzRnUFNCdUxtNWxlSFJUYVdKc2FXNW5JQ2tnZTF4dVhIUmNkR2xtSUNnZ2JpNXViMlJsVkhsd1pTQTlQVDBnTVNBbUppQnVJQ0U5UFNCbGJHVnRJQ2tnZTF4dVhIUmNkRngwYldGMFkyaGxaQzV3ZFhOb0tDQnVJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwY21WMGRYSnVJRzFoZEdOb1pXUTdYRzU5TzF4dVhHNWNiblpoY2lCeWJtVmxaSE5EYjI1MFpYaDBJRDBnYWxGMVpYSjVMbVY0Y0hJdWJXRjBZMmd1Ym1WbFpITkRiMjUwWlhoME8xeHVYRzUyWVhJZ2NuTnBibWRzWlZSaFp5QTlJQ2dnTDE0OEtGdGhMWHBkVzE1Y1hDOWNYREErT2x4Y2VESXdYRngwWEZ4eVhGeHVYRnhtWFNvcFcxeGNlREl3WEZ4MFhGeHlYRnh1WEZ4bVhTcGNYQzgvUGlnL09qeGNYQzljWERFK2ZDa2tMMmtnS1R0Y2JseHVYRzVjYm5aaGNpQnlhWE5UYVcxd2JHVWdQU0F2WGk1Ylhqb2pYRnhiWEZ3dUxGMHFKQzg3WEc1Y2JpOHZJRWx0Y0d4bGJXVnVkQ0IwYUdVZ2FXUmxiblJwWTJGc0lHWjFibU4wYVc5dVlXeHBkSGtnWm05eUlHWnBiSFJsY2lCaGJtUWdibTkwWEc1bWRXNWpkR2x2YmlCM2FXNXViM2NvSUdWc1pXMWxiblJ6TENCeGRXRnNhV1pwWlhJc0lHNXZkQ0FwSUh0Y2JseDBhV1lnS0NCcVVYVmxjbmt1YVhOR2RXNWpkR2x2YmlnZ2NYVmhiR2xtYVdWeUlDa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1bmNtVndLQ0JsYkdWdFpXNTBjeXdnWm5WdVkzUnBiMjRvSUdWc1pXMHNJR2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnSVNGeGRXRnNhV1pwWlhJdVkyRnNiQ2dnWld4bGJTd2dhU3dnWld4bGJTQXBJQ0U5UFNCdWIzUTdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNWNibHgwTHk4Z1UybHVaMnhsSUdWc1pXMWxiblJjYmx4MGFXWWdLQ0J4ZFdGc2FXWnBaWEl1Ym05a1pWUjVjR1VnS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNW5jbVZ3S0NCbGJHVnRaVzUwY3l3Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnS0NCbGJHVnRJRDA5UFNCeGRXRnNhV1pwWlhJZ0tTQWhQVDBnYm05ME8xeHVYSFJjZEgwZ0tUdGNibHgwZlZ4dVhHNWNkQzh2SUVGeWNtRjViR2xyWlNCdlppQmxiR1Z0Wlc1MGN5QW9hbEYxWlhKNUxDQmhjbWQxYldWdWRITXNJRUZ5Y21GNUtWeHVYSFJwWmlBb0lIUjVjR1Z2WmlCeGRXRnNhV1pwWlhJZ0lUMDlJRndpYzNSeWFXNW5YQ0lnS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNW5jbVZ3S0NCbGJHVnRaVzUwY3l3Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnS0NCcGJtUmxlRTltTG1OaGJHd29JSEYxWVd4cFptbGxjaXdnWld4bGJTQXBJRDRnTFRFZ0tTQWhQVDBnYm05ME8xeHVYSFJjZEgwZ0tUdGNibHgwZlZ4dVhHNWNkQzh2SUZOcGJYQnNaU0J6Wld4bFkzUnZjaUIwYUdGMElHTmhiaUJpWlNCbWFXeDBaWEpsWkNCa2FYSmxZM1JzZVN3Z2NtVnRiM1pwYm1jZ2JtOXVMVVZzWlcxbGJuUnpYRzVjZEdsbUlDZ2djbWx6VTJsdGNHeGxMblJsYzNRb0lIRjFZV3hwWm1sbGNpQXBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnFVWFZsY25rdVptbHNkR1Z5S0NCeGRXRnNhV1pwWlhJc0lHVnNaVzFsYm5SekxDQnViM1FnS1R0Y2JseDBmVnh1WEc1Y2RDOHZJRU52YlhCc1pYZ2djMlZzWldOMGIzSXNJR052YlhCaGNtVWdkR2hsSUhSM2J5QnpaWFJ6TENCeVpXMXZkbWx1WnlCdWIyNHRSV3hsYldWdWRITmNibHgwY1hWaGJHbG1hV1Z5SUQwZ2FsRjFaWEo1TG1acGJIUmxjaWdnY1hWaGJHbG1hV1Z5TENCbGJHVnRaVzUwY3lBcE8xeHVYSFJ5WlhSMWNtNGdhbEYxWlhKNUxtZHlaWEFvSUdWc1pXMWxiblJ6TENCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdLQ0JwYm1SbGVFOW1MbU5oYkd3b0lIRjFZV3hwWm1sbGNpd2daV3hsYlNBcElENGdMVEVnS1NBaFBUMGdibTkwSUNZbUlHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlERTdYRzVjZEgwZ0tUdGNibjFjYmx4dWFsRjFaWEo1TG1acGJIUmxjaUE5SUdaMWJtTjBhVzl1S0NCbGVIQnlMQ0JsYkdWdGN5d2dibTkwSUNrZ2UxeHVYSFIyWVhJZ1pXeGxiU0E5SUdWc1pXMXpXeUF3SUYwN1hHNWNibHgwYVdZZ0tDQnViM1FnS1NCN1hHNWNkRngwWlhod2NpQTlJRndpT201dmRDaGNJaUFySUdWNGNISWdLeUJjSWlsY0lqdGNibHgwZlZ4dVhHNWNkR2xtSUNnZ1pXeGxiWE11YkdWdVozUm9JRDA5UFNBeElDWW1JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNW1hVzVrTG0xaGRHTm9aWE5UWld4bFkzUnZjaWdnWld4bGJTd2daWGh3Y2lBcElEOGdXeUJsYkdWdElGMGdPaUJiWFR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCcVVYVmxjbmt1Wm1sdVpDNXRZWFJqYUdWektDQmxlSEJ5TENCcVVYVmxjbmt1WjNKbGNDZ2daV3hsYlhNc0lHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4TzF4dVhIUjlJQ2tnS1R0Y2JuMDdYRzVjYm1wUmRXVnllUzVtYmk1bGVIUmxibVFvSUh0Y2JseDBabWx1WkRvZ1puVnVZM1JwYjI0b0lITmxiR1ZqZEc5eUlDa2dlMXh1WEhSY2RIWmhjaUJwTENCeVpYUXNYRzVjZEZ4MFhIUnNaVzRnUFNCMGFHbHpMbXhsYm1kMGFDeGNibHgwWEhSY2RITmxiR1lnUFNCMGFHbHpPMXh1WEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnYzJWc1pXTjBiM0lnSVQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lHcFJkV1Z5ZVNnZ2MyVnNaV04wYjNJZ0tTNW1hV3gwWlhJb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJtYjNJZ0tDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYWxGMVpYSjVMbU52Ym5SaGFXNXpLQ0J6Wld4bVd5QnBJRjBzSUhSb2FYTWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU0FwSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMElEMGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lGdGRJQ2s3WEc1Y2JseDBYSFJtYjNJZ0tDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVMbVpwYm1Rb0lITmxiR1ZqZEc5eUxDQnpaV3htV3lCcElGMHNJSEpsZENBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJzWlc0Z1BpQXhJRDhnYWxGMVpYSjVMblZ1YVhGMVpWTnZjblFvSUhKbGRDQXBJRG9nY21WME8xeHVYSFI5TEZ4dVhIUm1hV3gwWlhJNklHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTV3ZFhOb1UzUmhZMnNvSUhkcGJtNXZkeWdnZEdocGN5d2djMlZzWldOMGIzSWdmSHdnVzEwc0lHWmhiSE5sSUNrZ0tUdGNibHgwZlN4Y2JseDBibTkwT2lCbWRXNWpkR2x2YmlnZ2MyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVjSFZ6YUZOMFlXTnJLQ0IzYVc1dWIzY29JSFJvYVhNc0lITmxiR1ZqZEc5eUlIeDhJRnRkTENCMGNuVmxJQ2tnS1R0Y2JseDBmU3hjYmx4MGFYTTZJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdJU0YzYVc1dWIzY29YRzVjZEZ4MFhIUjBhR2x6TEZ4dVhHNWNkRngwWEhRdkx5QkpaaUIwYUdseklHbHpJR0VnY0c5emFYUnBiMjVoYkM5eVpXeGhkR2wyWlNCelpXeGxZM1J2Y2l3Z1kyaGxZMnNnYldWdFltVnljMmhwY0NCcGJpQjBhR1VnY21WMGRYSnVaV1FnYzJWMFhHNWNkRngwWEhRdkx5QnpieUFrS0Z3aWNEcG1hWEp6ZEZ3aUtTNXBjeWhjSW5BNmJHRnpkRndpS1NCM2IyNG5kQ0J5WlhSMWNtNGdkSEoxWlNCbWIzSWdZU0JrYjJNZ2QybDBhQ0IwZDI4Z1hDSndYQ0l1WEc1Y2RGeDBYSFIwZVhCbGIyWWdjMlZzWldOMGIzSWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWWdjbTVsWldSelEyOXVkR1Y0ZEM1MFpYTjBLQ0J6Wld4bFkzUnZjaUFwSUQ5Y2JseDBYSFJjZEZ4MGFsRjFaWEo1S0NCelpXeGxZM1J2Y2lBcElEcGNibHgwWEhSY2RGeDBjMlZzWldOMGIzSWdmSHdnVzEwc1hHNWNkRngwWEhSbVlXeHpaVnh1WEhSY2RDa3ViR1Z1WjNSb08xeHVYSFI5WEc1OUlDazdYRzVjYmx4dUx5OGdTVzVwZEdsaGJHbDZaU0JoSUdwUmRXVnllU0J2WW1wbFkzUmNibHh1WEc0dkx5QkJJR05sYm5SeVlXd2djbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQnliMjkwSUdwUmRXVnllU2hrYjJOMWJXVnVkQ2xjYm5aaGNpQnliMjkwYWxGMVpYSjVMRnh1WEc1Y2RDOHZJRUVnYzJsdGNHeGxJSGRoZVNCMGJ5QmphR1ZqYXlCbWIzSWdTRlJOVENCemRISnBibWR6WEc1Y2RDOHZJRkJ5YVc5eWFYUnBlbVVnSTJsa0lHOTJaWElnUEhSaFp6NGdkRzhnWVhadmFXUWdXRk5USUhacFlTQnNiMk5oZEdsdmJpNW9ZWE5vSUNnak9UVXlNU2xjYmx4MEx5OGdVM1J5YVdOMElFaFVUVXdnY21WamIyZHVhWFJwYjI0Z0tDTXhNVEk1TURvZ2JYVnpkQ0J6ZEdGeWRDQjNhWFJvSUR3cFhHNWNkQzh2SUZOb2IzSjBZM1YwSUhOcGJYQnNaU0FqYVdRZ1kyRnpaU0JtYjNJZ2MzQmxaV1JjYmx4MGNuRjFhV05yUlhod2NpQTlJQzllS0Q4NlhGeHpLaWc4VzF4Y2QxeGNWMTByUGlsYlhqNWRLbndqS0Z0Y1hIY3RYU3NwS1NRdkxGeHVYRzVjZEdsdWFYUWdQU0JxVVhWbGNua3VabTR1YVc1cGRDQTlJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaXdnWTI5dWRHVjRkQ3dnY205dmRDQXBJSHRjYmx4MFhIUjJZWElnYldGMFkyZ3NJR1ZzWlcwN1hHNWNibHgwWEhRdkx5QklRVTVFVEVVNklDUW9YQ0pjSWlrc0lDUW9iblZzYkNrc0lDUW9kVzVrWldacGJtVmtLU3dnSkNobVlXeHpaU2xjYmx4MFhIUnBaaUFvSUNGelpXeGxZM1J2Y2lBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRTFsZEdodlpDQnBibWwwS0NrZ1lXTmpaWEIwY3lCaGJpQmhiSFJsY201aGRHVWdjbTl2ZEdwUmRXVnllVnh1WEhSY2RDOHZJSE52SUcxcFozSmhkR1VnWTJGdUlITjFjSEJ2Y25RZ2FsRjFaWEo1TG5OMVlpQW9aMmd0TWpFd01TbGNibHgwWEhSeWIyOTBJRDBnY205dmRDQjhmQ0J5YjI5MGFsRjFaWEo1TzF4dVhHNWNkRngwTHk4Z1NHRnVaR3hsSUVoVVRVd2djM1J5YVc1bmMxeHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0J6Wld4bFkzUnZjbHNnTUNCZElEMDlQU0JjSWp4Y0lpQW1KbHh1WEhSY2RGeDBYSFJ6Wld4bFkzUnZjbHNnYzJWc1pXTjBiM0l1YkdWdVozUm9JQzBnTVNCZElEMDlQU0JjSWo1Y0lpQW1KbHh1WEhSY2RGeDBYSFJ6Wld4bFkzUnZjaTVzWlc1bmRHZ2dQajBnTXlBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCQmMzTjFiV1VnZEdoaGRDQnpkSEpwYm1keklIUm9ZWFFnYzNSaGNuUWdZVzVrSUdWdVpDQjNhWFJvSUR3K0lHRnlaU0JJVkUxTUlHRnVaQ0J6YTJsd0lIUm9aU0J5WldkbGVDQmphR1ZqYTF4dVhIUmNkRngwWEhSdFlYUmphQ0E5SUZzZ2JuVnNiQ3dnYzJWc1pXTjBiM0lzSUc1MWJHd2dYVHRjYmx4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwYldGMFkyZ2dQU0J5Y1hWcFkydEZlSEJ5TG1WNFpXTW9JSE5sYkdWamRHOXlJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFMWhkR05vSUdoMGJXd2diM0lnYldGclpTQnpkWEpsSUc1dklHTnZiblJsZUhRZ2FYTWdjM0JsWTJsbWFXVmtJR1p2Y2lBamFXUmNibHgwWEhSY2RHbG1JQ2dnYldGMFkyZ2dKaVlnS0NCdFlYUmphRnNnTVNCZElIeDhJQ0ZqYjI1MFpYaDBJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnU0VGT1JFeEZPaUFrS0doMGJXd3BJQzArSUNRb1lYSnlZWGtwWEc1Y2RGeDBYSFJjZEdsbUlDZ2diV0YwWTJoYklERWdYU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmpiMjUwWlhoMElEMGdZMjl1ZEdWNGRDQnBibk4wWVc1alpXOW1JR3BSZFdWeWVTQS9JR052Ym5SbGVIUmJJREFnWFNBNklHTnZiblJsZUhRN1hHNWNibHgwWEhSY2RGeDBYSFF2THlCUGNIUnBiMjRnZEc4Z2NuVnVJSE5qY21sd2RITWdhWE1nZEhKMVpTQm1iM0lnWW1GamF5MWpiMjF3WVhSY2JseDBYSFJjZEZ4MFhIUXZMeUJKYm5SbGJuUnBiMjVoYkd4NUlHeGxkQ0IwYUdVZ1pYSnliM0lnWW1VZ2RHaHliM2R1SUdsbUlIQmhjbk5sU0ZSTlRDQnBjeUJ1YjNRZ2NISmxjMlZ1ZEZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1dFpYSm5aU2dnZEdocGN5d2dhbEYxWlhKNUxuQmhjbk5sU0ZSTlRDaGNibHgwWEhSY2RGeDBYSFJjZEcxaGRHTm9XeUF4SUYwc1hHNWNkRngwWEhSY2RGeDBYSFJqYjI1MFpYaDBJQ1ltSUdOdmJuUmxlSFF1Ym05a1pWUjVjR1VnUHlCamIyNTBaWGgwTG05M2JtVnlSRzlqZFcxbGJuUWdmSHdnWTI5dWRHVjRkQ0E2SUdSdlkzVnRaVzUwTEZ4dVhIUmNkRngwWEhSY2RGeDBkSEoxWlZ4dVhIUmNkRngwWEhSY2RDa2dLVHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRWhCVGtSTVJUb2dKQ2hvZEcxc0xDQndjbTl3Y3lsY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUhKemFXNW5iR1ZVWVdjdWRHVnpkQ2dnYldGMFkyaGJJREVnWFNBcElDWW1JR3BSZFdWeWVTNXBjMUJzWVdsdVQySnFaV04wS0NCamIyNTBaWGgwSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbWIzSWdLQ0J0WVhSamFDQnBiaUJqYjI1MFpYaDBJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklGQnliM0JsY25ScFpYTWdiMllnWTI5dWRHVjRkQ0JoY21VZ1kyRnNiR1ZrSUdGeklHMWxkR2h2WkhNZ2FXWWdjRzl6YzJsaWJHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnZEdocGMxc2diV0YwWTJnZ1hTQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhSb2FYTmJJRzFoZEdOb0lGMG9JR052Ym5SbGVIUmJJRzFoZEdOb0lGMGdLVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlBdUxpNWhibVFnYjNSb1pYSjNhWE5sSUhObGRDQmhjeUJoZEhSeWFXSjFkR1Z6WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBkR2hwY3k1aGRIUnlLQ0J0WVhSamFDd2dZMjl1ZEdWNGRGc2diV0YwWTJnZ1hTQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjYmx4MFhIUmNkRngwTHk4Z1NFRk9SRXhGT2lBa0tDTnBaQ2xjYmx4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSbGJHVnRJRDBnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9JRzFoZEdOb1d5QXlJRjBnS1R0Y2JseHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1pXeGxiU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1NXNXFaV04wSUhSb1pTQmxiR1Z0Wlc1MElHUnBjbVZqZEd4NUlHbHVkRzhnZEdobElHcFJkV1Z5ZVNCdlltcGxZM1JjYmx4MFhIUmNkRngwWEhSY2RIUm9hWE5iSURBZ1hTQTlJR1ZzWlcwN1hHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxteGxibWQwYUNBOUlERTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFaEJUa1JNUlRvZ0pDaGxlSEJ5TENBa0tDNHVMaWtwWEc1Y2RGeDBYSFI5SUdWc2MyVWdhV1lnS0NBaFkyOXVkR1Y0ZENCOGZDQmpiMjUwWlhoMExtcHhkV1Z5ZVNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDZ2dZMjl1ZEdWNGRDQjhmQ0J5YjI5MElDa3VabWx1WkNnZ2MyVnNaV04wYjNJZ0tUdGNibHh1WEhSY2RGeDBMeThnU0VGT1JFeEZPaUFrS0dWNGNISXNJR052Ym5SbGVIUXBYRzVjZEZ4MFhIUXZMeUFvZDJocFkyZ2dhWE1nYW5WemRDQmxjWFZwZG1Gc1pXNTBJSFJ2T2lBa0tHTnZiblJsZUhRcExtWnBibVFvWlhod2NpbGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0NCamIyNTBaWGgwSUNrdVptbHVaQ2dnYzJWc1pXTjBiM0lnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEM4dklFaEJUa1JNUlRvZ0pDaEVUMDFGYkdWdFpXNTBLVnh1WEhSY2RIMGdaV3h6WlNCcFppQW9JSE5sYkdWamRHOXlMbTV2WkdWVWVYQmxJQ2tnZTF4dVhIUmNkRngwZEdocGMxc2dNQ0JkSUQwZ2MyVnNaV04wYjNJN1hHNWNkRngwWEhSMGFHbHpMbXhsYm1kMGFDQTlJREU3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseHVYSFJjZEM4dklFaEJUa1JNUlRvZ0pDaG1kVzVqZEdsdmJpbGNibHgwWEhRdkx5QlRhRzl5ZEdOMWRDQm1iM0lnWkc5amRXMWxiblFnY21WaFpIbGNibHgwWEhSOUlHVnNjMlVnYVdZZ0tDQnFVWFZsY25rdWFYTkdkVzVqZEdsdmJpZ2djMlZzWldOMGIzSWdLU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJ5YjI5MExuSmxZV1I1SUNFOVBTQjFibVJsWm1sdVpXUWdQMXh1WEhSY2RGeDBYSFJ5YjI5MExuSmxZV1I1S0NCelpXeGxZM1J2Y2lBcElEcGNibHh1WEhSY2RGeDBYSFF2THlCRmVHVmpkWFJsSUdsdGJXVmthV0YwWld4NUlHbG1JSEpsWVdSNUlHbHpJRzV2ZENCd2NtVnpaVzUwWEc1Y2RGeDBYSFJjZEhObGJHVmpkRzl5S0NCcVVYVmxjbmtnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdhbEYxWlhKNUxtMWhhMlZCY25KaGVTZ2djMlZzWldOMGIzSXNJSFJvYVhNZ0tUdGNibHgwZlR0Y2JseHVMeThnUjJsMlpTQjBhR1VnYVc1cGRDQm1kVzVqZEdsdmJpQjBhR1VnYWxGMVpYSjVJSEJ5YjNSdmRIbHdaU0JtYjNJZ2JHRjBaWElnYVc1emRHRnVkR2xoZEdsdmJseHVhVzVwZEM1d2NtOTBiM1I1Y0dVZ1BTQnFVWFZsY25rdVptNDdYRzVjYmk4dklFbHVhWFJwWVd4cGVtVWdZMlZ1ZEhKaGJDQnlaV1psY21WdVkyVmNibkp2YjNScVVYVmxjbmtnUFNCcVVYVmxjbmtvSUdSdlkzVnRaVzUwSUNrN1hHNWNibHh1ZG1GeUlISndZWEpsYm5SemNISmxkaUE5SUM5ZUtEODZjR0Z5Wlc1MGMzeHdjbVYyS0Q4NlZXNTBhV3g4UVd4c0tTa3ZMRnh1WEc1Y2RDOHZJRTFsZEdodlpITWdaM1ZoY21GdWRHVmxaQ0IwYnlCd2NtOWtkV05sSUdFZ2RXNXBjWFZsSUhObGRDQjNhR1Z1SUhOMFlYSjBhVzVuSUdaeWIyMGdZU0IxYm1seGRXVWdjMlYwWEc1Y2RHZDFZWEpoYm5SbFpXUlZibWx4ZFdVZ1BTQjdYRzVjZEZ4MFkyaHBiR1J5Wlc0NklIUnlkV1VzWEc1Y2RGeDBZMjl1ZEdWdWRITTZJSFJ5ZFdVc1hHNWNkRngwYm1WNGREb2dkSEoxWlN4Y2JseDBYSFJ3Y21WMk9pQjBjblZsWEc1Y2RIMDdYRzVjYm1wUmRXVnllUzVtYmk1bGVIUmxibVFvSUh0Y2JseDBhR0Z6T2lCbWRXNWpkR2x2YmlnZ2RHRnlaMlYwSUNrZ2UxeHVYSFJjZEhaaGNpQjBZWEpuWlhSeklEMGdhbEYxWlhKNUtDQjBZWEpuWlhRc0lIUm9hWE1nS1N4Y2JseDBYSFJjZEd3Z1BTQjBZWEpuWlhSekxteGxibWQwYUR0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxtWnBiSFJsY2lnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUjJZWElnYVNBOUlEQTdYRzVjZEZ4MFhIUm1iM0lnS0NBN0lHa2dQQ0JzT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtTnZiblJoYVc1ektDQjBhR2x6TENCMFlYSm5aWFJ6V3lCcElGMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBnS1R0Y2JseDBmU3hjYmx4dVhIUmpiRzl6WlhOME9pQm1kVzVqZEdsdmJpZ2djMlZzWldOMGIzSnpMQ0JqYjI1MFpYaDBJQ2tnZTF4dVhIUmNkSFpoY2lCamRYSXNYRzVjZEZ4MFhIUnBJRDBnTUN4Y2JseDBYSFJjZEd3Z1BTQjBhR2x6TG14bGJtZDBhQ3hjYmx4MFhIUmNkRzFoZEdOb1pXUWdQU0JiWFN4Y2JseDBYSFJjZEhSaGNtZGxkSE1nUFNCMGVYQmxiMllnYzJWc1pXTjBiM0p6SUNFOVBTQmNJbk4wY21sdVoxd2lJQ1ltSUdwUmRXVnllU2dnYzJWc1pXTjBiM0p6SUNrN1hHNWNibHgwWEhRdkx5QlFiM05wZEdsdmJtRnNJSE5sYkdWamRHOXljeUJ1WlhabGNpQnRZWFJqYUN3Z2MybHVZMlVnZEdobGNtVW5jeUJ1YnlCZmMyVnNaV04wYVc5dVh5QmpiMjUwWlhoMFhHNWNkRngwYVdZZ0tDQWhjbTVsWldSelEyOXVkR1Y0ZEM1MFpYTjBLQ0J6Wld4bFkzUnZjbk1nS1NBcElIdGNibHgwWEhSY2RHWnZjaUFvSURzZ2FTQThJR3c3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwWm05eUlDZ2dZM1Z5SUQwZ2RHaHBjMXNnYVNCZE95QmpkWElnSmlZZ1kzVnlJQ0U5UFNCamIyNTBaWGgwT3lCamRYSWdQU0JqZFhJdWNHRnlaVzUwVG05a1pTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRUZzZDJGNWN5QnphMmx3SUdSdlkzVnRaVzUwSUdaeVlXZHRaVzUwYzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWTNWeUxtNXZaR1ZVZVhCbElEd2dNVEVnSmlZZ0tDQjBZWEpuWlhSeklEOWNibHgwWEhSY2RGeDBYSFJjZEhSaGNtZGxkSE11YVc1a1pYZ29JR04xY2lBcElENGdMVEVnT2x4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlCRWIyNG5kQ0J3WVhOeklHNXZiaTFsYkdWdFpXNTBjeUIwYnlCVGFYcDZiR1ZjYmx4MFhIUmNkRngwWEhSY2RHTjFjaTV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUnFVWFZsY25rdVptbHVaQzV0WVhSamFHVnpVMlZzWldOMGIzSW9JR04xY2l3Z2MyVnNaV04wYjNKeklDa2dLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwYldGMFkyaGxaQzV3ZFhOb0tDQmpkWElnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG5CMWMyaFRkR0ZqYXlnZ2JXRjBZMmhsWkM1c1pXNW5kR2dnUGlBeElEOGdhbEYxWlhKNUxuVnVhWEYxWlZOdmNuUW9JRzFoZEdOb1pXUWdLU0E2SUcxaGRHTm9aV1FnS1R0Y2JseDBmU3hjYmx4dVhIUXZMeUJFWlhSbGNtMXBibVVnZEdobElIQnZjMmwwYVc5dUlHOW1JR0Z1SUdWc1pXMWxiblFnZDJsMGFHbHVJSFJvWlNCelpYUmNibHgwYVc1a1pYZzZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEc1Y2RGeDBMeThnVG04Z1lYSm5kVzFsYm5Rc0lISmxkSFZ5YmlCcGJtUmxlQ0JwYmlCd1lYSmxiblJjYmx4MFhIUnBaaUFvSUNGbGJHVnRJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJQ2dnZEdocGMxc2dNQ0JkSUNZbUlIUm9hWE5iSURBZ1hTNXdZWEpsYm5ST2IyUmxJQ2tnUHlCMGFHbHpMbVpwY25OMEtDa3VjSEpsZGtGc2JDZ3BMbXhsYm1kMGFDQTZJQzB4TzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVsdVpHVjRJR2x1SUhObGJHVmpkRzl5WEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnWld4bGJTQTlQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCcGJtUmxlRTltTG1OaGJHd29JR3BSZFdWeWVTZ2daV3hsYlNBcExDQjBhR2x6V3lBd0lGMGdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJNYjJOaGRHVWdkR2hsSUhCdmMybDBhVzl1SUc5bUlIUm9aU0JrWlhOcGNtVmtJR1ZzWlcxbGJuUmNibHgwWEhSeVpYUjFjbTRnYVc1a1pYaFBaaTVqWVd4c0tDQjBhR2x6TEZ4dVhHNWNkRngwWEhRdkx5QkpaaUJwZENCeVpXTmxhWFpsY3lCaElHcFJkV1Z5ZVNCdlltcGxZM1FzSUhSb1pTQm1hWEp6ZENCbGJHVnRaVzUwSUdseklIVnpaV1JjYmx4MFhIUmNkR1ZzWlcwdWFuRjFaWEo1SUQ4Z1pXeGxiVnNnTUNCZElEb2daV3hsYlZ4dVhIUmNkQ2s3WEc1Y2RIMHNYRzVjYmx4MFlXUmtPaUJtZFc1amRHbHZiaWdnYzJWc1pXTjBiM0lzSUdOdmJuUmxlSFFnS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdWNIVnphRk4wWVdOcktGeHVYSFJjZEZ4MGFsRjFaWEo1TG5WdWFYRjFaVk52Y25Rb1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1dFpYSm5aU2dnZEdocGN5NW5aWFFvS1N3Z2FsRjFaWEo1S0NCelpXeGxZM1J2Y2l3Z1kyOXVkR1Y0ZENBcElDbGNibHgwWEhSY2RDbGNibHgwWEhRcE8xeHVYSFI5TEZ4dVhHNWNkR0ZrWkVKaFkyczZJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1aFpHUW9JSE5sYkdWamRHOXlJRDA5SUc1MWJHd2dQMXh1WEhSY2RGeDBkR2hwY3k1d2NtVjJUMkpxWldOMElEb2dkR2hwY3k1d2NtVjJUMkpxWldOMExtWnBiSFJsY2lnZ2MyVnNaV04wYjNJZ0tWeHVYSFJjZENrN1hHNWNkSDFjYm4wZ0tUdGNibHh1Wm5WdVkzUnBiMjRnYzJsaWJHbHVaeWdnWTNWeUxDQmthWElnS1NCN1hHNWNkSGRvYVd4bElDZ2dLQ0JqZFhJZ1BTQmpkWEpiSUdScGNpQmRJQ2tnSmlZZ1kzVnlMbTV2WkdWVWVYQmxJQ0U5UFNBeElDa2dlMzFjYmx4MGNtVjBkWEp1SUdOMWNqdGNibjFjYmx4dWFsRjFaWEo1TG1WaFkyZ29JSHRjYmx4MGNHRnlaVzUwT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFIyWVhJZ2NHRnlaVzUwSUQwZ1pXeGxiUzV3WVhKbGJuUk9iMlJsTzF4dVhIUmNkSEpsZEhWeWJpQndZWEpsYm5RZ0ppWWdjR0Z5Wlc1MExtNXZaR1ZVZVhCbElDRTlQU0F4TVNBL0lIQmhjbVZ1ZENBNklHNTFiR3c3WEc1Y2RIMHNYRzVjZEhCaGNtVnVkSE02SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmthWElvSUdWc1pXMHNJRndpY0dGeVpXNTBUbTlrWlZ3aUlDazdYRzVjZEgwc1hHNWNkSEJoY21WdWRITlZiblJwYkRvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdrc0lIVnVkR2xzSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYVhJb0lHVnNaVzBzSUZ3aWNHRnlaVzUwVG05a1pWd2lMQ0IxYm5ScGJDQXBPMXh1WEhSOUxGeHVYSFJ1WlhoME9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSeVpYUjFjbTRnYzJsaWJHbHVaeWdnWld4bGJTd2dYQ0p1WlhoMFUybGliR2x1WjF3aUlDazdYRzVjZEgwc1hHNWNkSEJ5WlhZNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6YVdKc2FXNW5LQ0JsYkdWdExDQmNJbkJ5WlhacGIzVnpVMmxpYkdsdVoxd2lJQ2s3WEc1Y2RIMHNYRzVjZEc1bGVIUkJiR3c2SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmthWElvSUdWc1pXMHNJRndpYm1WNGRGTnBZbXhwYm1kY0lpQXBPMXh1WEhSOUxGeHVYSFJ3Y21WMlFXeHNPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pHbHlLQ0JsYkdWdExDQmNJbkJ5WlhacGIzVnpVMmxpYkdsdVoxd2lJQ2s3WEc1Y2RIMHNYRzVjZEc1bGVIUlZiblJwYkRvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdrc0lIVnVkR2xzSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYVhJb0lHVnNaVzBzSUZ3aWJtVjRkRk5wWW14cGJtZGNJaXdnZFc1MGFXd2dLVHRjYmx4MGZTeGNibHgwY0hKbGRsVnVkR2xzT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYVN3Z2RXNTBhV3dnS1NCN1hHNWNkRngwY21WMGRYSnVJR1JwY2lnZ1pXeGxiU3dnWENKd2NtVjJhVzkxYzFOcFlteHBibWRjSWl3Z2RXNTBhV3dnS1R0Y2JseDBmU3hjYmx4MGMybGliR2x1WjNNNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6YVdKc2FXNW5jeWdnS0NCbGJHVnRMbkJoY21WdWRFNXZaR1VnZkh3Z2UzMGdLUzVtYVhKemRFTm9hV3hrTENCbGJHVnRJQ2s3WEc1Y2RIMHNYRzVjZEdOb2FXeGtjbVZ1T2lCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjMmxpYkdsdVozTW9JR1ZzWlcwdVptbHljM1JEYUdsc1pDQXBPMXh1WEhSOUxGeHVYSFJqYjI1MFpXNTBjem9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHVnNaVzB1WTI5dWRHVnVkRVJ2WTNWdFpXNTBJSHg4SUdwUmRXVnllUzV0WlhKblpTZ2dXMTBzSUdWc1pXMHVZMmhwYkdST2IyUmxjeUFwTzF4dVhIUjlYRzU5TENCbWRXNWpkR2x2YmlnZ2JtRnRaU3dnWm00Z0tTQjdYRzVjZEdwUmRXVnllUzVtYmxzZ2JtRnRaU0JkSUQwZ1puVnVZM1JwYjI0b0lIVnVkR2xzTENCelpXeGxZM1J2Y2lBcElIdGNibHgwWEhSMllYSWdiV0YwWTJobFpDQTlJR3BSZFdWeWVTNXRZWEFvSUhSb2FYTXNJR1p1TENCMWJuUnBiQ0FwTzF4dVhHNWNkRngwYVdZZ0tDQnVZVzFsTG5Oc2FXTmxLQ0F0TlNBcElDRTlQU0JjSWxWdWRHbHNYQ0lnS1NCN1hHNWNkRngwWEhSelpXeGxZM1J2Y2lBOUlIVnVkR2xzTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ2MyVnNaV04wYjNJZ0ppWWdkSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGJXRjBZMmhsWkNBOUlHcFJkV1Z5ZVM1bWFXeDBaWElvSUhObGJHVmpkRzl5TENCdFlYUmphR1ZrSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDQjBhR2x6TG14bGJtZDBhQ0ErSURFZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUZKbGJXOTJaU0JrZFhCc2FXTmhkR1Z6WEc1Y2RGeDBYSFJwWmlBb0lDRm5kV0Z5WVc1MFpXVmtWVzVwY1hWbFd5QnVZVzFsSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkR3BSZFdWeWVTNTFibWx4ZFdWVGIzSjBLQ0J0WVhSamFHVmtJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGSmxkbVZ5YzJVZ2IzSmtaWElnWm05eUlIQmhjbVZ1ZEhNcUlHRnVaQ0J3Y21WMkxXUmxjbWwyWVhScGRtVnpYRzVjZEZ4MFhIUnBaaUFvSUhKd1lYSmxiblJ6Y0hKbGRpNTBaWE4wS0NCdVlXMWxJQ2tnS1NCN1hHNWNkRngwWEhSY2RHMWhkR05vWldRdWNtVjJaWEp6WlNncE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxuQjFjMmhUZEdGamF5Z2diV0YwWTJobFpDQXBPMXh1WEhSOU8xeHVmU0FwTzF4dWRtRnlJSEp1YjNSb2RHMXNkMmhwZEdVZ1BTQW9JQzliWGx4Y2VESXdYRngwWEZ4eVhGeHVYRnhtWFNzdlp5QXBPMXh1WEc1Y2JseHVMeThnUTI5dWRtVnlkQ0JUZEhKcGJtY3RabTl5YldGMGRHVmtJRzl3ZEdsdmJuTWdhVzUwYnlCUFltcGxZM1F0Wm05eWJXRjBkR1ZrSUc5dVpYTmNibVoxYm1OMGFXOXVJR055WldGMFpVOXdkR2x2Ym5Nb0lHOXdkR2x2Ym5NZ0tTQjdYRzVjZEhaaGNpQnZZbXBsWTNRZ1BTQjdmVHRjYmx4MGFsRjFaWEo1TG1WaFkyZ29JRzl3ZEdsdmJuTXViV0YwWTJnb0lISnViM1JvZEcxc2QyaHBkR1VnS1NCOGZDQmJYU3dnWm5WdVkzUnBiMjRvSUY4c0lHWnNZV2NnS1NCN1hHNWNkRngwYjJKcVpXTjBXeUJtYkdGbklGMGdQU0IwY25WbE8xeHVYSFI5SUNrN1hHNWNkSEpsZEhWeWJpQnZZbXBsWTNRN1hHNTlYRzVjYmk4cVhHNGdLaUJEY21WaGRHVWdZU0JqWVd4c1ltRmpheUJzYVhOMElIVnphVzVuSUhSb1pTQm1iMnhzYjNkcGJtY2djR0Z5WVcxbGRHVnljenBjYmlBcVhHNGdLbHgwYjNCMGFXOXVjem9nWVc0Z2IzQjBhVzl1WVd3Z2JHbHpkQ0J2WmlCemNHRmpaUzF6WlhCaGNtRjBaV1FnYjNCMGFXOXVjeUIwYUdGMElIZHBiR3dnWTJoaGJtZGxJR2h2ZDF4dUlDcGNkRngwWEhSMGFHVWdZMkZzYkdKaFkyc2diR2x6ZENCaVpXaGhkbVZ6SUc5eUlHRWdiVzl5WlNCMGNtRmthWFJwYjI1aGJDQnZjSFJwYjI0Z2IySnFaV04wWEc0Z0tseHVJQ29nUW5rZ1pHVm1ZWFZzZENCaElHTmhiR3hpWVdOcklHeHBjM1FnZDJsc2JDQmhZM1FnYkdsclpTQmhiaUJsZG1WdWRDQmpZV3hzWW1GamF5QnNhWE4wSUdGdVpDQmpZVzRnWW1WY2JpQXFJRndpWm1seVpXUmNJaUJ0ZFd4MGFYQnNaU0IwYVcxbGN5NWNiaUFxWEc0Z0tpQlFiM056YVdKc1pTQnZjSFJwYjI1ek9seHVJQ3BjYmlBcVhIUnZibU5sT2x4MFhIUmNkSGRwYkd3Z1pXNXpkWEpsSUhSb1pTQmpZV3hzWW1GamF5QnNhWE4wSUdOaGJpQnZibXg1SUdKbElHWnBjbVZrSUc5dVkyVWdLR3hwYTJVZ1lTQkVaV1psY25KbFpDbGNiaUFxWEc0Z0tseDBiV1Z0YjNKNU9seDBYSFJjZEhkcGJHd2dhMlZsY0NCMGNtRmpheUJ2WmlCd2NtVjJhVzkxY3lCMllXeDFaWE1nWVc1a0lIZHBiR3dnWTJGc2JDQmhibmtnWTJGc2JHSmhZMnNnWVdSa1pXUmNiaUFxWEhSY2RGeDBYSFJjZEdGbWRHVnlJSFJvWlNCc2FYTjBJR2hoY3lCaVpXVnVJR1pwY21Wa0lISnBaMmgwSUdGM1lYa2dkMmwwYUNCMGFHVWdiR0YwWlhOMElGd2liV1Z0YjNKcGVtVmtYQ0pjYmlBcVhIUmNkRngwWEhSY2RIWmhiSFZsY3lBb2JHbHJaU0JoSUVSbFptVnljbVZrS1Z4dUlDcGNiaUFxWEhSMWJtbHhkV1U2WEhSY2RGeDBkMmxzYkNCbGJuTjFjbVVnWVNCallXeHNZbUZqYXlCallXNGdiMjVzZVNCaVpTQmhaR1JsWkNCdmJtTmxJQ2h1YnlCa2RYQnNhV05oZEdVZ2FXNGdkR2hsSUd4cGMzUXBYRzRnS2x4dUlDcGNkSE4wYjNCUGJrWmhiSE5sT2x4MGFXNTBaWEp5ZFhCMElHTmhiR3hwYm1keklIZG9aVzRnWVNCallXeHNZbUZqYXlCeVpYUjFjbTV6SUdaaGJITmxYRzRnS2x4dUlDb3ZYRzVxVVhWbGNua3VRMkZzYkdKaFkydHpJRDBnWm5WdVkzUnBiMjRvSUc5d2RHbHZibk1nS1NCN1hHNWNibHgwTHk4Z1EyOXVkbVZ5ZENCdmNIUnBiMjV6SUdaeWIyMGdVM1J5YVc1bkxXWnZjbTFoZEhSbFpDQjBieUJQWW1wbFkzUXRabTl5YldGMGRHVmtJR2xtSUc1bFpXUmxaRnh1WEhRdkx5QW9kMlVnWTJobFkyc2dhVzRnWTJGamFHVWdabWx5YzNRcFhHNWNkRzl3ZEdsdmJuTWdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnWENKemRISnBibWRjSWlBL1hHNWNkRngwWTNKbFlYUmxUM0IwYVc5dWN5Z2diM0IwYVc5dWN5QXBJRHBjYmx4MFhIUnFVWFZsY25rdVpYaDBaVzVrS0NCN2ZTd2diM0IwYVc5dWN5QXBPMXh1WEc1Y2RIWmhjaUF2THlCR2JHRm5JSFJ2SUd0dWIzY2dhV1lnYkdsemRDQnBjeUJqZFhKeVpXNTBiSGtnWm1seWFXNW5YRzVjZEZ4MFptbHlhVzVuTEZ4dVhHNWNkRngwTHk4Z1RHRnpkQ0JtYVhKbElIWmhiSFZsSUdadmNpQnViMjR0Wm05eVoyVjBkR0ZpYkdVZ2JHbHpkSE5jYmx4MFhIUnRaVzF2Y25rc1hHNWNibHgwWEhRdkx5QkdiR0ZuSUhSdklHdHViM2NnYVdZZ2JHbHpkQ0IzWVhNZ1lXeHlaV0ZrZVNCbWFYSmxaRnh1WEhSY2RHWnBjbVZrTEZ4dVhHNWNkRngwTHk4Z1JteGhaeUIwYnlCd2NtVjJaVzUwSUdacGNtbHVaMXh1WEhSY2RHeHZZMnRsWkN4Y2JseHVYSFJjZEM4dklFRmpkSFZoYkNCallXeHNZbUZqYXlCc2FYTjBYRzVjZEZ4MGJHbHpkQ0E5SUZ0ZExGeHVYRzVjZEZ4MEx5OGdVWFZsZFdVZ2IyWWdaWGhsWTNWMGFXOXVJR1JoZEdFZ1ptOXlJSEpsY0dWaGRHRmliR1VnYkdsemRITmNibHgwWEhSeGRXVjFaU0E5SUZ0ZExGeHVYRzVjZEZ4MEx5OGdTVzVrWlhnZ2IyWWdZM1Z5Y21WdWRHeDVJR1pwY21sdVp5QmpZV3hzWW1GamF5QW9iVzlrYVdacFpXUWdZbmtnWVdSa0wzSmxiVzkyWlNCaGN5QnVaV1ZrWldRcFhHNWNkRngwWm1seWFXNW5TVzVrWlhnZ1BTQXRNU3hjYmx4dVhIUmNkQzh2SUVacGNtVWdZMkZzYkdKaFkydHpYRzVjZEZ4MFptbHlaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJGYm1admNtTmxJSE5wYm1kc1pTMW1hWEpwYm1kY2JseDBYSFJjZEd4dlkydGxaQ0E5SUc5d2RHbHZibk11YjI1alpUdGNibHh1WEhSY2RGeDBMeThnUlhobFkzVjBaU0JqWVd4c1ltRmphM01nWm05eUlHRnNiQ0J3Wlc1a2FXNW5JR1Y0WldOMWRHbHZibk1zWEc1Y2RGeDBYSFF2THlCeVpYTndaV04wYVc1bklHWnBjbWx1WjBsdVpHVjRJRzkyWlhKeWFXUmxjeUJoYm1RZ2NuVnVkR2x0WlNCamFHRnVaMlZ6WEc1Y2RGeDBYSFJtYVhKbFpDQTlJR1pwY21sdVp5QTlJSFJ5ZFdVN1hHNWNkRngwWEhSbWIzSWdLQ0E3SUhGMVpYVmxMbXhsYm1kMGFEc2dabWx5YVc1blNXNWtaWGdnUFNBdE1TQXBJSHRjYmx4MFhIUmNkRngwYldWdGIzSjVJRDBnY1hWbGRXVXVjMmhwWm5Rb0tUdGNibHgwWEhSY2RGeDBkMmhwYkdVZ0tDQXJLMlpwY21sdVowbHVaR1Y0SUR3Z2JHbHpkQzVzWlc1bmRHZ2dLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJTZFc0Z1kyRnNiR0poWTJzZ1lXNWtJR05vWldOcklHWnZjaUJsWVhKc2VTQjBaWEp0YVc1aGRHbHZibHh1WEhSY2RGeDBYSFJjZEdsbUlDZ2diR2x6ZEZzZ1ptbHlhVzVuU1c1a1pYZ2dYUzVoY0hCc2VTZ2diV1Z0YjNKNVd5QXdJRjBzSUcxbGJXOXllVnNnTVNCZElDa2dQVDA5SUdaaGJITmxJQ1ltWEc1Y2RGeDBYSFJjZEZ4MFhIUnZjSFJwYjI1ekxuTjBiM0JQYmtaaGJITmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlCS2RXMXdJSFJ2SUdWdVpDQmhibVFnWm05eVoyVjBJSFJvWlNCa1lYUmhJSE52SUM1aFpHUWdaRzlsYzI0bmRDQnlaUzFtYVhKbFhHNWNkRngwWEhSY2RGeDBYSFJtYVhKcGJtZEpibVJsZUNBOUlHeHBjM1F1YkdWdVozUm9PMXh1WEhSY2RGeDBYSFJjZEZ4MGJXVnRiM0o1SUQwZ1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVadmNtZGxkQ0IwYUdVZ1pHRjBZU0JwWmlCM1pTZHlaU0JrYjI1bElIZHBkR2dnYVhSY2JseDBYSFJjZEdsbUlDZ2dJVzl3ZEdsdmJuTXViV1Z0YjNKNUlDa2dlMXh1WEhSY2RGeDBYSFJ0WlcxdmNua2dQU0JtWVd4elpUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBabWx5YVc1bklEMGdabUZzYzJVN1hHNWNibHgwWEhSY2RDOHZJRU5zWldGdUlIVndJR2xtSUhkbEozSmxJR1J2Ym1VZ1ptbHlhVzVuSUdadmNpQm5iMjlrWEc1Y2RGeDBYSFJwWmlBb0lHeHZZMnRsWkNBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCTFpXVndJR0Z1SUdWdGNIUjVJR3hwYzNRZ2FXWWdkMlVnYUdGMlpTQmtZWFJoSUdadmNpQm1kWFIxY21VZ1lXUmtJR05oYkd4elhHNWNkRngwWEhSY2RHbG1JQ2dnYldWdGIzSjVJQ2tnZTF4dVhIUmNkRngwWEhSY2RHeHBjM1FnUFNCYlhUdGNibHh1WEhSY2RGeDBYSFF2THlCUGRHaGxjbmRwYzJVc0lIUm9hWE1nYjJKcVpXTjBJR2x6SUhOd1pXNTBYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwYkdsemRDQTlJRndpWENJN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUxGeHVYRzVjZEZ4MEx5OGdRV04wZFdGc0lFTmhiR3hpWVdOcmN5QnZZbXBsWTNSY2JseDBYSFJ6Wld4bUlEMGdlMXh1WEc1Y2RGeDBYSFF2THlCQlpHUWdZU0JqWVd4c1ltRmpheUJ2Y2lCaElHTnZiR3hsWTNScGIyNGdiMllnWTJGc2JHSmhZMnR6SUhSdklIUm9aU0JzYVhOMFhHNWNkRngwWEhSaFpHUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JR3hwYzNRZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QkpaaUIzWlNCb1lYWmxJRzFsYlc5eWVTQm1jbTl0SUdFZ2NHRnpkQ0J5ZFc0c0lIZGxJSE5vYjNWc1pDQm1hWEpsSUdGbWRHVnlJR0ZrWkdsdVoxeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JXVnRiM0o1SUNZbUlDRm1hWEpwYm1jZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbWFYSnBibWRKYm1SbGVDQTlJR3hwYzNRdWJHVnVaM1JvSUMwZ01UdGNibHgwWEhSY2RGeDBYSFJjZEhGMVpYVmxMbkIxYzJnb0lHMWxiVzl5ZVNBcE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RDZ2dablZ1WTNScGIyNGdZV1JrS0NCaGNtZHpJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhbEYxWlhKNUxtVmhZMmdvSUdGeVozTXNJR1oxYm1OMGFXOXVLQ0JmTENCaGNtY2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lHRnlaeUFwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnSVc5d2RHbHZibk11ZFc1cGNYVmxJSHg4SUNGelpXeG1MbWhoY3lnZ1lYSm5JQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnNhWE4wTG5CMWMyZ29JR0Z5WnlBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUdsbUlDZ2dZWEpuSUNZbUlHRnlaeTVzWlc1bmRHZ2dKaVlnYWxGMVpYSjVMblI1Y0dVb0lHRnlaeUFwSUNFOVBTQmNJbk4wY21sdVoxd2lJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MEx5OGdTVzV6Y0dWamRDQnlaV04xY25OcGRtVnNlVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR0ZrWkNnZ1lYSm5JQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMGdLVHRjYmx4MFhIUmNkRngwWEhSOUlDa29JR0Z5WjNWdFpXNTBjeUFwTzF4dVhHNWNkRngwWEhSY2RGeDBhV1lnS0NCdFpXMXZjbmtnSmlZZ0lXWnBjbWx1WnlBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdacGNtVW9LVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFI5TEZ4dVhHNWNkRngwWEhRdkx5QlNaVzF2ZG1VZ1lTQmpZV3hzWW1GamF5Qm1jbTl0SUhSb1pTQnNhWE4wWEc1Y2RGeDBYSFJ5WlcxdmRtVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhScVVYVmxjbmt1WldGamFDZ2dZWEpuZFcxbGJuUnpMQ0JtZFc1amRHbHZiaWdnWHl3Z1lYSm5JQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJwYm1SbGVEdGNibHgwWEhSY2RGeDBYSFIzYUdsc1pTQW9JQ2dnYVc1a1pYZ2dQU0JxVVhWbGNua3VhVzVCY25KaGVTZ2dZWEpuTENCc2FYTjBMQ0JwYm1SbGVDQXBJQ2tnUGlBdE1TQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHeHBjM1F1YzNCc2FXTmxLQ0JwYm1SbGVDd2dNU0FwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlCSVlXNWtiR1VnWm1seWFXNW5JR2x1WkdWNFpYTmNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dhVzVrWlhnZ1BEMGdabWx5YVc1blNXNWtaWGdnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdacGNtbHVaMGx1WkdWNExTMDdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5SUNrN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RGeDBmU3hjYmx4dVhIUmNkRngwTHk4Z1EyaGxZMnNnYVdZZ1lTQm5hWFpsYmlCallXeHNZbUZqYXlCcGN5QnBiaUIwYUdVZ2JHbHpkQzVjYmx4MFhIUmNkQzh2SUVsbUlHNXZJR0Z5WjNWdFpXNTBJR2x6SUdkcGRtVnVMQ0J5WlhSMWNtNGdkMmhsZEdobGNpQnZjaUJ1YjNRZ2JHbHpkQ0JvWVhNZ1kyRnNiR0poWTJ0eklHRjBkR0ZqYUdWa0xseHVYSFJjZEZ4MGFHRnpPaUJtZFc1amRHbHZiaWdnWm00Z0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQm1iaUEvWEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1sdVFYSnlZWGtvSUdadUxDQnNhWE4wSUNrZ1BpQXRNU0E2WEc1Y2RGeDBYSFJjZEZ4MGJHbHpkQzVzWlc1bmRHZ2dQaUF3TzF4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MEx5OGdVbVZ0YjNabElHRnNiQ0JqWVd4c1ltRmphM01nWm5KdmJTQjBhR1VnYkdsemRGeHVYSFJjZEZ4MFpXMXdkSGs2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUd4cGMzUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGJHbHpkQ0E5SUZ0ZE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MEx5OGdSR2x6WVdKc1pTQXVabWx5WlNCaGJtUWdMbUZrWkZ4dVhIUmNkRngwTHk4Z1FXSnZjblFnWVc1NUlHTjFjbkpsYm5RdmNHVnVaR2x1WnlCbGVHVmpkWFJwYjI1elhHNWNkRngwWEhRdkx5QkRiR1ZoY2lCaGJHd2dZMkZzYkdKaFkydHpJR0Z1WkNCMllXeDFaWE5jYmx4MFhIUmNkR1JwYzJGaWJHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSc2IyTnJaV1FnUFNCeGRXVjFaU0E5SUZ0ZE8xeHVYSFJjZEZ4MFhIUnNhWE4wSUQwZ2JXVnRiM0o1SUQwZ1hDSmNJanRjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFpHbHpZV0pzWldRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdJV3hwYzNRN1hHNWNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUXZMeUJFYVhOaFlteGxJQzVtYVhKbFhHNWNkRngwWEhRdkx5QkJiSE52SUdScGMyRmliR1VnTG1Ga1pDQjFibXhsYzNNZ2QyVWdhR0YyWlNCdFpXMXZjbmtnS0hOcGJtTmxJR2wwSUhkdmRXeGtJR2hoZG1VZ2JtOGdaV1ptWldOMEtWeHVYSFJjZEZ4MEx5OGdRV0p2Y25RZ1lXNTVJSEJsYm1ScGJtY2daWGhsWTNWMGFXOXVjMXh1WEhSY2RGeDBiRzlqYXpvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkR3h2WTJ0bFpDQTlJSEYxWlhWbElEMGdXMTA3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJVzFsYlc5eWVTQW1KaUFoWm1seWFXNW5JQ2tnZTF4dVhIUmNkRngwWEhSY2RHeHBjM1FnUFNCdFpXMXZjbmtnUFNCY0lsd2lPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEZ4MGZTeGNibHgwWEhSY2RHeHZZMnRsWkRvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQWhJV3h2WTJ0bFpEdGNibHgwWEhSY2RIMHNYRzVjYmx4MFhIUmNkQzh2SUVOaGJHd2dZV3hzSUdOaGJHeGlZV05yY3lCM2FYUm9JSFJvWlNCbmFYWmxiaUJqYjI1MFpYaDBJR0Z1WkNCaGNtZDFiV1Z1ZEhOY2JseDBYSFJjZEdacGNtVlhhWFJvT2lCbWRXNWpkR2x2YmlnZ1kyOXVkR1Y0ZEN3Z1lYSm5jeUFwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0FoYkc5amEyVmtJQ2tnZTF4dVhIUmNkRngwWEhSY2RHRnlaM01nUFNCaGNtZHpJSHg4SUZ0ZE8xeHVYSFJjZEZ4MFhIUmNkR0Z5WjNNZ1BTQmJJR052Ym5SbGVIUXNJR0Z5WjNNdWMyeHBZMlVnUHlCaGNtZHpMbk5zYVdObEtDa2dPaUJoY21keklGMDdYRzVjZEZ4MFhIUmNkRngwY1hWbGRXVXVjSFZ6YUNnZ1lYSm5jeUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnSVdacGNtbHVaeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR1pwY21Vb0tUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUjlMRnh1WEc1Y2RGeDBYSFF2THlCRFlXeHNJR0ZzYkNCMGFHVWdZMkZzYkdKaFkydHpJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHRnlaM1Z0Wlc1MGMxeHVYSFJjZEZ4MFptbHlaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RITmxiR1l1Wm1seVpWZHBkR2dvSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeUFwTzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RIMHNYRzVjYmx4MFhIUmNkQzh2SUZSdklHdHViM2NnYVdZZ2RHaGxJR05oYkd4aVlXTnJjeUJvWVhabElHRnNjbVZoWkhrZ1ltVmxiaUJqWVd4c1pXUWdZWFFnYkdWaGMzUWdiMjVqWlZ4dVhIUmNkRngwWm1seVpXUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnSVNGbWFYSmxaRHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEc1Y2RISmxkSFZ5YmlCelpXeG1PMXh1ZlR0Y2JseHVYRzVtZFc1amRHbHZiaUJKWkdWdWRHbDBlU2dnZGlBcElIdGNibHgwY21WMGRYSnVJSFk3WEc1OVhHNW1kVzVqZEdsdmJpQlVhSEp2ZDJWeUtDQmxlQ0FwSUh0Y2JseDBkR2h5YjNjZ1pYZzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmtiM0IwVm1Gc2RXVW9JSFpoYkhWbExDQnlaWE52YkhabExDQnlaV3BsWTNRZ0tTQjdYRzVjZEhaaGNpQnRaWFJvYjJRN1hHNWNibHgwZEhKNUlIdGNibHh1WEhSY2RDOHZJRU5vWldOcklHWnZjaUJ3Y205dGFYTmxJR0Z6Y0dWamRDQm1hWEp6ZENCMGJ5QndjbWwyYVd4bFoyVWdjM2x1WTJoeWIyNXZkWE1nWW1Wb1lYWnBiM0pjYmx4MFhIUnBaaUFvSUhaaGJIVmxJQ1ltSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NBb0lHMWxkR2h2WkNBOUlIWmhiSFZsTG5CeWIyMXBjMlVnS1NBcElDa2dlMXh1WEhSY2RGeDBiV1YwYUc5a0xtTmhiR3dvSUhaaGJIVmxJQ2t1Wkc5dVpTZ2djbVZ6YjJ4MlpTQXBMbVpoYVd3b0lISmxhbVZqZENBcE8xeHVYRzVjZEZ4MEx5OGdUM1JvWlhJZ2RHaGxibUZpYkdWelhHNWNkRngwZlNCbGJITmxJR2xtSUNnZ2RtRnNkV1VnSmlZZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lDZ2diV1YwYUc5a0lEMGdkbUZzZFdVdWRHaGxiaUFwSUNrZ0tTQjdYRzVjZEZ4MFhIUnRaWFJvYjJRdVkyRnNiQ2dnZG1Gc2RXVXNJSEpsYzI5c2RtVXNJSEpsYW1WamRDQXBPMXh1WEc1Y2RGeDBMeThnVDNSb1pYSWdibTl1TFhSb1pXNWhZbXhsYzF4dVhIUmNkSDBnWld4elpTQjdYRzVjYmx4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnTkM0d0lHOXViSGxjYmx4MFhIUmNkQzh2SUZOMGNtbGpkQ0J0YjJSbElHWjFibU4wYVc5dWN5QnBiblp2YTJWa0lIZHBkR2h2ZFhRZ0xtTmhiR3d2TG1Gd2NHeDVJR2RsZENCbmJHOWlZV3d0YjJKcVpXTjBJR052Ym5SbGVIUmNibHgwWEhSY2RISmxjMjlzZG1VdVkyRnNiQ2dnZFc1a1pXWnBibVZrTENCMllXeDFaU0FwTzF4dVhIUmNkSDFjYmx4dVhIUXZMeUJHYjNJZ1VISnZiV2x6WlhNdlFTc3NJR052Ym5abGNuUWdaWGhqWlhCMGFXOXVjeUJwYm5SdklISmxhbVZqZEdsdmJuTmNibHgwTHk4Z1UybHVZMlVnYWxGMVpYSjVMbmRvWlc0Z1pHOWxjMjRuZENCMWJuZHlZWEFnZEdobGJtRmliR1Z6TENCM1pTQmpZVzRnYzJ0cGNDQjBhR1VnWlhoMGNtRWdZMmhsWTJ0eklHRndjR1ZoY21sdVp5QnBibHh1WEhRdkx5QkVaV1psY25KbFpDTjBhR1Z1SUhSdklHTnZibVJwZEdsdmJtRnNiSGtnYzNWd2NISmxjM01nY21WcVpXTjBhVzl1TGx4dVhIUjlJR05oZEdOb0lDZ2dkbUZzZFdVZ0tTQjdYRzVjYmx4MFhIUXZMeUJUZFhCd2IzSjBPaUJCYm1SeWIybGtJRFF1TUNCdmJteDVYRzVjZEZ4MEx5OGdVM1J5YVdOMElHMXZaR1VnWm5WdVkzUnBiMjV6SUdsdWRtOXJaV1FnZDJsMGFHOTFkQ0F1WTJGc2JDOHVZWEJ3YkhrZ1oyVjBJR2RzYjJKaGJDMXZZbXBsWTNRZ1kyOXVkR1Y0ZEZ4dVhIUmNkSEpsYW1WamRDNWpZV3hzS0NCMWJtUmxabWx1WldRc0lIWmhiSFZsSUNrN1hHNWNkSDFjYm4xY2JseHVhbEYxWlhKNUxtVjRkR1Z1WkNnZ2UxeHVYRzVjZEVSbFptVnljbVZrT2lCbWRXNWpkR2x2YmlnZ1puVnVZeUFwSUh0Y2JseDBYSFIyWVhJZ2RIVndiR1Z6SUQwZ1cxeHVYRzVjZEZ4MFhIUmNkQzh2SUdGamRHbHZiaXdnWVdSa0lHeHBjM1JsYm1WeUxDQmpZV3hzWW1GamEzTXNYRzVjZEZ4MFhIUmNkQzh2SUM0dUxpQXVkR2hsYmlCb1lXNWtiR1Z5Y3l3Z1lYSm5kVzFsYm5RZ2FXNWtaWGdzSUZ0bWFXNWhiQ0J6ZEdGMFpWMWNibHgwWEhSY2RGeDBXeUJjSW01dmRHbG1lVndpTENCY0luQnliMmR5WlhOelhDSXNJR3BSZFdWeWVTNURZV3hzWW1GamEzTW9JRndpYldWdGIzSjVYQ0lnS1N4Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVEyRnNiR0poWTJ0ektDQmNJbTFsYlc5eWVWd2lJQ2tzSURJZ1hTeGNibHgwWEhSY2RGeDBXeUJjSW5KbGMyOXNkbVZjSWl3Z1hDSmtiMjVsWENJc0lHcFJkV1Z5ZVM1RFlXeHNZbUZqYTNNb0lGd2liMjVqWlNCdFpXMXZjbmxjSWlBcExGeHVYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNURZV3hzWW1GamEzTW9JRndpYjI1alpTQnRaVzF2Y25sY0lpQXBMQ0F3TENCY0luSmxjMjlzZG1Wa1hDSWdYU3hjYmx4MFhIUmNkRngwV3lCY0luSmxhbVZqZEZ3aUxDQmNJbVpoYVd4Y0lpd2dhbEYxWlhKNUxrTmhiR3hpWVdOcmN5Z2dYQ0p2Ym1ObElHMWxiVzl5ZVZ3aUlDa3NYRzVjZEZ4MFhIUmNkRngwYWxGMVpYSjVMa05oYkd4aVlXTnJjeWdnWENKdmJtTmxJRzFsYlc5eWVWd2lJQ2tzSURFc0lGd2ljbVZxWldOMFpXUmNJaUJkWEc1Y2RGeDBYSFJkTEZ4dVhIUmNkRngwYzNSaGRHVWdQU0JjSW5CbGJtUnBibWRjSWl4Y2JseDBYSFJjZEhCeWIyMXBjMlVnUFNCN1hHNWNkRngwWEhSY2RITjBZWFJsT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdjM1JoZEdVN1hHNWNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmNkR0ZzZDJGNWN6b2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEZ4MFpHVm1aWEp5WldRdVpHOXVaU2dnWVhKbmRXMWxiblJ6SUNrdVptRnBiQ2dnWVhKbmRXMWxiblJ6SUNrN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFJjZEgwc1hHNWNkRngwWEhSY2RGd2lZMkYwWTJoY0lqb2dablZ1WTNScGIyNG9JR1p1SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQndjbTl0YVhObExuUm9aVzRvSUc1MWJHd3NJR1p1SUNrN1hHNWNkRngwWEhSY2RIMHNYRzVjYmx4MFhIUmNkRngwTHk4Z1MyVmxjQ0J3YVhCbElHWnZjaUJpWVdOckxXTnZiWEJoZEZ4dVhIUmNkRngwWEhSd2FYQmxPaUJtZFc1amRHbHZiaWdnTHlvZ1ptNUViMjVsTENCbWJrWmhhV3dzSUdadVVISnZaM0psYzNNZ0tpOGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRtRnlJR1p1Y3lBOUlHRnlaM1Z0Wlc1MGN6dGNibHh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJxVVhWbGNua3VSR1ZtWlhKeVpXUW9JR1oxYm1OMGFXOXVLQ0J1WlhkRVpXWmxjaUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNWxZV05vS0NCMGRYQnNaWE1zSUdaMWJtTjBhVzl1S0NCcExDQjBkWEJzWlNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJOWVhBZ2RIVndiR1Z6SUNod2NtOW5jbVZ6Y3l3Z1pHOXVaU3dnWm1GcGJDa2dkRzhnWVhKbmRXMWxiblJ6SUNoa2IyNWxMQ0JtWVdsc0xDQndjbTluY21WemN5bGNibHgwWEhSY2RGeDBYSFJjZEZ4MGRtRnlJR1p1SUQwZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lHWnVjMXNnZEhWd2JHVmJJRFFnWFNCZElDa2dKaVlnWm01eld5QjBkWEJzWlZzZ05DQmRJRjA3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1pHVm1aWEp5WldRdWNISnZaM0psYzNNb1puVnVZM1JwYjI0b0tTQjdJR0pwYm1RZ2RHOGdibVYzUkdWbVpYSWdiM0lnYm1WM1JHVm1aWEl1Ym05MGFXWjVJSDBwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUdSbFptVnljbVZrTG1SdmJtVW9ablZ1WTNScGIyNG9LU0I3SUdKcGJtUWdkRzhnYm1WM1JHVm1aWElnYjNJZ2JtVjNSR1ZtWlhJdWNtVnpiMngyWlNCOUtWeHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QmtaV1psY25KbFpDNW1ZV2xzS0daMWJtTjBhVzl1S0NrZ2V5QmlhVzVrSUhSdklHNWxkMFJsWm1WeUlHOXlJRzVsZDBSbFptVnlMbkpsYW1WamRDQjlLVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmtaV1psY25KbFpGc2dkSFZ3YkdWYklERWdYU0JkS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjJZWElnY21WMGRYSnVaV1FnUFNCbWJpQW1KaUJtYmk1aGNIQnNlU2dnZEdocGN5d2dZWEpuZFcxbGJuUnpJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQnlaWFIxY201bFpDQW1KaUJxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnY21WMGRYSnVaV1F1Y0hKdmJXbHpaU0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdVpXUXVjSEp2YldselpTZ3BYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEM1d2NtOW5jbVZ6Y3lnZ2JtVjNSR1ZtWlhJdWJtOTBhV1o1SUNsY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMbVJ2Ym1Vb0lHNWxkMFJsWm1WeUxuSmxjMjlzZG1VZ0tWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF1Wm1GcGJDZ2dibVYzUkdWbVpYSXVjbVZxWldOMElDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzVsZDBSbFptVnlXeUIwZFhCc1pWc2dNQ0JkSUNzZ1hDSlhhWFJvWENJZ1hTaGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZEdocGN5eGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWm00Z1B5QmJJSEpsZEhWeWJtVmtJRjBnT2lCaGNtZDFiV1Z1ZEhOY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUm1ibk1nUFNCdWRXeHNPMXh1WEhSY2RGeDBYSFJjZEgwZ0tTNXdjbTl0YVhObEtDazdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEhSb1pXNDZJR1oxYm1OMGFXOXVLQ0J2YmtaMWJHWnBiR3hsWkN3Z2IyNVNaV3BsWTNSbFpDd2diMjVRY205bmNtVnpjeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnYldGNFJHVndkR2dnUFNBd08xeHVYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVJSEpsYzI5c2RtVW9JR1JsY0hSb0xDQmtaV1psY25KbFpDd2dhR0Z1Wkd4bGNpd2djM0JsWTJsaGJDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGRtRnlJSFJvWVhRZ1BTQjBhR2x6TEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdGeVozTWdQU0JoY21kMWJXVnVkSE1zWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYldsbmFIUlVhSEp2ZHlBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZG1GeUlISmxkSFZ5Ym1Wa0xDQjBhR1Z1TzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJRY205dGFYTmxjeTlCS3lCelpXTjBhVzl1SURJdU15NHpMak11TTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEx5OGdhSFIwY0hNNkx5OXdjbTl0YVhObGMyRndiSFZ6TG1OdmJTOGpjRzlwYm5RdE5UbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVsbmJtOXlaU0JrYjNWaWJHVXRjbVZ6YjJ4MWRHbHZiaUJoZEhSbGJYQjBjMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQmtaWEIwYUNBOElHMWhlRVJsY0hSb0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJtVmtJRDBnYUdGdVpHeGxjaTVoY0hCc2VTZ2dkR2hoZEN3Z1lYSm5jeUFwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJRY205dGFYTmxjeTlCS3lCelpXTjBhVzl1SURJdU15NHhYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCb2RIUndjem92TDNCeWIyMXBjMlZ6WVhCc2RYTXVZMjl0THlOd2IybHVkQzAwT0Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0J5WlhSMWNtNWxaQ0E5UFQwZ1pHVm1aWEp5WldRdWNISnZiV2x6WlNncElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDQmNJbFJvWlc1aFlteGxJSE5sYkdZdGNtVnpiMngxZEdsdmJsd2lJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUZCeWIyMXBjMlZ6TDBFcklITmxZM1JwYjI1eklESXVNeTR6TGpFc0lETXVOVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z2FIUjBjSE02THk5d2NtOXRhWE5sYzJGd2JIVnpMbU52YlM4amNHOXBiblF0TlRSY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR2gwZEhCek9pOHZjSEp2YldselpYTmhjR3gxY3k1amIyMHZJM0J2YVc1MExUYzFYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCU1pYUnlhV1YyWlNCZ2RHaGxibUFnYjI1c2VTQnZibU5sWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFHVnVJRDBnY21WMGRYSnVaV1FnSmlaY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCUWNtOXRhWE5sY3k5Qkt5QnpaV04wYVc5dUlESXVNeTQwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR2gwZEhCek9pOHZjSEp2YldselpYTmhjR3gxY3k1amIyMHZJM0J2YVc1MExUWTBYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklFOXViSGtnWTJobFkyc2diMkpxWldOMGN5QmhibVFnWm5WdVkzUnBiMjV6SUdadmNpQjBhR1Z1WVdKcGJHbDBlVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRb0lIUjVjR1Z2WmlCeVpYUjFjbTVsWkNBOVBUMGdYQ0p2WW1wbFkzUmNJaUI4ZkZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dWdlppQnlaWFIxY201bFpDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDa2dKaVpjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1WldRdWRHaGxianRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEx5OGdTR0Z1Wkd4bElHRWdjbVYwZFhKdVpXUWdkR2hsYm1GaWJHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lIUm9aVzRnS1NBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlRjR1ZqYVdGc0lIQnliMk5sYzNOdmNuTWdLRzV2ZEdsbWVTa2dhblZ6ZENCM1lXbDBJR1p2Y2lCeVpYTnZiSFYwYVc5dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2MzQmxZMmxoYkNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFHVnVMbU5oYkd3b1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTVsWkN4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhKbGMyOXNkbVVvSUcxaGVFUmxjSFJvTENCa1pXWmxjbkpsWkN3Z1NXUmxiblJwZEhrc0lITndaV05wWVd3Z0tTeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxjMjlzZG1Vb0lHMWhlRVJsY0hSb0xDQmtaV1psY25KbFpDd2dWR2h5YjNkbGNpd2djM0JsWTJsaGJDQXBYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEtUdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5Qk9iM0p0WVd3Z2NISnZZMlZ6YzI5eWN5QW9jbVZ6YjJ4MlpTa2dZV3h6YnlCb2IyOXJJR2x1ZEc4Z2NISnZaM0psYzNOY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJQzR1TG1GdVpDQmthWE55WldkaGNtUWdiMnhrWlhJZ2NtVnpiMngxZEdsdmJpQjJZV3gxWlhOY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ0WVhoRVpYQjBhQ3NyTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZEdobGJpNWpZV3hzS0Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVaV1FzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ5WlhOdmJIWmxLQ0J0WVhoRVpYQjBhQ3dnWkdWbVpYSnlaV1FzSUVsa1pXNTBhWFI1TENCemNHVmphV0ZzSUNrc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTnZiSFpsS0NCdFlYaEVaWEIwYUN3Z1pHVm1aWEp5WldRc0lGUm9jbTkzWlhJc0lITndaV05wWVd3Z0tTeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxjMjlzZG1Vb0lHMWhlRVJsY0hSb0xDQmtaV1psY25KbFpDd2dTV1JsYm5ScGRIa3NYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR1JsWm1WeWNtVmtMbTV2ZEdsbWVWZHBkR2dnS1Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1NHRnVaR3hsSUdGc2JDQnZkR2hsY2lCeVpYUjFjbTVsWkNCMllXeDFaWE5jYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVDI1c2VTQnpkV0p6ZEdsMGRYUmxJR2hoYm1Sc1pYSnpJSEJoYzNNZ2IyNGdZMjl1ZEdWNGRGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCaGJtUWdiWFZzZEdsd2JHVWdkbUZzZFdWeklDaHViMjR0YzNCbFl5QmlaV2hoZG1sdmNpbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQm9ZVzVrYkdWeUlDRTlQU0JKWkdWdWRHbDBlU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFIwYUdGMElEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHRnlaM01nUFNCYklISmxkSFZ5Ym1Wa0lGMDdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCUWNtOWpaWE56SUhSb1pTQjJZV3gxWlNoektWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCRVpXWmhkV3gwSUhCeWIyTmxjM01nYVhNZ2NtVnpiMngyWlZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUW9JSE53WldOcFlXd2dmSHdnWkdWbVpYSnlaV1F1Y21WemIyeDJaVmRwZEdnZ0tTZ2dkR2hoZEN3Z1lYSm5jeUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMHNYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCUGJteDVJRzV2Y20xaGJDQndjbTlqWlhOemIzSnpJQ2h5WlhOdmJIWmxLU0JqWVhSamFDQmhibVFnY21WcVpXTjBJR1Y0WTJWd2RHbHZibk5jYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ3Y205alpYTnpJRDBnYzNCbFkybGhiQ0EvWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSdGFXZG9kRlJvY205M0lEcGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjBjbmtnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzFwWjJoMFZHaHliM2NvS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmU0JqWVhSamFDQW9JR1VnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JR3BSZFdWeWVTNUVaV1psY25KbFpDNWxlR05sY0hScGIyNUliMjlySUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGFsRjFaWEo1TGtSbFptVnljbVZrTG1WNFkyVndkR2x2YmtodmIyc29JR1VzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhCeWIyTmxjM011YzNSaFkydFVjbUZqWlNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklGQnliMjFwYzJWekwwRXJJSE5sWTNScGIyNGdNaTR6TGpNdU15NDBMakZjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMM0J5YjIxcGMyVnpZWEJzZFhNdVkyOXRMeU53YjJsdWRDMDJNVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRWxuYm05eVpTQndiM04wTFhKbGMyOXNkWFJwYjI0Z1pYaGpaWEIwYVc5dWMxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2daR1Z3ZEdnZ0t5QXhJRDQ5SUcxaGVFUmxjSFJvSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJQYm14NUlITjFZbk4wYVhSMWRHVWdhR0Z1Wkd4bGNuTWdjR0Z6Y3lCdmJpQmpiMjUwWlhoMFhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QmhibVFnYlhWc2RHbHdiR1VnZG1Gc2RXVnpJQ2h1YjI0dGMzQmxZeUJpWldoaGRtbHZjaWxjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2FHRnVaR3hsY2lBaFBUMGdWR2h5YjNkbGNpQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZEdoaGRDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWVhKbmN5QTlJRnNnWlNCZE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmtaV1psY25KbFpDNXlaV3BsWTNSWGFYUm9LQ0IwYUdGMExDQmhjbWR6SUNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFI5TzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklGQnliMjFwYzJWekwwRXJJSE5sWTNScGIyNGdNaTR6TGpNdU15NHhYRzVjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR2gwZEhCek9pOHZjSEp2YldselpYTmhjR3gxY3k1amIyMHZJM0J2YVc1MExUVTNYRzVjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRkpsTFhKbGMyOXNkbVVnY0hKdmJXbHpaWE1nYVcxdFpXUnBZWFJsYkhrZ2RHOGdaRzlrWjJVZ1ptRnNjMlVnY21WcVpXTjBhVzl1SUdaeWIyMWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdjM1ZpYzJWeGRXVnVkQ0JsY25KdmNuTmNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JrWlhCMGFDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ3Y205alpYTnpLQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCRFlXeHNJR0Z1SUc5d2RHbHZibUZzSUdodmIyc2dkRzhnY21WamIzSmtJSFJvWlNCemRHRmpheXdnYVc0Z1kyRnpaU0J2WmlCbGVHTmxjSFJwYjI1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QnphVzVqWlNCcGRDZHpJRzkwYUdWeWQybHpaU0JzYjNOMElIZG9aVzRnWlhobFkzVjBhVzl1SUdkdlpYTWdZWE41Ym1OY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JR3BSZFdWeWVTNUVaV1psY25KbFpDNW5aWFJUZEdGamEwaHZiMnNnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUndjbTlqWlhOekxuTjBZV05yVkhKaFkyVWdQU0JxVVhWbGNua3VSR1ZtWlhKeVpXUXVaMlYwVTNSaFkydEliMjlyS0NrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtDQndjbTlqWlhOeklDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdwUmRXVnllUzVFWldabGNuSmxaQ2dnWm5WdVkzUnBiMjRvSUc1bGQwUmxabVZ5SUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QndjbTluY21WemMxOW9ZVzVrYkdWeWN5NWhaR1FvSUM0dUxpQXBYRzVjZEZ4MFhIUmNkRngwWEhSMGRYQnNaWE5iSURBZ1hWc2dNeUJkTG1Ga1pDaGNibHgwWEhSY2RGeDBYSFJjZEZ4MGNtVnpiMngyWlNoY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRd0xGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHNWxkMFJsWm1WeUxGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQnZibEJ5YjJkeVpYTnpJQ2tnUDF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGIyNVFjbTluY21WemN5QTZYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJKWkdWdWRHbDBlU3hjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ1WlhkRVpXWmxjaTV1YjNScFpubFhhWFJvWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQ2xjYmx4MFhIUmNkRngwWEhSY2RDazdYRzVjYmx4MFhIUmNkRngwWEhSY2RDOHZJR1oxYkdacGJHeGxaRjlvWVc1a2JHVnljeTVoWkdRb0lDNHVMaUFwWEc1Y2RGeDBYSFJjZEZ4MFhIUjBkWEJzWlhOYklERWdYVnNnTXlCZExtRmtaQ2hjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVZ6YjJ4MlpTaGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXdMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzVsZDBSbFptVnlMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLQ0J2YmtaMWJHWnBiR3hsWkNBcElEOWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzl1Um5Wc1ptbHNiR1ZrSURwY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RFbGtaVzUwYVhSNVhHNWNkRngwWEhSY2RGeDBYSFJjZENsY2JseDBYSFJjZEZ4MFhIUmNkQ2s3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUhKbGFtVmpkR1ZrWDJoaGJtUnNaWEp6TG1Ga1pDZ2dMaTR1SUNsY2JseDBYSFJjZEZ4MFhIUmNkSFIxY0d4bGMxc2dNaUJkV3lBeklGMHVZV1JrS0Z4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhOdmJIWmxLRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkREFzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYm1WM1JHVm1aWElzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvSUc5dVVtVnFaV04wWldRZ0tTQS9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ2YmxKbGFtVmpkR1ZrSURwY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGUm9jbTkzWlhKY2JseDBYSFJjZEZ4MFhIUmNkRngwS1Z4dVhIUmNkRngwWEhSY2RGeDBLVHRjYmx4MFhIUmNkRngwWEhSOUlDa3VjSEp2YldselpTZ3BPMXh1WEhSY2RGeDBYSFI5TEZ4dVhHNWNkRngwWEhSY2RDOHZJRWRsZENCaElIQnliMjFwYzJVZ1ptOXlJSFJvYVhNZ1pHVm1aWEp5WldSY2JseDBYSFJjZEZ4MEx5OGdTV1lnYjJKcUlHbHpJSEJ5YjNacFpHVmtMQ0IwYUdVZ2NISnZiV2x6WlNCaGMzQmxZM1FnYVhNZ1lXUmtaV1FnZEc4Z2RHaGxJRzlpYW1WamRGeHVYSFJjZEZ4MFhIUndjbTl0YVhObE9pQm1kVzVqZEdsdmJpZ2diMkpxSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnZZbW9nSVQwZ2JuVnNiQ0EvSUdwUmRXVnllUzVsZUhSbGJtUW9JRzlpYWl3Z2NISnZiV2x6WlNBcElEb2djSEp2YldselpUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkR1JsWm1WeWNtVmtJRDBnZTMwN1hHNWNibHgwWEhRdkx5QkJaR1FnYkdsemRDMXpjR1ZqYVdacFl5QnRaWFJvYjJSelhHNWNkRngwYWxGMVpYSjVMbVZoWTJnb0lIUjFjR3hsY3l3Z1puVnVZM1JwYjI0b0lHa3NJSFIxY0d4bElDa2dlMXh1WEhSY2RGeDBkbUZ5SUd4cGMzUWdQU0IwZFhCc1pWc2dNaUJkTEZ4dVhIUmNkRngwWEhSemRHRjBaVk4wY21sdVp5QTlJSFIxY0d4bFd5QTFJRjA3WEc1Y2JseDBYSFJjZEM4dklIQnliMjFwYzJVdWNISnZaM0psYzNNZ1BTQnNhWE4wTG1Ga1pGeHVYSFJjZEZ4MEx5OGdjSEp2YldselpTNWtiMjVsSUQwZ2JHbHpkQzVoWkdSY2JseDBYSFJjZEM4dklIQnliMjFwYzJVdVptRnBiQ0E5SUd4cGMzUXVZV1JrWEc1Y2RGeDBYSFJ3Y205dGFYTmxXeUIwZFhCc1pWc2dNU0JkSUYwZ1BTQnNhWE4wTG1Ga1pEdGNibHh1WEhSY2RGeDBMeThnU0dGdVpHeGxJSE4wWVhSbFhHNWNkRngwWEhScFppQW9JSE4wWVhSbFUzUnlhVzVuSUNrZ2UxeHVYSFJjZEZ4MFhIUnNhWE4wTG1Ga1pDaGNibHgwWEhSY2RGeDBYSFJtZFc1amRHbHZiaWdwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z2MzUmhkR1VnUFNCY0luSmxjMjlzZG1Wa1hDSWdLR2t1WlM0c0lHWjFiR1pwYkd4bFpDbGNibHgwWEhSY2RGeDBYSFJjZEM4dklITjBZWFJsSUQwZ1hDSnlaV3BsWTNSbFpGd2lYRzVjZEZ4MFhIUmNkRngwWEhSemRHRjBaU0E5SUhOMFlYUmxVM1J5YVc1bk8xeHVYSFJjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJ5WldwbFkzUmxaRjlqWVd4c1ltRmphM011WkdsellXSnNaVnh1WEhSY2RGeDBYSFJjZEM4dklHWjFiR1pwYkd4bFpGOWpZV3hzWW1GamEzTXVaR2x6WVdKc1pWeHVYSFJjZEZ4MFhIUmNkSFIxY0d4bGMxc2dNeUF0SUdrZ1hWc2dNaUJkTG1ScGMyRmliR1VzWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJ3Y205bmNtVnpjMTlqWVd4c1ltRmphM011Ykc5amExeHVYSFJjZEZ4MFhIUmNkSFIxY0d4bGMxc2dNQ0JkV3lBeUlGMHViRzlqYTF4dVhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJ3Y205bmNtVnpjMTlvWVc1a2JHVnljeTVtYVhKbFhHNWNkRngwWEhRdkx5Qm1kV3htYVd4c1pXUmZhR0Z1Wkd4bGNuTXVabWx5WlZ4dVhIUmNkRngwTHk4Z2NtVnFaV04wWldSZmFHRnVaR3hsY25NdVptbHlaVnh1WEhSY2RGeDBiR2x6ZEM1aFpHUW9JSFIxY0d4bFd5QXpJRjB1Wm1seVpTQXBPMXh1WEc1Y2RGeDBYSFF2THlCa1pXWmxjbkpsWkM1dWIzUnBabmtnUFNCbWRXNWpkR2x2YmlncElIc2daR1ZtWlhKeVpXUXVibTkwYVdaNVYybDBhQ2d1TGk0cElIMWNibHgwWEhSY2RDOHZJR1JsWm1WeWNtVmtMbkpsYzI5c2RtVWdQU0JtZFc1amRHbHZiaWdwSUhzZ1pHVm1aWEp5WldRdWNtVnpiMngyWlZkcGRHZ29MaTR1S1NCOVhHNWNkRngwWEhRdkx5QmtaV1psY25KbFpDNXlaV3BsWTNRZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnWkdWbVpYSnlaV1F1Y21WcVpXTjBWMmwwYUNndUxpNHBJSDFjYmx4MFhIUmNkR1JsWm1WeWNtVmtXeUIwZFhCc1pWc2dNQ0JkSUYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWkdWbVpYSnlaV1JiSUhSMWNHeGxXeUF3SUYwZ0t5QmNJbGRwZEdoY0lpQmRLQ0IwYUdseklEMDlQU0JrWldabGNuSmxaQ0EvSUhWdVpHVm1hVzVsWkNBNklIUm9hWE1zSUdGeVozVnRaVzUwY3lBcE8xeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFJjZEM4dklHUmxabVZ5Y21Wa0xtNXZkR2xtZVZkcGRHZ2dQU0JzYVhOMExtWnBjbVZYYVhSb1hHNWNkRngwWEhRdkx5QmtaV1psY25KbFpDNXlaWE52YkhabFYybDBhQ0E5SUd4cGMzUXVabWx5WlZkcGRHaGNibHgwWEhSY2RDOHZJR1JsWm1WeWNtVmtMbkpsYW1WamRGZHBkR2dnUFNCc2FYTjBMbVpwY21WWGFYUm9YRzVjZEZ4MFhIUmtaV1psY25KbFpGc2dkSFZ3YkdWYklEQWdYU0FySUZ3aVYybDBhRndpSUYwZ1BTQnNhWE4wTG1acGNtVlhhWFJvTzF4dVhIUmNkSDBnS1R0Y2JseHVYSFJjZEM4dklFMWhhMlVnZEdobElHUmxabVZ5Y21Wa0lHRWdjSEp2YldselpWeHVYSFJjZEhCeWIyMXBjMlV1Y0hKdmJXbHpaU2dnWkdWbVpYSnlaV1FnS1R0Y2JseHVYSFJjZEM4dklFTmhiR3dnWjJsMlpXNGdablZ1WXlCcFppQmhibmxjYmx4MFhIUnBaaUFvSUdaMWJtTWdLU0I3WEc1Y2RGeDBYSFJtZFc1akxtTmhiR3dvSUdSbFptVnljbVZrTENCa1pXWmxjbkpsWkNBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFRnNiQ0JrYjI1bElWeHVYSFJjZEhKbGRIVnliaUJrWldabGNuSmxaRHRjYmx4MGZTeGNibHh1WEhRdkx5QkVaV1psY25KbFpDQm9aV3h3WlhKY2JseDBkMmhsYmpvZ1puVnVZM1JwYjI0b0lITnBibWRzWlZaaGJIVmxJQ2tnZTF4dVhIUmNkSFpoY2x4dVhHNWNkRngwWEhRdkx5QmpiM1Z1ZENCdlppQjFibU52YlhCc1pYUmxaQ0J6ZFdKdmNtUnBibUYwWlhOY2JseDBYSFJjZEhKbGJXRnBibWx1WnlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc1hHNWNibHgwWEhSY2RDOHZJR052ZFc1MElHOW1JSFZ1Y0hKdlkyVnpjMlZrSUdGeVozVnRaVzUwYzF4dVhIUmNkRngwYVNBOUlISmxiV0ZwYm1sdVp5eGNibHh1WEhSY2RGeDBMeThnYzNWaWIzSmthVzVoZEdVZ1puVnNabWxzYkcxbGJuUWdaR0YwWVZ4dVhIUmNkRngwY21WemIyeDJaVU52Ym5SbGVIUnpJRDBnUVhKeVlYa29JR2tnS1N4Y2JseDBYSFJjZEhKbGMyOXNkbVZXWVd4MVpYTWdQU0J6YkdsalpTNWpZV3hzS0NCaGNtZDFiV1Z1ZEhNZ0tTeGNibHh1WEhSY2RGeDBMeThnZEdobElHMWhjM1JsY2lCRVpXWmxjbkpsWkZ4dVhIUmNkRngwYldGemRHVnlJRDBnYWxGMVpYSjVMa1JsWm1WeWNtVmtLQ2tzWEc1Y2JseDBYSFJjZEM4dklITjFZbTl5WkdsdVlYUmxJR05oYkd4aVlXTnJJR1poWTNSdmNubGNibHgwWEhSY2RIVndaR0YwWlVaMWJtTWdQU0JtZFc1amRHbHZiaWdnYVNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUtDQjJZV3gxWlNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhOdmJIWmxRMjl1ZEdWNGRITmJJR2tnWFNBOUlIUm9hWE03WEc1Y2RGeDBYSFJjZEZ4MGNtVnpiMngyWlZaaGJIVmxjMXNnYVNCZElEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCemJHbGpaUzVqWVd4c0tDQmhjbWQxYldWdWRITWdLU0E2SUhaaGJIVmxPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dJU2dnTFMxeVpXMWhhVzVwYm1jZ0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHMWhjM1JsY2k1eVpYTnZiSFpsVjJsMGFDZ2djbVZ6YjJ4MlpVTnZiblJsZUhSekxDQnlaWE52YkhabFZtRnNkV1Z6SUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5TzF4dVhIUmNkRngwZlR0Y2JseHVYSFJjZEM4dklGTnBibWRzWlMwZ1lXNWtJR1Z0Y0hSNUlHRnlaM1Z0Wlc1MGN5QmhjbVVnWVdSdmNIUmxaQ0JzYVd0bElGQnliMjFwYzJVdWNtVnpiMngyWlZ4dVhIUmNkR2xtSUNnZ2NtVnRZV2x1YVc1bklEdzlJREVnS1NCN1hHNWNkRngwWEhSaFpHOXdkRlpoYkhWbEtDQnphVzVuYkdWV1lXeDFaU3dnYldGemRHVnlMbVJ2Ym1Vb0lIVndaR0YwWlVaMWJtTW9JR2tnS1NBcExuSmxjMjlzZG1Vc0lHMWhjM1JsY2k1eVpXcGxZM1FnS1R0Y2JseHVYSFJjZEZ4MEx5OGdWWE5sSUM1MGFHVnVLQ2tnZEc4Z2RXNTNjbUZ3SUhObFkyOXVaR0Z5ZVNCMGFHVnVZV0pzWlhNZ0tHTm1MaUJuYUMwek1EQXdLVnh1WEhSY2RGeDBhV1lnS0NCdFlYTjBaWEl1YzNSaGRHVW9LU0E5UFQwZ1hDSndaVzVrYVc1blhDSWdmSHhjYmx4MFhIUmNkRngwYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvSUhKbGMyOXNkbVZXWVd4MVpYTmJJR2tnWFNBbUppQnlaWE52YkhabFZtRnNkV1Z6V3lCcElGMHVkR2hsYmlBcElDa2dlMXh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ0WVhOMFpYSXVkR2hsYmlncE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFMTFiSFJwY0d4bElHRnlaM1Z0Wlc1MGN5QmhjbVVnWVdkbmNtVm5ZWFJsWkNCc2FXdGxJRkJ5YjIxcGMyVXVZV3hzSUdGeWNtRjVJR1ZzWlcxbGJuUnpYRzVjZEZ4MGQyaHBiR1VnS0NCcExTMGdLU0I3WEc1Y2RGeDBYSFJoWkc5d2RGWmhiSFZsS0NCeVpYTnZiSFpsVm1Gc2RXVnpXeUJwSUYwc0lIVndaR0YwWlVaMWJtTW9JR2tnS1N3Z2JXRnpkR1Z5TG5KbGFtVmpkQ0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQnRZWE4wWlhJdWNISnZiV2x6WlNncE8xeHVYSFI5WEc1OUlDazdYRzVjYmx4dUx5OGdWR2hsYzJVZ2RYTjFZV3hzZVNCcGJtUnBZMkYwWlNCaElIQnliMmR5WVcxdFpYSWdiV2x6ZEdGclpTQmtkWEpwYm1jZ1pHVjJaV3h2Y0cxbGJuUXNYRzR2THlCM1lYSnVJR0ZpYjNWMElIUm9aVzBnUVZOQlVDQnlZWFJvWlhJZ2RHaGhiaUJ6ZDJGc2JHOTNhVzVuSUhSb1pXMGdZbmtnWkdWbVlYVnNkQzVjYm5aaGNpQnlaWEp5YjNKT1lXMWxjeUE5SUM5ZUtFVjJZV3g4U1c1MFpYSnVZV3g4VW1GdVoyVjhVbVZtWlhKbGJtTmxmRk41Ym5SaGVIeFVlWEJsZkZWU1NTbEZjbkp2Y2lRdk8xeHVYRzVxVVhWbGNua3VSR1ZtWlhKeVpXUXVaWGhqWlhCMGFXOXVTRzl2YXlBOUlHWjFibU4wYVc5dUtDQmxjbkp2Y2l3Z2MzUmhZMnNnS1NCN1hHNWNibHgwTHk4Z1UzVndjRzl5ZERvZ1NVVWdPQ0F0SURrZ2IyNXNlVnh1WEhRdkx5QkRiMjV6YjJ4bElHVjRhWE4wY3lCM2FHVnVJR1JsZGlCMGIyOXNjeUJoY21VZ2IzQmxiaXdnZDJocFkyZ2dZMkZ1SUdoaGNIQmxiaUJoZENCaGJua2dkR2x0WlZ4dVhIUnBaaUFvSUhkcGJtUnZkeTVqYjI1emIyeGxJQ1ltSUhkcGJtUnZkeTVqYjI1emIyeGxMbmRoY200Z0ppWWdaWEp5YjNJZ0ppWWdjbVZ5Y205eVRtRnRaWE11ZEdWemRDZ2daWEp5YjNJdWJtRnRaU0FwSUNrZ2UxeHVYSFJjZEhkcGJtUnZkeTVqYjI1emIyeGxMbmRoY200b0lGd2lhbEYxWlhKNUxrUmxabVZ5Y21Wa0lHVjRZMlZ3ZEdsdmJqb2dYQ0lnS3lCbGNuSnZjaTV0WlhOellXZGxMQ0JsY25KdmNpNXpkR0ZqYXl3Z2MzUmhZMnNnS1R0Y2JseDBmVnh1ZlR0Y2JseHVYRzVjYmx4dWFsRjFaWEo1TG5KbFlXUjVSWGhqWlhCMGFXOXVJRDBnWm5WdVkzUnBiMjRvSUdWeWNtOXlJQ2tnZTF4dVhIUjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBkR2h5YjNjZ1pYSnliM0k3WEc1Y2RIMGdLVHRjYm4wN1hHNWNibHh1WEc1Y2JpOHZJRlJvWlNCa1pXWmxjbkpsWkNCMWMyVmtJRzl1SUVSUFRTQnlaV0ZrZVZ4dWRtRnlJSEpsWVdSNVRHbHpkQ0E5SUdwUmRXVnllUzVFWldabGNuSmxaQ2dwTzF4dVhHNXFVWFZsY25rdVptNHVjbVZoWkhrZ1BTQm1kVzVqZEdsdmJpZ2dabTRnS1NCN1hHNWNibHgwY21WaFpIbE1hWE4wWEc1Y2RGeDBMblJvWlc0b0lHWnVJQ2xjYmx4dVhIUmNkQzh2SUZkeVlYQWdhbEYxWlhKNUxuSmxZV1I1UlhoalpYQjBhVzl1SUdsdUlHRWdablZ1WTNScGIyNGdjMjhnZEdoaGRDQjBhR1VnYkc5dmEzVndYRzVjZEZ4MEx5OGdhR0Z3Y0dWdWN5QmhkQ0IwYUdVZ2RHbHRaU0J2WmlCbGNuSnZjaUJvWVc1a2JHbHVaeUJwYm5OMFpXRmtJRzltSUdOaGJHeGlZV05yWEc1Y2RGeDBMeThnY21WbmFYTjBjbUYwYVc5dUxseHVYSFJjZEM1allYUmphQ2dnWm5WdVkzUnBiMjRvSUdWeWNtOXlJQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVMbkpsWVdSNVJYaGpaWEIwYVc5dUtDQmxjbkp2Y2lBcE8xeHVYSFJjZEgwZ0tUdGNibHh1WEhSeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JtcFJkV1Z5ZVM1bGVIUmxibVFvSUh0Y2JseHVYSFF2THlCSmN5QjBhR1VnUkU5TklISmxZV1I1SUhSdklHSmxJSFZ6WldRL0lGTmxkQ0IwYnlCMGNuVmxJRzl1WTJVZ2FYUWdiMk5qZFhKekxseHVYSFJwYzFKbFlXUjVPaUJtWVd4elpTeGNibHh1WEhRdkx5QkJJR052ZFc1MFpYSWdkRzhnZEhKaFkyc2dhRzkzSUcxaGJua2dhWFJsYlhNZ2RHOGdkMkZwZENCbWIzSWdZbVZtYjNKbFhHNWNkQzh2SUhSb1pTQnlaV0ZrZVNCbGRtVnVkQ0JtYVhKbGN5NGdVMlZsSUNNMk56Z3hYRzVjZEhKbFlXUjVWMkZwZERvZ01TeGNibHh1WEhRdkx5QkliMnhrSUNodmNpQnlaV3hsWVhObEtTQjBhR1VnY21WaFpIa2daWFpsYm5SY2JseDBhRzlzWkZKbFlXUjVPaUJtZFc1amRHbHZiaWdnYUc5c1pDQXBJSHRjYmx4MFhIUnBaaUFvSUdodmJHUWdLU0I3WEc1Y2RGeDBYSFJxVVhWbGNua3VjbVZoWkhsWFlXbDBLeXM3WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1eVpXRmtlU2dnZEhKMVpTQXBPMXh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFF2THlCSVlXNWtiR1VnZDJobGJpQjBhR1VnUkU5TklHbHpJSEpsWVdSNVhHNWNkSEpsWVdSNU9pQm1kVzVqZEdsdmJpZ2dkMkZwZENBcElIdGNibHh1WEhSY2RDOHZJRUZpYjNKMElHbG1JSFJvWlhKbElHRnlaU0J3Wlc1a2FXNW5JR2h2YkdSeklHOXlJSGRsSjNKbElHRnNjbVZoWkhrZ2NtVmhaSGxjYmx4MFhIUnBaaUFvSUhkaGFYUWdQVDA5SUhSeWRXVWdQeUF0TFdwUmRXVnllUzV5WldGa2VWZGhhWFFnT2lCcVVYVmxjbmt1YVhOU1pXRmtlU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJTWlcxbGJXSmxjaUIwYUdGMElIUm9aU0JFVDAwZ2FYTWdjbVZoWkhsY2JseDBYSFJxVVhWbGNua3VhWE5TWldGa2VTQTlJSFJ5ZFdVN1hHNWNibHgwWEhRdkx5QkpaaUJoSUc1dmNtMWhiQ0JFVDAwZ1VtVmhaSGtnWlhabGJuUWdabWx5WldRc0lHUmxZM0psYldWdWRDd2dZVzVrSUhkaGFYUWdhV1lnYm1WbFpDQmlaVnh1WEhSY2RHbG1JQ2dnZDJGcGRDQWhQVDBnZEhKMVpTQW1KaUF0TFdwUmRXVnllUzV5WldGa2VWZGhhWFFnUGlBd0lDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFbG1JSFJvWlhKbElHRnlaU0JtZFc1amRHbHZibk1nWW05MWJtUXNJSFJ2SUdWNFpXTjFkR1ZjYmx4MFhIUnlaV0ZrZVV4cGMzUXVjbVZ6YjJ4MlpWZHBkR2dvSUdSdlkzVnRaVzUwTENCYklHcFJkV1Z5ZVNCZElDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG5KbFlXUjVMblJvWlc0Z1BTQnlaV0ZrZVV4cGMzUXVkR2hsYmp0Y2JseHVMeThnVkdobElISmxZV1I1SUdWMlpXNTBJR2hoYm1Sc1pYSWdZVzVrSUhObGJHWWdZMnhsWVc1MWNDQnRaWFJvYjJSY2JtWjFibU4wYVc5dUlHTnZiWEJzWlhSbFpDZ3BJSHRjYmx4MFpHOWpkVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2dYQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lzSUdOdmJYQnNaWFJsWkNBcE8xeHVYSFIzYVc1a2IzY3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWdnWENKc2IyRmtYQ0lzSUdOdmJYQnNaWFJsWkNBcE8xeHVYSFJxVVhWbGNua3VjbVZoWkhrb0tUdGNibjFjYmx4dUx5OGdRMkYwWTJnZ1kyRnpaWE1nZDJobGNtVWdKQ2hrYjJOMWJXVnVkQ2t1Y21WaFpIa29LU0JwY3lCallXeHNaV1JjYmk4dklHRm1kR1Z5SUhSb1pTQmljbTkzYzJWeUlHVjJaVzUwSUdoaGN5QmhiSEpsWVdSNUlHOWpZM1Z5Y21Wa0xseHVMeThnVTNWd2NHOXlkRG9nU1VVZ1BEMDVJQzBnTVRBZ2IyNXNlVnh1THk4Z1QyeGtaWElnU1VVZ2MyOXRaWFJwYldWeklITnBaMjVoYkhNZ1hDSnBiblJsY21GamRHbDJaVndpSUhSdmJ5QnpiMjl1WEc1cFppQW9JR1J2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1VnUFQwOUlGd2lZMjl0Y0d4bGRHVmNJaUI4ZkZ4dVhIUW9JR1J2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1VnSVQwOUlGd2liRzloWkdsdVoxd2lJQ1ltSUNGa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1Wkc5VFkzSnZiR3dnS1NBcElIdGNibHh1WEhRdkx5QklZVzVrYkdVZ2FYUWdZWE41Ym1Ob2NtOXViM1Z6YkhrZ2RHOGdZV3hzYjNjZ2MyTnlhWEIwY3lCMGFHVWdiM0J3YjNKMGRXNXBkSGtnZEc4Z1pHVnNZWGtnY21WaFpIbGNibHgwZDJsdVpHOTNMbk5sZEZScGJXVnZkWFFvSUdwUmRXVnllUzV5WldGa2VTQXBPMXh1WEc1OUlHVnNjMlVnZTF4dVhHNWNkQzh2SUZWelpTQjBhR1VnYUdGdVpIa2daWFpsYm5RZ1kyRnNiR0poWTJ0Y2JseDBaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ2dYQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lzSUdOdmJYQnNaWFJsWkNBcE8xeHVYRzVjZEM4dklFRWdabUZzYkdKaFkyc2dkRzhnZDJsdVpHOTNMbTl1Ykc5aFpDd2dkR2hoZENCM2FXeHNJR0ZzZDJGNWN5QjNiM0pyWEc1Y2RIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NCY0lteHZZV1JjSWl3Z1kyOXRjR3hsZEdWa0lDazdYRzU5WEc1Y2JseHVYRzVjYmk4dklFMTFiSFJwWm5WdVkzUnBiMjVoYkNCdFpYUm9iMlFnZEc4Z1oyVjBJR0Z1WkNCelpYUWdkbUZzZFdWeklHOW1JR0VnWTI5c2JHVmpkR2x2Ymx4dUx5OGdWR2hsSUhaaGJIVmxMM01nWTJGdUlHOXdkR2x2Ym1Gc2JIa2dZbVVnWlhobFkzVjBaV1FnYVdZZ2FYUW5jeUJoSUdaMWJtTjBhVzl1WEc1MllYSWdZV05qWlhOeklEMGdablZ1WTNScGIyNG9JR1ZzWlcxekxDQm1iaXdnYTJWNUxDQjJZV3gxWlN3Z1kyaGhhVzVoWW14bExDQmxiWEIwZVVkbGRDd2djbUYzSUNrZ2UxeHVYSFIyWVhJZ2FTQTlJREFzWEc1Y2RGeDBiR1Z1SUQwZ1pXeGxiWE11YkdWdVozUm9MRnh1WEhSY2RHSjFiR3NnUFNCclpYa2dQVDBnYm5Wc2JEdGNibHh1WEhRdkx5QlRaWFJ6SUcxaGJua2dkbUZzZFdWelhHNWNkR2xtSUNnZ2FsRjFaWEo1TG5SNWNHVW9JR3RsZVNBcElEMDlQU0JjSW05aWFtVmpkRndpSUNrZ2UxeHVYSFJjZEdOb1lXbHVZV0pzWlNBOUlIUnlkV1U3WEc1Y2RGeDBabTl5SUNnZ2FTQnBiaUJyWlhrZ0tTQjdYRzVjZEZ4MFhIUmhZMk5sYzNNb0lHVnNaVzF6TENCbWJpd2dhU3dnYTJWNVd5QnBJRjBzSUhSeWRXVXNJR1Z0Y0hSNVIyVjBMQ0J5WVhjZ0tUdGNibHgwWEhSOVhHNWNibHgwTHk4Z1UyVjBjeUJ2Ym1VZ2RtRnNkV1ZjYmx4MGZTQmxiSE5sSUdsbUlDZ2dkbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJqYUdGcGJtRmliR1VnUFNCMGNuVmxPMXh1WEc1Y2RGeDBhV1lnS0NBaGFsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ0tTQjdYRzVjZEZ4MFhIUnlZWGNnUFNCMGNuVmxPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnWW5Wc2F5QXBJSHRjYmx4dVhIUmNkRngwTHk4Z1FuVnNheUJ2Y0dWeVlYUnBiMjV6SUhKMWJpQmhaMkZwYm5OMElIUm9aU0JsYm5ScGNtVWdjMlYwWEc1Y2RGeDBYSFJwWmlBb0lISmhkeUFwSUh0Y2JseDBYSFJjZEZ4MFptNHVZMkZzYkNnZ1pXeGxiWE1zSUhaaGJIVmxJQ2s3WEc1Y2RGeDBYSFJjZEdadUlEMGdiblZzYkR0Y2JseHVYSFJjZEZ4MEx5OGdMaTR1WlhoalpYQjBJSGRvWlc0Z1pYaGxZM1YwYVc1bklHWjFibU4wYVc5dUlIWmhiSFZsYzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWW5Wc2F5QTlJR1p1TzF4dVhIUmNkRngwWEhSbWJpQTlJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnJaWGtzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCaWRXeHJMbU5oYkd3b0lHcFJkV1Z5ZVNnZ1pXeGxiU0FwTENCMllXeDFaU0FwTzF4dVhIUmNkRngwWEhSOU8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dabTRnS1NCN1hHNWNkRngwWEhSbWIzSWdLQ0E3SUdrZ1BDQnNaVzQ3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwWm00b1hHNWNkRngwWEhSY2RGeDBaV3hsYlhOYklHa2dYU3dnYTJWNUxDQnlZWGNnUDF4dVhIUmNkRngwWEhSY2RIWmhiSFZsSURwY2JseDBYSFJjZEZ4MFhIUjJZV3gxWlM1allXeHNLQ0JsYkdWdGMxc2dhU0JkTENCcExDQm1iaWdnWld4bGJYTmJJR2tnWFN3Z2EyVjVJQ2tnS1Z4dVhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHbG1JQ2dnWTJoaGFXNWhZbXhsSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJsYkdWdGN6dGNibHgwZlZ4dVhHNWNkQzh2SUVkbGRITmNibHgwYVdZZ0tDQmlkV3hySUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJtYmk1allXeHNLQ0JsYkdWdGN5QXBPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJR3hsYmlBL0lHWnVLQ0JsYkdWdGMxc2dNQ0JkTENCclpYa2dLU0E2SUdWdGNIUjVSMlYwTzF4dWZUdGNiblpoY2lCaFkyTmxjSFJFWVhSaElEMGdablZ1WTNScGIyNG9JRzkzYm1WeUlDa2dlMXh1WEc1Y2RDOHZJRUZqWTJWd2RITWdiMjVzZVRwY2JseDBMeThnSUMwZ1RtOWtaVnh1WEhRdkx5QWdJQ0F0SUU1dlpHVXVSVXhGVFVWT1ZGOU9UMFJGWEc1Y2RDOHZJQ0FnSUMwZ1RtOWtaUzVFVDBOVlRVVk9WRjlPVDBSRlhHNWNkQzh2SUNBdElFOWlhbVZqZEZ4dVhIUXZMeUFnSUNBdElFRnVlVnh1WEhSeVpYUjFjbTRnYjNkdVpYSXVibTlrWlZSNWNHVWdQVDA5SURFZ2ZId2diM2R1WlhJdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnZkh3Z0lTZ2dLMjkzYm1WeUxtNXZaR1ZVZVhCbElDazdYRzU5TzF4dVhHNWNibHh1WEc1bWRXNWpkR2x2YmlCRVlYUmhLQ2tnZTF4dVhIUjBhR2x6TG1WNGNHRnVaRzhnUFNCcVVYVmxjbmt1Wlhod1lXNWtieUFySUVSaGRHRXVkV2xrS3lzN1hHNTlYRzVjYmtSaGRHRXVkV2xrSUQwZ01UdGNibHh1UkdGMFlTNXdjbTkwYjNSNWNHVWdQU0I3WEc1Y2JseDBZMkZqYUdVNklHWjFibU4wYVc5dUtDQnZkMjVsY2lBcElIdGNibHh1WEhSY2RDOHZJRU5vWldOcklHbG1JSFJvWlNCdmQyNWxjaUJ2WW1wbFkzUWdZV3h5WldGa2VTQm9ZWE1nWVNCallXTm9aVnh1WEhSY2RIWmhjaUIyWVd4MVpTQTlJRzkzYm1WeVd5QjBhR2x6TG1WNGNHRnVaRzhnWFR0Y2JseHVYSFJjZEM4dklFbG1JRzV2ZEN3Z1kzSmxZWFJsSUc5dVpWeHVYSFJjZEdsbUlDZ2dJWFpoYkhWbElDa2dlMXh1WEhSY2RGeDBkbUZzZFdVZ1BTQjdmVHRjYmx4dVhIUmNkRngwTHk4Z1YyVWdZMkZ1SUdGalkyVndkQ0JrWVhSaElHWnZjaUJ1YjI0dFpXeGxiV1Z1ZENCdWIyUmxjeUJwYmlCdGIyUmxjbTRnWW5KdmQzTmxjbk1zWEc1Y2RGeDBYSFF2THlCaWRYUWdkMlVnYzJodmRXeGtJRzV2ZEN3Z2MyVmxJQ000TXpNMUxseHVYSFJjZEZ4MEx5OGdRV3gzWVhseklISmxkSFZ5YmlCaGJpQmxiWEIwZVNCdlltcGxZM1F1WEc1Y2RGeDBYSFJwWmlBb0lHRmpZMlZ3ZEVSaGRHRW9JRzkzYm1WeUlDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnYVhRZ2FYTWdZU0J1YjJSbElIVnViR2xyWld4NUlIUnZJR0psSUhOMGNtbHVaMmxtZVMxbFpDQnZjaUJzYjI5d1pXUWdiM1psY2x4dVhIUmNkRngwWEhRdkx5QjFjMlVnY0d4aGFXNGdZWE56YVdkdWJXVnVkRnh1WEhSY2RGeDBYSFJwWmlBb0lHOTNibVZ5TG01dlpHVlVlWEJsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRzkzYm1WeVd5QjBhR2x6TG1WNGNHRnVaRzhnWFNBOUlIWmhiSFZsTzF4dVhHNWNkRngwWEhSY2RDOHZJRTkwYUdWeWQybHpaU0J6WldOMWNtVWdhWFFnYVc0Z1lTQnViMjR0Wlc1MWJXVnlZV0pzWlNCd2NtOXdaWEowZVZ4dVhIUmNkRngwWEhRdkx5QmpiMjVtYVdkMWNtRmliR1VnYlhWemRDQmlaU0IwY25WbElIUnZJR0ZzYkc5M0lIUm9aU0J3Y205d1pYSjBlU0IwYnlCaVpWeHVYSFJjZEZ4MFhIUXZMeUJrWld4bGRHVmtJSGRvWlc0Z1pHRjBZU0JwY3lCeVpXMXZkbVZrWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLQ0J2ZDI1bGNpd2dkR2hwY3k1bGVIQmhibVJ2TENCN1hHNWNkRngwWEhSY2RGeDBYSFIyWVd4MVpUb2dkbUZzZFdVc1hHNWNkRngwWEhSY2RGeDBYSFJqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1ZjYmx4MFhIUmNkRngwWEhSOUlDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2RtRnNkV1U3WEc1Y2RIMHNYRzVjZEhObGREb2dablZ1WTNScGIyNG9JRzkzYm1WeUxDQmtZWFJoTENCMllXeDFaU0FwSUh0Y2JseDBYSFIyWVhJZ2NISnZjQ3hjYmx4MFhIUmNkR05oWTJobElEMGdkR2hwY3k1allXTm9aU2dnYjNkdVpYSWdLVHRjYmx4dVhIUmNkQzh2SUVoaGJtUnNaVG9nV3lCdmQyNWxjaXdnYTJWNUxDQjJZV3gxWlNCZElHRnlaM05jYmx4MFhIUXZMeUJCYkhkaGVYTWdkWE5sSUdOaGJXVnNRMkZ6WlNCclpYa2dLR2RvTFRJeU5UY3BYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdaR0YwWVNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFwSUh0Y2JseDBYSFJjZEdOaFkyaGxXeUJxVVhWbGNua3VZMkZ0Wld4RFlYTmxLQ0JrWVhSaElDa2dYU0E5SUhaaGJIVmxPMXh1WEc1Y2RGeDBMeThnU0dGdVpHeGxPaUJiSUc5M2JtVnlMQ0I3SUhCeWIzQmxjblJwWlhNZ2ZTQmRJR0Z5WjNOY2JseDBYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBYSFF2THlCRGIzQjVJSFJvWlNCd2NtOXdaWEowYVdWeklHOXVaUzFpZVMxdmJtVWdkRzhnZEdobElHTmhZMmhsSUc5aWFtVmpkRnh1WEhSY2RGeDBabTl5SUNnZ2NISnZjQ0JwYmlCa1lYUmhJQ2tnZTF4dVhIUmNkRngwWEhSallXTm9aVnNnYWxGMVpYSjVMbU5oYldWc1EyRnpaU2dnY0hKdmNDQXBJRjBnUFNCa1lYUmhXeUJ3Y205d0lGMDdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFJjZEhKbGRIVnliaUJqWVdOb1pUdGNibHgwZlN4Y2JseDBaMlYwT2lCbWRXNWpkR2x2YmlnZ2IzZHVaWElzSUd0bGVTQXBJSHRjYmx4MFhIUnlaWFIxY200Z2EyVjVJRDA5UFNCMWJtUmxabWx1WldRZ1AxeHVYSFJjZEZ4MGRHaHBjeTVqWVdOb1pTZ2diM2R1WlhJZ0tTQTZYRzVjYmx4MFhIUmNkQzh2SUVGc2QyRjVjeUIxYzJVZ1kyRnRaV3hEWVhObElHdGxlU0FvWjJndE1qSTFOeWxjYmx4MFhIUmNkRzkzYm1WeVd5QjBhR2x6TG1WNGNHRnVaRzhnWFNBbUppQnZkMjVsY2xzZ2RHaHBjeTVsZUhCaGJtUnZJRjFiSUdwUmRXVnllUzVqWVcxbGJFTmhjMlVvSUd0bGVTQXBJRjA3WEc1Y2RIMHNYRzVjZEdGalkyVnpjem9nWm5WdVkzUnBiMjRvSUc5M2JtVnlMQ0JyWlhrc0lIWmhiSFZsSUNrZ2UxeHVYRzVjZEZ4MEx5OGdTVzRnWTJGelpYTWdkMmhsY21VZ1pXbDBhR1Z5T2x4dVhIUmNkQzh2WEc1Y2RGeDBMeThnSUNBeExpQk9ieUJyWlhrZ2QyRnpJSE53WldOcFptbGxaRnh1WEhSY2RDOHZJQ0FnTWk0Z1FTQnpkSEpwYm1jZ2EyVjVJSGRoY3lCemNHVmphV1pwWldRc0lHSjFkQ0J1YnlCMllXeDFaU0J3Y205MmFXUmxaRnh1WEhSY2RDOHZYRzVjZEZ4MEx5OGdWR0ZyWlNCMGFHVWdYQ0p5WldGa1hDSWdjR0YwYUNCaGJtUWdZV3hzYjNjZ2RHaGxJR2RsZENCdFpYUm9iMlFnZEc4Z1pHVjBaWEp0YVc1bFhHNWNkRngwTHk4Z2QyaHBZMmdnZG1Gc2RXVWdkRzhnY21WMGRYSnVMQ0J5WlhOd1pXTjBhWFpsYkhrZ1pXbDBhR1Z5T2x4dVhIUmNkQzh2WEc1Y2RGeDBMeThnSUNBeExpQlVhR1VnWlc1MGFYSmxJR05oWTJobElHOWlhbVZqZEZ4dVhIUmNkQzh2SUNBZ01pNGdWR2hsSUdSaGRHRWdjM1J2Y21Wa0lHRjBJSFJvWlNCclpYbGNibHgwWEhRdkwxeHVYSFJjZEdsbUlDZ2dhMlY1SUQwOVBTQjFibVJsWm1sdVpXUWdmSHhjYmx4MFhIUmNkRngwS0NBb0lHdGxlU0FtSmlCMGVYQmxiMllnYTJWNUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ0ppWWdkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjeTVuWlhRb0lHOTNibVZ5TENCclpYa2dLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJYYUdWdUlIUm9aU0JyWlhrZ2FYTWdibTkwSUdFZ2MzUnlhVzVuTENCdmNpQmliM1JvSUdFZ2EyVjVJR0Z1WkNCMllXeDFaVnh1WEhSY2RDOHZJR0Z5WlNCemNHVmphV1pwWldRc0lITmxkQ0J2Y2lCbGVIUmxibVFnS0dWNGFYTjBhVzVuSUc5aWFtVmpkSE1wSUhkcGRHZ2daV2wwYUdWeU9seHVYSFJjZEM4dlhHNWNkRngwTHk4Z0lDQXhMaUJCYmlCdlltcGxZM1FnYjJZZ2NISnZjR1Z5ZEdsbGMxeHVYSFJjZEM4dklDQWdNaTRnUVNCclpYa2dZVzVrSUhaaGJIVmxYRzVjZEZ4MEx5OWNibHgwWEhSMGFHbHpMbk5sZENnZ2IzZHVaWElzSUd0bGVTd2dkbUZzZFdVZ0tUdGNibHh1WEhSY2RDOHZJRk5wYm1ObElIUm9aU0JjSW5ObGRGd2lJSEJoZEdnZ1kyRnVJR2hoZG1VZ2RIZHZJSEJ2YzNOcFlteGxJR1Z1ZEhKNUlIQnZhVzUwYzF4dVhIUmNkQzh2SUhKbGRIVnliaUIwYUdVZ1pYaHdaV04wWldRZ1pHRjBZU0JpWVhObFpDQnZiaUIzYUdsamFDQndZWFJvSUhkaGN5QjBZV3RsYmxzcVhWeHVYSFJjZEhKbGRIVnliaUIyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUQ4Z2RtRnNkV1VnT2lCclpYazdYRzVjZEgwc1hHNWNkSEpsYlc5MlpUb2dablZ1WTNScGIyNG9JRzkzYm1WeUxDQnJaWGtnS1NCN1hHNWNkRngwZG1GeUlHa3NYRzVjZEZ4MFhIUmpZV05vWlNBOUlHOTNibVZ5V3lCMGFHbHpMbVY0Y0dGdVpHOGdYVHRjYmx4dVhIUmNkR2xtSUNnZ1kyRmphR1VnUFQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9JR3RsZVNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKMElHRnljbUY1SUc5eUlITndZV05sSUhObGNHRnlZWFJsWkNCemRISnBibWNnYjJZZ2EyVjVjMXh1WEhSY2RGeDBhV1lnS0NCcVVYVmxjbmt1YVhOQmNuSmhlU2dnYTJWNUlDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnYTJWNUlHbHpJR0Z1SUdGeWNtRjVJRzltSUd0bGVYTXVMaTVjYmx4MFhIUmNkRngwTHk4Z1YyVWdZV3gzWVhseklITmxkQ0JqWVcxbGJFTmhjMlVnYTJWNWN5d2djMjhnY21WdGIzWmxJSFJvWVhRdVhHNWNkRngwWEhSY2RHdGxlU0E5SUd0bGVTNXRZWEFvSUdwUmRXVnllUzVqWVcxbGJFTmhjMlVnS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEd0bGVTQTlJR3BSZFdWeWVTNWpZVzFsYkVOaGMyVW9JR3RsZVNBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVsbUlHRWdhMlY1SUhkcGRHZ2dkR2hsSUhOd1lXTmxjeUJsZUdsemRITXNJSFZ6WlNCcGRDNWNibHgwWEhSY2RGeDBMeThnVDNSb1pYSjNhWE5sTENCamNtVmhkR1VnWVc0Z1lYSnlZWGtnWW5rZ2JXRjBZMmhwYm1jZ2JtOXVMWGRvYVhSbGMzQmhZMlZjYmx4MFhIUmNkRngwYTJWNUlEMGdhMlY1SUdsdUlHTmhZMmhsSUQ5Y2JseDBYSFJjZEZ4MFhIUmJJR3RsZVNCZElEcGNibHgwWEhSY2RGeDBYSFFvSUd0bGVTNXRZWFJqYUNnZ2NtNXZkR2gwYld4M2FHbDBaU0FwSUh4OElGdGRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdrZ1BTQnJaWGt1YkdWdVozUm9PMXh1WEc1Y2RGeDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RGeDBaR1ZzWlhSbElHTmhZMmhsV3lCclpYbGJJR2tnWFNCZE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGSmxiVzkyWlNCMGFHVWdaWGh3WVc1a2J5QnBaaUIwYUdWeVpTZHpJRzV2SUcxdmNtVWdaR0YwWVZ4dVhIUmNkR2xtSUNnZ2EyVjVJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dhbEYxWlhKNUxtbHpSVzF3ZEhsUFltcGxZM1FvSUdOaFkyaGxJQ2tnS1NCN1hHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRU5vY205dFpTQThQVE0xSUMwZ05EVmNibHgwWEhSY2RDOHZJRmRsWW10cGRDQW1JRUpzYVc1cklIQmxjbVp2Y20xaGJtTmxJSE4xWm1abGNuTWdkMmhsYmlCa1pXeGxkR2x1WnlCd2NtOXdaWEowYVdWelhHNWNkRngwWEhRdkx5Qm1jbTl0SUVSUFRTQnViMlJsY3l3Z2MyOGdjMlYwSUhSdklIVnVaR1ZtYVc1bFpDQnBibk4wWldGa1hHNWNkRngwWEhRdkx5Qm9kSFJ3Y3pvdkwySjFaM011WTJoeWIyMXBkVzB1YjNKbkwzQXZZMmh5YjIxcGRXMHZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMHpOemcyTURjZ0tHSjFaeUJ5WlhOMGNtbGpkR1ZrS1Z4dVhIUmNkRngwYVdZZ0tDQnZkMjVsY2k1dWIyUmxWSGx3WlNBcElIdGNibHgwWEhSY2RGeDBiM2R1WlhKYklIUm9hWE11Wlhod1lXNWtieUJkSUQwZ2RXNWtaV1pwYm1Wa08xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFpHVnNaWFJsSUc5M2JtVnlXeUIwYUdsekxtVjRjR0Z1Wkc4Z1hUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDBzWEc1Y2RHaGhjMFJoZEdFNklHWjFibU4wYVc5dUtDQnZkMjVsY2lBcElIdGNibHgwWEhSMllYSWdZMkZqYUdVZ1BTQnZkMjVsY2xzZ2RHaHBjeTVsZUhCaGJtUnZJRjA3WEc1Y2RGeDBjbVYwZFhKdUlHTmhZMmhsSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnSVdwUmRXVnllUzVwYzBWdGNIUjVUMkpxWldOMEtDQmpZV05vWlNBcE8xeHVYSFI5WEc1OU8xeHVkbUZ5SUdSaGRHRlFjbWwySUQwZ2JtVjNJRVJoZEdFb0tUdGNibHh1ZG1GeUlHUmhkR0ZWYzJWeUlEMGdibVYzSUVSaGRHRW9LVHRjYmx4dVhHNWNiaTh2WEhSSmJYQnNaVzFsYm5SaGRHbHZiaUJUZFcxdFlYSjVYRzR2TDF4dUx5OWNkREV1SUVWdVptOXlZMlVnUVZCSklITjFjbVpoWTJVZ1lXNWtJSE5sYldGdWRHbGpJR052YlhCaGRHbGlhV3hwZEhrZ2QybDBhQ0F4TGprdWVDQmljbUZ1WTJoY2JpOHZYSFF5TGlCSmJYQnliM1psSUhSb1pTQnRiMlIxYkdVbmN5QnRZV2x1ZEdGcGJtRmlhV3hwZEhrZ1lua2djbVZrZFdOcGJtY2dkR2hsSUhOMGIzSmhaMlZjYmk4dlhIUmNkSEJoZEdoeklIUnZJR0VnYzJsdVoyeGxJRzFsWTJoaGJtbHpiUzVjYmk4dlhIUXpMaUJWYzJVZ2RHaGxJSE5oYldVZ2MybHVaMnhsSUcxbFkyaGhibWx6YlNCMGJ5QnpkWEJ3YjNKMElGd2ljSEpwZG1GMFpWd2lJR0Z1WkNCY0luVnpaWEpjSWlCa1lYUmhMbHh1THk5Y2REUXVJRjlPWlhabGNsOGdaWGh3YjNObElGd2ljSEpwZG1GMFpWd2lJR1JoZEdFZ2RHOGdkWE5sY2lCamIyUmxJQ2hVVDBSUE9pQkVjbTl3SUY5a1lYUmhMQ0JmY21WdGIzWmxSR0YwWVNsY2JpOHZYSFExTGlCQmRtOXBaQ0JsZUhCdmMybHVaeUJwYlhCc1pXMWxiblJoZEdsdmJpQmtaWFJoYVd4eklHOXVJSFZ6WlhJZ2IySnFaV04wY3lBb1pXY3VJR1Y0Y0dGdVpHOGdjSEp2Y0dWeWRHbGxjeWxjYmk4dlhIUTJMaUJRY205MmFXUmxJR0VnWTJ4bFlYSWdjR0YwYUNCbWIzSWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2RYQm5jbUZrWlNCMGJ5QlhaV0ZyVFdGd0lHbHVJREl3TVRSY2JseHVkbUZ5SUhKaWNtRmpaU0E5SUM5ZUtEODZYRng3VzF4Y2QxeGNWMTBxWEZ4OWZGeGNXMXRjWEhkY1hGZGRLbHhjWFNra0x5eGNibHgwY20xMWJIUnBSR0Z6YUNBOUlDOWJRUzFhWFM5bk8xeHVYRzVtZFc1amRHbHZiaUJuWlhSRVlYUmhLQ0JrWVhSaElDa2dlMXh1WEhScFppQW9JR1JoZEdFZ1BUMDlJRndpZEhKMVpWd2lJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUjlYRzVjYmx4MGFXWWdLQ0JrWVhSaElEMDlQU0JjSW1aaGJITmxYQ0lnS1NCN1hHNWNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFI5WEc1Y2JseDBhV1lnS0NCa1lYUmhJRDA5UFNCY0ltNTFiR3hjSWlBcElIdGNibHgwWEhSeVpYUjFjbTRnYm5Wc2JEdGNibHgwZlZ4dVhHNWNkQzh2SUU5dWJIa2dZMjl1ZG1WeWRDQjBieUJoSUc1MWJXSmxjaUJwWmlCcGRDQmtiMlZ6YmlkMElHTm9ZVzVuWlNCMGFHVWdjM1J5YVc1blhHNWNkR2xtSUNnZ1pHRjBZU0E5UFQwZ0syUmhkR0VnS3lCY0lsd2lJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQXJaR0YwWVR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2dnY21KeVlXTmxMblJsYzNRb0lHUmhkR0VnS1NBcElIdGNibHgwWEhSeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNnZ1pHRjBZU0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUdSaGRHRTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmhkR0ZCZEhSeUtDQmxiR1Z0TENCclpYa3NJR1JoZEdFZ0tTQjdYRzVjZEhaaGNpQnVZVzFsTzF4dVhHNWNkQzh2SUVsbUlHNXZkR2hwYm1jZ2QyRnpJR1p2ZFc1a0lHbHVkR1Z5Ym1Gc2JIa3NJSFJ5ZVNCMGJ5Qm1aWFJqYUNCaGJubGNibHgwTHk4Z1pHRjBZU0JtY205dElIUm9aU0JJVkUxTU5TQmtZWFJoTFNvZ1lYUjBjbWxpZFhSbFhHNWNkR2xtSUNnZ1pHRjBZU0E5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnS1NCN1hHNWNkRngwYm1GdFpTQTlJRndpWkdGMFlTMWNJaUFySUd0bGVTNXlaWEJzWVdObEtDQnliWFZzZEdsRVlYTm9MQ0JjSWkwa0psd2lJQ2t1ZEc5TWIzZGxja05oYzJVb0tUdGNibHgwWEhSa1lYUmhJRDBnWld4bGJTNW5aWFJCZEhSeWFXSjFkR1VvSUc1aGJXVWdLVHRjYmx4dVhIUmNkR2xtSUNnZ2RIbHdaVzltSUdSaGRHRWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0tTQjdYRzVjZEZ4MFhIUjBjbmtnZTF4dVhIUmNkRngwWEhSa1lYUmhJRDBnWjJWMFJHRjBZU2dnWkdGMFlTQXBPMXh1WEhSY2RGeDBmU0JqWVhSamFDQW9JR1VnS1NCN2ZWeHVYRzVjZEZ4MFhIUXZMeUJOWVd0bElITjFjbVVnZDJVZ2MyVjBJSFJvWlNCa1lYUmhJSE52SUdsMElHbHpiaWQwSUdOb1lXNW5aV1FnYkdGMFpYSmNibHgwWEhSY2RHUmhkR0ZWYzJWeUxuTmxkQ2dnWld4bGJTd2dhMlY1TENCa1lYUmhJQ2s3WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RHUmhkR0VnUFNCMWJtUmxabWx1WldRN1hHNWNkRngwZlZ4dVhIUjlYRzVjZEhKbGRIVnliaUJrWVhSaE8xeHVmVnh1WEc1cVVYVmxjbmt1WlhoMFpXNWtLQ0I3WEc1Y2RHaGhjMFJoZEdFNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrWVhSaFZYTmxjaTVvWVhORVlYUmhLQ0JsYkdWdElDa2dmSHdnWkdGMFlWQnlhWFl1YUdGelJHRjBZU2dnWld4bGJTQXBPMXh1WEhSOUxGeHVYRzVjZEdSaGRHRTZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnVZVzFsTENCa1lYUmhJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmtZWFJoVlhObGNpNWhZMk5sYzNNb0lHVnNaVzBzSUc1aGJXVXNJR1JoZEdFZ0tUdGNibHgwZlN4Y2JseHVYSFJ5WlcxdmRtVkVZWFJoT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTQXBJSHRjYmx4MFhIUmtZWFJoVlhObGNpNXlaVzF2ZG1Vb0lHVnNaVzBzSUc1aGJXVWdLVHRjYmx4MGZTeGNibHh1WEhRdkx5QlVUMFJQT2lCT2IzY2dkR2hoZENCaGJHd2dZMkZzYkhNZ2RHOGdYMlJoZEdFZ1lXNWtJRjl5WlcxdmRtVkVZWFJoSUdoaGRtVWdZbVZsYmlCeVpYQnNZV05sWkZ4dVhIUXZMeUIzYVhSb0lHUnBjbVZqZENCallXeHNjeUIwYnlCa1lYUmhVSEpwZGlCdFpYUm9iMlJ6TENCMGFHVnpaU0JqWVc0Z1ltVWdaR1Z3Y21WallYUmxaQzVjYmx4MFgyUmhkR0U2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0J1WVcxbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrWVhSaFVISnBkaTVoWTJObGMzTW9JR1ZzWlcwc0lHNWhiV1VzSUdSaGRHRWdLVHRjYmx4MGZTeGNibHh1WEhSZmNtVnRiM1psUkdGMFlUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHNWhiV1VnS1NCN1hHNWNkRngwWkdGMFlWQnlhWFl1Y21WdGIzWmxLQ0JsYkdWdExDQnVZVzFsSUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVp1TG1WNGRHVnVaQ2dnZTF4dVhIUmtZWFJoT2lCbWRXNWpkR2x2YmlnZ2EyVjVMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUjJZWElnYVN3Z2JtRnRaU3dnWkdGMFlTeGNibHgwWEhSY2RHVnNaVzBnUFNCMGFHbHpXeUF3SUYwc1hHNWNkRngwWEhSaGRIUnljeUE5SUdWc1pXMGdKaVlnWld4bGJTNWhkSFJ5YVdKMWRHVnpPMXh1WEc1Y2RGeDBMeThnUjJWMGN5QmhiR3dnZG1Gc2RXVnpYRzVjZEZ4MGFXWWdLQ0JyWlhrZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dkR2hwY3k1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSY2RHUmhkR0VnUFNCa1lYUmhWWE5sY2k1blpYUW9JR1ZzWlcwZ0tUdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlERWdKaVlnSVdSaGRHRlFjbWwyTG1kbGRDZ2daV3hsYlN3Z1hDSm9ZWE5FWVhSaFFYUjBjbk5jSWlBcElDa2dlMXh1WEhSY2RGeDBYSFJjZEdrZ1BTQmhkSFJ5Y3k1c1pXNW5kR2c3WEc1Y2RGeDBYSFJjZEZ4MGQyaHBiR1VnS0NCcExTMGdLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklERXhJRzl1YkhsY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZSb1pTQmhkSFJ5Y3lCbGJHVnRaVzUwY3lCallXNGdZbVVnYm5Wc2JDQW9JekUwT0RrMEtWeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQmhkSFJ5YzFzZ2FTQmRJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ1WVcxbElEMGdZWFIwY25OYklHa2dYUzV1WVcxbE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JRzVoYldVdWFXNWtaWGhQWmlnZ1hDSmtZWFJoTFZ3aUlDa2dQVDA5SURBZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBibUZ0WlNBOUlHcFJkV1Z5ZVM1allXMWxiRU5oYzJVb0lHNWhiV1V1YzJ4cFkyVW9JRFVnS1NBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHUmhkR0ZCZEhSeUtDQmxiR1Z0TENCdVlXMWxMQ0JrWVhSaFd5QnVZVzFsSUYwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJrWVhSaFVISnBkaTV6WlhRb0lHVnNaVzBzSUZ3aWFHRnpSR0YwWVVGMGRISnpYQ0lzSUhSeWRXVWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTRnWkdGMFlUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlRaWFJ6SUcxMWJIUnBjR3hsSUhaaGJIVmxjMXh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR3RsZVNBOVBUMGdYQ0p2WW1wbFkzUmNJaUFwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmtZWFJoVlhObGNpNXpaWFFvSUhSb2FYTXNJR3RsZVNBcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCaFkyTmxjM01vSUhSb2FYTXNJR1oxYm1OMGFXOXVLQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUmNkSFpoY2lCa1lYUmhPMXh1WEc1Y2RGeDBYSFF2THlCVWFHVWdZMkZzYkdsdVp5QnFVWFZsY25rZ2IySnFaV04wSUNobGJHVnRaVzUwSUcxaGRHTm9aWE1wSUdseklHNXZkQ0JsYlhCMGVWeHVYSFJjZEZ4MEx5OGdLR0Z1WkNCMGFHVnlaV1p2Y21VZ2FHRnpJR0Z1SUdWc1pXMWxiblFnWVhCd1pXRnljeUJoZENCMGFHbHpXeUF3SUYwcElHRnVaQ0IwYUdWY2JseDBYSFJjZEM4dklHQjJZV3gxWldBZ2NHRnlZVzFsZEdWeUlIZGhjeUJ1YjNRZ2RXNWtaV1pwYm1Wa0xpQkJiaUJsYlhCMGVTQnFVWFZsY25rZ2IySnFaV04wWEc1Y2RGeDBYSFF2THlCM2FXeHNJSEpsYzNWc2RDQnBiaUJnZFc1a1pXWnBibVZrWUNCbWIzSWdaV3hsYlNBOUlIUm9hWE5iSURBZ1hTQjNhR2xqYUNCM2FXeHNYRzVjZEZ4MFhIUXZMeUIwYUhKdmR5QmhiaUJsZUdObGNIUnBiMjRnYVdZZ1lXNGdZWFIwWlcxd2RDQjBieUJ5WldGa0lHRWdaR0YwWVNCallXTm9aU0JwY3lCdFlXUmxMbHh1WEhSY2RGeDBhV1lnS0NCbGJHVnRJQ1ltSUhaaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1FYUjBaVzF3ZENCMGJ5Qm5aWFFnWkdGMFlTQm1jbTl0SUhSb1pTQmpZV05vWlZ4dVhIUmNkRngwWEhRdkx5QlVhR1VnYTJWNUlIZHBiR3dnWVd4M1lYbHpJR0psSUdOaGJXVnNRMkZ6WldRZ2FXNGdSR0YwWVZ4dVhIUmNkRngwWEhSa1lYUmhJRDBnWkdGMFlWVnpaWEl1WjJWMEtDQmxiR1Z0TENCclpYa2dLVHRjYmx4MFhIUmNkRngwYVdZZ0tDQmtZWFJoSUNFOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdSaGRHRTdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QkJkSFJsYlhCMElIUnZJRndpWkdselkyOTJaWEpjSWlCMGFHVWdaR0YwWVNCcGJseHVYSFJjZEZ4MFhIUXZMeUJJVkUxTU5TQmpkWE4wYjIwZ1pHRjBZUzBxSUdGMGRISnpYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoUVhSMGNpZ2daV3hsYlN3Z2EyVjVJQ2s3WEc1Y2RGeDBYSFJjZEdsbUlDZ2daR0YwWVNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCa1lYUmhPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdWMlVnZEhKcFpXUWdjbVZoYkd4NUlHaGhjbVFzSUdKMWRDQjBhR1VnWkdGMFlTQmtiMlZ6YmlkMElHVjRhWE4wTGx4dVhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGTmxkQ0IwYUdVZ1pHRjBZUzR1TGx4dVhIUmNkRngwZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHh1WEhSY2RGeDBYSFF2THlCWFpTQmhiSGRoZVhNZ2MzUnZjbVVnZEdobElHTmhiV1ZzUTJGelpXUWdhMlY1WEc1Y2RGeDBYSFJjZEdSaGRHRlZjMlZ5TG5ObGRDZ2dkR2hwY3l3Z2EyVjVMQ0IyWVd4MVpTQXBPMXh1WEhSY2RGeDBmU0FwTzF4dVhIUmNkSDBzSUc1MWJHd3NJSFpoYkhWbExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU3dnYm5Wc2JDd2dkSEoxWlNBcE8xeHVYSFI5TEZ4dVhHNWNkSEpsYlc5MlpVUmhkR0U2SUdaMWJtTjBhVzl1S0NCclpYa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJrWVhSaFZYTmxjaTV5WlcxdmRtVW9JSFJvYVhNc0lHdGxlU0FwTzF4dVhIUmNkSDBnS1R0Y2JseDBmVnh1ZlNBcE8xeHVYRzVjYm1wUmRXVnllUzVsZUhSbGJtUW9JSHRjYmx4MGNYVmxkV1U2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0IwZVhCbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhaaGNpQnhkV1YxWlR0Y2JseHVYSFJjZEdsbUlDZ2daV3hsYlNBcElIdGNibHgwWEhSY2RIUjVjR1VnUFNBb0lIUjVjR1VnZkh3Z1hDSm1lRndpSUNrZ0t5QmNJbkYxWlhWbFhDSTdYRzVjZEZ4MFhIUnhkV1YxWlNBOUlHUmhkR0ZRY21sMkxtZGxkQ2dnWld4bGJTd2dkSGx3WlNBcE8xeHVYRzVjZEZ4MFhIUXZMeUJUY0dWbFpDQjFjQ0JrWlhGMVpYVmxJR0o1SUdkbGRIUnBibWNnYjNWMElIRjFhV05yYkhrZ2FXWWdkR2hwY3lCcGN5QnFkWE4wSUdFZ2JHOXZhM1Z3WEc1Y2RGeDBYSFJwWmlBb0lHUmhkR0VnS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2dnSVhGMVpYVmxJSHg4SUdwUmRXVnllUzVwYzBGeWNtRjVLQ0JrWVhSaElDa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNYVmxkV1VnUFNCa1lYUmhVSEpwZGk1aFkyTmxjM01vSUdWc1pXMHNJSFI1Y0dVc0lHcFJkV1Z5ZVM1dFlXdGxRWEp5WVhrb0lHUmhkR0VnS1NBcE8xeHVYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkSEYxWlhWbExuQjFjMmdvSUdSaGRHRWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJSEYxWlhWbElIeDhJRnRkTzF4dVhIUmNkSDFjYmx4MGZTeGNibHh1WEhSa1pYRjFaWFZsT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnZEhsd1pTQXBJSHRjYmx4MFhIUjBlWEJsSUQwZ2RIbHdaU0I4ZkNCY0ltWjRYQ0k3WEc1Y2JseDBYSFIyWVhJZ2NYVmxkV1VnUFNCcVVYVmxjbmt1Y1hWbGRXVW9JR1ZzWlcwc0lIUjVjR1VnS1N4Y2JseDBYSFJjZEhOMFlYSjBUR1Z1WjNSb0lEMGdjWFZsZFdVdWJHVnVaM1JvTEZ4dVhIUmNkRngwWm00Z1BTQnhkV1YxWlM1emFHbG1kQ2dwTEZ4dVhIUmNkRngwYUc5dmEzTWdQU0JxVVhWbGNua3VYM0YxWlhWbFNHOXZhM01vSUdWc1pXMHNJSFI1Y0dVZ0tTeGNibHgwWEhSY2RHNWxlSFFnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtUmxjWFZsZFdVb0lHVnNaVzBzSUhSNWNHVWdLVHRjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFF2THlCSlppQjBhR1VnWm5nZ2NYVmxkV1VnYVhNZ1pHVnhkV1YxWldRc0lHRnNkMkY1Y3lCeVpXMXZkbVVnZEdobElIQnliMmR5WlhOeklITmxiblJwYm1Wc1hHNWNkRngwYVdZZ0tDQm1iaUE5UFQwZ1hDSnBibkJ5YjJkeVpYTnpYQ0lnS1NCN1hHNWNkRngwWEhSbWJpQTlJSEYxWlhWbExuTm9hV1owS0NrN1hHNWNkRngwWEhSemRHRnlkRXhsYm1kMGFDMHRPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnWm00Z0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVGa1pDQmhJSEJ5YjJkeVpYTnpJSE5sYm5ScGJtVnNJSFJ2SUhCeVpYWmxiblFnZEdobElHWjRJSEYxWlhWbElHWnliMjBnWW1WcGJtZGNibHgwWEhSY2RDOHZJR0YxZEc5dFlYUnBZMkZzYkhrZ1pHVnhkV1YxWldSY2JseDBYSFJjZEdsbUlDZ2dkSGx3WlNBOVBUMGdYQ0ptZUZ3aUlDa2dlMXh1WEhSY2RGeDBYSFJ4ZFdWMVpTNTFibk5vYVdaMEtDQmNJbWx1Y0hKdlozSmxjM05jSWlBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJEYkdWaGNpQjFjQ0IwYUdVZ2JHRnpkQ0J4ZFdWMVpTQnpkRzl3SUdaMWJtTjBhVzl1WEc1Y2RGeDBYSFJrWld4bGRHVWdhRzl2YTNNdWMzUnZjRHRjYmx4MFhIUmNkR1p1TG1OaGJHd29JR1ZzWlcwc0lHNWxlSFFzSUdodmIydHpJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NBaGMzUmhjblJNWlc1bmRHZ2dKaVlnYUc5dmEzTWdLU0I3WEc1Y2RGeDBYSFJvYjI5cmN5NWxiWEIwZVM1bWFYSmxLQ2s3WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEM4dklFNXZkQ0J3ZFdKc2FXTWdMU0JuWlc1bGNtRjBaU0JoSUhGMVpYVmxTRzl2YTNNZ2IySnFaV04wTENCdmNpQnlaWFIxY200Z2RHaGxJR04xY25KbGJuUWdiMjVsWEc1Y2RGOXhkV1YxWlVodmIydHpPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dkSGx3WlNBcElIdGNibHgwWEhSMllYSWdhMlY1SUQwZ2RIbHdaU0FySUZ3aWNYVmxkV1ZJYjI5cmMxd2lPMXh1WEhSY2RISmxkSFZ5YmlCa1lYUmhVSEpwZGk1blpYUW9JR1ZzWlcwc0lHdGxlU0FwSUh4OElHUmhkR0ZRY21sMkxtRmpZMlZ6Y3lnZ1pXeGxiU3dnYTJWNUxDQjdYRzVjZEZ4MFhIUmxiWEIwZVRvZ2FsRjFaWEo1TGtOaGJHeGlZV05yY3lnZ1hDSnZibU5sSUcxbGJXOXllVndpSUNrdVlXUmtLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFpHRjBZVkJ5YVhZdWNtVnRiM1psS0NCbGJHVnRMQ0JiSUhSNWNHVWdLeUJjSW5GMVpYVmxYQ0lzSUd0bGVTQmRJQ2s3WEc1Y2RGeDBYSFI5SUNsY2JseDBYSFI5SUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVp1TG1WNGRHVnVaQ2dnZTF4dVhIUnhkV1YxWlRvZ1puVnVZM1JwYjI0b0lIUjVjR1VzSUdSaGRHRWdLU0I3WEc1Y2RGeDBkbUZ5SUhObGRIUmxjaUE5SURJN1hHNWNibHgwWEhScFppQW9JSFI1Y0dWdlppQjBlWEJsSUNFOVBTQmNJbk4wY21sdVoxd2lJQ2tnZTF4dVhIUmNkRngwWkdGMFlTQTlJSFI1Y0dVN1hHNWNkRngwWEhSMGVYQmxJRDBnWENKbWVGd2lPMXh1WEhSY2RGeDBjMlYwZEdWeUxTMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnYzJWMGRHVnlJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3BSZFdWeWVTNXhkV1YxWlNnZ2RHaHBjMXNnTUNCZExDQjBlWEJsSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR1JoZEdFZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvWEc1Y2RGeDBYSFIwYUdseklEcGNibHgwWEhSY2RIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnhkV1YxWlNBOUlHcFJkV1Z5ZVM1eGRXVjFaU2dnZEdocGN5d2dkSGx3WlN3Z1pHRjBZU0FwTzF4dVhHNWNkRngwWEhSY2RDOHZJRVZ1YzNWeVpTQmhJR2h2YjJ0eklHWnZjaUIwYUdseklIRjFaWFZsWEc1Y2RGeDBYSFJjZEdwUmRXVnllUzVmY1hWbGRXVkliMjlyY3lnZ2RHaHBjeXdnZEhsd1pTQXBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dkSGx3WlNBOVBUMGdYQ0ptZUZ3aUlDWW1JSEYxWlhWbFd5QXdJRjBnSVQwOUlGd2lhVzV3Y205bmNtVnpjMXdpSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNWtaWEYxWlhWbEtDQjBhR2x6TENCMGVYQmxJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwZ0tUdGNibHgwZlN4Y2JseDBaR1Z4ZFdWMVpUb2dablZ1WTNScGIyNG9JSFI1Y0dVZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaV0ZqYUNnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnFVWFZsY25rdVpHVnhkV1YxWlNnZ2RHaHBjeXdnZEhsd1pTQXBPMXh1WEhSY2RIMGdLVHRjYmx4MGZTeGNibHgwWTJ4bFlYSlJkV1YxWlRvZ1puVnVZM1JwYjI0b0lIUjVjR1VnS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdWNYVmxkV1VvSUhSNWNHVWdmSHdnWENKbWVGd2lMQ0JiWFNBcE8xeHVYSFI5TEZ4dVhHNWNkQzh2SUVkbGRDQmhJSEJ5YjIxcGMyVWdjbVZ6YjJ4MlpXUWdkMmhsYmlCeGRXVjFaWE1nYjJZZ1lTQmpaWEowWVdsdUlIUjVjR1ZjYmx4MEx5OGdZWEpsSUdWdGNIUnBaV1FnS0daNElHbHpJSFJvWlNCMGVYQmxJR0o1SUdSbFptRjFiSFFwWEc1Y2RIQnliMjFwYzJVNklHWjFibU4wYVc5dUtDQjBlWEJsTENCdlltb2dLU0I3WEc1Y2RGeDBkbUZ5SUhSdGNDeGNibHgwWEhSY2RHTnZkVzUwSUQwZ01TeGNibHgwWEhSY2RHUmxabVZ5SUQwZ2FsRjFaWEo1TGtSbFptVnljbVZrS0Nrc1hHNWNkRngwWEhSbGJHVnRaVzUwY3lBOUlIUm9hWE1zWEc1Y2RGeDBYSFJwSUQwZ2RHaHBjeTVzWlc1bmRHZ3NYRzVjZEZ4MFhIUnlaWE52YkhabElEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJU2dnTFMxamIzVnVkQ0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR1JsWm1WeUxuSmxjMjlzZG1WWGFYUm9LQ0JsYkdWdFpXNTBjeXdnV3lCbGJHVnRaVzUwY3lCZElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCMGVYQmxJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RGeDBiMkpxSUQwZ2RIbHdaVHRjYmx4MFhIUmNkSFI1Y0dVZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYSFJjZEhSNWNHVWdQU0IwZVhCbElIeDhJRndpWm5oY0lqdGNibHh1WEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwZEcxd0lEMGdaR0YwWVZCeWFYWXVaMlYwS0NCbGJHVnRaVzUwYzFzZ2FTQmRMQ0IwZVhCbElDc2dYQ0p4ZFdWMVpVaHZiMnR6WENJZ0tUdGNibHgwWEhSY2RHbG1JQ2dnZEcxd0lDWW1JSFJ0Y0M1bGJYQjBlU0FwSUh0Y2JseDBYSFJjZEZ4MFkyOTFiblFyS3p0Y2JseDBYSFJjZEZ4MGRHMXdMbVZ0Y0hSNUxtRmtaQ2dnY21WemIyeDJaU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MFhIUnlaWE52YkhabEtDazdYRzVjZEZ4MGNtVjBkWEp1SUdSbFptVnlMbkJ5YjIxcGMyVW9JRzlpYWlBcE8xeHVYSFI5WEc1OUlDazdYRzUyWVhJZ2NHNTFiU0E5SUNnZ0wxc3JMVjAvS0Q4NlhGeGtLbHhjTG53cFhGeGtLeWcvT2x0bFJWMWJLeTFkUDF4Y1pDdDhLUzhnS1M1emIzVnlZMlU3WEc1Y2JuWmhjaUJ5WTNOelRuVnRJRDBnYm1WM0lGSmxaMFY0Y0NnZ1hDSmVLRDg2S0ZzckxWMHBQWHdwS0Z3aUlDc2djRzUxYlNBcklGd2lLU2hiWVMxNkpWMHFLU1JjSWl3Z1hDSnBYQ0lnS1R0Y2JseHVYRzUyWVhJZ1kzTnpSWGh3WVc1a0lEMGdXeUJjSWxSdmNGd2lMQ0JjSWxKcFoyaDBYQ0lzSUZ3aVFtOTBkRzl0WENJc0lGd2lUR1ZtZEZ3aUlGMDdYRzVjYm5aaGNpQnBjMGhwWkdSbGJsZHBkR2hwYmxSeVpXVWdQU0JtZFc1amRHbHZiaWdnWld4bGJTd2daV3dnS1NCN1hHNWNibHgwWEhRdkx5QnBjMGhwWkdSbGJsZHBkR2hwYmxSeVpXVWdiV2xuYUhRZ1ltVWdZMkZzYkdWa0lHWnliMjBnYWxGMVpYSjVJMlpwYkhSbGNpQm1kVzVqZEdsdmJqdGNibHgwWEhRdkx5QnBiaUIwYUdGMElHTmhjMlVzSUdWc1pXMWxiblFnZDJsc2JDQmlaU0J6WldOdmJtUWdZWEpuZFcxbGJuUmNibHgwWEhSbGJHVnRJRDBnWld3Z2ZId2daV3hsYlR0Y2JseHVYSFJjZEM4dklFbHViR2x1WlNCemRIbHNaU0IwY25WdGNITWdZV3hzWEc1Y2RGeDBjbVYwZFhKdUlHVnNaVzB1YzNSNWJHVXVaR2x6Y0d4aGVTQTlQVDBnWENKdWIyNWxYQ0lnZkh4Y2JseDBYSFJjZEdWc1pXMHVjM1I1YkdVdVpHbHpjR3hoZVNBOVBUMGdYQ0pjSWlBbUpseHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVzSUdOb1pXTnJJR052YlhCMWRHVmtJSE4wZVd4bFhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkdhWEpsWm05NElEdzlORE1nTFNBME5WeHVYSFJjZEZ4MEx5OGdSR2x6WTI5dWJtVmpkR1ZrSUdWc1pXMWxiblJ6SUdOaGJpQm9ZWFpsSUdOdmJYQjFkR1ZrSUdScGMzQnNZWGs2SUc1dmJtVXNJSE52SUdacGNuTjBJR052Ym1acGNtMGdkR2hoZENCbGJHVnRJR2x6WEc1Y2RGeDBYSFF2THlCcGJpQjBhR1VnWkc5amRXMWxiblF1WEc1Y2RGeDBYSFJxVVhWbGNua3VZMjl1ZEdGcGJuTW9JR1ZzWlcwdWIzZHVaWEpFYjJOMWJXVnVkQ3dnWld4bGJTQXBJQ1ltWEc1Y2JseDBYSFJjZEdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUZ3aVpHbHpjR3hoZVZ3aUlDa2dQVDA5SUZ3aWJtOXVaVndpTzF4dVhIUjlPMXh1WEc1MllYSWdjM2RoY0NBOUlHWjFibU4wYVc5dUtDQmxiR1Z0TENCdmNIUnBiMjV6TENCallXeHNZbUZqYXl3Z1lYSm5jeUFwSUh0Y2JseDBkbUZ5SUhKbGRDd2dibUZ0WlN4Y2JseDBYSFJ2YkdRZ1BTQjdmVHRjYmx4dVhIUXZMeUJTWlcxbGJXSmxjaUIwYUdVZ2IyeGtJSFpoYkhWbGN5d2dZVzVrSUdsdWMyVnlkQ0IwYUdVZ2JtVjNJRzl1WlhOY2JseDBabTl5SUNnZ2JtRnRaU0JwYmlCdmNIUnBiMjV6SUNrZ2UxeHVYSFJjZEc5c1pGc2dibUZ0WlNCZElEMGdaV3hsYlM1emRIbHNaVnNnYm1GdFpTQmRPMXh1WEhSY2RHVnNaVzB1YzNSNWJHVmJJRzVoYldVZ1hTQTlJRzl3ZEdsdmJuTmJJRzVoYldVZ1hUdGNibHgwZlZ4dVhHNWNkSEpsZENBOUlHTmhiR3hpWVdOckxtRndjR3g1S0NCbGJHVnRMQ0JoY21keklIeDhJRnRkSUNrN1hHNWNibHgwTHk4Z1VtVjJaWEowSUhSb1pTQnZiR1FnZG1Gc2RXVnpYRzVjZEdadmNpQW9JRzVoYldVZ2FXNGdiM0IwYVc5dWN5QXBJSHRjYmx4MFhIUmxiR1Z0TG5OMGVXeGxXeUJ1WVcxbElGMGdQU0J2YkdSYklHNWhiV1VnWFR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCeVpYUTdYRzU5TzF4dVhHNWNibHh1WEc1bWRXNWpkR2x2YmlCaFpHcDFjM1JEVTFNb0lHVnNaVzBzSUhCeWIzQXNJSFpoYkhWbFVHRnlkSE1zSUhSM1pXVnVJQ2tnZTF4dVhIUjJZWElnWVdScWRYTjBaV1FzWEc1Y2RGeDBjMk5oYkdVZ1BTQXhMRnh1WEhSY2RHMWhlRWwwWlhKaGRHbHZibk1nUFNBeU1DeGNibHgwWEhSamRYSnlaVzUwVm1Gc2RXVWdQU0IwZDJWbGJpQS9YRzVjZEZ4MFhIUm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJSFIzWldWdUxtTjFjaWdwTzF4dVhIUmNkRngwZlNBNlhHNWNkRngwWEhSbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1amMzTW9JR1ZzWlcwc0lIQnliM0FzSUZ3aVhDSWdLVHRjYmx4MFhIUmNkSDBzWEc1Y2RGeDBhVzVwZEdsaGJDQTlJR04xY25KbGJuUldZV3gxWlNncExGeHVYSFJjZEhWdWFYUWdQU0IyWVd4MVpWQmhjblJ6SUNZbUlIWmhiSFZsVUdGeWRITmJJRE1nWFNCOGZDQW9JR3BSZFdWeWVTNWpjM05PZFcxaVpYSmJJSEJ5YjNBZ1hTQS9JRndpWENJZ09pQmNJbkI0WENJZ0tTeGNibHh1WEhSY2RDOHZJRk4wWVhKMGFXNW5JSFpoYkhWbElHTnZiWEIxZEdGMGFXOXVJR2x6SUhKbGNYVnBjbVZrSUdadmNpQndiM1JsYm5ScFlXd2dkVzVwZENCdGFYTnRZWFJqYUdWelhHNWNkRngwYVc1cGRHbGhiRWx1Vlc1cGRDQTlJQ2dnYWxGMVpYSjVMbU56YzA1MWJXSmxjbHNnY0hKdmNDQmRJSHg4SUhWdWFYUWdJVDA5SUZ3aWNIaGNJaUFtSmlBcmFXNXBkR2xoYkNBcElDWW1YRzVjZEZ4MFhIUnlZM056VG5WdExtVjRaV01vSUdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUhCeWIzQWdLU0FwTzF4dVhHNWNkR2xtSUNnZ2FXNXBkR2xoYkVsdVZXNXBkQ0FtSmlCcGJtbDBhV0ZzU1c1VmJtbDBXeUF6SUYwZ0lUMDlJSFZ1YVhRZ0tTQjdYRzVjYmx4MFhIUXZMeUJVY25WemRDQjFibWwwY3lCeVpYQnZjblJsWkNCaWVTQnFVWFZsY25rdVkzTnpYRzVjZEZ4MGRXNXBkQ0E5SUhWdWFYUWdmSHdnYVc1cGRHbGhiRWx1Vlc1cGRGc2dNeUJkTzF4dVhHNWNkRngwTHk4Z1RXRnJaU0J6ZFhKbElIZGxJSFZ3WkdGMFpTQjBhR1VnZEhkbFpXNGdjSEp2Y0dWeWRHbGxjeUJzWVhSbGNpQnZibHh1WEhSY2RIWmhiSFZsVUdGeWRITWdQU0IyWVd4MVpWQmhjblJ6SUh4OElGdGRPMXh1WEc1Y2RGeDBMeThnU1hSbGNtRjBhWFpsYkhrZ1lYQndjbTk0YVcxaGRHVWdabkp2YlNCaElHNXZibnBsY204Z2MzUmhjblJwYm1jZ2NHOXBiblJjYmx4MFhIUnBibWwwYVdGc1NXNVZibWwwSUQwZ0sybHVhWFJwWVd3Z2ZId2dNVHRjYmx4dVhIUmNkR1J2SUh0Y2JseHVYSFJjZEZ4MEx5OGdTV1lnY0hKbGRtbHZkWE1nYVhSbGNtRjBhVzl1SUhwbGNtOWxaQ0J2ZFhRc0lHUnZkV0pzWlNCMWJuUnBiQ0IzWlNCblpYUWdLbk52YldWMGFHbHVaeW91WEc1Y2RGeDBYSFF2THlCVmMyVWdjM1J5YVc1bklHWnZjaUJrYjNWaWJHbHVaeUJ6YnlCM1pTQmtiMjRuZENCaFkyTnBaR1Z1ZEdGc2JIa2djMlZsSUhOallXeGxJR0Z6SUhWdVkyaGhibWRsWkNCaVpXeHZkMXh1WEhSY2RGeDBjMk5oYkdVZ1BTQnpZMkZzWlNCOGZDQmNJaTQxWENJN1hHNWNibHgwWEhSY2RDOHZJRUZrYW5WemRDQmhibVFnWVhCd2JIbGNibHgwWEhSY2RHbHVhWFJwWVd4SmJsVnVhWFFnUFNCcGJtbDBhV0ZzU1c1VmJtbDBJQzhnYzJOaGJHVTdYRzVjZEZ4MFhIUnFVWFZsY25rdWMzUjViR1VvSUdWc1pXMHNJSEJ5YjNBc0lHbHVhWFJwWVd4SmJsVnVhWFFnS3lCMWJtbDBJQ2s3WEc1Y2JseDBYSFF2THlCVmNHUmhkR1VnYzJOaGJHVXNJSFJ2YkdWeVlYUnBibWNnZW1WeWJ5QnZjaUJPWVU0Z1puSnZiU0IwZDJWbGJpNWpkWElvS1Z4dVhIUmNkQzh2SUVKeVpXRnJJSFJvWlNCc2IyOXdJR2xtSUhOallXeGxJR2x6SUhWdVkyaGhibWRsWkNCdmNpQndaWEptWldOMExDQnZjaUJwWmlCM1pTZDJaU0JxZFhOMElHaGhaQ0JsYm05MVoyZ3VYRzVjZEZ4MGZTQjNhR2xzWlNBb1hHNWNkRngwWEhSelkyRnNaU0FoUFQwZ0tDQnpZMkZzWlNBOUlHTjFjbkpsYm5SV1lXeDFaU2dwSUM4Z2FXNXBkR2xoYkNBcElDWW1JSE5qWVd4bElDRTlQU0F4SUNZbUlDMHRiV0Y0U1hSbGNtRjBhVzl1YzF4dVhIUmNkQ2s3WEc1Y2RIMWNibHh1WEhScFppQW9JSFpoYkhWbFVHRnlkSE1nS1NCN1hHNWNkRngwYVc1cGRHbGhiRWx1Vlc1cGRDQTlJQ3RwYm1sMGFXRnNTVzVWYm1sMElIeDhJQ3RwYm1sMGFXRnNJSHg4SURBN1hHNWNibHgwWEhRdkx5QkJjSEJzZVNCeVpXeGhkR2wyWlNCdlptWnpaWFFnS0NzOUx5MDlLU0JwWmlCemNHVmphV1pwWldSY2JseDBYSFJoWkdwMWMzUmxaQ0E5SUhaaGJIVmxVR0Z5ZEhOYklERWdYU0EvWEc1Y2RGeDBYSFJwYm1sMGFXRnNTVzVWYm1sMElDc2dLQ0IyWVd4MVpWQmhjblJ6V3lBeElGMGdLeUF4SUNrZ0tpQjJZV3gxWlZCaGNuUnpXeUF5SUYwZ09seHVYSFJjZEZ4MEszWmhiSFZsVUdGeWRITmJJRElnWFR0Y2JseDBYSFJwWmlBb0lIUjNaV1Z1SUNrZ2UxeHVYSFJjZEZ4MGRIZGxaVzR1ZFc1cGRDQTlJSFZ1YVhRN1hHNWNkRngwWEhSMGQyVmxiaTV6ZEdGeWRDQTlJR2x1YVhScFlXeEpibFZ1YVhRN1hHNWNkRngwWEhSMGQyVmxiaTVsYm1RZ1BTQmhaR3AxYzNSbFpEdGNibHgwWEhSOVhHNWNkSDFjYmx4MGNtVjBkWEp1SUdGa2FuVnpkR1ZrTzF4dWZWeHVYRzVjYm5aaGNpQmtaV1poZFd4MFJHbHpjR3hoZVUxaGNDQTlJSHQ5TzF4dVhHNW1kVzVqZEdsdmJpQm5aWFJFWldaaGRXeDBSR2x6Y0d4aGVTZ2daV3hsYlNBcElIdGNibHgwZG1GeUlIUmxiWEFzWEc1Y2RGeDBaRzlqSUQwZ1pXeGxiUzV2ZDI1bGNrUnZZM1Z0Wlc1MExGeHVYSFJjZEc1dlpHVk9ZVzFsSUQwZ1pXeGxiUzV1YjJSbFRtRnRaU3hjYmx4MFhIUmthWE53YkdGNUlEMGdaR1ZtWVhWc2RFUnBjM0JzWVhsTllYQmJJRzV2WkdWT1lXMWxJRjA3WEc1Y2JseDBhV1lnS0NCa2FYTndiR0Y1SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYVhOd2JHRjVPMXh1WEhSOVhHNWNibHgwZEdWdGNDQTlJR1J2WXk1aWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0NCa2IyTXVZM0psWVhSbFJXeGxiV1Z1ZENnZ2JtOWtaVTVoYldVZ0tTQXBPMXh1WEhSa2FYTndiR0Y1SUQwZ2FsRjFaWEo1TG1OemN5Z2dkR1Z0Y0N3Z1hDSmthWE53YkdGNVhDSWdLVHRjYmx4dVhIUjBaVzF3TG5CaGNtVnVkRTV2WkdVdWNtVnRiM1psUTJocGJHUW9JSFJsYlhBZ0tUdGNibHh1WEhScFppQW9JR1JwYzNCc1lYa2dQVDA5SUZ3aWJtOXVaVndpSUNrZ2UxeHVYSFJjZEdScGMzQnNZWGtnUFNCY0ltSnNiMk5yWENJN1hHNWNkSDFjYmx4MFpHVm1ZWFZzZEVScGMzQnNZWGxOWVhCYklHNXZaR1ZPWVcxbElGMGdQU0JrYVhOd2JHRjVPMXh1WEc1Y2RISmxkSFZ5YmlCa2FYTndiR0Y1TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6YUc5M1NHbGtaU2dnWld4bGJXVnVkSE1zSUhOb2IzY2dLU0I3WEc1Y2RIWmhjaUJrYVhOd2JHRjVMQ0JsYkdWdExGeHVYSFJjZEhaaGJIVmxjeUE5SUZ0ZExGeHVYSFJjZEdsdVpHVjRJRDBnTUN4Y2JseDBYSFJzWlc1bmRHZ2dQU0JsYkdWdFpXNTBjeTVzWlc1bmRHZzdYRzVjYmx4MEx5OGdSR1YwWlhKdGFXNWxJRzVsZHlCa2FYTndiR0Y1SUhaaGJIVmxJR1p2Y2lCbGJHVnRaVzUwY3lCMGFHRjBJRzVsWldRZ2RHOGdZMmhoYm1kbFhHNWNkR1p2Y2lBb0lEc2dhVzVrWlhnZ1BDQnNaVzVuZEdnN0lHbHVaR1Y0S3lzZ0tTQjdYRzVjZEZ4MFpXeGxiU0E5SUdWc1pXMWxiblJ6V3lCcGJtUmxlQ0JkTzF4dVhIUmNkR2xtSUNnZ0lXVnNaVzB1YzNSNWJHVWdLU0I3WEc1Y2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUmthWE53YkdGNUlEMGdaV3hsYlM1emRIbHNaUzVrYVhOd2JHRjVPMXh1WEhSY2RHbG1JQ2dnYzJodmR5QXBJSHRjYmx4dVhIUmNkRngwTHk4Z1UybHVZMlVnZDJVZ1ptOXlZMlVnZG1semFXSnBiR2wwZVNCMWNHOXVJR05oYzJOaFpHVXRhR2xrWkdWdUlHVnNaVzFsYm5SekxDQmhiaUJwYlcxbFpHbGhkR1VnS0dGdVpDQnpiRzkzS1Z4dVhIUmNkRngwTHk4Z1kyaGxZMnNnYVhNZ2NtVnhkV2x5WldRZ2FXNGdkR2hwY3lCbWFYSnpkQ0JzYjI5d0lIVnViR1Z6Y3lCM1pTQm9ZWFpsSUdFZ2JtOXVaVzF3ZEhrZ1pHbHpjR3hoZVNCMllXeDFaU0FvWldsMGFHVnlYRzVjZEZ4MFhIUXZMeUJwYm14cGJtVWdiM0lnWVdKdmRYUXRkRzh0WW1VdGNtVnpkRzl5WldRcFhHNWNkRngwWEhScFppQW9JR1JwYzNCc1lYa2dQVDA5SUZ3aWJtOXVaVndpSUNrZ2UxeHVYSFJjZEZ4MFhIUjJZV3gxWlhOYklHbHVaR1Y0SUYwZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUdWc1pXMHNJRndpWkdsemNHeGhlVndpSUNrZ2ZId2diblZzYkR0Y2JseDBYSFJjZEZ4MGFXWWdLQ0FoZG1Gc2RXVnpXeUJwYm1SbGVDQmRJQ2tnZTF4dVhIUmNkRngwWEhSY2RHVnNaVzB1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJRndpWENJN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSY2RHbG1JQ2dnWld4bGJTNXpkSGxzWlM1a2FYTndiR0Y1SUQwOVBTQmNJbHdpSUNZbUlHbHpTR2xrWkdWdVYybDBhR2x1VkhKbFpTZ2daV3hsYlNBcElDa2dlMXh1WEhSY2RGeDBYSFIyWVd4MVpYTmJJR2x1WkdWNElGMGdQU0JuWlhSRVpXWmhkV3gwUkdsemNHeGhlU2dnWld4bGJTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhScFppQW9JR1JwYzNCc1lYa2dJVDA5SUZ3aWJtOXVaVndpSUNrZ2UxeHVYSFJjZEZ4MFhIUjJZV3gxWlhOYklHbHVaR1Y0SUYwZ1BTQmNJbTV2Ym1WY0lqdGNibHh1WEhSY2RGeDBYSFF2THlCU1pXMWxiV0psY2lCM2FHRjBJSGRsSjNKbElHOTJaWEozY21sMGFXNW5YRzVjZEZ4MFhIUmNkR1JoZEdGUWNtbDJMbk5sZENnZ1pXeGxiU3dnWENKa2FYTndiR0Y1WENJc0lHUnBjM0JzWVhrZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUXZMeUJUWlhRZ2RHaGxJR1JwYzNCc1lYa2diMllnZEdobElHVnNaVzFsYm5SeklHbHVJR0VnYzJWamIyNWtJR3h2YjNBZ2RHOGdZWFp2YVdRZ1kyOXVjM1JoYm5RZ2NtVm1iRzkzWEc1Y2RHWnZjaUFvSUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCc1pXNW5kR2c3SUdsdVpHVjRLeXNnS1NCN1hHNWNkRngwYVdZZ0tDQjJZV3gxWlhOYklHbHVaR1Y0SUYwZ0lUMGdiblZzYkNBcElIdGNibHgwWEhSY2RHVnNaVzFsYm5Seld5QnBibVJsZUNCZExuTjBlV3hsTG1ScGMzQnNZWGtnUFNCMllXeDFaWE5iSUdsdVpHVjRJRjA3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwY21WMGRYSnVJR1ZzWlcxbGJuUnpPMXh1ZlZ4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjZEhOb2IzYzZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnphRzkzU0dsa1pTZ2dkR2hwY3l3Z2RISjFaU0FwTzF4dVhIUjlMRnh1WEhSb2FXUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjMmh2ZDBocFpHVW9JSFJvYVhNZ0tUdGNibHgwZlN4Y2JseDBkRzluWjJ4bE9pQm1kVzVqZEdsdmJpZ2djM1JoZEdVZ0tTQjdYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdjM1JoZEdVZ1BUMDlJRndpWW05dmJHVmhibHdpSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhOMFlYUmxJRDhnZEdocGN5NXphRzkzS0NrZ09pQjBhR2x6TG1ocFpHVW9LVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR2xtSUNnZ2FYTklhV1JrWlc1WGFYUm9hVzVVY21WbEtDQjBhR2x6SUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR3BSZFdWeWVTZ2dkR2hwY3lBcExuTm9iM2NvS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEdwUmRXVnllU2dnZEdocGN5QXBMbWhwWkdVb0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOUlDazdYRzVjZEgxY2JuMGdLVHRjYm5aaGNpQnlZMmhsWTJ0aFlteGxWSGx3WlNBOUlDZ2dMMTRvUHpwamFHVmphMkp2ZUh4eVlXUnBieWtrTDJrZ0tUdGNibHh1ZG1GeUlISjBZV2RPWVcxbElEMGdLQ0F2UENoYllTMTZYVnRlWEZ3dlhGd3dQbHhjZURJd1hGeDBYRnh5WEZ4dVhGeG1YU3NwTDJrZ0tUdGNibHh1ZG1GeUlISnpZM0pwY0hSVWVYQmxJRDBnS0NBdlhpUjhYRnd2S0Q4NmFtRjJZWHhsWTIxaEtYTmpjbWx3ZEM5cElDazdYRzVjYmx4dVhHNHZMeUJYWlNCb1lYWmxJSFJ2SUdOc2IzTmxJSFJvWlhObElIUmhaM01nZEc4Z2MzVndjRzl5ZENCWVNGUk5UQ0FvSXpFek1qQXdLVnh1ZG1GeUlIZHlZWEJOWVhBZ1BTQjdYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQwNUlHOXViSGxjYmx4MGIzQjBhVzl1T2lCYklERXNJRndpUEhObGJHVmpkQ0J0ZFd4MGFYQnNaVDBuYlhWc2RHbHdiR1VuUGx3aUxDQmNJand2YzJWc1pXTjBQbHdpSUYwc1hHNWNibHgwTHk4Z1dFaFVUVXdnY0dGeWMyVnljeUJrYnlCdWIzUWdiV0ZuYVdOaGJHeDVJR2x1YzJWeWRDQmxiR1Z0Wlc1MGN5QnBiaUIwYUdWY2JseDBMeThnYzJGdFpTQjNZWGtnZEdoaGRDQjBZV2NnYzI5MWNDQndZWEp6WlhKeklHUnZMaUJUYnlCM1pTQmpZVzV1YjNRZ2MyaHZjblJsYmx4dVhIUXZMeUIwYUdseklHSjVJRzl0YVhSMGFXNW5JRHgwWW05a2VUNGdiM0lnYjNSb1pYSWdjbVZ4ZFdseVpXUWdaV3hsYldWdWRITXVYRzVjZEhSb1pXRmtPaUJiSURFc0lGd2lQSFJoWW14bFBsd2lMQ0JjSWp3dmRHRmliR1UrWENJZ1hTeGNibHgwWTI5c09pQmJJRElzSUZ3aVBIUmhZbXhsUGp4amIyeG5jbTkxY0Q1Y0lpd2dYQ0k4TDJOdmJHZHliM1Z3UGp3dmRHRmliR1UrWENJZ1hTeGNibHgwZEhJNklGc2dNaXdnWENJOGRHRmliR1UrUEhSaWIyUjVQbHdpTENCY0lqd3ZkR0p2WkhrK1BDOTBZV0pzWlQ1Y0lpQmRMRnh1WEhSMFpEb2dXeUF6TENCY0lqeDBZV0pzWlQ0OGRHSnZaSGsrUEhSeVBsd2lMQ0JjSWp3dmRISStQQzkwWW05a2VUNDhMM1JoWW14bFBsd2lJRjBzWEc1Y2JseDBYMlJsWm1GMWJIUTZJRnNnTUN3Z1hDSmNJaXdnWENKY0lpQmRYRzU5TzF4dVhHNHZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dWQzSmhjRTFoY0M1dmNIUm5jbTkxY0NBOUlIZHlZWEJOWVhBdWIzQjBhVzl1TzF4dVhHNTNjbUZ3VFdGd0xuUmliMlI1SUQwZ2QzSmhjRTFoY0M1MFptOXZkQ0E5SUhkeVlYQk5ZWEF1WTI5c1ozSnZkWEFnUFNCM2NtRndUV0Z3TG1OaGNIUnBiMjRnUFNCM2NtRndUV0Z3TG5Sb1pXRmtPMXh1ZDNKaGNFMWhjQzUwYUNBOUlIZHlZWEJOWVhBdWRHUTdYRzVjYmx4dVpuVnVZM1JwYjI0Z1oyVjBRV3hzS0NCamIyNTBaWGgwTENCMFlXY2dLU0I3WEc1Y2JseDBMeThnVTNWd2NHOXlkRG9nU1VVZ1BEMDVJQzBnTVRFZ2IyNXNlVnh1WEhRdkx5QlZjMlVnZEhsd1pXOW1JSFJ2SUdGMmIybGtJSHBsY204dFlYSm5kVzFsYm5RZ2JXVjBhRzlrSUdsdWRtOWpZWFJwYjI0Z2IyNGdhRzl6ZENCdlltcGxZM1J6SUNnak1UVXhOVEVwWEc1Y2RIWmhjaUJ5WlhRN1hHNWNibHgwYVdZZ0tDQjBlWEJsYjJZZ1kyOXVkR1Y0ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQXBJSHRjYmx4MFhIUnlaWFFnUFNCamIyNTBaWGgwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDQjBZV2NnZkh3Z1hDSXFYQ0lnS1R0Y2JseHVYSFI5SUdWc2MyVWdhV1lnS0NCMGVYQmxiMllnWTI5dWRHVjRkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ2tnZTF4dVhIUmNkSEpsZENBOUlHTnZiblJsZUhRdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnZ2RHRm5JSHg4SUZ3aUtsd2lJQ2s3WEc1Y2JseDBmU0JsYkhObElIdGNibHgwWEhSeVpYUWdQU0JiWFR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2dnZEdGbklEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2RHRm5JQ1ltSUdwUmRXVnllUzV1YjJSbFRtRnRaU2dnWTI5dWRHVjRkQ3dnZEdGbklDa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1dFpYSm5aU2dnV3lCamIyNTBaWGgwSUYwc0lISmxkQ0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhKbGREdGNibjFjYmx4dVhHNHZMeUJOWVhKcklITmpjbWx3ZEhNZ1lYTWdhR0YyYVc1bklHRnNjbVZoWkhrZ1ltVmxiaUJsZG1Gc2RXRjBaV1JjYm1aMWJtTjBhVzl1SUhObGRFZHNiMkpoYkVWMllXd29JR1ZzWlcxekxDQnlaV1pGYkdWdFpXNTBjeUFwSUh0Y2JseDBkbUZ5SUdrZ1BTQXdMRnh1WEhSY2RHd2dQU0JsYkdWdGN5NXNaVzVuZEdnN1hHNWNibHgwWm05eUlDZ2dPeUJwSUR3Z2JEc2dhU3NySUNrZ2UxeHVYSFJjZEdSaGRHRlFjbWwyTG5ObGRDaGNibHgwWEhSY2RHVnNaVzF6V3lCcElGMHNYRzVjZEZ4MFhIUmNJbWRzYjJKaGJFVjJZV3hjSWl4Y2JseDBYSFJjZENGeVpXWkZiR1Z0Wlc1MGN5QjhmQ0JrWVhSaFVISnBkaTVuWlhRb0lISmxaa1ZzWlcxbGJuUnpXeUJwSUYwc0lGd2laMnh2WW1Gc1JYWmhiRndpSUNsY2JseDBYSFFwTzF4dVhIUjlYRzU5WEc1Y2JseHVkbUZ5SUhKb2RHMXNJRDBnTHp4OEppTS9YRngzS3pzdk8xeHVYRzVtZFc1amRHbHZiaUJpZFdsc1pFWnlZV2R0Wlc1MEtDQmxiR1Z0Y3l3Z1kyOXVkR1Y0ZEN3Z2MyTnlhWEIwY3l3Z2MyVnNaV04wYVc5dUxDQnBaMjV2Y21Wa0lDa2dlMXh1WEhSMllYSWdaV3hsYlN3Z2RHMXdMQ0IwWVdjc0lIZHlZWEFzSUdOdmJuUmhhVzV6TENCcUxGeHVYSFJjZEdaeVlXZHRaVzUwSUQwZ1kyOXVkR1Y0ZEM1amNtVmhkR1ZFYjJOMWJXVnVkRVp5WVdkdFpXNTBLQ2tzWEc1Y2RGeDBibTlrWlhNZ1BTQmJYU3hjYmx4MFhIUnBJRDBnTUN4Y2JseDBYSFJzSUQwZ1pXeGxiWE11YkdWdVozUm9PMXh1WEc1Y2RHWnZjaUFvSURzZ2FTQThJR3c3SUdrckt5QXBJSHRjYmx4MFhIUmxiR1Z0SUQwZ1pXeGxiWE5iSUdrZ1hUdGNibHh1WEhSY2RHbG1JQ2dnWld4bGJTQjhmQ0JsYkdWdElEMDlQU0F3SUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJCWkdRZ2JtOWtaWE1nWkdseVpXTjBiSGxjYmx4MFhIUmNkR2xtSUNnZ2FsRjFaWEo1TG5SNWNHVW9JR1ZzWlcwZ0tTQTlQVDBnWENKdlltcGxZM1JjSWlBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCQmJtUnliMmxrSUR3OU5DNHdJRzl1Ykhrc0lGQm9ZVzUwYjIxS1V5QXhJRzl1YkhsY2JseDBYSFJjZEZ4MEx5OGdjSFZ6YUM1aGNIQnNlU2hmTENCaGNuSmhlV3hwYTJVcElIUm9jbTkzY3lCdmJpQmhibU5wWlc1MElGZGxZa3RwZEZ4dVhIUmNkRngwWEhScVVYVmxjbmt1YldWeVoyVW9JRzV2WkdWekxDQmxiR1Z0TG01dlpHVlVlWEJsSUQ4Z1d5QmxiR1Z0SUYwZ09pQmxiR1Z0SUNrN1hHNWNibHgwWEhSY2RDOHZJRU52Ym5abGNuUWdibTl1TFdoMGJXd2dhVzUwYnlCaElIUmxlSFFnYm05a1pWeHVYSFJjZEZ4MGZTQmxiSE5sSUdsbUlDZ2dJWEpvZEcxc0xuUmxjM1FvSUdWc1pXMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MGJtOWtaWE11Y0hWemFDZ2dZMjl1ZEdWNGRDNWpjbVZoZEdWVVpYaDBUbTlrWlNnZ1pXeGxiU0FwSUNrN1hHNWNibHgwWEhSY2RDOHZJRU52Ym5abGNuUWdhSFJ0YkNCcGJuUnZJRVJQVFNCdWIyUmxjMXh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBkRzF3SUQwZ2RHMXdJSHg4SUdaeVlXZHRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tDQmpiMjUwWlhoMExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aVpHbDJYQ0lnS1NBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVSbGMyVnlhV0ZzYVhwbElHRWdjM1JoYm1SaGNtUWdjbVZ3Y21WelpXNTBZWFJwYjI1Y2JseDBYSFJjZEZ4MGRHRm5JRDBnS0NCeWRHRm5UbUZ0WlM1bGVHVmpLQ0JsYkdWdElDa2dmSHdnV3lCY0lsd2lMQ0JjSWx3aUlGMGdLVnNnTVNCZExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2RGeDBYSFJjZEhkeVlYQWdQU0IzY21Gd1RXRndXeUIwWVdjZ1hTQjhmQ0IzY21Gd1RXRndMbDlrWldaaGRXeDBPMXh1WEhSY2RGeDBYSFIwYlhBdWFXNXVaWEpJVkUxTUlEMGdkM0poY0ZzZ01TQmRJQ3NnYWxGMVpYSjVMbWgwYld4UWNtVm1hV3gwWlhJb0lHVnNaVzBnS1NBcklIZHlZWEJiSURJZ1hUdGNibHh1WEhSY2RGeDBYSFF2THlCRVpYTmpaVzVrSUhSb2NtOTFaMmdnZDNKaGNIQmxjbk1nZEc4Z2RHaGxJSEpwWjJoMElHTnZiblJsYm5SY2JseDBYSFJjZEZ4MGFpQTlJSGR5WVhCYklEQWdYVHRjYmx4MFhIUmNkRngwZDJocGJHVWdLQ0JxTFMwZ0tTQjdYRzVjZEZ4MFhIUmNkRngwZEcxd0lEMGdkRzF3TG14aGMzUkRhR2xzWkR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnUEQwMExqQWdiMjVzZVN3Z1VHaGhiblJ2YlVwVElERWdiMjVzZVZ4dVhIUmNkRngwWEhRdkx5QndkWE5vTG1Gd2NHeDVLRjhzSUdGeWNtRjViR2xyWlNrZ2RHaHliM2R6SUc5dUlHRnVZMmxsYm5RZ1YyVmlTMmwwWEc1Y2RGeDBYSFJjZEdwUmRXVnllUzV0WlhKblpTZ2dibTlrWlhNc0lIUnRjQzVqYUdsc1pFNXZaR1Z6SUNrN1hHNWNibHgwWEhSY2RGeDBMeThnVW1WdFpXMWlaWElnZEdobElIUnZjQzFzWlhabGJDQmpiMjUwWVdsdVpYSmNibHgwWEhSY2RGeDBkRzF3SUQwZ1puSmhaMjFsYm5RdVptbHljM1JEYUdsc1pEdGNibHh1WEhSY2RGeDBYSFF2THlCRmJuTjFjbVVnZEdobElHTnlaV0YwWldRZ2JtOWtaWE1nWVhKbElHOXljR2hoYm1Wa0lDZ2pNVEl6T1RJcFhHNWNkRngwWEhSY2RIUnRjQzUwWlhoMFEyOXVkR1Z1ZENBOUlGd2lYQ0k3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwTHk4Z1VtVnRiM1psSUhkeVlYQndaWElnWm5KdmJTQm1jbUZuYldWdWRGeHVYSFJtY21GbmJXVnVkQzUwWlhoMFEyOXVkR1Z1ZENBOUlGd2lYQ0k3WEc1Y2JseDBhU0E5SURBN1hHNWNkSGRvYVd4bElDZ2dLQ0JsYkdWdElEMGdibTlrWlhOYklHa3JLeUJkSUNrZ0tTQjdYRzVjYmx4MFhIUXZMeUJUYTJsd0lHVnNaVzFsYm5SeklHRnNjbVZoWkhrZ2FXNGdkR2hsSUdOdmJuUmxlSFFnWTI5c2JHVmpkR2x2YmlBb2RISmhZeTAwTURnM0tWeHVYSFJjZEdsbUlDZ2djMlZzWldOMGFXOXVJQ1ltSUdwUmRXVnllUzVwYmtGeWNtRjVLQ0JsYkdWdExDQnpaV3hsWTNScGIyNGdLU0ErSUMweElDa2dlMXh1WEhSY2RGeDBhV1lnS0NCcFoyNXZjbVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnBaMjV2Y21Wa0xuQjFjMmdvSUdWc1pXMGdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RIMWNibHh1WEhSY2RHTnZiblJoYVc1eklEMGdhbEYxWlhKNUxtTnZiblJoYVc1ektDQmxiR1Z0TG05M2JtVnlSRzlqZFcxbGJuUXNJR1ZzWlcwZ0tUdGNibHh1WEhSY2RDOHZJRUZ3Y0dWdVpDQjBieUJtY21GbmJXVnVkRnh1WEhSY2RIUnRjQ0E5SUdkbGRFRnNiQ2dnWm5KaFoyMWxiblF1WVhCd1pXNWtRMmhwYkdRb0lHVnNaVzBnS1N3Z1hDSnpZM0pwY0hSY0lpQXBPMXh1WEc1Y2RGeDBMeThnVUhKbGMyVnlkbVVnYzJOeWFYQjBJR1YyWVd4MVlYUnBiMjRnYUdsemRHOXllVnh1WEhSY2RHbG1JQ2dnWTI5dWRHRnBibk1nS1NCN1hHNWNkRngwWEhSelpYUkhiRzlpWVd4RmRtRnNLQ0IwYlhBZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkRZWEIwZFhKbElHVjRaV04xZEdGaWJHVnpYRzVjZEZ4MGFXWWdLQ0J6WTNKcGNIUnpJQ2tnZTF4dVhIUmNkRngwYWlBOUlEQTdYRzVjZEZ4MFhIUjNhR2xzWlNBb0lDZ2daV3hsYlNBOUlIUnRjRnNnYWlzcklGMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0J5YzJOeWFYQjBWSGx3WlM1MFpYTjBLQ0JsYkdWdExuUjVjR1VnZkh3Z1hDSmNJaUFwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSE5qY21sd2RITXVjSFZ6YUNnZ1pXeGxiU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUdaeVlXZHRaVzUwTzF4dWZWeHVYRzVjYmlnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEhaaGNpQm1jbUZuYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tTeGNibHgwWEhSa2FYWWdQU0JtY21GbmJXVnVkQzVoY0hCbGJtUkRhR2xzWkNnZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2dnWENKa2FYWmNJaUFwSUNrc1hHNWNkRngwYVc1d2RYUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDQmNJbWx1Y0hWMFhDSWdLVHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJCYm1SeWIybGtJRFF1TUNBdElEUXVNeUJ2Ym14NVhHNWNkQzh2SUVOb1pXTnJJSE4wWVhSbElHeHZjM1FnYVdZZ2RHaGxJRzVoYldVZ2FYTWdjMlYwSUNnak1URXlNVGNwWEc1Y2RDOHZJRk4xY0hCdmNuUTZJRmRwYm1SdmQzTWdWMlZpSUVGd2NITWdLRmRYUVNsY2JseDBMeThnWUc1aGJXVmdJR0Z1WkNCZ2RIbHdaV0FnYlhWemRDQjFjMlVnTG5ObGRFRjBkSEpwWW5WMFpTQm1iM0lnVjFkQklDZ2pNVFE1TURFcFhHNWNkR2x1Y0hWMExuTmxkRUYwZEhKcFluVjBaU2dnWENKMGVYQmxYQ0lzSUZ3aWNtRmthVzljSWlBcE8xeHVYSFJwYm5CMWRDNXpaWFJCZEhSeWFXSjFkR1VvSUZ3aVkyaGxZMnRsWkZ3aUxDQmNJbU5vWldOclpXUmNJaUFwTzF4dVhIUnBibkIxZEM1elpYUkJkSFJ5YVdKMWRHVW9JRndpYm1GdFpWd2lMQ0JjSW5SY0lpQXBPMXh1WEc1Y2RHUnBkaTVoY0hCbGJtUkRhR2xzWkNnZ2FXNXdkWFFnS1R0Y2JseHVYSFF2THlCVGRYQndiM0owT2lCQmJtUnliMmxrSUR3OU5DNHhJRzl1YkhsY2JseDBMeThnVDJ4a1pYSWdWMlZpUzJsMElHUnZaWE51SjNRZ1kyeHZibVVnWTJobFkydGxaQ0J6ZEdGMFpTQmpiM0p5WldOMGJIa2dhVzRnWm5KaFoyMWxiblJ6WEc1Y2RITjFjSEJ2Y25RdVkyaGxZMnREYkc5dVpTQTlJR1JwZGk1amJHOXVaVTV2WkdVb0lIUnlkV1VnS1M1amJHOXVaVTV2WkdVb0lIUnlkV1VnS1M1c1lYTjBRMmhwYkdRdVkyaGxZMnRsWkR0Y2JseHVYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVEV4SUc5dWJIbGNibHgwTHk4Z1RXRnJaU0J6ZFhKbElIUmxlSFJoY21WaElDaGhibVFnWTJobFkydGliM2dwSUdSbFptRjFiSFJXWVd4MVpTQnBjeUJ3Y205d1pYSnNlU0JqYkc5dVpXUmNibHgwWkdsMkxtbHVibVZ5U0ZSTlRDQTlJRndpUEhSbGVIUmhjbVZoUG5nOEwzUmxlSFJoY21WaFBsd2lPMXh1WEhSemRYQndiM0owTG01dlEyeHZibVZEYUdWamEyVmtJRDBnSVNGa2FYWXVZMnh2Ym1WT2IyUmxLQ0IwY25WbElDa3ViR0Z6ZEVOb2FXeGtMbVJsWm1GMWJIUldZV3gxWlR0Y2JuMGdLU2dwTzF4dWRtRnlJR1J2WTNWdFpXNTBSV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWREdGNibHh1WEc1Y2JuWmhjbHh1WEhSeWEyVjVSWFpsYm5RZ1BTQXZYbXRsZVM4c1hHNWNkSEp0YjNWelpVVjJaVzUwSUQwZ0wxNG9QenB0YjNWelpYeHdiMmx1ZEdWeWZHTnZiblJsZUhSdFpXNTFmR1J5WVdkOFpISnZjQ2w4WTJ4cFkyc3ZMRnh1WEhSeWRIbHdaVzVoYldWemNHRmpaU0E5SUM5ZUtGdGVMbDBxS1NnL09seGNMaWd1S3lsOEtTODdYRzVjYm1aMWJtTjBhVzl1SUhKbGRIVnlibFJ5ZFdVb0tTQjdYRzVjZEhKbGRIVnliaUIwY25WbE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYUjFjbTVHWVd4elpTZ3BJSHRjYmx4MGNtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNHZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dUx5OGdVMlZsSUNNeE16TTVNeUJtYjNJZ2JXOXlaU0JwYm1adlhHNW1kVzVqZEdsdmJpQnpZV1psUVdOMGFYWmxSV3hsYldWdWRDZ3BJSHRjYmx4MGRISjVJSHRjYmx4MFhIUnlaWFIxY200Z1pHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkRHRjYmx4MGZTQmpZWFJqYUNBb0lHVnljaUFwSUhzZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJpZ2daV3hsYlN3Z2RIbHdaWE1zSUhObGJHVmpkRzl5TENCa1lYUmhMQ0JtYml3Z2IyNWxJQ2tnZTF4dVhIUjJZWElnYjNKcFowWnVMQ0IwZVhCbE8xeHVYRzVjZEM4dklGUjVjR1Z6SUdOaGJpQmlaU0JoSUcxaGNDQnZaaUIwZVhCbGN5OW9ZVzVrYkdWeWMxeHVYSFJwWmlBb0lIUjVjR1Z2WmlCMGVYQmxjeUE5UFQwZ1hDSnZZbXBsWTNSY0lpQXBJSHRjYmx4dVhIUmNkQzh2SUNnZ2RIbHdaWE10VDJKcVpXTjBMQ0J6Wld4bFkzUnZjaXdnWkdGMFlTQXBYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdjMlZzWldOMGIzSWdJVDA5SUZ3aWMzUnlhVzVuWENJZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUNnZ2RIbHdaWE10VDJKcVpXTjBMQ0JrWVhSaElDbGNibHgwWEhSY2RHUmhkR0VnUFNCa1lYUmhJSHg4SUhObGJHVmpkRzl5TzF4dVhIUmNkRngwYzJWc1pXTjBiM0lnUFNCMWJtUmxabWx1WldRN1hHNWNkRngwZlZ4dVhIUmNkR1p2Y2lBb0lIUjVjR1VnYVc0Z2RIbHdaWE1nS1NCN1hHNWNkRngwWEhSdmJpZ2daV3hsYlN3Z2RIbHdaU3dnYzJWc1pXTjBiM0lzSUdSaGRHRXNJSFI1Y0dWeld5QjBlWEJsSUYwc0lHOXVaU0FwTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z1pXeGxiVHRjYmx4MGZWeHVYRzVjZEdsbUlDZ2daR0YwWVNBOVBTQnVkV3hzSUNZbUlHWnVJRDA5SUc1MWJHd2dLU0I3WEc1Y2JseDBYSFF2THlBb0lIUjVjR1Z6TENCbWJpQXBYRzVjZEZ4MFptNGdQU0J6Wld4bFkzUnZjanRjYmx4MFhIUmtZWFJoSUQwZ2MyVnNaV04wYjNJZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEgwZ1pXeHpaU0JwWmlBb0lHWnVJRDA5SUc1MWJHd2dLU0I3WEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnYzJWc1pXTjBiM0lnUFQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2JseDBYSFJjZEM4dklDZ2dkSGx3WlhNc0lITmxiR1ZqZEc5eUxDQm1iaUFwWEc1Y2RGeDBYSFJtYmlBOUlHUmhkR0U3WEc1Y2RGeDBYSFJrWVhSaElEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNibHgwWEhSY2RDOHZJQ2dnZEhsd1pYTXNJR1JoZEdFc0lHWnVJQ2xjYmx4MFhIUmNkR1p1SUQwZ1pHRjBZVHRjYmx4MFhIUmNkR1JoZEdFZ1BTQnpaV3hsWTNSdmNqdGNibHgwWEhSY2RITmxiR1ZqZEc5eUlEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RIMWNibHgwZlZ4dVhIUnBaaUFvSUdadUlEMDlQU0JtWVd4elpTQXBJSHRjYmx4MFhIUm1iaUE5SUhKbGRIVnlia1poYkhObE8xeHVYSFI5SUdWc2MyVWdhV1lnS0NBaFptNGdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHVnNaVzA3WEc1Y2RIMWNibHh1WEhScFppQW9JRzl1WlNBOVBUMGdNU0FwSUh0Y2JseDBYSFJ2Y21sblJtNGdQU0JtYmp0Y2JseDBYSFJtYmlBOUlHWjFibU4wYVc5dUtDQmxkbVZ1ZENBcElIdGNibHh1WEhSY2RGeDBMeThnUTJGdUlIVnpaU0JoYmlCbGJYQjBlU0J6WlhRc0lITnBibU5sSUdWMlpXNTBJR052Ym5SaGFXNXpJSFJvWlNCcGJtWnZYRzVjZEZ4MFhIUnFVWFZsY25rb0tTNXZabVlvSUdWMlpXNTBJQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdiM0pwWjBadUxtRndjR3g1S0NCMGFHbHpMQ0JoY21kMWJXVnVkSE1nS1R0Y2JseDBYSFI5TzF4dVhHNWNkRngwTHk4Z1ZYTmxJSE5oYldVZ1ozVnBaQ0J6YnlCallXeHNaWElnWTJGdUlISmxiVzkyWlNCMWMybHVaeUJ2Y21sblJtNWNibHgwWEhSbWJpNW5kV2xrSUQwZ2IzSnBaMFp1TG1kMWFXUWdmSHdnS0NCdmNtbG5SbTR1WjNWcFpDQTlJR3BSZFdWeWVTNW5kV2xrS3lzZ0tUdGNibHgwZlZ4dVhIUnlaWFIxY200Z1pXeGxiUzVsWVdOb0tDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnFVWFZsY25rdVpYWmxiblF1WVdSa0tDQjBhR2x6TENCMGVYQmxjeXdnWm00c0lHUmhkR0VzSUhObGJHVmpkRzl5SUNrN1hHNWNkSDBnS1R0Y2JuMWNibHh1THlwY2JpQXFJRWhsYkhCbGNpQm1kVzVqZEdsdmJuTWdabTl5SUcxaGJtRm5hVzVuSUdWMlpXNTBjeUF0TFNCdWIzUWdjR0Z5ZENCdlppQjBhR1VnY0hWaWJHbGpJR2x1ZEdWeVptRmpaUzVjYmlBcUlGQnliM0J6SUhSdklFUmxZVzRnUldSM1lYSmtjeWNnWVdSa1JYWmxiblFnYkdsaWNtRnllU0JtYjNJZ2JXRnVlU0J2WmlCMGFHVWdhV1JsWVhNdVhHNGdLaTljYm1wUmRXVnllUzVsZG1WdWRDQTlJSHRjYmx4dVhIUm5iRzlpWVd3NklIdDlMRnh1WEc1Y2RHRmtaRG9nWm5WdVkzUnBiMjRvSUdWc1pXMHNJSFI1Y0dWekxDQm9ZVzVrYkdWeUxDQmtZWFJoTENCelpXeGxZM1J2Y2lBcElIdGNibHh1WEhSY2RIWmhjaUJvWVc1a2JHVlBZbXBKYml3Z1pYWmxiblJJWVc1a2JHVXNJSFJ0Y0N4Y2JseDBYSFJjZEdWMlpXNTBjeXdnZEN3Z2FHRnVaR3hsVDJKcUxGeHVYSFJjZEZ4MGMzQmxZMmxoYkN3Z2FHRnVaR3hsY25Nc0lIUjVjR1VzSUc1aGJXVnpjR0ZqWlhNc0lHOXlhV2RVZVhCbExGeHVYSFJjZEZ4MFpXeGxiVVJoZEdFZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUdWc1pXMGdLVHRjYmx4dVhIUmNkQzh2SUVSdmJpZDBJR0YwZEdGamFDQmxkbVZ1ZEhNZ2RHOGdibTlFWVhSaElHOXlJSFJsZUhRdlkyOXRiV1Z1ZENCdWIyUmxjeUFvWW5WMElHRnNiRzkzSUhCc1lXbHVJRzlpYW1WamRITXBYRzVjZEZ4MGFXWWdLQ0FoWld4bGJVUmhkR0VnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUTJGc2JHVnlJR05oYmlCd1lYTnpJR2x1SUdGdUlHOWlhbVZqZENCdlppQmpkWE4wYjIwZ1pHRjBZU0JwYmlCc2FXVjFJRzltSUhSb1pTQm9ZVzVrYkdWeVhHNWNkRngwYVdZZ0tDQm9ZVzVrYkdWeUxtaGhibVJzWlhJZ0tTQjdYRzVjZEZ4MFhIUm9ZVzVrYkdWUFltcEpiaUE5SUdoaGJtUnNaWEk3WEc1Y2RGeDBYSFJvWVc1a2JHVnlJRDBnYUdGdVpHeGxUMkpxU1c0dWFHRnVaR3hsY2p0Y2JseDBYSFJjZEhObGJHVmpkRzl5SUQwZ2FHRnVaR3hsVDJKcVNXNHVjMlZzWldOMGIzSTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdSVzV6ZFhKbElIUm9ZWFFnYVc1MllXeHBaQ0J6Wld4bFkzUnZjbk1nZEdoeWIzY2daWGhqWlhCMGFXOXVjeUJoZENCaGRIUmhZMmdnZEdsdFpWeHVYSFJjZEM4dklFVjJZV3gxWVhSbElHRm5ZV2x1YzNRZ1pHOWpkVzFsYm5SRmJHVnRaVzUwSUdsdUlHTmhjMlVnWld4bGJTQnBjeUJoSUc1dmJpMWxiR1Z0Wlc1MElHNXZaR1VnS0dVdVp5NHNJR1J2WTNWdFpXNTBLVnh1WEhSY2RHbG1JQ2dnYzJWc1pXTjBiM0lnS1NCN1hHNWNkRngwWEhScVVYVmxjbmt1Wm1sdVpDNXRZWFJqYUdWelUyVnNaV04wYjNJb0lHUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEN3Z2MyVnNaV04wYjNJZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5Qk5ZV3RsSUhOMWNtVWdkR2hoZENCMGFHVWdhR0Z1Wkd4bGNpQm9ZWE1nWVNCMWJtbHhkV1VnU1VRc0lIVnpaV1FnZEc4Z1ptbHVaQzl5WlcxdmRtVWdhWFFnYkdGMFpYSmNibHgwWEhScFppQW9JQ0ZvWVc1a2JHVnlMbWQxYVdRZ0tTQjdYRzVjZEZ4MFhIUm9ZVzVrYkdWeUxtZDFhV1FnUFNCcVVYVmxjbmt1WjNWcFpDc3JPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRWx1YVhRZ2RHaGxJR1ZzWlcxbGJuUW5jeUJsZG1WdWRDQnpkSEoxWTNSMWNtVWdZVzVrSUcxaGFXNGdhR0Z1Wkd4bGNpd2dhV1lnZEdocGN5QnBjeUIwYUdVZ1ptbHljM1JjYmx4MFhIUnBaaUFvSUNFb0lHVjJaVzUwY3lBOUlHVnNaVzFFWVhSaExtVjJaVzUwY3lBcElDa2dlMXh1WEhSY2RGeDBaWFpsYm5SeklEMGdaV3hsYlVSaGRHRXVaWFpsYm5SeklEMGdlMzA3WEc1Y2RGeDBmVnh1WEhSY2RHbG1JQ2dnSVNnZ1pYWmxiblJJWVc1a2JHVWdQU0JsYkdWdFJHRjBZUzVvWVc1a2JHVWdLU0FwSUh0Y2JseDBYSFJjZEdWMlpXNTBTR0Z1Wkd4bElEMGdaV3hsYlVSaGRHRXVhR0Z1Wkd4bElEMGdablZ1WTNScGIyNG9JR1VnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnUkdselkyRnlaQ0IwYUdVZ2MyVmpiMjVrSUdWMlpXNTBJRzltSUdFZ2FsRjFaWEo1TG1WMlpXNTBMblJ5YVdkblpYSW9LU0JoYm1SY2JseDBYSFJjZEZ4MEx5OGdkMmhsYmlCaGJpQmxkbVZ1ZENCcGN5QmpZV3hzWldRZ1lXWjBaWElnWVNCd1lXZGxJR2hoY3lCMWJteHZZV1JsWkZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEhsd1pXOW1JR3BSZFdWeWVTQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQW1KaUJxVVhWbGNua3VaWFpsYm5RdWRISnBaMmRsY21Wa0lDRTlQU0JsTG5SNWNHVWdQMXh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzVsZG1WdWRDNWthWE53WVhSamFDNWhjSEJzZVNnZ1pXeGxiU3dnWVhKbmRXMWxiblJ6SUNrZ09pQjFibVJsWm1sdVpXUTdYRzVjZEZ4MFhIUjlPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRWhoYm1Sc1pTQnRkV3gwYVhCc1pTQmxkbVZ1ZEhNZ2MyVndZWEpoZEdWa0lHSjVJR0VnYzNCaFkyVmNibHgwWEhSMGVYQmxjeUE5SUNnZ2RIbHdaWE1nZkh3Z1hDSmNJaUFwTG0xaGRHTm9LQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dmSHdnV3lCY0lsd2lJRjA3WEc1Y2RGeDBkQ0E5SUhSNWNHVnpMbXhsYm1kMGFEdGNibHgwWEhSM2FHbHNaU0FvSUhRdExTQXBJSHRjYmx4MFhIUmNkSFJ0Y0NBOUlISjBlWEJsYm1GdFpYTndZV05sTG1WNFpXTW9JSFI1Y0dWeld5QjBJRjBnS1NCOGZDQmJYVHRjYmx4MFhIUmNkSFI1Y0dVZ1BTQnZjbWxuVkhsd1pTQTlJSFJ0Y0ZzZ01TQmRPMXh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeUE5SUNnZ2RHMXdXeUF5SUYwZ2ZId2dYQ0pjSWlBcExuTndiR2wwS0NCY0lpNWNJaUFwTG5OdmNuUW9LVHRjYmx4dVhIUmNkRngwTHk4Z1ZHaGxjbVVnS20xMWMzUXFJR0psSUdFZ2RIbHdaU3dnYm04Z1lYUjBZV05vYVc1bklHNWhiV1Z6Y0dGalpTMXZibXg1SUdoaGJtUnNaWEp6WEc1Y2RGeDBYSFJwWmlBb0lDRjBlWEJsSUNrZ2UxeHVYSFJjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnU1dZZ1pYWmxiblFnWTJoaGJtZGxjeUJwZEhNZ2RIbHdaU3dnZFhObElIUm9aU0J6Y0dWamFXRnNJR1YyWlc1MElHaGhibVJzWlhKeklHWnZjaUIwYUdVZ1kyaGhibWRsWkNCMGVYQmxYRzVjZEZ4MFhIUnpjR1ZqYVdGc0lEMGdhbEYxWlhKNUxtVjJaVzUwTG5Od1pXTnBZV3hiSUhSNWNHVWdYU0I4ZkNCN2ZUdGNibHh1WEhSY2RGeDBMeThnU1dZZ2MyVnNaV04wYjNJZ1pHVm1hVzVsWkN3Z1pHVjBaWEp0YVc1bElITndaV05wWVd3Z1pYWmxiblFnWVhCcElIUjVjR1VzSUc5MGFHVnlkMmx6WlNCbmFYWmxiaUIwZVhCbFhHNWNkRngwWEhSMGVYQmxJRDBnS0NCelpXeGxZM1J2Y2lBL0lITndaV05wWVd3dVpHVnNaV2RoZEdWVWVYQmxJRG9nYzNCbFkybGhiQzVpYVc1a1ZIbHdaU0FwSUh4OElIUjVjR1U3WEc1Y2JseDBYSFJjZEM4dklGVndaR0YwWlNCemNHVmphV0ZzSUdKaGMyVmtJRzl1SUc1bGQyeDVJSEpsYzJWMElIUjVjR1ZjYmx4MFhIUmNkSE53WldOcFlXd2dQU0JxVVhWbGNua3VaWFpsYm5RdWMzQmxZMmxoYkZzZ2RIbHdaU0JkSUh4OElIdDlPMXh1WEc1Y2RGeDBYSFF2THlCb1lXNWtiR1ZQWW1vZ2FYTWdjR0Z6YzJWa0lIUnZJR0ZzYkNCbGRtVnVkQ0JvWVc1a2JHVnljMXh1WEhSY2RGeDBhR0Z1Wkd4bFQySnFJRDBnYWxGMVpYSjVMbVY0ZEdWdVpDZ2dlMXh1WEhSY2RGeDBYSFIwZVhCbE9pQjBlWEJsTEZ4dVhIUmNkRngwWEhSdmNtbG5WSGx3WlRvZ2IzSnBaMVI1Y0dVc1hHNWNkRngwWEhSY2RHUmhkR0U2SUdSaGRHRXNYRzVjZEZ4MFhIUmNkR2hoYm1Sc1pYSTZJR2hoYm1Sc1pYSXNYRzVjZEZ4MFhIUmNkR2QxYVdRNklHaGhibVJzWlhJdVozVnBaQ3hjYmx4MFhIUmNkRngwYzJWc1pXTjBiM0k2SUhObGJHVmpkRzl5TEZ4dVhIUmNkRngwWEhSdVpXVmtjME52Ym5SbGVIUTZJSE5sYkdWamRHOXlJQ1ltSUdwUmRXVnllUzVsZUhCeUxtMWhkR05vTG01bFpXUnpRMjl1ZEdWNGRDNTBaWE4wS0NCelpXeGxZM1J2Y2lBcExGeHVYSFJjZEZ4MFhIUnVZVzFsYzNCaFkyVTZJRzVoYldWemNHRmpaWE11YW05cGJpZ2dYQ0l1WENJZ0tWeHVYSFJjZEZ4MGZTd2dhR0Z1Wkd4bFQySnFTVzRnS1R0Y2JseHVYSFJjZEZ4MEx5OGdTVzVwZENCMGFHVWdaWFpsYm5RZ2FHRnVaR3hsY2lCeGRXVjFaU0JwWmlCM1pTZHlaU0IwYUdVZ1ptbHljM1JjYmx4MFhIUmNkR2xtSUNnZ0lTZ2dhR0Z1Wkd4bGNuTWdQU0JsZG1WdWRITmJJSFI1Y0dVZ1hTQXBJQ2tnZTF4dVhIUmNkRngwWEhSb1lXNWtiR1Z5Y3lBOUlHVjJaVzUwYzFzZ2RIbHdaU0JkSUQwZ1cxMDdYRzVjZEZ4MFhIUmNkR2hoYm1Sc1pYSnpMbVJsYkdWbllYUmxRMjkxYm5RZ1BTQXdPMXh1WEc1Y2RGeDBYSFJjZEM4dklFOXViSGtnZFhObElHRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ2FXWWdkR2hsSUhOd1pXTnBZV3dnWlhabGJuUnpJR2hoYm1Sc1pYSWdjbVYwZFhKdWN5Qm1ZV3h6WlZ4dVhIUmNkRngwWEhScFppQW9JQ0Z6Y0dWamFXRnNMbk5sZEhWd0lIeDhYRzVjZEZ4MFhIUmNkRngwYzNCbFkybGhiQzV6WlhSMWNDNWpZV3hzS0NCbGJHVnRMQ0JrWVhSaExDQnVZVzFsYzNCaFkyVnpMQ0JsZG1WdWRFaGhibVJzWlNBcElEMDlQU0JtWVd4elpTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWld4bGJTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUlDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFpXeGxiUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ0IwZVhCbExDQmxkbVZ1ZEVoaGJtUnNaU0FwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb0lITndaV05wWVd3dVlXUmtJQ2tnZTF4dVhIUmNkRngwWEhSemNHVmphV0ZzTG1Ga1pDNWpZV3hzS0NCbGJHVnRMQ0JvWVc1a2JHVlBZbW9nS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUNGb1lXNWtiR1ZQWW1vdWFHRnVaR3hsY2k1bmRXbGtJQ2tnZTF4dVhIUmNkRngwWEhSY2RHaGhibVJzWlU5aWFpNW9ZVzVrYkdWeUxtZDFhV1FnUFNCb1lXNWtiR1Z5TG1kMWFXUTdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1FXUmtJSFJ2SUhSb1pTQmxiR1Z0Wlc1MEozTWdhR0Z1Wkd4bGNpQnNhWE4wTENCa1pXeGxaMkYwWlhNZ2FXNGdabkp2Ym5SY2JseDBYSFJjZEdsbUlDZ2djMlZzWldOMGIzSWdLU0I3WEc1Y2RGeDBYSFJjZEdoaGJtUnNaWEp6TG5Od2JHbGpaU2dnYUdGdVpHeGxjbk11WkdWc1pXZGhkR1ZEYjNWdWRDc3JMQ0F3TENCb1lXNWtiR1ZQWW1vZ0tUdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHaGhibVJzWlhKekxuQjFjMmdvSUdoaGJtUnNaVTlpYWlBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJMWldWd0lIUnlZV05ySUc5bUlIZG9hV05vSUdWMlpXNTBjeUJvWVhabElHVjJaWElnWW1WbGJpQjFjMlZrTENCbWIzSWdaWFpsYm5RZ2IzQjBhVzFwZW1GMGFXOXVYRzVjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1WjJ4dlltRnNXeUIwZVhCbElGMGdQU0IwY25WbE8xeHVYSFJjZEgxY2JseHVYSFI5TEZ4dVhHNWNkQzh2SUVSbGRHRmphQ0JoYmlCbGRtVnVkQ0J2Y2lCelpYUWdiMllnWlhabGJuUnpJR1p5YjIwZ1lXNGdaV3hsYldWdWRGeHVYSFJ5WlcxdmRtVTZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQjBlWEJsY3l3Z2FHRnVaR3hsY2l3Z2MyVnNaV04wYjNJc0lHMWhjSEJsWkZSNWNHVnpJQ2tnZTF4dVhHNWNkRngwZG1GeUlHb3NJRzl5YVdkRGIzVnVkQ3dnZEcxd0xGeHVYSFJjZEZ4MFpYWmxiblJ6TENCMExDQm9ZVzVrYkdWUFltb3NYRzVjZEZ4MFhIUnpjR1ZqYVdGc0xDQm9ZVzVrYkdWeWN5d2dkSGx3WlN3Z2JtRnRaWE53WVdObGN5d2diM0pwWjFSNWNHVXNYRzVjZEZ4MFhIUmxiR1Z0UkdGMFlTQTlJR1JoZEdGUWNtbDJMbWhoYzBSaGRHRW9JR1ZzWlcwZ0tTQW1KaUJrWVhSaFVISnBkaTVuWlhRb0lHVnNaVzBnS1R0Y2JseHVYSFJjZEdsbUlDZ2dJV1ZzWlcxRVlYUmhJSHg4SUNFb0lHVjJaVzUwY3lBOUlHVnNaVzFFWVhSaExtVjJaVzUwY3lBcElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFOXVZMlVnWm05eUlHVmhZMmdnZEhsd1pTNXVZVzFsYzNCaFkyVWdhVzRnZEhsd1pYTTdJSFI1Y0dVZ2JXRjVJR0psSUc5dGFYUjBaV1JjYmx4MFhIUjBlWEJsY3lBOUlDZ2dkSGx3WlhNZ2ZId2dYQ0pjSWlBcExtMWhkR05vS0NCeWJtOTBhSFJ0Ykhkb2FYUmxJQ2tnZkh3Z1d5QmNJbHdpSUYwN1hHNWNkRngwZENBOUlIUjVjR1Z6TG14bGJtZDBhRHRjYmx4MFhIUjNhR2xzWlNBb0lIUXRMU0FwSUh0Y2JseDBYSFJjZEhSdGNDQTlJSEowZVhCbGJtRnRaWE53WVdObExtVjRaV01vSUhSNWNHVnpXeUIwSUYwZ0tTQjhmQ0JiWFR0Y2JseDBYSFJjZEhSNWNHVWdQU0J2Y21sblZIbHdaU0E5SUhSdGNGc2dNU0JkTzF4dVhIUmNkRngwYm1GdFpYTndZV05sY3lBOUlDZ2dkRzF3V3lBeUlGMGdmSHdnWENKY0lpQXBMbk53YkdsMEtDQmNJaTVjSWlBcExuTnZjblFvS1R0Y2JseHVYSFJjZEZ4MEx5OGdWVzVpYVc1a0lHRnNiQ0JsZG1WdWRITWdLRzl1SUhSb2FYTWdibUZ0WlhOd1lXTmxMQ0JwWmlCd2NtOTJhV1JsWkNrZ1ptOXlJSFJvWlNCbGJHVnRaVzUwWEc1Y2RGeDBYSFJwWmlBb0lDRjBlWEJsSUNrZ2UxeHVYSFJjZEZ4MFhIUm1iM0lnS0NCMGVYQmxJR2x1SUdWMlpXNTBjeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1Y21WdGIzWmxLQ0JsYkdWdExDQjBlWEJsSUNzZ2RIbHdaWE5iSUhRZ1hTd2dhR0Z1Wkd4bGNpd2djMlZzWldOMGIzSXNJSFJ5ZFdVZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYzNCbFkybGhiQ0E5SUdwUmRXVnllUzVsZG1WdWRDNXpjR1ZqYVdGc1d5QjBlWEJsSUYwZ2ZId2dlMzA3WEc1Y2RGeDBYSFIwZVhCbElEMGdLQ0J6Wld4bFkzUnZjaUEvSUhOd1pXTnBZV3d1WkdWc1pXZGhkR1ZVZVhCbElEb2djM0JsWTJsaGJDNWlhVzVrVkhsd1pTQXBJSHg4SUhSNWNHVTdYRzVjZEZ4MFhIUm9ZVzVrYkdWeWN5QTlJR1YyWlc1MGMxc2dkSGx3WlNCZElIeDhJRnRkTzF4dVhIUmNkRngwZEcxd0lEMGdkRzF3V3lBeUlGMGdKaVpjYmx4MFhIUmNkRngwYm1WM0lGSmxaMFY0Y0NnZ1hDSW9YbnhjWEZ4Y0xpbGNJaUFySUc1aGJXVnpjR0ZqWlhNdWFtOXBiaWdnWENKY1hGeGNMaWcvT2k0cVhGeGNYQzU4S1Z3aUlDa2dLeUJjSWloY1hGeGNMbndrS1Z3aUlDazdYRzVjYmx4MFhIUmNkQzh2SUZKbGJXOTJaU0J0WVhSamFHbHVaeUJsZG1WdWRITmNibHgwWEhSY2RHOXlhV2REYjNWdWRDQTlJR29nUFNCb1lXNWtiR1Z5Y3k1c1pXNW5kR2c3WEc1Y2RGeDBYSFIzYUdsc1pTQW9JR290TFNBcElIdGNibHgwWEhSY2RGeDBhR0Z1Wkd4bFQySnFJRDBnYUdGdVpHeGxjbk5iSUdvZ1hUdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lDZ2diV0Z3Y0dWa1ZIbHdaWE1nZkh3Z2IzSnBaMVI1Y0dVZ1BUMDlJR2hoYm1Sc1pVOWlhaTV2Y21sblZIbHdaU0FwSUNZbVhHNWNkRngwWEhSY2RGeDBLQ0FoYUdGdVpHeGxjaUI4ZkNCb1lXNWtiR1Z5TG1kMWFXUWdQVDA5SUdoaGJtUnNaVTlpYWk1bmRXbGtJQ2tnSmlaY2JseDBYSFJjZEZ4MFhIUW9JQ0YwYlhBZ2ZId2dkRzF3TG5SbGMzUW9JR2hoYm1Sc1pVOWlhaTV1WVcxbGMzQmhZMlVnS1NBcElDWW1YRzVjZEZ4MFhIUmNkRngwS0NBaGMyVnNaV04wYjNJZ2ZId2djMlZzWldOMGIzSWdQVDA5SUdoaGJtUnNaVTlpYWk1elpXeGxZM1J2Y2lCOGZGeHVYSFJjZEZ4MFhIUmNkRngwYzJWc1pXTjBiM0lnUFQwOUlGd2lLaXBjSWlBbUppQm9ZVzVrYkdWUFltb3VjMlZzWldOMGIzSWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUm9ZVzVrYkdWeWN5NXpjR3hwWTJVb0lHb3NJREVnS1R0Y2JseHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2FHRnVaR3hsVDJKcUxuTmxiR1ZqZEc5eUlDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFHRnVaR3hsY25NdVpHVnNaV2RoZEdWRGIzVnVkQzB0TzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJwWmlBb0lITndaV05wWVd3dWNtVnRiM1psSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYzNCbFkybGhiQzV5WlcxdmRtVXVZMkZzYkNnZ1pXeGxiU3dnYUdGdVpHeGxUMkpxSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGSmxiVzkyWlNCblpXNWxjbWxqSUdWMlpXNTBJR2hoYm1Sc1pYSWdhV1lnZDJVZ2NtVnRiM1psWkNCemIyMWxkR2hwYm1jZ1lXNWtJRzV2SUcxdmNtVWdhR0Z1Wkd4bGNuTWdaWGhwYzNSY2JseDBYSFJjZEM4dklDaGhkbTlwWkhNZ2NHOTBaVzUwYVdGc0lHWnZjaUJsYm1Sc1pYTnpJSEpsWTNWeWMybHZiaUJrZFhKcGJtY2djbVZ0YjNaaGJDQnZaaUJ6Y0dWamFXRnNJR1YyWlc1MElHaGhibVJzWlhKektWeHVYSFJjZEZ4MGFXWWdLQ0J2Y21sblEyOTFiblFnSmlZZ0lXaGhibVJzWlhKekxteGxibWQwYUNBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NBaGMzQmxZMmxoYkM1MFpXRnlaRzkzYmlCOGZGeHVYSFJjZEZ4MFhIUmNkSE53WldOcFlXd3VkR1ZoY21SdmQyNHVZMkZzYkNnZ1pXeGxiU3dnYm1GdFpYTndZV05sY3l3Z1pXeGxiVVJoZEdFdWFHRnVaR3hsSUNrZ1BUMDlJR1poYkhObElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG5KbGJXOTJaVVYyWlc1MEtDQmxiR1Z0TENCMGVYQmxMQ0JsYkdWdFJHRjBZUzVvWVc1a2JHVWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RHUmxiR1YwWlNCbGRtVnVkSE5iSUhSNWNHVWdYVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJTWlcxdmRtVWdaR0YwWVNCaGJtUWdkR2hsSUdWNGNHRnVaRzhnYVdZZ2FYUW5jeUJ1YnlCc2IyNW5aWElnZFhObFpGeHVYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtbHpSVzF3ZEhsUFltcGxZM1FvSUdWMlpXNTBjeUFwSUNrZ2UxeHVYSFJjZEZ4MFpHRjBZVkJ5YVhZdWNtVnRiM1psS0NCbGJHVnRMQ0JjSW1oaGJtUnNaU0JsZG1WdWRITmNJaUFwTzF4dVhIUmNkSDFjYmx4MGZTeGNibHh1WEhSa2FYTndZWFJqYURvZ1puVnVZM1JwYjI0b0lHNWhkR2wyWlVWMlpXNTBJQ2tnZTF4dVhHNWNkRngwTHk4Z1RXRnJaU0JoSUhkeWFYUmhZbXhsSUdwUmRXVnllUzVGZG1WdWRDQm1jbTl0SUhSb1pTQnVZWFJwZG1VZ1pYWmxiblFnYjJKcVpXTjBYRzVjZEZ4MGRtRnlJR1YyWlc1MElEMGdhbEYxWlhKNUxtVjJaVzUwTG1acGVDZ2dibUYwYVhabFJYWmxiblFnS1R0Y2JseHVYSFJjZEhaaGNpQnBMQ0JxTENCeVpYUXNJRzFoZEdOb1pXUXNJR2hoYm1Sc1pVOWlhaXdnYUdGdVpHeGxjbEYxWlhWbExGeHVYSFJjZEZ4MFlYSm5jeUE5SUc1bGR5QkJjbkpoZVNnZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBcExGeHVYSFJjZEZ4MGFHRnVaR3hsY25NZ1BTQW9JR1JoZEdGUWNtbDJMbWRsZENnZ2RHaHBjeXdnWENKbGRtVnVkSE5jSWlBcElIeDhJSHQ5SUNsYklHVjJaVzUwTG5SNWNHVWdYU0I4ZkNCYlhTeGNibHgwWEhSY2RITndaV05wWVd3Z1BTQnFVWFZsY25rdVpYWmxiblF1YzNCbFkybGhiRnNnWlhabGJuUXVkSGx3WlNCZElIeDhJSHQ5TzF4dVhHNWNkRngwTHk4Z1ZYTmxJSFJvWlNCbWFYZ3RaV1FnYWxGMVpYSjVMa1YyWlc1MElISmhkR2hsY2lCMGFHRnVJSFJvWlNBb2NtVmhaQzF2Ym14NUtTQnVZWFJwZG1VZ1pYWmxiblJjYmx4MFhIUmhjbWR6V3lBd0lGMGdQU0JsZG1WdWREdGNibHh1WEhSY2RHWnZjaUFvSUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWVhKbmMxc2dhU0JkSUQwZ1lYSm5kVzFsYm5Seld5QnBJRjA3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBaWFpsYm5RdVpHVnNaV2RoZEdWVVlYSm5aWFFnUFNCMGFHbHpPMXh1WEc1Y2RGeDBMeThnUTJGc2JDQjBhR1VnY0hKbFJHbHpjR0YwWTJnZ2FHOXZheUJtYjNJZ2RHaGxJRzFoY0hCbFpDQjBlWEJsTENCaGJtUWdiR1YwSUdsMElHSmhhV3dnYVdZZ1pHVnphWEpsWkZ4dVhIUmNkR2xtSUNnZ2MzQmxZMmxoYkM1d2NtVkVhWE53WVhSamFDQW1KaUJ6Y0dWamFXRnNMbkJ5WlVScGMzQmhkR05vTG1OaGJHd29JSFJvYVhNc0lHVjJaVzUwSUNrZ1BUMDlJR1poYkhObElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFUmxkR1Z5YldsdVpTQm9ZVzVrYkdWeWMxeHVYSFJjZEdoaGJtUnNaWEpSZFdWMVpTQTlJR3BSZFdWeWVTNWxkbVZ1ZEM1b1lXNWtiR1Z5Y3k1allXeHNLQ0IwYUdsekxDQmxkbVZ1ZEN3Z2FHRnVaR3hsY25NZ0tUdGNibHh1WEhSY2RDOHZJRkoxYmlCa1pXeGxaMkYwWlhNZ1ptbHljM1E3SUhSb1pYa2diV0Y1SUhkaGJuUWdkRzhnYzNSdmNDQndjbTl3WVdkaGRHbHZiaUJpWlc1bFlYUm9JSFZ6WEc1Y2RGeDBhU0E5SURBN1hHNWNkRngwZDJocGJHVWdLQ0FvSUcxaGRHTm9aV1FnUFNCb1lXNWtiR1Z5VVhWbGRXVmJJR2tyS3lCZElDa2dKaVlnSVdWMlpXNTBMbWx6VUhKdmNHRm5ZWFJwYjI1VGRHOXdjR1ZrS0NrZ0tTQjdYRzVjZEZ4MFhIUmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBJRDBnYldGMFkyaGxaQzVsYkdWdE8xeHVYRzVjZEZ4MFhIUnFJRDBnTUR0Y2JseDBYSFJjZEhkb2FXeGxJQ2dnS0NCb1lXNWtiR1ZQWW1vZ1BTQnRZWFJqYUdWa0xtaGhibVJzWlhKeld5QnFLeXNnWFNBcElDWW1YRzVjZEZ4MFhIUmNkQ0ZsZG1WdWRDNXBjMGx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1VTNSdmNIQmxaQ2dwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUZSeWFXZG5aWEpsWkNCbGRtVnVkQ0J0ZFhOMElHVnBkR2hsY2lBeEtTQm9ZWFpsSUc1dklHNWhiV1Z6Y0dGalpTd2diM0lnTWlrZ2FHRjJaU0J1WVcxbGMzQmhZMlVvY3lsY2JseDBYSFJjZEZ4MEx5OGdZU0J6ZFdKelpYUWdiM0lnWlhGMVlXd2dkRzhnZEdodmMyVWdhVzRnZEdobElHSnZkVzVrSUdWMlpXNTBJQ2hpYjNSb0lHTmhiaUJvWVhabElHNXZJRzVoYldWemNHRmpaU2t1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJV1YyWlc1MExuSnVZVzFsYzNCaFkyVWdmSHdnWlhabGJuUXVjbTVoYldWemNHRmpaUzUwWlhOMEtDQm9ZVzVrYkdWUFltb3VibUZ0WlhOd1lXTmxJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJsZG1WdWRDNW9ZVzVrYkdWUFltb2dQU0JvWVc1a2JHVlBZbW83WEc1Y2RGeDBYSFJjZEZ4MFpYWmxiblF1WkdGMFlTQTlJR2hoYm1Sc1pVOWlhaTVrWVhSaE8xeHVYRzVjZEZ4MFhIUmNkRngwY21WMElEMGdLQ0FvSUdwUmRXVnllUzVsZG1WdWRDNXpjR1ZqYVdGc1d5Qm9ZVzVrYkdWUFltb3ViM0pwWjFSNWNHVWdYU0I4ZkNCN2ZTQXBMbWhoYm1Sc1pTQjhmRnh1WEhSY2RGeDBYSFJjZEZ4MGFHRnVaR3hsVDJKcUxtaGhibVJzWlhJZ0tTNWhjSEJzZVNnZ2JXRjBZMmhsWkM1bGJHVnRMQ0JoY21keklDazdYRzVjYmx4MFhIUmNkRngwWEhScFppQW9JSEpsZENBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NBb0lHVjJaVzUwTG5KbGMzVnNkQ0E5SUhKbGRDQXBJRDA5UFNCbVlXeHpaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFpYWmxiblF1YzNSdmNGQnliM0JoWjJGMGFXOXVLQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1EyRnNiQ0IwYUdVZ2NHOXpkRVJwYzNCaGRHTm9JR2h2YjJzZ1ptOXlJSFJvWlNCdFlYQndaV1FnZEhsd1pWeHVYSFJjZEdsbUlDZ2djM0JsWTJsaGJDNXdiM04wUkdsemNHRjBZMmdnS1NCN1hHNWNkRngwWEhSemNHVmphV0ZzTG5CdmMzUkVhWE53WVhSamFDNWpZV3hzS0NCMGFHbHpMQ0JsZG1WdWRDQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCbGRtVnVkQzV5WlhOMWJIUTdYRzVjZEgwc1hHNWNibHgwYUdGdVpHeGxjbk02SUdaMWJtTjBhVzl1S0NCbGRtVnVkQ3dnYUdGdVpHeGxjbk1nS1NCN1hHNWNkRngwZG1GeUlHa3NJR2hoYm1Sc1pVOWlhaXdnYzJWc0xDQnRZWFJqYUdWa1NHRnVaR3hsY25Nc0lHMWhkR05vWldSVFpXeGxZM1J2Y25Nc1hHNWNkRngwWEhSb1lXNWtiR1Z5VVhWbGRXVWdQU0JiWFN4Y2JseDBYSFJjZEdSbGJHVm5ZWFJsUTI5MWJuUWdQU0JvWVc1a2JHVnljeTVrWld4bFoyRjBaVU52ZFc1MExGeHVYSFJjZEZ4MFkzVnlJRDBnWlhabGJuUXVkR0Z5WjJWME8xeHVYRzVjZEZ4MEx5OGdSbWx1WkNCa1pXeGxaMkYwWlNCb1lXNWtiR1Z5YzF4dVhIUmNkR2xtSUNnZ1pHVnNaV2RoZEdWRGIzVnVkQ0FtSmx4dVhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRsY2JseDBYSFJjZEM4dklFSnNZV05yTFdodmJHVWdVMVpISUR4MWMyVStJR2x1YzNSaGJtTmxJSFJ5WldWeklDaDBjbUZqTFRFek1UZ3dLVnh1WEhSY2RGeDBZM1Z5TG01dlpHVlVlWEJsSUNZbVhHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRVpwY21WbWIzZ2dQRDAwTWx4dVhIUmNkRngwTHk4Z1UzVndjSEpsYzNNZ2MzQmxZeTEyYVc5c1lYUnBibWNnWTJ4cFkydHpJR2x1WkdsallYUnBibWNnWVNCdWIyNHRjSEpwYldGeWVTQndiMmx1ZEdWeUlHSjFkSFJ2YmlBb2RISmhZeTB6T0RZeEtWeHVYSFJjZEZ4MEx5OGdhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDBSUFRTMU1aWFpsYkMwekxVVjJaVzUwY3k4alpYWmxiblF0ZEhsd1pTMWpiR2xqYTF4dVhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdNVEVnYjI1c2VWeHVYSFJjZEZ4MEx5OGdMaTR1WW5WMElHNXZkQ0JoY25KdmR5QnJaWGtnWENKamJHbGphM05jSWlCdlppQnlZV1JwYnlCcGJuQjFkSE1zSUhkb2FXTm9JR05oYmlCb1lYWmxJR0JpZFhSMGIyNWdJQzB4SUNobmFDMHlNelF6S1Z4dVhIUmNkRngwSVNnZ1pYWmxiblF1ZEhsd1pTQTlQVDBnWENKamJHbGphMXdpSUNZbUlHVjJaVzUwTG1KMWRIUnZiaUErUFNBeElDa2dLU0I3WEc1Y2JseDBYSFJjZEdadmNpQW9JRHNnWTNWeUlDRTlQU0IwYUdsek95QmpkWElnUFNCamRYSXVjR0Z5Wlc1MFRtOWtaU0I4ZkNCMGFHbHpJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRVJ2YmlkMElHTm9aV05ySUc1dmJpMWxiR1Z0Wlc1MGN5QW9JekV6TWpBNEtWeHVYSFJjZEZ4MFhIUXZMeUJFYjI0bmRDQndjbTlqWlhOeklHTnNhV05yY3lCdmJpQmthWE5oWW14bFpDQmxiR1Z0Wlc1MGN5QW9Jelk1TVRFc0lDTTRNVFkxTENBak1URXpPRElzSUNNeE1UYzJOQ2xjYmx4MFhIUmNkRngwYVdZZ0tDQmpkWEl1Ym05a1pWUjVjR1VnUFQwOUlERWdKaVlnSVNnZ1pYWmxiblF1ZEhsd1pTQTlQVDBnWENKamJHbGphMXdpSUNZbUlHTjFjaTVrYVhOaFlteGxaQ0E5UFQwZ2RISjFaU0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRzFoZEdOb1pXUklZVzVrYkdWeWN5QTlJRnRkTzF4dVhIUmNkRngwWEhSY2RHMWhkR05vWldSVFpXeGxZM1J2Y25NZ1BTQjdmVHRjYmx4MFhIUmNkRngwWEhSbWIzSWdLQ0JwSUQwZ01Ec2dhU0E4SUdSbGJHVm5ZWFJsUTI5MWJuUTdJR2tyS3lBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdoaGJtUnNaVTlpYWlBOUlHaGhibVJzWlhKeld5QnBJRjA3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUVSdmJpZDBJR052Ym1ac2FXTjBJSGRwZEdnZ1QySnFaV04wTG5CeWIzUnZkSGx3WlNCd2NtOXdaWEowYVdWeklDZ2pNVE15TURNcFhHNWNkRngwWEhSY2RGeDBYSFJ6Wld3Z1BTQm9ZVzVrYkdWUFltb3VjMlZzWldOMGIzSWdLeUJjSWlCY0lqdGNibHh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0J0WVhSamFHVmtVMlZzWldOMGIzSnpXeUJ6Wld3Z1hTQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSdFlYUmphR1ZrVTJWc1pXTjBiM0p6V3lCelpXd2dYU0E5SUdoaGJtUnNaVTlpYWk1dVpXVmtjME52Ym5SbGVIUWdQMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTZ2djMlZzTENCMGFHbHpJQ2t1YVc1a1pYZ29JR04xY2lBcElENGdMVEVnT2x4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdwUmRXVnllUzVtYVc1a0tDQnpaV3dzSUhSb2FYTXNJRzUxYkd3c0lGc2dZM1Z5SUYwZ0tTNXNaVzVuZEdnN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUcxaGRHTm9aV1JUWld4bFkzUnZjbk5iSUhObGJDQmRJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ0WVhSamFHVmtTR0Z1Wkd4bGNuTXVjSFZ6YUNnZ2FHRnVaR3hsVDJKcUlDazdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEdsbUlDZ2diV0YwWTJobFpFaGhibVJzWlhKekxteGxibWQwYUNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdoaGJtUnNaWEpSZFdWMVpTNXdkWE5vS0NCN0lHVnNaVzA2SUdOMWNpd2dhR0Z1Wkd4bGNuTTZJRzFoZEdOb1pXUklZVzVrYkdWeWN5QjlJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRV1JrSUhSb1pTQnlaVzFoYVc1cGJtY2dLR1JwY21WamRHeDVMV0p2ZFc1a0tTQm9ZVzVrYkdWeWMxeHVYSFJjZEdOMWNpQTlJSFJvYVhNN1hHNWNkRngwYVdZZ0tDQmtaV3hsWjJGMFpVTnZkVzUwSUR3Z2FHRnVaR3hsY25NdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MGFHRnVaR3hsY2xGMVpYVmxMbkIxYzJnb0lIc2daV3hsYlRvZ1kzVnlMQ0JvWVc1a2JHVnljem9nYUdGdVpHeGxjbk11YzJ4cFkyVW9JR1JsYkdWbllYUmxRMjkxYm5RZ0tTQjlJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHaGhibVJzWlhKUmRXVjFaVHRjYmx4MGZTeGNibHh1WEhSaFpHUlFjbTl3T2lCbWRXNWpkR2x2YmlnZ2JtRnRaU3dnYUc5dmF5QXBJSHRjYmx4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvSUdwUmRXVnllUzVGZG1WdWRDNXdjbTkwYjNSNWNHVXNJRzVoYldVc0lIdGNibHgwWEhSY2RHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNWNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNWNibHgwWEhSY2RHZGxkRG9nYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvSUdodmIyc2dLU0EvWEc1Y2RGeDBYSFJjZEdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2RHaHBjeTV2Y21sbmFXNWhiRVYyWlc1MElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2FHOXZheWdnZEdocGN5NXZjbWxuYVc1aGJFVjJaVzUwSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5SURwY2JseDBYSFJjZEZ4MFpuVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQjBhR2x6TG05eWFXZHBibUZzUlhabGJuUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TG05eWFXZHBibUZzUlhabGJuUmJJRzVoYldVZ1hUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgwc1hHNWNibHgwWEhSY2RITmxkRG9nWm5WdVkzUnBiMjRvSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwWEhSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29JSFJvYVhNc0lHNWhiV1VzSUh0Y2JseDBYSFJjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVYSFJjZEZ4MFhIUmNkR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmx4MFhIUmNkRngwWEhSM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmx4MFhIUmNkRngwWEhSMllXeDFaVG9nZG1Gc2RXVmNibHgwWEhSY2RGeDBmU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBnS1R0Y2JseDBmU3hjYmx4dVhIUm1hWGc2SUdaMWJtTjBhVzl1S0NCdmNtbG5hVzVoYkVWMlpXNTBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnZjbWxuYVc1aGJFVjJaVzUwV3lCcVVYVmxjbmt1Wlhod1lXNWtieUJkSUQ5Y2JseDBYSFJjZEc5eWFXZHBibUZzUlhabGJuUWdPbHh1WEhSY2RGeDBibVYzSUdwUmRXVnllUzVGZG1WdWRDZ2diM0pwWjJsdVlXeEZkbVZ1ZENBcE8xeHVYSFI5TEZ4dVhHNWNkSE53WldOcFlXdzZJSHRjYmx4MFhIUnNiMkZrT2lCN1hHNWNibHgwWEhSY2RDOHZJRkJ5WlhabGJuUWdkSEpwWjJkbGNtVmtJR2x0WVdkbExteHZZV1FnWlhabGJuUnpJR1p5YjIwZ1luVmlZbXhwYm1jZ2RHOGdkMmx1Wkc5M0xteHZZV1JjYmx4MFhIUmNkRzV2UW5WaVlteGxPaUIwY25WbFhHNWNkRngwZlN4Y2JseDBYSFJtYjJOMWN6b2dlMXh1WEc1Y2RGeDBYSFF2THlCR2FYSmxJRzVoZEdsMlpTQmxkbVZ1ZENCcFppQndiM056YVdKc1pTQnpieUJpYkhWeUwyWnZZM1Z6SUhObGNYVmxibU5sSUdseklHTnZjbkpsWTNSY2JseDBYSFJjZEhSeWFXZG5aWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUhSb2FYTWdJVDA5SUhOaFptVkJZM1JwZG1WRmJHVnRaVzUwS0NrZ0ppWWdkR2hwY3k1bWIyTjFjeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUjBhR2x6TG1adlkzVnpLQ2s3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwWkdWc1pXZGhkR1ZVZVhCbE9pQmNJbVp2WTNWemFXNWNJbHh1WEhSY2RIMHNYRzVjZEZ4MFlteDFjam9nZTF4dVhIUmNkRngwZEhKcFoyZGxjam9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2dnZEdocGN5QTlQVDBnYzJGbVpVRmpkR2wyWlVWc1pXMWxiblFvS1NBbUppQjBhR2x6TG1Kc2RYSWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTVpYkhWeUtDazdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlMRnh1WEhSY2RGeDBaR1ZzWldkaGRHVlVlWEJsT2lCY0ltWnZZM1Z6YjNWMFhDSmNibHgwWEhSOUxGeHVYSFJjZEdOc2FXTnJPaUI3WEc1Y2JseDBYSFJjZEM4dklFWnZjaUJqYUdWamEySnZlQ3dnWm1seVpTQnVZWFJwZG1VZ1pYWmxiblFnYzI4Z1kyaGxZMnRsWkNCemRHRjBaU0IzYVd4c0lHSmxJSEpwWjJoMFhHNWNkRngwWEhSMGNtbG5aMlZ5T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBhV1lnS0NCMGFHbHpMblI1Y0dVZ1BUMDlJRndpWTJobFkydGliM2hjSWlBbUppQjBhR2x6TG1Oc2FXTnJJQ1ltSUdwUmRXVnllUzV1YjJSbFRtRnRaU2dnZEdocGN5d2dYQ0pwYm5CMWRGd2lJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1amJHbGpheWdwTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MEx5OGdSbTl5SUdOeWIzTnpMV0p5YjNkelpYSWdZMjl1YzJsemRHVnVZM2tzSUdSdmJpZDBJR1pwY21VZ2JtRjBhWFpsSUM1amJHbGpheWdwSUc5dUlHeHBibXR6WEc1Y2RGeDBYSFJmWkdWbVlYVnNkRG9nWm5WdVkzUnBiMjRvSUdWMlpXNTBJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnYWxGMVpYSjVMbTV2WkdWT1lXMWxLQ0JsZG1WdWRDNTBZWEpuWlhRc0lGd2lZVndpSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlN4Y2JseHVYSFJjZEdKbFptOXlaWFZ1Ykc5aFpEb2dlMXh1WEhSY2RGeDBjRzl6ZEVScGMzQmhkR05vT2lCbWRXNWpkR2x2YmlnZ1pYWmxiblFnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nUm1seVpXWnZlQ0F5TUN0Y2JseDBYSFJjZEZ4MEx5OGdSbWx5WldadmVDQmtiMlZ6YmlkMElHRnNaWEowSUdsbUlIUm9aU0J5WlhSMWNtNVdZV3gxWlNCbWFXVnNaQ0JwY3lCdWIzUWdjMlYwTGx4dVhIUmNkRngwWEhScFppQW9JR1YyWlc1MExuSmxjM1ZzZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUdWMlpXNTBMbTl5YVdkcGJtRnNSWFpsYm5RZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWlhabGJuUXViM0pwWjJsdVlXeEZkbVZ1ZEM1eVpYUjFjbTVXWVd4MVpTQTlJR1YyWlc1MExuSmxjM1ZzZER0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmVnh1ZlR0Y2JseHVhbEYxWlhKNUxuSmxiVzkyWlVWMlpXNTBJRDBnWm5WdVkzUnBiMjRvSUdWc1pXMHNJSFI1Y0dVc0lHaGhibVJzWlNBcElIdGNibHh1WEhRdkx5QlVhR2x6SUZ3aWFXWmNJaUJwY3lCdVpXVmtaV1FnWm05eUlIQnNZV2x1SUc5aWFtVmpkSE5jYmx4MGFXWWdLQ0JsYkdWdExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWdLU0I3WEc1Y2RGeDBaV3hsYlM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDQjBlWEJsTENCb1lXNWtiR1VnS1R0Y2JseDBmVnh1ZlR0Y2JseHVhbEYxWlhKNUxrVjJaVzUwSUQwZ1puVnVZM1JwYjI0b0lITnlZeXdnY0hKdmNITWdLU0I3WEc1Y2JseDBMeThnUVd4c2IzY2dhVzV6ZEdGdWRHbGhkR2x2YmlCM2FYUm9iM1YwSUhSb1pTQW5ibVYzSnlCclpYbDNiM0prWEc1Y2RHbG1JQ2dnSVNnZ2RHaHBjeUJwYm5OMFlXNWpaVzltSUdwUmRXVnllUzVGZG1WdWRDQXBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnVaWGNnYWxGMVpYSjVMa1YyWlc1MEtDQnpjbU1zSUhCeWIzQnpJQ2s3WEc1Y2RIMWNibHh1WEhRdkx5QkZkbVZ1ZENCdlltcGxZM1JjYmx4MGFXWWdLQ0J6Y21NZ0ppWWdjM0pqTG5SNWNHVWdLU0I3WEc1Y2RGeDBkR2hwY3k1dmNtbG5hVzVoYkVWMlpXNTBJRDBnYzNKak8xeHVYSFJjZEhSb2FYTXVkSGx3WlNBOUlITnlZeTUwZVhCbE8xeHVYRzVjZEZ4MEx5OGdSWFpsYm5SeklHSjFZbUpzYVc1bklIVndJSFJvWlNCa2IyTjFiV1Z1ZENCdFlYa2dhR0YyWlNCaVpXVnVJRzFoY210bFpDQmhjeUJ3Y21WMlpXNTBaV1JjYmx4MFhIUXZMeUJpZVNCaElHaGhibVJzWlhJZ2JHOTNaWElnWkc5M2JpQjBhR1VnZEhKbFpUc2djbVZtYkdWamRDQjBhR1VnWTI5eWNtVmpkQ0IyWVd4MVpTNWNibHgwWEhSMGFHbHpMbWx6UkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0E5SUhOeVl5NWtaV1poZFd4MFVISmxkbVZ1ZEdWa0lIeDhYRzVjZEZ4MFhIUmNkSE55WXk1a1pXWmhkV3gwVUhKbGRtVnVkR1ZrSUQwOVBTQjFibVJsWm1sdVpXUWdKaVpjYmx4dVhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkJibVJ5YjJsa0lEdzlNaTR6SUc5dWJIbGNibHgwWEhSY2RGeDBjM0pqTG5KbGRIVnlibFpoYkhWbElEMDlQU0JtWVd4elpTQS9YRzVjZEZ4MFhIUnlaWFIxY201VWNuVmxJRHBjYmx4MFhIUmNkSEpsZEhWeWJrWmhiSE5sTzF4dVhHNWNkRngwTHk4Z1EzSmxZWFJsSUhSaGNtZGxkQ0J3Y205d1pYSjBhV1Z6WEc1Y2RGeDBMeThnVTNWd2NHOXlkRG9nVTJGbVlYSnBJRHc5TmlBdElEY2diMjVzZVZ4dVhIUmNkQzh2SUZSaGNtZGxkQ0J6YUc5MWJHUWdibTkwSUdKbElHRWdkR1Y0ZENCdWIyUmxJQ2dqTlRBMExDQWpNVE14TkRNcFhHNWNkRngwZEdocGN5NTBZWEpuWlhRZ1BTQW9JSE55WXk1MFlYSm5aWFFnSmlZZ2MzSmpMblJoY21kbGRDNXViMlJsVkhsd1pTQTlQVDBnTXlBcElEOWNibHgwWEhSY2RITnlZeTUwWVhKblpYUXVjR0Z5Wlc1MFRtOWtaU0E2WEc1Y2RGeDBYSFJ6Y21NdWRHRnlaMlYwTzF4dVhHNWNkRngwZEdocGN5NWpkWEp5Wlc1MFZHRnlaMlYwSUQwZ2MzSmpMbU4xY25KbGJuUlVZWEpuWlhRN1hHNWNkRngwZEdocGN5NXlaV3hoZEdWa1ZHRnlaMlYwSUQwZ2MzSmpMbkpsYkdGMFpXUlVZWEpuWlhRN1hHNWNibHgwTHk4Z1JYWmxiblFnZEhsd1pWeHVYSFI5SUdWc2MyVWdlMXh1WEhSY2RIUm9hWE11ZEhsd1pTQTlJSE55WXp0Y2JseDBmVnh1WEc1Y2RDOHZJRkIxZENCbGVIQnNhV05wZEd4NUlIQnliM1pwWkdWa0lIQnliM0JsY25ScFpYTWdiMjUwYnlCMGFHVWdaWFpsYm5RZ2IySnFaV04wWEc1Y2RHbG1JQ2dnY0hKdmNITWdLU0I3WEc1Y2RGeDBhbEYxWlhKNUxtVjRkR1Z1WkNnZ2RHaHBjeXdnY0hKdmNITWdLVHRjYmx4MGZWeHVYRzVjZEM4dklFTnlaV0YwWlNCaElIUnBiV1Z6ZEdGdGNDQnBaaUJwYm1OdmJXbHVaeUJsZG1WdWRDQmtiMlZ6YmlkMElHaGhkbVVnYjI1bFhHNWNkSFJvYVhNdWRHbHRaVk4wWVcxd0lEMGdjM0pqSUNZbUlITnlZeTUwYVcxbFUzUmhiWEFnZkh3Z2FsRjFaWEo1TG01dmR5Z3BPMXh1WEc1Y2RDOHZJRTFoY21zZ2FYUWdZWE1nWm1sNFpXUmNibHgwZEdocGMxc2dhbEYxWlhKNUxtVjRjR0Z1Wkc4Z1hTQTlJSFJ5ZFdVN1hHNTlPMXh1WEc0dkx5QnFVWFZsY25rdVJYWmxiblFnYVhNZ1ltRnpaV1FnYjI0Z1JFOU5NeUJGZG1WdWRITWdZWE1nYzNCbFkybG1hV1ZrSUdKNUlIUm9aU0JGUTAxQlUyTnlhWEIwSUV4aGJtZDFZV2RsSUVKcGJtUnBibWRjYmk4dklHaDBkSEJ6T2k4dmQzZDNMbmN6TG05eVp5OVVVaTh5TURBekwxZEVMVVJQVFMxTVpYWmxiQzB6TFVWMlpXNTBjeTB5TURBek1ETXpNUzlsWTIxaExYTmpjbWx3ZEMxaWFXNWthVzVuTG1oMGJXeGNibXBSZFdWeWVTNUZkbVZ1ZEM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzVjZEdOdmJuTjBjblZqZEc5eU9pQnFVWFZsY25rdVJYWmxiblFzWEc1Y2RHbHpSR1ZtWVhWc2RGQnlaWFpsYm5SbFpEb2djbVYwZFhKdVJtRnNjMlVzWEc1Y2RHbHpVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtPaUJ5WlhSMWNtNUdZV3h6WlN4Y2JseDBhWE5KYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmxOMGIzQndaV1E2SUhKbGRIVnlia1poYkhObExGeHVYSFJwYzFOcGJYVnNZWFJsWkRvZ1ptRnNjMlVzWEc1Y2JseDBjSEpsZG1WdWRFUmxabUYxYkhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RIWmhjaUJsSUQwZ2RHaHBjeTV2Y21sbmFXNWhiRVYyWlc1ME8xeHVYRzVjZEZ4MGRHaHBjeTVwYzBSbFptRjFiSFJRY21WMlpXNTBaV1FnUFNCeVpYUjFjbTVVY25WbE8xeHVYRzVjZEZ4MGFXWWdLQ0JsSUNZbUlDRjBhR2x6TG1selUybHRkV3hoZEdWa0lDa2dlMXh1WEhSY2RGeDBaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1WEhSY2RIMWNibHgwZlN4Y2JseDBjM1J2Y0ZCeWIzQmhaMkYwYVc5dU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUjJZWElnWlNBOUlIUm9hWE11YjNKcFoybHVZV3hGZG1WdWREdGNibHh1WEhSY2RIUm9hWE11YVhOUWNtOXdZV2RoZEdsdmJsTjBiM0J3WldRZ1BTQnlaWFIxY201VWNuVmxPMXh1WEc1Y2RGeDBhV1lnS0NCbElDWW1JQ0YwYUdsekxtbHpVMmx0ZFd4aGRHVmtJQ2tnZTF4dVhIUmNkRngwWlM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JseDBYSFI5WEc1Y2RIMHNYRzVjZEhOMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwZG1GeUlHVWdQU0IwYUdsekxtOXlhV2RwYm1Gc1JYWmxiblE3WEc1Y2JseDBYSFIwYUdsekxtbHpTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtJRDBnY21WMGRYSnVWSEoxWlR0Y2JseHVYSFJjZEdsbUlDZ2daU0FtSmlBaGRHaHBjeTVwYzFOcGJYVnNZWFJsWkNBcElIdGNibHgwWEhSY2RHVXVjM1J2Y0VsdGJXVmthV0YwWlZCeWIzQmhaMkYwYVc5dUtDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRHaHBjeTV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmx4MGZWeHVmVHRjYmx4dUx5OGdTVzVqYkhWa1pYTWdZV3hzSUdOdmJXMXZiaUJsZG1WdWRDQndjbTl3Y3lCcGJtTnNkV1JwYm1jZ1MyVjVSWFpsYm5RZ1lXNWtJRTF2ZFhObFJYWmxiblFnYzNCbFkybG1hV01nY0hKdmNITmNibXBSZFdWeWVTNWxZV05vS0NCN1hHNWNkR0ZzZEV0bGVUb2dkSEoxWlN4Y2JseDBZblZpWW14bGN6b2dkSEoxWlN4Y2JseDBZMkZ1WTJWc1lXSnNaVG9nZEhKMVpTeGNibHgwWTJoaGJtZGxaRlJ2ZFdOb1pYTTZJSFJ5ZFdVc1hHNWNkR04wY214TFpYazZJSFJ5ZFdVc1hHNWNkR1JsZEdGcGJEb2dkSEoxWlN4Y2JseDBaWFpsYm5SUWFHRnpaVG9nZEhKMVpTeGNibHgwYldWMFlVdGxlVG9nZEhKMVpTeGNibHgwY0dGblpWZzZJSFJ5ZFdVc1hHNWNkSEJoWjJWWk9pQjBjblZsTEZ4dVhIUnphR2xtZEV0bGVUb2dkSEoxWlN4Y2JseDBkbWxsZHpvZ2RISjFaU3hjYmx4MFhDSmphR0Z5WENJNklIUnlkV1VzWEc1Y2RHTm9ZWEpEYjJSbE9pQjBjblZsTEZ4dVhIUnJaWGs2SUhSeWRXVXNYRzVjZEd0bGVVTnZaR1U2SUhSeWRXVXNYRzVjZEdKMWRIUnZiam9nZEhKMVpTeGNibHgwWW5WMGRHOXVjem9nZEhKMVpTeGNibHgwWTJ4cFpXNTBXRG9nZEhKMVpTeGNibHgwWTJ4cFpXNTBXVG9nZEhKMVpTeGNibHgwYjJabWMyVjBXRG9nZEhKMVpTeGNibHgwYjJabWMyVjBXVG9nZEhKMVpTeGNibHgwY0c5cGJuUmxja2xrT2lCMGNuVmxMRnh1WEhSd2IybHVkR1Z5Vkhsd1pUb2dkSEoxWlN4Y2JseDBjMk55WldWdVdEb2dkSEoxWlN4Y2JseDBjMk55WldWdVdUb2dkSEoxWlN4Y2JseDBkR0Z5WjJWMFZHOTFZMmhsY3pvZ2RISjFaU3hjYmx4MGRHOUZiR1Z0Wlc1ME9pQjBjblZsTEZ4dVhIUjBiM1ZqYUdWek9pQjBjblZsTEZ4dVhHNWNkSGRvYVdOb09pQm1kVzVqZEdsdmJpZ2daWFpsYm5RZ0tTQjdYRzVjZEZ4MGRtRnlJR0oxZEhSdmJpQTlJR1YyWlc1MExtSjFkSFJ2Ymp0Y2JseHVYSFJjZEM4dklFRmtaQ0IzYUdsamFDQm1iM0lnYTJWNUlHVjJaVzUwYzF4dVhIUmNkR2xtSUNnZ1pYWmxiblF1ZDJocFkyZ2dQVDBnYm5Wc2JDQW1KaUJ5YTJWNVJYWmxiblF1ZEdWemRDZ2daWFpsYm5RdWRIbHdaU0FwSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWMlpXNTBMbU5vWVhKRGIyUmxJQ0U5SUc1MWJHd2dQeUJsZG1WdWRDNWphR0Z5UTI5a1pTQTZJR1YyWlc1MExtdGxlVU52WkdVN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1FXUmtJSGRvYVdOb0lHWnZjaUJqYkdsamF6b2dNU0E5UFQwZ2JHVm1kRHNnTWlBOVBUMGdiV2xrWkd4bE95QXpJRDA5UFNCeWFXZG9kRnh1WEhSY2RHbG1JQ2dnSVdWMlpXNTBMbmRvYVdOb0lDWW1JR0oxZEhSdmJpQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlISnRiM1Z6WlVWMlpXNTBMblJsYzNRb0lHVjJaVzUwTG5SNWNHVWdLU0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dZblYwZEc5dUlDWWdNU0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SURFN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHbG1JQ2dnWW5WMGRHOXVJQ1lnTWlBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlETTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNnZ1luVjBkRzl1SUNZZ05DQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJREk3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUF3TzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQmxkbVZ1ZEM1M2FHbGphRHRjYmx4MGZWeHVmU3dnYWxGMVpYSjVMbVYyWlc1MExtRmtaRkJ5YjNBZ0tUdGNibHh1THk4Z1EzSmxZWFJsSUcxdmRYTmxaVzUwWlhJdmJHVmhkbVVnWlhabGJuUnpJSFZ6YVc1bklHMXZkWE5sYjNabGNpOXZkWFFnWVc1a0lHVjJaVzUwTFhScGJXVWdZMmhsWTJ0elhHNHZMeUJ6YnlCMGFHRjBJR1YyWlc1MElHUmxiR1ZuWVhScGIyNGdkMjl5YTNNZ2FXNGdhbEYxWlhKNUxseHVMeThnUkc4Z2RHaGxJSE5oYldVZ1ptOXlJSEJ2YVc1MFpYSmxiblJsY2k5d2IybHVkR1Z5YkdWaGRtVWdZVzVrSUhCdmFXNTBaWEp2ZG1WeUwzQnZhVzUwWlhKdmRYUmNiaTh2WEc0dkx5QlRkWEJ3YjNKME9pQlRZV1poY21rZ055QnZibXg1WEc0dkx5QlRZV1poY21rZ2MyVnVaSE1nYlc5MWMyVmxiblJsY2lCMGIyOGdiMlowWlc0N0lITmxaVHBjYmk4dklHaDBkSEJ6T2k4dlluVm5jeTVqYUhKdmJXbDFiUzV2Y21jdmNDOWphSEp2YldsMWJTOXBjM04xWlhNdlpHVjBZV2xzUDJsa1BUUTNNREkxT0Z4dUx5OGdabTl5SUhSb1pTQmtaWE5qY21sd2RHbHZiaUJ2WmlCMGFHVWdZblZuSUNocGRDQmxlR2x6ZEdWa0lHbHVJRzlzWkdWeUlFTm9jbTl0WlNCMlpYSnphVzl1Y3lCaGN5QjNaV3hzS1M1Y2JtcFJkV1Z5ZVM1bFlXTm9LQ0I3WEc1Y2RHMXZkWE5sWlc1MFpYSTZJRndpYlc5MWMyVnZkbVZ5WENJc1hHNWNkRzF2ZFhObGJHVmhkbVU2SUZ3aWJXOTFjMlZ2ZFhSY0lpeGNibHgwY0c5cGJuUmxjbVZ1ZEdWeU9pQmNJbkJ2YVc1MFpYSnZkbVZ5WENJc1hHNWNkSEJ2YVc1MFpYSnNaV0YyWlRvZ1hDSndiMmx1ZEdWeWIzVjBYQ0pjYm4wc0lHWjFibU4wYVc5dUtDQnZjbWxuTENCbWFYZ2dLU0I3WEc1Y2RHcFJkV1Z5ZVM1bGRtVnVkQzV6Y0dWamFXRnNXeUJ2Y21sbklGMGdQU0I3WEc1Y2RGeDBaR1ZzWldkaGRHVlVlWEJsT2lCbWFYZ3NYRzVjZEZ4MFltbHVaRlI1Y0dVNklHWnBlQ3hjYmx4dVhIUmNkR2hoYm1Sc1pUb2dablZ1WTNScGIyNG9JR1YyWlc1MElDa2dlMXh1WEhSY2RGeDBkbUZ5SUhKbGRDeGNibHgwWEhSY2RGeDBkR0Z5WjJWMElEMGdkR2hwY3l4Y2JseDBYSFJjZEZ4MGNtVnNZWFJsWkNBOUlHVjJaVzUwTG5KbGJHRjBaV1JVWVhKblpYUXNYRzVjZEZ4MFhIUmNkR2hoYm1Sc1pVOWlhaUE5SUdWMlpXNTBMbWhoYm1Sc1pVOWlhanRjYmx4dVhIUmNkRngwTHk4Z1JtOXlJRzF2ZFhObFpXNTBaWEl2YkdWaGRtVWdZMkZzYkNCMGFHVWdhR0Z1Wkd4bGNpQnBaaUJ5Wld4aGRHVmtJR2x6SUc5MWRITnBaR1VnZEdobElIUmhjbWRsZEM1Y2JseDBYSFJjZEM4dklFNUNPaUJPYnlCeVpXeGhkR1ZrVkdGeVoyVjBJR2xtSUhSb1pTQnRiM1Z6WlNCc1pXWjBMMlZ1ZEdWeVpXUWdkR2hsSUdKeWIzZHpaWElnZDJsdVpHOTNYRzVjZEZ4MFhIUnBaaUFvSUNGeVpXeGhkR1ZrSUh4OElDZ2djbVZzWVhSbFpDQWhQVDBnZEdGeVoyVjBJQ1ltSUNGcVVYVmxjbmt1WTI5dWRHRnBibk1vSUhSaGNtZGxkQ3dnY21Wc1lYUmxaQ0FwSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR1YyWlc1MExuUjVjR1VnUFNCb1lXNWtiR1ZQWW1vdWIzSnBaMVI1Y0dVN1hHNWNkRngwWEhSY2RISmxkQ0E5SUdoaGJtUnNaVTlpYWk1b1lXNWtiR1Z5TG1Gd2NHeDVLQ0IwYUdsekxDQmhjbWQxYldWdWRITWdLVHRjYmx4MFhIUmNkRngwWlhabGJuUXVkSGx3WlNBOUlHWnBlRHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RGeDBmVnh1WEhSOU8xeHVmU0FwTzF4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjYmx4MGIyNDZJR1oxYm1OMGFXOXVLQ0IwZVhCbGN5d2djMlZzWldOMGIzSXNJR1JoZEdFc0lHWnVJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnZiaWdnZEdocGN5d2dkSGx3WlhNc0lITmxiR1ZqZEc5eUxDQmtZWFJoTENCbWJpQXBPMXh1WEhSOUxGeHVYSFJ2Ym1VNklHWjFibU4wYVc5dUtDQjBlWEJsY3l3Z2MyVnNaV04wYjNJc0lHUmhkR0VzSUdadUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCdmJpZ2dkR2hwY3l3Z2RIbHdaWE1zSUhObGJHVmpkRzl5TENCa1lYUmhMQ0JtYml3Z01TQXBPMXh1WEhSOUxGeHVYSFJ2Wm1ZNklHWjFibU4wYVc5dUtDQjBlWEJsY3l3Z2MyVnNaV04wYjNJc0lHWnVJQ2tnZTF4dVhIUmNkSFpoY2lCb1lXNWtiR1ZQWW1vc0lIUjVjR1U3WEc1Y2RGeDBhV1lnS0NCMGVYQmxjeUFtSmlCMGVYQmxjeTV3Y21WMlpXNTBSR1ZtWVhWc2RDQW1KaUIwZVhCbGN5NW9ZVzVrYkdWUFltb2dLU0I3WEc1Y2JseDBYSFJjZEM4dklDZ2daWFpsYm5RZ0tTQWdaR2x6Y0dGMFkyaGxaQ0JxVVhWbGNua3VSWFpsYm5SY2JseDBYSFJjZEdoaGJtUnNaVTlpYWlBOUlIUjVjR1Z6TG1oaGJtUnNaVTlpYWp0Y2JseDBYSFJjZEdwUmRXVnllU2dnZEhsd1pYTXVaR1ZzWldkaGRHVlVZWEpuWlhRZ0tTNXZabVlvWEc1Y2RGeDBYSFJjZEdoaGJtUnNaVTlpYWk1dVlXMWxjM0JoWTJVZ1AxeHVYSFJjZEZ4MFhIUmNkR2hoYm1Sc1pVOWlhaTV2Y21sblZIbHdaU0FySUZ3aUxsd2lJQ3NnYUdGdVpHeGxUMkpxTG01aGJXVnpjR0ZqWlNBNlhHNWNkRngwWEhSY2RGeDBhR0Z1Wkd4bFQySnFMbTl5YVdkVWVYQmxMRnh1WEhSY2RGeDBYSFJvWVc1a2JHVlBZbW91YzJWc1pXTjBiM0lzWEc1Y2RGeDBYSFJjZEdoaGJtUnNaVTlpYWk1b1lXNWtiR1Z5WEc1Y2RGeDBYSFFwTzF4dVhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwZlZ4dVhIUmNkR2xtSUNnZ2RIbHdaVzltSUhSNWNHVnpJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDa2dlMXh1WEc1Y2RGeDBYSFF2THlBb0lIUjVjR1Z6TFc5aWFtVmpkQ0JiTENCelpXeGxZM1J2Y2wwZ0tWeHVYSFJjZEZ4MFptOXlJQ2dnZEhsd1pTQnBiaUIwZVhCbGN5QXBJSHRjYmx4MFhIUmNkRngwZEdocGN5NXZabVlvSUhSNWNHVXNJSE5sYkdWamRHOXlMQ0IwZVhCbGMxc2dkSGx3WlNCZElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUjlYRzVjZEZ4MGFXWWdLQ0J6Wld4bFkzUnZjaUE5UFQwZ1ptRnNjMlVnZkh3Z2RIbHdaVzltSUhObGJHVmpkRzl5SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnS1NCN1hHNWNibHgwWEhSY2RDOHZJQ2dnZEhsd1pYTWdXeXdnWm01ZElDbGNibHgwWEhSY2RHWnVJRDBnYzJWc1pXTjBiM0k3WEc1Y2RGeDBYSFJ6Wld4bFkzUnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JseDBYSFI5WEc1Y2RGeDBhV1lnS0NCbWJpQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2RGeDBYSFJtYmlBOUlISmxkSFZ5YmtaaGJITmxPMXh1WEhSY2RIMWNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzV5WlcxdmRtVW9JSFJvYVhNc0lIUjVjR1Z6TENCbWJpd2djMlZzWldOMGIzSWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVYRzUyWVhKY2JseHVYSFF2S2lCbGMyeHBiblF0WkdsellXSnNaU0J0WVhndGJHVnVJQ292WEc1Y2JseDBMeThnVTJWbElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWxjMnhwYm5RdlpYTnNhVzUwTDJsemMzVmxjeTh6TWpJNVhHNWNkSEo0YUhSdGJGUmhaeUE5SUM4OEtEOGhZWEpsWVh4aWNueGpiMng4WlcxaVpXUjhhSEo4YVcxbmZHbHVjSFYwZkd4cGJtdDhiV1YwWVh4d1lYSmhiU2tvS0Z0aExYcGRXMTVjWEM5Y1hEQStYRng0TWpCY1hIUmNYSEpjWEc1Y1hHWmRLaWxiWGo1ZEtpbGNYQzgrTDJkcExGeHVYRzVjZEM4cUlHVnpiR2x1ZEMxbGJtRmliR1VnS2k5Y2JseHVYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVEV3SUMwZ01URXNJRVZrWjJVZ01USWdMU0F4TTF4dVhIUXZMeUJKYmlCSlJTOUZaR2RsSUhWemFXNW5JSEpsWjJWNElHZHliM1Z3Y3lCb1pYSmxJR05oZFhObGN5QnpaWFpsY21VZ2MyeHZkMlJ2ZDI1ekxseHVYSFF2THlCVFpXVWdhSFIwY0hNNkx5OWpiMjV1WldOMExtMXBZM0p2YzI5bWRDNWpiMjB2U1VVdlptVmxaR0poWTJzdlpHVjBZV2xzY3k4eE56TTJOVEV5TDF4dVhIUnlibTlKYm01bGNtaDBiV3dnUFNBdlBITmpjbWx3ZEh3OGMzUjViR1Y4UEd4cGJtc3ZhU3hjYmx4dVhIUXZMeUJqYUdWamEyVmtQVndpWTJobFkydGxaRndpSUc5eUlHTm9aV05yWldSY2JseDBjbU5vWldOclpXUWdQU0F2WTJobFkydGxaRnhjY3lvb1B6cGJYajFkZkQxY1hITXFMbU5vWldOclpXUXVLUzlwTEZ4dVhIUnljMk55YVhCMFZIbHdaVTFoYzJ0bFpDQTlJQzllZEhKMVpWeGNMeWd1S2lrdkxGeHVYSFJ5WTJ4bFlXNVRZM0pwY0hRZ1BTQXZYbHhjY3lvOElTZy9PbHhjVzBORVFWUkJYRnhiZkMwdEtYd29QenBjWEYxY1hGMThMUzBwUGx4Y2N5b2tMMmM3WEc1Y2JtWjFibU4wYVc5dUlHMWhibWx3ZFd4aGRHbHZibFJoY21kbGRDZ2daV3hsYlN3Z1kyOXVkR1Z1ZENBcElIdGNibHgwYVdZZ0tDQnFVWFZsY25rdWJtOWtaVTVoYldVb0lHVnNaVzBzSUZ3aWRHRmliR1ZjSWlBcElDWW1YRzVjZEZ4MGFsRjFaWEo1TG01dlpHVk9ZVzFsS0NCamIyNTBaVzUwTG01dlpHVlVlWEJsSUNFOVBTQXhNU0EvSUdOdmJuUmxiblFnT2lCamIyNTBaVzUwTG1acGNuTjBRMmhwYkdRc0lGd2lkSEpjSWlBcElDa2dlMXh1WEc1Y2RGeDBjbVYwZFhKdUlHVnNaVzB1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0lGd2lkR0p2WkhsY0lpQXBXeUF3SUYwZ2ZId2daV3hsYlR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCbGJHVnRPMXh1ZlZ4dVhHNHZMeUJTWlhCc1lXTmxMM0psYzNSdmNtVWdkR2hsSUhSNWNHVWdZWFIwY21saWRYUmxJRzltSUhOamNtbHdkQ0JsYkdWdFpXNTBjeUJtYjNJZ2MyRm1aU0JFVDAwZ2JXRnVhWEIxYkdGMGFXOXVYRzVtZFc1amRHbHZiaUJrYVhOaFlteGxVMk55YVhCMEtDQmxiR1Z0SUNrZ2UxeHVYSFJsYkdWdExuUjVjR1VnUFNBb0lHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbEtDQmNJblI1Y0dWY0lpQXBJQ0U5UFNCdWRXeHNJQ2tnS3lCY0lpOWNJaUFySUdWc1pXMHVkSGx3WlR0Y2JseDBjbVYwZFhKdUlHVnNaVzA3WEc1OVhHNW1kVzVqZEdsdmJpQnlaWE4wYjNKbFUyTnlhWEIwS0NCbGJHVnRJQ2tnZTF4dVhIUjJZWElnYldGMFkyZ2dQU0J5YzJOeWFYQjBWSGx3WlUxaGMydGxaQzVsZUdWaktDQmxiR1Z0TG5SNWNHVWdLVHRjYmx4dVhIUnBaaUFvSUcxaGRHTm9JQ2tnZTF4dVhIUmNkR1ZzWlcwdWRIbHdaU0E5SUcxaGRHTm9XeUF4SUYwN1hHNWNkSDBnWld4elpTQjdYRzVjZEZ4MFpXeGxiUzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9JRndpZEhsd1pWd2lJQ2s3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWld4bGJUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyeHZibVZEYjNCNVJYWmxiblFvSUhOeVl5d2daR1Z6ZENBcElIdGNibHgwZG1GeUlHa3NJR3dzSUhSNWNHVXNJSEJrWVhSaFQyeGtMQ0J3WkdGMFlVTjFjaXdnZFdSaGRHRlBiR1FzSUhWa1lYUmhRM1Z5TENCbGRtVnVkSE03WEc1Y2JseDBhV1lnS0NCa1pYTjBMbTV2WkdWVWVYQmxJQ0U5UFNBeElDa2dlMXh1WEhSY2RISmxkSFZ5Ymp0Y2JseDBmVnh1WEc1Y2RDOHZJREV1SUVOdmNIa2djSEpwZG1GMFpTQmtZWFJoT2lCbGRtVnVkSE1zSUdoaGJtUnNaWEp6TENCbGRHTXVYRzVjZEdsbUlDZ2daR0YwWVZCeWFYWXVhR0Z6UkdGMFlTZ2djM0pqSUNrZ0tTQjdYRzVjZEZ4MGNHUmhkR0ZQYkdRZ1BTQmtZWFJoVUhKcGRpNWhZMk5sYzNNb0lITnlZeUFwTzF4dVhIUmNkSEJrWVhSaFEzVnlJRDBnWkdGMFlWQnlhWFl1YzJWMEtDQmtaWE4wTENCd1pHRjBZVTlzWkNBcE8xeHVYSFJjZEdWMlpXNTBjeUE5SUhCa1lYUmhUMnhrTG1WMlpXNTBjenRjYmx4dVhIUmNkR2xtSUNnZ1pYWmxiblJ6SUNrZ2UxeHVYSFJjZEZ4MFpHVnNaWFJsSUhCa1lYUmhRM1Z5TG1oaGJtUnNaVHRjYmx4MFhIUmNkSEJrWVhSaFEzVnlMbVYyWlc1MGN5QTlJSHQ5TzF4dVhHNWNkRngwWEhSbWIzSWdLQ0IwZVhCbElHbHVJR1YyWlc1MGN5QXBJSHRjYmx4MFhIUmNkRngwWm05eUlDZ2dhU0E5SURBc0lHd2dQU0JsZG1WdWRITmJJSFI1Y0dVZ1hTNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMbUZrWkNnZ1pHVnpkQ3dnZEhsd1pTd2daWFpsYm5Seld5QjBlWEJsSUYxYklHa2dYU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdNaTRnUTI5d2VTQjFjMlZ5SUdSaGRHRmNibHgwYVdZZ0tDQmtZWFJoVlhObGNpNW9ZWE5FWVhSaEtDQnpjbU1nS1NBcElIdGNibHgwWEhSMVpHRjBZVTlzWkNBOUlHUmhkR0ZWYzJWeUxtRmpZMlZ6Y3lnZ2MzSmpJQ2s3WEc1Y2RGeDBkV1JoZEdGRGRYSWdQU0JxVVhWbGNua3VaWGgwWlc1a0tDQjdmU3dnZFdSaGRHRlBiR1FnS1R0Y2JseHVYSFJjZEdSaGRHRlZjMlZ5TG5ObGRDZ2daR1Z6ZEN3Z2RXUmhkR0ZEZFhJZ0tUdGNibHgwZlZ4dWZWeHVYRzR2THlCR2FYZ2dTVVVnWW5WbmN5d2djMlZsSUhOMWNIQnZjblFnZEdWemRITmNibVoxYm1OMGFXOXVJR1pwZUVsdWNIVjBLQ0J6Y21Nc0lHUmxjM1FnS1NCN1hHNWNkSFpoY2lCdWIyUmxUbUZ0WlNBOUlHUmxjM1F1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1WEhRdkx5QkdZV2xzY3lCMGJ5QndaWEp6YVhOMElIUm9aU0JqYUdWamEyVmtJSE4wWVhSbElHOW1JR0VnWTJ4dmJtVmtJR05vWldOclltOTRJRzl5SUhKaFpHbHZJR0oxZEhSdmJpNWNibHgwYVdZZ0tDQnViMlJsVG1GdFpTQTlQVDBnWENKcGJuQjFkRndpSUNZbUlISmphR1ZqYTJGaWJHVlVlWEJsTG5SbGMzUW9JSE55WXk1MGVYQmxJQ2tnS1NCN1hHNWNkRngwWkdWemRDNWphR1ZqYTJWa0lEMGdjM0pqTG1Ob1pXTnJaV1E3WEc1Y2JseDBMeThnUm1GcGJITWdkRzhnY21WMGRYSnVJSFJvWlNCelpXeGxZM1JsWkNCdmNIUnBiMjRnZEc4Z2RHaGxJR1JsWm1GMWJIUWdjMlZzWldOMFpXUWdjM1JoZEdVZ2QyaGxiaUJqYkc5dWFXNW5JRzl3ZEdsdmJuTmNibHgwZlNCbGJITmxJR2xtSUNnZ2JtOWtaVTVoYldVZ1BUMDlJRndpYVc1d2RYUmNJaUI4ZkNCdWIyUmxUbUZ0WlNBOVBUMGdYQ0owWlhoMFlYSmxZVndpSUNrZ2UxeHVYSFJjZEdSbGMzUXVaR1ZtWVhWc2RGWmhiSFZsSUQwZ2MzSmpMbVJsWm1GMWJIUldZV3gxWlR0Y2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtiMjFOWVc1cGNDZ2dZMjlzYkdWamRHbHZiaXdnWVhKbmN5d2dZMkZzYkdKaFkyc3NJR2xuYm05eVpXUWdLU0I3WEc1Y2JseDBMeThnUm14aGRIUmxiaUJoYm5rZ2JtVnpkR1ZrSUdGeWNtRjVjMXh1WEhSaGNtZHpJRDBnWTI5dVkyRjBMbUZ3Y0d4NUtDQmJYU3dnWVhKbmN5QXBPMXh1WEc1Y2RIWmhjaUJtY21GbmJXVnVkQ3dnWm1seWMzUXNJSE5qY21sd2RITXNJR2hoYzFOamNtbHdkSE1zSUc1dlpHVXNJR1J2WXl4Y2JseDBYSFJwSUQwZ01DeGNibHgwWEhSc0lEMGdZMjlzYkdWamRHbHZiaTVzWlc1bmRHZ3NYRzVjZEZ4MGFVNXZRMnh2Ym1VZ1BTQnNJQzBnTVN4Y2JseDBYSFIyWVd4MVpTQTlJR0Z5WjNOYklEQWdYU3hjYmx4MFhIUnBjMFoxYm1OMGFXOXVJRDBnYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvSUhaaGJIVmxJQ2s3WEc1Y2JseDBMeThnVjJVZ1kyRnVKM1FnWTJ4dmJtVk9iMlJsSUdaeVlXZHRaVzUwY3lCMGFHRjBJR052Ym5SaGFXNGdZMmhsWTJ0bFpDd2dhVzRnVjJWaVMybDBYRzVjZEdsbUlDZ2dhWE5HZFc1amRHbHZiaUI4ZkZ4dVhIUmNkRngwS0NCc0lENGdNU0FtSmlCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWmNibHgwWEhSY2RGeDBJWE4xY0hCdmNuUXVZMmhsWTJ0RGJHOXVaU0FtSmlCeVkyaGxZMnRsWkM1MFpYTjBLQ0IyWVd4MVpTQXBJQ2tnS1NCN1hHNWNkRngwY21WMGRYSnVJR052Ykd4bFkzUnBiMjR1WldGamFDZ2dablZ1WTNScGIyNG9JR2x1WkdWNElDa2dlMXh1WEhSY2RGeDBkbUZ5SUhObGJHWWdQU0JqYjJ4c1pXTjBhVzl1TG1WeEtDQnBibVJsZUNBcE8xeHVYSFJjZEZ4MGFXWWdLQ0JwYzBaMWJtTjBhVzl1SUNrZ2UxeHVYSFJjZEZ4MFhIUmhjbWR6V3lBd0lGMGdQU0IyWVd4MVpTNWpZV3hzS0NCMGFHbHpMQ0JwYm1SbGVDd2djMlZzWmk1b2RHMXNLQ2tnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdSdmJVMWhibWx3S0NCelpXeG1MQ0JoY21kekxDQmpZV3hzWW1GamF5d2dhV2R1YjNKbFpDQXBPMXh1WEhSY2RIMGdLVHRjYmx4MGZWeHVYRzVjZEdsbUlDZ2diQ0FwSUh0Y2JseDBYSFJtY21GbmJXVnVkQ0E5SUdKMWFXeGtSbkpoWjIxbGJuUW9JR0Z5WjNNc0lHTnZiR3hsWTNScGIyNWJJREFnWFM1dmQyNWxja1J2WTNWdFpXNTBMQ0JtWVd4elpTd2dZMjlzYkdWamRHbHZiaXdnYVdkdWIzSmxaQ0FwTzF4dVhIUmNkR1pwY25OMElEMGdabkpoWjIxbGJuUXVabWx5YzNSRGFHbHNaRHRjYmx4dVhIUmNkR2xtSUNnZ1puSmhaMjFsYm5RdVkyaHBiR1JPYjJSbGN5NXNaVzVuZEdnZ1BUMDlJREVnS1NCN1hHNWNkRngwWEhSbWNtRm5iV1Z1ZENBOUlHWnBjbk4wTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZKbGNYVnBjbVVnWldsMGFHVnlJRzVsZHlCamIyNTBaVzUwSUc5eUlHRnVJR2x1ZEdWeVpYTjBJR2x1SUdsbmJtOXlaV1FnWld4bGJXVnVkSE1nZEc4Z2FXNTJiMnRsSUhSb1pTQmpZV3hzWW1GamExeHVYSFJjZEdsbUlDZ2dabWx5YzNRZ2ZId2dhV2R1YjNKbFpDQXBJSHRjYmx4MFhIUmNkSE5qY21sd2RITWdQU0JxVVhWbGNua3ViV0Z3S0NCblpYUkJiR3dvSUdaeVlXZHRaVzUwTENCY0luTmpjbWx3ZEZ3aUlDa3NJR1JwYzJGaWJHVlRZM0pwY0hRZ0tUdGNibHgwWEhSY2RHaGhjMU5qY21sd2RITWdQU0J6WTNKcGNIUnpMbXhsYm1kMGFEdGNibHh1WEhSY2RGeDBMeThnVlhObElIUm9aU0J2Y21sbmFXNWhiQ0JtY21GbmJXVnVkQ0JtYjNJZ2RHaGxJR3hoYzNRZ2FYUmxiVnh1WEhSY2RGeDBMeThnYVc1emRHVmhaQ0J2WmlCMGFHVWdabWx5YzNRZ1ltVmpZWFZ6WlNCcGRDQmpZVzRnWlc1a0lIVndYRzVjZEZ4MFhIUXZMeUJpWldsdVp5QmxiWEIwYVdWa0lHbHVZMjl5Y21WamRHeDVJR2x1SUdObGNuUmhhVzRnYzJsMGRXRjBhVzl1Y3lBb0l6Z3dOekFwTGx4dVhIUmNkRngwWm05eUlDZ2dPeUJwSUR3Z2JEc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MFhIUnViMlJsSUQwZ1puSmhaMjFsYm5RN1hHNWNibHgwWEhSY2RGeDBhV1lnS0NCcElDRTlQU0JwVG05RGJHOXVaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnViMlJsSUQwZ2FsRjFaWEo1TG1Oc2IyNWxLQ0J1YjJSbExDQjBjblZsTENCMGNuVmxJQ2s3WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJMWldWd0lISmxabVZ5Wlc1alpYTWdkRzhnWTJ4dmJtVmtJSE5qY21sd2RITWdabTl5SUd4aGRHVnlJSEpsYzNSdmNtRjBhVzl1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JvWVhOVFkzSnBjSFJ6SUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkJibVJ5YjJsa0lEdzlOQzR3SUc5dWJIa3NJRkJvWVc1MGIyMUtVeUF4SUc5dWJIbGNibHgwWEhSY2RGeDBYSFJjZEM4dklIQjFjMmd1WVhCd2JIa29YeXdnWVhKeVlYbHNhV3RsS1NCMGFISnZkM01nYjI0Z1lXNWphV1Z1ZENCWFpXSkxhWFJjYmx4MFhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1dFpYSm5aU2dnYzJOeWFYQjBjeXdnWjJWMFFXeHNLQ0J1YjJSbExDQmNJbk5qY21sd2RGd2lJQ2tnS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSallXeHNZbUZqYXk1allXeHNLQ0JqYjJ4c1pXTjBhVzl1V3lCcElGMHNJRzV2WkdVc0lHa2dLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZZ0tDQm9ZWE5UWTNKcGNIUnpJQ2tnZTF4dVhIUmNkRngwWEhSa2IyTWdQU0J6WTNKcGNIUnpXeUJ6WTNKcGNIUnpMbXhsYm1kMGFDQXRJREVnWFM1dmQyNWxja1J2WTNWdFpXNTBPMXh1WEc1Y2RGeDBYSFJjZEM4dklGSmxaVzVoWW14bElITmpjbWx3ZEhOY2JseDBYSFJjZEZ4MGFsRjFaWEo1TG0xaGNDZ2djMk55YVhCMGN5d2djbVZ6ZEc5eVpWTmpjbWx3ZENBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVWMllXeDFZWFJsSUdWNFpXTjFkR0ZpYkdVZ2MyTnlhWEIwY3lCdmJpQm1hWEp6ZENCa2IyTjFiV1Z1ZENCcGJuTmxjblJwYjI1Y2JseDBYSFJjZEZ4MFptOXlJQ2dnYVNBOUlEQTdJR2tnUENCb1lYTlRZM0pwY0hSek95QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RGeDBibTlrWlNBOUlITmpjbWx3ZEhOYklHa2dYVHRjYmx4MFhIUmNkRngwWEhScFppQW9JSEp6WTNKcGNIUlVlWEJsTG5SbGMzUW9JRzV2WkdVdWRIbHdaU0I4ZkNCY0lsd2lJQ2tnSmlaY2JseDBYSFJjZEZ4MFhIUmNkQ0ZrWVhSaFVISnBkaTVoWTJObGMzTW9JRzV2WkdVc0lGd2laMnh2WW1Gc1JYWmhiRndpSUNrZ0ppWmNibHgwWEhSY2RGeDBYSFJjZEdwUmRXVnllUzVqYjI1MFlXbHVjeWdnWkc5akxDQnViMlJsSUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnYm05a1pTNXpjbU1nS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdUM0IwYVc5dVlXd2dRVXBCV0NCa1pYQmxibVJsYm1ONUxDQmlkWFFnZDI5dUozUWdjblZ1SUhOamNtbHdkSE1nYVdZZ2JtOTBJSEJ5WlhObGJuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JxVVhWbGNua3VYMlYyWVd4VmNtd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbDlsZG1Gc1ZYSnNLQ0J1YjJSbExuTnlZeUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSRVQwMUZkbUZzS0NCdWIyUmxMblJsZUhSRGIyNTBaVzUwTG5KbGNHeGhZMlVvSUhKamJHVmhibE5qY21sd2RDd2dYQ0pjSWlBcExDQmtiMk1nS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z1kyOXNiR1ZqZEdsdmJqdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnRiM1psS0NCbGJHVnRMQ0J6Wld4bFkzUnZjaXdnYTJWbGNFUmhkR0VnS1NCN1hHNWNkSFpoY2lCdWIyUmxMRnh1WEhSY2RHNXZaR1Z6SUQwZ2MyVnNaV04wYjNJZ1B5QnFVWFZsY25rdVptbHNkR1Z5S0NCelpXeGxZM1J2Y2l3Z1pXeGxiU0FwSURvZ1pXeGxiU3hjYmx4MFhIUnBJRDBnTUR0Y2JseHVYSFJtYjNJZ0tDQTdJQ2dnYm05a1pTQTlJRzV2WkdWeld5QnBJRjBnS1NBaFBTQnVkV3hzT3lCcEt5c2dLU0I3WEc1Y2RGeDBhV1lnS0NBaGEyVmxjRVJoZEdFZ0ppWWdibTlrWlM1dWIyUmxWSGx3WlNBOVBUMGdNU0FwSUh0Y2JseDBYSFJjZEdwUmRXVnllUzVqYkdWaGJrUmhkR0VvSUdkbGRFRnNiQ2dnYm05a1pTQXBJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCdWIyUmxMbkJoY21WdWRFNXZaR1VnS1NCN1hHNWNkRngwWEhScFppQW9JR3RsWlhCRVlYUmhJQ1ltSUdwUmRXVnllUzVqYjI1MFlXbHVjeWdnYm05a1pTNXZkMjVsY2tSdlkzVnRaVzUwTENCdWIyUmxJQ2tnS1NCN1hHNWNkRngwWEhSY2RITmxkRWRzYjJKaGJFVjJZV3dvSUdkbGRFRnNiQ2dnYm05a1pTd2dYQ0p6WTNKcGNIUmNJaUFwSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSdWIyUmxMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb0lHNXZaR1VnS1R0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWld4bGJUdGNibjFjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhIUm9kRzFzVUhKbFptbHNkR1Z5T2lCbWRXNWpkR2x2YmlnZ2FIUnRiQ0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdhSFJ0YkM1eVpYQnNZV05sS0NCeWVHaDBiV3hVWVdjc0lGd2lQQ1F4UGp3dkpESStYQ0lnS1R0Y2JseDBmU3hjYmx4dVhIUmpiRzl1WlRvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdSaGRHRkJibVJGZG1WdWRITXNJR1JsWlhCRVlYUmhRVzVrUlhabGJuUnpJQ2tnZTF4dVhIUmNkSFpoY2lCcExDQnNMQ0J6Y21ORmJHVnRaVzUwY3l3Z1pHVnpkRVZzWlcxbGJuUnpMRnh1WEhSY2RGeDBZMnh2Ym1VZ1BTQmxiR1Z0TG1Oc2IyNWxUbTlrWlNnZ2RISjFaU0FwTEZ4dVhIUmNkRngwYVc1UVlXZGxJRDBnYWxGMVpYSjVMbU52Ym5SaGFXNXpLQ0JsYkdWdExtOTNibVZ5Ukc5amRXMWxiblFzSUdWc1pXMGdLVHRjYmx4dVhIUmNkQzh2SUVacGVDQkpSU0JqYkc5dWFXNW5JR2x6YzNWbGMxeHVYSFJjZEdsbUlDZ2dJWE4xY0hCdmNuUXVibTlEYkc5dVpVTm9aV05yWldRZ0ppWWdLQ0JsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4SUh4OElHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlERXhJQ2tnSmlaY2JseDBYSFJjZEZ4MElXcFJkV1Z5ZVM1cGMxaE5URVJ2WXlnZ1pXeGxiU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJYWlNCbGMyTm9aWGNnVTJsNmVteGxJR2hsY21VZ1ptOXlJSEJsY21admNtMWhibU5sSUhKbFlYTnZibk02SUdoMGRIQnpPaTh2YW5Od1pYSm1MbU52YlM5blpYUmhiR3d0ZG5NdGMybDZlbXhsTHpKY2JseDBYSFJjZEdSbGMzUkZiR1Z0Wlc1MGN5QTlJR2RsZEVGc2JDZ2dZMnh2Ym1VZ0tUdGNibHgwWEhSY2RITnlZMFZzWlcxbGJuUnpJRDBnWjJWMFFXeHNLQ0JsYkdWdElDazdYRzVjYmx4MFhIUmNkR1p2Y2lBb0lHa2dQU0F3TENCc0lEMGdjM0pqUld4bGJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MFhIUm1hWGhKYm5CMWRDZ2djM0pqUld4bGJXVnVkSE5iSUdrZ1hTd2daR1Z6ZEVWc1pXMWxiblJ6V3lCcElGMGdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJEYjNCNUlIUm9aU0JsZG1WdWRITWdabkp2YlNCMGFHVWdiM0pwWjJsdVlXd2dkRzhnZEdobElHTnNiMjVsWEc1Y2RGeDBhV1lnS0NCa1lYUmhRVzVrUlhabGJuUnpJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQmtaV1Z3UkdGMFlVRnVaRVYyWlc1MGN5QXBJSHRjYmx4MFhIUmNkRngwYzNKalJXeGxiV1Z1ZEhNZ1BTQnpjbU5GYkdWdFpXNTBjeUI4ZkNCblpYUkJiR3dvSUdWc1pXMGdLVHRjYmx4MFhIUmNkRngwWkdWemRFVnNaVzFsYm5SeklEMGdaR1Z6ZEVWc1pXMWxiblJ6SUh4OElHZGxkRUZzYkNnZ1kyeHZibVVnS1R0Y2JseHVYSFJjZEZ4MFhIUm1iM0lnS0NCcElEMGdNQ3dnYkNBOUlITnlZMFZzWlcxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmpiRzl1WlVOdmNIbEZkbVZ1ZENnZ2MzSmpSV3hsYldWdWRITmJJR2tnWFN3Z1pHVnpkRVZzWlcxbGJuUnpXeUJwSUYwZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBZMnh2Ym1WRGIzQjVSWFpsYm5Rb0lHVnNaVzBzSUdOc2IyNWxJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVUhKbGMyVnlkbVVnYzJOeWFYQjBJR1YyWVd4MVlYUnBiMjRnYUdsemRHOXllVnh1WEhSY2RHUmxjM1JGYkdWdFpXNTBjeUE5SUdkbGRFRnNiQ2dnWTJ4dmJtVXNJRndpYzJOeWFYQjBYQ0lnS1R0Y2JseDBYSFJwWmlBb0lHUmxjM1JGYkdWdFpXNTBjeTVzWlc1bmRHZ2dQaUF3SUNrZ2UxeHVYSFJjZEZ4MGMyVjBSMnh2WW1Gc1JYWmhiQ2dnWkdWemRFVnNaVzFsYm5SekxDQWhhVzVRWVdkbElDWW1JR2RsZEVGc2JDZ2daV3hsYlN3Z1hDSnpZM0pwY0hSY0lpQXBJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVW1WMGRYSnVJSFJvWlNCamJHOXVaV1FnYzJWMFhHNWNkRngwY21WMGRYSnVJR05zYjI1bE8xeHVYSFI5TEZ4dVhHNWNkR05zWldGdVJHRjBZVG9nWm5WdVkzUnBiMjRvSUdWc1pXMXpJQ2tnZTF4dVhIUmNkSFpoY2lCa1lYUmhMQ0JsYkdWdExDQjBlWEJsTEZ4dVhIUmNkRngwYzNCbFkybGhiQ0E5SUdwUmRXVnllUzVsZG1WdWRDNXpjR1ZqYVdGc0xGeHVYSFJjZEZ4MGFTQTlJREE3WEc1Y2JseDBYSFJtYjNJZ0tDQTdJQ2dnWld4bGJTQTlJR1ZzWlcxeld5QnBJRjBnS1NBaFBUMGdkVzVrWldacGJtVmtPeUJwS3lzZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUdGalkyVndkRVJoZEdFb0lHVnNaVzBnS1NBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NBb0lHUmhkR0VnUFNCbGJHVnRXeUJrWVhSaFVISnBkaTVsZUhCaGJtUnZJRjBnS1NBcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lHUmhkR0V1WlhabGJuUnpJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCa1lYUmhMbVYyWlc1MGN5QXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBhV1lnS0NCemNHVmphV0ZzV3lCMGVYQmxJRjBnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMbkpsYlc5MlpTZ2daV3hsYlN3Z2RIbHdaU0FwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklGUm9hWE1nYVhNZ1lTQnphRzl5ZEdOMWRDQjBieUJoZG05cFpDQnFVWFZsY25rdVpYWmxiblF1Y21WdGIzWmxKM01nYjNabGNtaGxZV1JjYmx4MFhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnFVWFZsY25rdWNtVnRiM1psUlhabGJuUW9JR1ZzWlcwc0lIUjVjR1VzSUdSaGRHRXVhR0Z1Wkd4bElDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkRhSEp2YldVZ1BEMHpOU0F0SURRMUsxeHVYSFJjZEZ4MFhIUmNkQzh2SUVGemMybG5iaUIxYm1SbFptbHVaV1FnYVc1emRHVmhaQ0J2WmlCMWMybHVaeUJrWld4bGRHVXNJSE5sWlNCRVlYUmhJM0psYlc5MlpWeHVYSFJjZEZ4MFhIUmNkR1ZzWlcxYklHUmhkR0ZRY21sMkxtVjRjR0Z1Wkc4Z1hTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhScFppQW9JR1ZzWlcxYklHUmhkR0ZWYzJWeUxtVjRjR0Z1Wkc4Z1hTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRU5vY205dFpTQThQVE0xSUMwZ05EVXJYRzVjZEZ4MFhIUmNkRngwTHk4Z1FYTnphV2R1SUhWdVpHVm1hVzVsWkNCcGJuTjBaV0ZrSUc5bUlIVnphVzVuSUdSbGJHVjBaU3dnYzJWbElFUmhkR0VqY21WdGIzWmxYRzVjZEZ4MFhIUmNkRngwWld4bGJWc2daR0YwWVZWelpYSXVaWGh3WVc1a2J5QmRJRDBnZFc1a1pXWnBibVZrTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzU5SUNrN1hHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4MFpHVjBZV05vT2lCbWRXNWpkR2x2YmlnZ2MyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhKbGJXOTJaU2dnZEdocGN5d2djMlZzWldOMGIzSXNJSFJ5ZFdVZ0tUdGNibHgwZlN4Y2JseHVYSFJ5WlcxdmRtVTZJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjbVZ0YjNabEtDQjBhR2x6TENCelpXeGxZM1J2Y2lBcE8xeHVYSFI5TEZ4dVhHNWNkSFJsZUhRNklHWjFibU4wYVc5dUtDQjJZV3gxWlNBcElIdGNibHgwWEhSeVpYUjFjbTRnWVdOalpYTnpLQ0IwYUdsekxDQm1kVzVqZEdsdmJpZ2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RtRnNkV1VnUFQwOUlIVnVaR1ZtYVc1bFpDQS9YRzVjZEZ4MFhIUmNkR3BSZFdWeWVTNTBaWGgwS0NCMGFHbHpJQ2tnT2x4dVhIUmNkRngwWEhSMGFHbHpMbVZ0Y0hSNUtDa3VaV0ZqYUNnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQjBhR2x6TG01dlpHVlVlWEJsSUQwOVBTQXhJSHg4SUhSb2FYTXVibTlrWlZSNWNHVWdQVDA5SURFeElIeDhJSFJvYVhNdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxuUmxlSFJEYjI1MFpXNTBJRDBnZG1Gc2RXVTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOUlDazdYRzVjZEZ4MGZTd2diblZzYkN3Z2RtRnNkV1VzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnS1R0Y2JseDBmU3hjYmx4dVhIUmhjSEJsYm1RNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCa2IyMU5ZVzVwY0NnZ2RHaHBjeXdnWVhKbmRXMWxiblJ6TENCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dkR2hwY3k1dWIyUmxWSGx3WlNBOVBUMGdNU0I4ZkNCMGFHbHpMbTV2WkdWVWVYQmxJRDA5UFNBeE1TQjhmQ0IwYUdsekxtNXZaR1ZVZVhCbElEMDlQU0E1SUNrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnZEdGeVoyVjBJRDBnYldGdWFYQjFiR0YwYVc5dVZHRnlaMlYwS0NCMGFHbHpMQ0JsYkdWdElDazdYRzVjZEZ4MFhIUmNkSFJoY21kbGRDNWhjSEJsYm1SRGFHbHNaQ2dnWld4bGJTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMGdLVHRjYmx4MGZTeGNibHh1WEhSd2NtVndaVzVrT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnWkc5dFRXRnVhWEFvSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeXdnWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lIUm9hWE11Ym05a1pWUjVjR1VnUFQwOUlERWdmSHdnZEdocGN5NXViMlJsVkhsd1pTQTlQVDBnTVRFZ2ZId2dkR2hwY3k1dWIyUmxWSGx3WlNBOVBUMGdPU0FwSUh0Y2JseDBYSFJjZEZ4MGRtRnlJSFJoY21kbGRDQTlJRzFoYm1sd2RXeGhkR2x2YmxSaGNtZGxkQ2dnZEdocGN5d2daV3hsYlNBcE8xeHVYSFJjZEZ4MFhIUjBZWEpuWlhRdWFXNXpaWEowUW1WbWIzSmxLQ0JsYkdWdExDQjBZWEpuWlhRdVptbHljM1JEYUdsc1pDQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMGdLVHRjYmx4MGZTeGNibHh1WEhSaVpXWnZjbVU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYjIxTllXNXBjQ2dnZEdocGN5d2dZWEpuZFcxbGJuUnpMQ0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2RHaHBjeTV3WVhKbGJuUk9iMlJsSUNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG5CaGNtVnVkRTV2WkdVdWFXNXpaWEowUW1WbWIzSmxLQ0JsYkdWdExDQjBhR2x6SUNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlNBcE8xeHVYSFI5TEZ4dVhHNWNkR0ZtZEdWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaWFIxY200Z1pHOXRUV0Z1YVhBb0lIUm9hWE1zSUdGeVozVnRaVzUwY3l3Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhScFppQW9JSFJvYVhNdWNHRnlaVzUwVG05a1pTQXBJSHRjYmx4MFhIUmNkRngwZEdocGN5NXdZWEpsYm5ST2IyUmxMbWx1YzJWeWRFSmxabTl5WlNnZ1pXeGxiU3dnZEdocGN5NXVaWGgwVTJsaWJHbHVaeUFwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBnS1R0Y2JseDBmU3hjYmx4dVhIUmxiWEIwZVRvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MGRtRnlJR1ZzWlcwc1hHNWNkRngwWEhScElEMGdNRHRjYmx4dVhIUmNkR1p2Y2lBb0lEc2dLQ0JsYkdWdElEMGdkR2hwYzFzZ2FTQmRJQ2tnSVQwZ2JuVnNiRHNnYVNzcklDa2dlMXh1WEhSY2RGeDBhV1lnS0NCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGQnlaWFpsYm5RZ2JXVnRiM0o1SUd4bFlXdHpYRzVjZEZ4MFhIUmNkR3BSZFdWeWVTNWpiR1ZoYmtSaGRHRW9JR2RsZEVGc2JDZ2daV3hsYlN3Z1ptRnNjMlVnS1NBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUZKbGJXOTJaU0JoYm5rZ2NtVnRZV2x1YVc1bklHNXZaR1Z6WEc1Y2RGeDBYSFJjZEdWc1pXMHVkR1Y0ZEVOdmJuUmxiblFnUFNCY0lsd2lPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOUxGeHVYRzVjZEdOc2IyNWxPaUJtZFc1amRHbHZiaWdnWkdGMFlVRnVaRVYyWlc1MGN5d2daR1ZsY0VSaGRHRkJibVJGZG1WdWRITWdLU0I3WEc1Y2RGeDBaR0YwWVVGdVpFVjJaVzUwY3lBOUlHUmhkR0ZCYm1SRmRtVnVkSE1nUFQwZ2JuVnNiQ0EvSUdaaGJITmxJRG9nWkdGMFlVRnVaRVYyWlc1MGN6dGNibHgwWEhSa1pXVndSR0YwWVVGdVpFVjJaVzUwY3lBOUlHUmxaWEJFWVhSaFFXNWtSWFpsYm5SeklEMDlJRzUxYkd3Z1B5QmtZWFJoUVc1a1JYWmxiblJ6SURvZ1pHVmxjRVJoZEdGQmJtUkZkbVZ1ZEhNN1hHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXRZWEFvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdwUmRXVnllUzVqYkc5dVpTZ2dkR2hwY3l3Z1pHRjBZVUZ1WkVWMlpXNTBjeXdnWkdWbGNFUmhkR0ZCYm1SRmRtVnVkSE1nS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDBzWEc1Y2JseDBhSFJ0YkRvZ1puVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJoWTJObGMzTW9JSFJvYVhNc0lHWjFibU4wYVc5dUtDQjJZV3gxWlNBcElIdGNibHgwWEhSY2RIWmhjaUJsYkdWdElEMGdkR2hwYzFzZ01DQmRJSHg4SUh0OUxGeHVYSFJjZEZ4MFhIUnBJRDBnTUN4Y2JseDBYSFJjZEZ4MGJDQTlJSFJvYVhNdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhScFppQW9JSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJR1ZzWlcwdWFXNXVaWEpJVkUxTU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUWldVZ2FXWWdkMlVnWTJGdUlIUmhhMlVnWVNCemFHOXlkR04xZENCaGJtUWdhblZ6ZENCMWMyVWdhVzV1WlhKSVZFMU1YRzVjZEZ4MFhIUnBaaUFvSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnWENKemRISnBibWRjSWlBbUppQWhjbTV2U1c1dVpYSm9kRzFzTG5SbGMzUW9JSFpoYkhWbElDa2dKaVpjYmx4MFhIUmNkRngwSVhkeVlYQk5ZWEJiSUNnZ2NuUmhaMDVoYldVdVpYaGxZeWdnZG1Gc2RXVWdLU0I4ZkNCYklGd2lYQ0lzSUZ3aVhDSWdYU0FwV3lBeElGMHVkRzlNYjNkbGNrTmhjMlVvS1NCZElDa2dlMXh1WEc1Y2RGeDBYSFJjZEhaaGJIVmxJRDBnYWxGMVpYSjVMbWgwYld4UWNtVm1hV3gwWlhJb0lIWmhiSFZsSUNrN1hHNWNibHgwWEhSY2RGeDBkSEo1SUh0Y2JseDBYSFJjZEZ4MFhIUm1iM0lnS0NBN0lHa2dQQ0JzT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0SUQwZ2RHaHBjMXNnYVNCZElIeDhJSHQ5TzF4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlCU1pXMXZkbVVnWld4bGJXVnVkQ0J1YjJSbGN5QmhibVFnY0hKbGRtVnVkQ0J0WlcxdmNua2diR1ZoYTNOY2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBhbEYxWlhKNUxtTnNaV0Z1UkdGMFlTZ2daMlYwUVd4c0tDQmxiR1Z0TENCbVlXeHpaU0FwSUNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdWc1pXMHVhVzV1WlhKSVZFMU1JRDBnZG1Gc2RXVTdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MFpXeGxiU0E5SURBN1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ2RYTnBibWNnYVc1dVpYSklWRTFNSUhSb2NtOTNjeUJoYmlCbGVHTmxjSFJwYjI0c0lIVnpaU0IwYUdVZ1ptRnNiR0poWTJzZ2JXVjBhRzlrWEc1Y2RGeDBYSFJjZEgwZ1kyRjBZMmdnS0NCbElDa2dlMzFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZZ0tDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG1WdGNIUjVLQ2t1WVhCd1pXNWtLQ0IyWVd4MVpTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHNJRzUxYkd3c0lIWmhiSFZsTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNrN1hHNWNkSDBzWEc1Y2JseDBjbVZ3YkdGalpWZHBkR2c2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhaaGNpQnBaMjV2Y21Wa0lEMGdXMTA3WEc1Y2JseDBYSFF2THlCTllXdGxJSFJvWlNCamFHRnVaMlZ6TENCeVpYQnNZV05wYm1jZ1pXRmphQ0J1YjI0dGFXZHViM0psWkNCamIyNTBaWGgwSUdWc1pXMWxiblFnZDJsMGFDQjBhR1VnYm1WM0lHTnZiblJsYm5SY2JseDBYSFJ5WlhSMWNtNGdaRzl0VFdGdWFYQW9JSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5d2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUjJZWElnY0dGeVpXNTBJRDBnZEdocGN5NXdZWEpsYm5ST2IyUmxPMXh1WEc1Y2RGeDBYSFJwWmlBb0lHcFJkV1Z5ZVM1cGJrRnljbUY1S0NCMGFHbHpMQ0JwWjI1dmNtVmtJQ2tnUENBd0lDa2dlMXh1WEhSY2RGeDBYSFJxVVhWbGNua3VZMnhsWVc1RVlYUmhLQ0JuWlhSQmJHd29JSFJvYVhNZ0tTQXBPMXh1WEhSY2RGeDBYSFJwWmlBb0lIQmhjbVZ1ZENBcElIdGNibHgwWEhSY2RGeDBYSFJ3WVhKbGJuUXVjbVZ3YkdGalpVTm9hV3hrS0NCbGJHVnRMQ0IwYUdseklDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkQzh2SUVadmNtTmxJR05oYkd4aVlXTnJJR2x1ZG05allYUnBiMjVjYmx4MFhIUjlMQ0JwWjI1dmNtVmtJQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVhbEYxWlhKNUxtVmhZMmdvSUh0Y2JseDBZWEJ3Wlc1a1ZHODZJRndpWVhCd1pXNWtYQ0lzWEc1Y2RIQnlaWEJsYm1SVWJ6b2dYQ0p3Y21Wd1pXNWtYQ0lzWEc1Y2RHbHVjMlZ5ZEVKbFptOXlaVG9nWENKaVpXWnZjbVZjSWl4Y2JseDBhVzV6WlhKMFFXWjBaWEk2SUZ3aVlXWjBaWEpjSWl4Y2JseDBjbVZ3YkdGalpVRnNiRG9nWENKeVpYQnNZV05sVjJsMGFGd2lYRzU5TENCbWRXNWpkR2x2YmlnZ2JtRnRaU3dnYjNKcFoybHVZV3dnS1NCN1hHNWNkR3BSZFdWeWVTNW1ibHNnYm1GdFpTQmRJRDBnWm5WdVkzUnBiMjRvSUhObGJHVmpkRzl5SUNrZ2UxeHVYSFJjZEhaaGNpQmxiR1Z0Y3l4Y2JseDBYSFJjZEhKbGRDQTlJRnRkTEZ4dVhIUmNkRngwYVc1elpYSjBJRDBnYWxGMVpYSjVLQ0J6Wld4bFkzUnZjaUFwTEZ4dVhIUmNkRngwYkdGemRDQTlJR2x1YzJWeWRDNXNaVzVuZEdnZ0xTQXhMRnh1WEhSY2RGeDBhU0E5SURBN1hHNWNibHgwWEhSbWIzSWdLQ0E3SUdrZ1BEMGdiR0Z6ZERzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWld4bGJYTWdQU0JwSUQwOVBTQnNZWE4wSUQ4Z2RHaHBjeUE2SUhSb2FYTXVZMnh2Ym1Vb0lIUnlkV1VnS1R0Y2JseDBYSFJjZEdwUmRXVnllU2dnYVc1elpYSjBXeUJwSUYwZ0tWc2diM0pwWjJsdVlXd2dYU2dnWld4bGJYTWdLVHRjYmx4dVhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1FXNWtjbTlwWkNBOFBUUXVNQ0J2Ym14NUxDQlFhR0Z1ZEc5dFNsTWdNU0J2Ym14NVhHNWNkRngwWEhRdkx5QXVaMlYwS0NrZ1ltVmpZWFZ6WlNCd2RYTm9MbUZ3Y0d4NUtGOHNJR0Z5Y21GNWJHbHJaU2tnZEdoeWIzZHpJRzl1SUdGdVkybGxiblFnVjJWaVMybDBYRzVjZEZ4MFhIUndkWE5vTG1Gd2NHeDVLQ0J5WlhRc0lHVnNaVzF6TG1kbGRDZ3BJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11Y0hWemFGTjBZV05yS0NCeVpYUWdLVHRjYmx4MGZUdGNibjBnS1R0Y2JuWmhjaUJ5YldGeVoybHVJRDBnS0NBdlhtMWhjbWRwYmk4Z0tUdGNibHh1ZG1GeUlISnVkVzF1YjI1d2VDQTlJRzVsZHlCU1pXZEZlSEFvSUZ3aVhpaGNJaUFySUhCdWRXMGdLeUJjSWlrb1B5RndlQ2xiWVMxNkpWMHJKRndpTENCY0ltbGNJaUFwTzF4dVhHNTJZWElnWjJWMFUzUjViR1Z6SUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNibHgwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFeElHOXViSGtzSUVacGNtVm1iM2dnUEQwek1DQW9JekUxTURrNExDQWpNVFF4TlRBcFhHNWNkRngwTHk4Z1NVVWdkR2h5YjNkeklHOXVJR1ZzWlcxbGJuUnpJR055WldGMFpXUWdhVzRnY0c5d2RYQnpYRzVjZEZ4MEx5OGdSa1lnYldWaGJuZG9hV3hsSUhSb2NtOTNjeUJ2YmlCbWNtRnRaU0JsYkdWdFpXNTBjeUIwYUhKdmRXZG9JRndpWkdWbVlYVnNkRlpwWlhjdVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlZ3aVhHNWNkRngwZG1GeUlIWnBaWGNnUFNCbGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RdVpHVm1ZWFZzZEZacFpYYzdYRzVjYmx4MFhIUnBaaUFvSUNGMmFXVjNJSHg4SUNGMmFXVjNMbTl3Wlc1bGNpQXBJSHRjYmx4MFhIUmNkSFpwWlhjZ1BTQjNhVzVrYjNjN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSFpwWlhjdVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNnZ1pXeGxiU0FwTzF4dVhIUjlPMXh1WEc1Y2JseHVLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseHVYSFF2THlCRmVHVmpkWFJwYm1jZ1ltOTBhQ0J3YVhobGJGQnZjMmwwYVc5dUlDWWdZbTk0VTJsNmFXNW5VbVZzYVdGaWJHVWdkR1Z6ZEhNZ2NtVnhkV2x5WlNCdmJteDVJRzl1WlNCc1lYbHZkWFJjYmx4MEx5OGdjMjhnZEdobGVTZHlaU0JsZUdWamRYUmxaQ0JoZENCMGFHVWdjMkZ0WlNCMGFXMWxJSFJ2SUhOaGRtVWdkR2hsSUhObFkyOXVaQ0JqYjIxd2RYUmhkR2x2Ymk1Y2JseDBablZ1WTNScGIyNGdZMjl0Y0hWMFpWTjBlV3hsVkdWemRITW9LU0I3WEc1Y2JseDBYSFF2THlCVWFHbHpJR2x6SUdFZ2MybHVaMnhsZEc5dUxDQjNaU0J1WldWa0lIUnZJR1Y0WldOMWRHVWdhWFFnYjI1c2VTQnZibU5sWEc1Y2RGeDBhV1lnS0NBaFpHbDJJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHh1WEhSY2RHUnBkaTV6ZEhsc1pTNWpjM05VWlhoMElEMWNibHgwWEhSY2RGd2lZbTk0TFhOcGVtbHVaenBpYjNKa1pYSXRZbTk0TzF3aUlDdGNibHgwWEhSY2RGd2ljRzl6YVhScGIyNDZjbVZzWVhScGRtVTdaR2x6Y0d4aGVUcGliRzlqYXp0Y0lpQXJYRzVjZEZ4MFhIUmNJbTFoY21kcGJqcGhkWFJ2TzJKdmNtUmxjam94Y0hnN2NHRmtaR2x1WnpveGNIZzdYQ0lnSzF4dVhIUmNkRngwWENKMGIzQTZNU1U3ZDJsa2RHZzZOVEFsWENJN1hHNWNkRngwWkdsMkxtbHVibVZ5U0ZSTlRDQTlJRndpWENJN1hHNWNkRngwWkc5amRXMWxiblJGYkdWdFpXNTBMbUZ3Y0dWdVpFTm9hV3hrS0NCamIyNTBZV2x1WlhJZ0tUdGNibHh1WEhSY2RIWmhjaUJrYVhaVGRIbHNaU0E5SUhkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLQ0JrYVhZZ0tUdGNibHgwWEhSd2FYaGxiRkJ2YzJsMGFXOXVWbUZzSUQwZ1pHbDJVM1I1YkdVdWRHOXdJQ0U5UFNCY0lqRWxYQ0k3WEc1Y2JseDBYSFF2THlCVGRYQndiM0owT2lCQmJtUnliMmxrSURRdU1DQXRJRFF1TXlCdmJteDVMQ0JHYVhKbFptOTRJRHc5TXlBdElEUTBYRzVjZEZ4MGNtVnNhV0ZpYkdWTllYSm5hVzVNWldaMFZtRnNJRDBnWkdsMlUzUjViR1V1YldGeVoybHVUR1ZtZENBOVBUMGdYQ0l5Y0hoY0lqdGNibHgwWEhSaWIzaFRhWHBwYm1kU1pXeHBZV0pzWlZaaGJDQTlJR1JwZGxOMGVXeGxMbmRwWkhSb0lEMDlQU0JjSWpSd2VGd2lPMXh1WEc1Y2RGeDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0EwTGpBZ0xTQTBMak1nYjI1c2VWeHVYSFJjZEM4dklGTnZiV1VnYzNSNWJHVnpJR052YldVZ1ltRmpheUIzYVhSb0lIQmxjbU5sYm5SaFoyVWdkbUZzZFdWekxDQmxkbVZ1SUhSb2IzVm5hQ0IwYUdWNUlITm9iM1ZzWkc0bmRGeHVYSFJjZEdScGRpNXpkSGxzWlM1dFlYSm5hVzVTYVdkb2RDQTlJRndpTlRBbFhDSTdYRzVjZEZ4MGNHbDRaV3hOWVhKbmFXNVNhV2RvZEZaaGJDQTlJR1JwZGxOMGVXeGxMbTFoY21kcGJsSnBaMmgwSUQwOVBTQmNJalJ3ZUZ3aU8xeHVYRzVjZEZ4MFpHOWpkVzFsYm5SRmJHVnRaVzUwTG5KbGJXOTJaVU5vYVd4a0tDQmpiMjUwWVdsdVpYSWdLVHRjYmx4dVhIUmNkQzh2SUU1MWJHeHBabmtnZEdobElHUnBkaUJ6YnlCcGRDQjNiM1ZzWkc0bmRDQmlaU0J6ZEc5eVpXUWdhVzRnZEdobElHMWxiVzl5ZVNCaGJtUmNibHgwWEhRdkx5QnBkQ0IzYVd4c0lHRnNjMjhnWW1VZ1lTQnphV2R1SUhSb1lYUWdZMmhsWTJ0eklHRnNjbVZoWkhrZ2NHVnlabTl5YldWa1hHNWNkRngwWkdsMklEMGdiblZzYkR0Y2JseDBmVnh1WEc1Y2RIWmhjaUJ3YVhobGJGQnZjMmwwYVc5dVZtRnNMQ0JpYjNoVGFYcHBibWRTWld4cFlXSnNaVlpoYkN3Z2NHbDRaV3hOWVhKbmFXNVNhV2RvZEZaaGJDd2djbVZzYVdGaWJHVk5ZWEpuYVc1TVpXWjBWbUZzTEZ4dVhIUmNkR052Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JRndpWkdsMlhDSWdLU3hjYmx4MFhIUmthWFlnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ0JjSW1ScGRsd2lJQ2s3WEc1Y2JseDBMeThnUm1sdWFYTm9JR1ZoY214NUlHbHVJR3hwYldsMFpXUWdLRzV2YmkxaWNtOTNjMlZ5S1NCbGJuWnBjbTl1YldWdWRITmNibHgwYVdZZ0tDQWhaR2wyTG5OMGVXeGxJQ2tnZTF4dVhIUmNkSEpsZEhWeWJqdGNibHgwZlZ4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0F0SURFeElHOXViSGxjYmx4MEx5OGdVM1I1YkdVZ2IyWWdZMnh2Ym1Wa0lHVnNaVzFsYm5RZ1lXWm1aV04wY3lCemIzVnlZMlVnWld4bGJXVnVkQ0JqYkc5dVpXUWdLQ000T1RBNEtWeHVYSFJrYVhZdWMzUjViR1V1WW1GamEyZHliM1Z1WkVOc2FYQWdQU0JjSW1OdmJuUmxiblF0WW05NFhDSTdYRzVjZEdScGRpNWpiRzl1WlU1dlpHVW9JSFJ5ZFdVZ0tTNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1EyeHBjQ0E5SUZ3aVhDSTdYRzVjZEhOMWNIQnZjblF1WTJ4bFlYSkRiRzl1WlZOMGVXeGxJRDBnWkdsMkxuTjBlV3hsTG1KaFkydG5jbTkxYm1SRGJHbHdJRDA5UFNCY0ltTnZiblJsYm5RdFltOTRYQ0k3WEc1Y2JseDBZMjl1ZEdGcGJtVnlMbk4wZVd4bExtTnpjMVJsZUhRZ1BTQmNJbUp2Y21SbGNqb3dPM2RwWkhSb09qaHdlRHRvWldsbmFIUTZNRHQwYjNBNk1EdHNaV1owT2kwNU9UazVjSGc3WENJZ0sxeHVYSFJjZEZ3aWNHRmtaR2x1Wnpvd08yMWhjbWRwYmkxMGIzQTZNWEI0TzNCdmMybDBhVzl1T21GaWMyOXNkWFJsWENJN1hHNWNkR052Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNnZ1pHbDJJQ2s3WEc1Y2JseDBhbEYxWlhKNUxtVjRkR1Z1WkNnZ2MzVndjRzl5ZEN3Z2UxeHVYSFJjZEhCcGVHVnNVRzl6YVhScGIyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWTI5dGNIVjBaVk4wZVd4bFZHVnpkSE1vS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJ3YVhobGJGQnZjMmwwYVc5dVZtRnNPMXh1WEhSY2RIMHNYRzVjZEZ4MFltOTRVMmw2YVc1blVtVnNhV0ZpYkdVNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBZMjl0Y0hWMFpWTjBlV3hsVkdWemRITW9LVHRjYmx4MFhIUmNkSEpsZEhWeWJpQmliM2hUYVhwcGJtZFNaV3hwWVdKc1pWWmhiRHRjYmx4MFhIUjlMRnh1WEhSY2RIQnBlR1ZzVFdGeVoybHVVbWxuYUhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBZMjl0Y0hWMFpWTjBlV3hsVkdWemRITW9LVHRjYmx4MFhIUmNkSEpsZEhWeWJpQndhWGhsYkUxaGNtZHBibEpwWjJoMFZtRnNPMXh1WEhSY2RIMHNYRzVjZEZ4MGNtVnNhV0ZpYkdWTllYSm5hVzVNWldaME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR052YlhCMWRHVlRkSGxzWlZSbGMzUnpLQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbVZzYVdGaWJHVk5ZWEpuYVc1TVpXWjBWbUZzTzF4dVhIUmNkSDFjYmx4MGZTQXBPMXh1ZlNBcEtDazdYRzVjYmx4dVpuVnVZM1JwYjI0Z1kzVnlRMU5US0NCbGJHVnRMQ0J1WVcxbExDQmpiMjF3ZFhSbFpDQXBJSHRjYmx4MGRtRnlJSGRwWkhSb0xDQnRhVzVYYVdSMGFDd2diV0Y0VjJsa2RHZ3NJSEpsZEN4Y2JseDBYSFJ6ZEhsc1pTQTlJR1ZzWlcwdWMzUjViR1U3WEc1Y2JseDBZMjl0Y0hWMFpXUWdQU0JqYjIxd2RYUmxaQ0I4ZkNCblpYUlRkSGxzWlhNb0lHVnNaVzBnS1R0Y2JseHVYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnYjI1c2VWeHVYSFF2THlCblpYUlFjbTl3WlhKMGVWWmhiSFZsSUdseklHOXViSGtnYm1WbFpHVmtJR1p2Y2lBdVkzTnpLQ2RtYVd4MFpYSW5LU0FvSXpFeU5UTTNLVnh1WEhScFppQW9JR052YlhCMWRHVmtJQ2tnZTF4dVhIUmNkSEpsZENBOUlHTnZiWEIxZEdWa0xtZGxkRkJ5YjNCbGNuUjVWbUZzZFdVb0lHNWhiV1VnS1NCOGZDQmpiMjF3ZFhSbFpGc2dibUZ0WlNCZE8xeHVYRzVjZEZ4MGFXWWdLQ0J5WlhRZ1BUMDlJRndpWENJZ0ppWWdJV3BSZFdWeWVTNWpiMjUwWVdsdWN5Z2daV3hsYlM1dmQyNWxja1J2WTNWdFpXNTBMQ0JsYkdWdElDa2dLU0I3WEc1Y2RGeDBYSFJ5WlhRZ1BTQnFVWFZsY25rdWMzUjViR1VvSUdWc1pXMHNJRzVoYldVZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkJJSFJ5YVdKMWRHVWdkRzhnZEdobElGd2lZWGRsYzI5dFpTQm9ZV05ySUdKNUlFUmxZVzRnUldSM1lYSmtjMXdpWEc1Y2RGeDBMeThnUVc1a2NtOXBaQ0JDY205M2MyVnlJSEpsZEhWeWJuTWdjR1Z5WTJWdWRHRm5aU0JtYjNJZ2MyOXRaU0IyWVd4MVpYTXNYRzVjZEZ4MEx5OGdZblYwSUhkcFpIUm9JSE5sWlcxeklIUnZJR0psSUhKbGJHbGhZbXg1SUhCcGVHVnNjeTVjYmx4MFhIUXZMeUJVYUdseklHbHpJR0ZuWVdsdWMzUWdkR2hsSUVOVFUwOU5JR1J5WVdaMElITndaV002WEc1Y2RGeDBMeThnYUhSMGNITTZMeTlrY21GbWRITXVZM056ZDJjdWIzSm5MMk56YzI5dEx5TnlaWE52YkhabFpDMTJZV3gxWlhOY2JseDBYSFJwWmlBb0lDRnpkWEJ3YjNKMExuQnBlR1ZzVFdGeVoybHVVbWxuYUhRb0tTQW1KaUJ5Ym5WdGJtOXVjSGd1ZEdWemRDZ2djbVYwSUNrZ0ppWWdjbTFoY21kcGJpNTBaWE4wS0NCdVlXMWxJQ2tnS1NCN1hHNWNibHgwWEhSY2RDOHZJRkpsYldWdFltVnlJSFJvWlNCdmNtbG5hVzVoYkNCMllXeDFaWE5jYmx4MFhIUmNkSGRwWkhSb0lEMGdjM1I1YkdVdWQybGtkR2c3WEc1Y2RGeDBYSFJ0YVc1WGFXUjBhQ0E5SUhOMGVXeGxMbTFwYmxkcFpIUm9PMXh1WEhSY2RGeDBiV0Y0VjJsa2RHZ2dQU0J6ZEhsc1pTNXRZWGhYYVdSMGFEdGNibHh1WEhSY2RGeDBMeThnVUhWMElHbHVJSFJvWlNCdVpYY2dkbUZzZFdWeklIUnZJR2RsZENCaElHTnZiWEIxZEdWa0lIWmhiSFZsSUc5MWRGeHVYSFJjZEZ4MGMzUjViR1V1YldsdVYybGtkR2dnUFNCemRIbHNaUzV0WVhoWGFXUjBhQ0E5SUhOMGVXeGxMbmRwWkhSb0lEMGdjbVYwTzF4dVhIUmNkRngwY21WMElEMGdZMjl0Y0hWMFpXUXVkMmxrZEdnN1hHNWNibHgwWEhSY2RDOHZJRkpsZG1WeWRDQjBhR1VnWTJoaGJtZGxaQ0IyWVd4MVpYTmNibHgwWEhSY2RITjBlV3hsTG5kcFpIUm9JRDBnZDJsa2RHZzdYRzVjZEZ4MFhIUnpkSGxzWlM1dGFXNVhhV1IwYUNBOUlHMXBibGRwWkhSb08xeHVYSFJjZEZ4MGMzUjViR1V1YldGNFYybGtkR2dnUFNCdFlYaFhhV1IwYUR0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnY21WMElDRTlQU0IxYm1SbFptbHVaV1FnUDF4dVhHNWNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdQRDA1SUMwZ01URWdiMjVzZVZ4dVhIUmNkQzh2SUVsRklISmxkSFZ5Ym5NZ2VrbHVaR1Y0SUhaaGJIVmxJR0Z6SUdGdUlHbHVkR1ZuWlhJdVhHNWNkRngwY21WMElDc2dYQ0pjSWlBNlhHNWNkRngwY21WME8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlHRmtaRWRsZEVodmIydEpaaWdnWTI5dVpHbDBhVzl1Um00c0lHaHZiMnRHYmlBcElIdGNibHh1WEhRdkx5QkVaV1pwYm1VZ2RHaGxJR2h2YjJzc0lIZGxKMnhzSUdOb1pXTnJJRzl1SUhSb1pTQm1hWEp6ZENCeWRXNGdhV1lnYVhRbmN5QnlaV0ZzYkhrZ2JtVmxaR1ZrTGx4dVhIUnlaWFIxY200Z2UxeHVYSFJjZEdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJwWmlBb0lHTnZibVJwZEdsdmJrWnVLQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnU0c5dmF5QnViM1FnYm1WbFpHVmtJQ2h2Y2lCcGRDZHpJRzV2ZENCd2IzTnphV0pzWlNCMGJ5QjFjMlVnYVhRZ1pIVmxYRzVjZEZ4MFhIUmNkQzh2SUhSdklHMXBjM05wYm1jZ1pHVndaVzVrWlc1amVTa3NJSEpsYlc5MlpTQnBkQzVjYmx4MFhIUmNkRngwWkdWc1pYUmxJSFJvYVhNdVoyVjBPMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVodmIyc2dibVZsWkdWa095QnlaV1JsWm1sdVpTQnBkQ0J6YnlCMGFHRjBJSFJvWlNCemRYQndiM0owSUhSbGMzUWdhWE1nYm05MElHVjRaV04xZEdWa0lHRm5ZV2x1TGx4dVhIUmNkRngwY21WMGRYSnVJQ2dnZEdocGN5NW5aWFFnUFNCb2IyOXJSbTRnS1M1aGNIQnNlU2dnZEdocGN5d2dZWEpuZFcxbGJuUnpJQ2s3WEc1Y2RGeDBmVnh1WEhSOU8xeHVmVnh1WEc1Y2JuWmhjbHh1WEc1Y2RDOHZJRk4zWVhCd1lXSnNaU0JwWmlCa2FYTndiR0Y1SUdseklHNXZibVVnYjNJZ2MzUmhjblJ6SUhkcGRHZ2dkR0ZpYkdWY2JseDBMeThnWlhoalpYQjBJRndpZEdGaWJHVmNJaXdnWENKMFlXSnNaUzFqWld4c1hDSXNJRzl5SUZ3aWRHRmliR1V0WTJGd2RHbHZibHdpWEc1Y2RDOHZJRk5sWlNCb1pYSmxJR1p2Y2lCa2FYTndiR0Y1SUhaaGJIVmxjem9nYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OURVMU12WkdsemNHeGhlVnh1WEhSeVpHbHpjR3hoZVhOM1lYQWdQU0F2WGlodWIyNWxmSFJoWW14bEtEOGhMV05iWldGZEtTNHJLUzhzWEc1Y2RHTnpjMU5vYjNjZ1BTQjdJSEJ2YzJsMGFXOXVPaUJjSW1GaWMyOXNkWFJsWENJc0lIWnBjMmxpYVd4cGRIazZJRndpYUdsa1pHVnVYQ0lzSUdScGMzQnNZWGs2SUZ3aVlteHZZMnRjSWlCOUxGeHVYSFJqYzNOT2IzSnRZV3hVY21GdWMyWnZjbTBnUFNCN1hHNWNkRngwYkdWMGRHVnlVM0JoWTJsdVp6b2dYQ0l3WENJc1hHNWNkRngwWm05dWRGZGxhV2RvZERvZ1hDSTBNREJjSWx4dVhIUjlMRnh1WEc1Y2RHTnpjMUJ5WldacGVHVnpJRDBnV3lCY0lsZGxZbXRwZEZ3aUxDQmNJazF2ZWx3aUxDQmNJbTF6WENJZ1hTeGNibHgwWlcxd2RIbFRkSGxzWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aVpHbDJYQ0lnS1M1emRIbHNaVHRjYmx4dUx5OGdVbVYwZFhKdUlHRWdZM056SUhCeWIzQmxjblI1SUcxaGNIQmxaQ0IwYnlCaElIQnZkR1Z1ZEdsaGJHeDVJSFpsYm1SdmNpQndjbVZtYVhobFpDQndjbTl3WlhKMGVWeHVablZ1WTNScGIyNGdkbVZ1Wkc5eVVISnZjRTVoYldVb0lHNWhiV1VnS1NCN1hHNWNibHgwTHk4Z1UyaHZjblJqZFhRZ1ptOXlJRzVoYldWeklIUm9ZWFFnWVhKbElHNXZkQ0IyWlc1a2IzSWdjSEpsWm1sNFpXUmNibHgwYVdZZ0tDQnVZVzFsSUdsdUlHVnRjSFI1VTNSNWJHVWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHNWhiV1U3WEc1Y2RIMWNibHh1WEhRdkx5QkRhR1ZqYXlCbWIzSWdkbVZ1Wkc5eUlIQnlaV1pwZUdWa0lHNWhiV1Z6WEc1Y2RIWmhjaUJqWVhCT1lXMWxJRDBnYm1GdFpWc2dNQ0JkTG5SdlZYQndaWEpEWVhObEtDa2dLeUJ1WVcxbExuTnNhV05sS0NBeElDa3NYRzVjZEZ4MGFTQTlJR056YzFCeVpXWnBlR1Z6TG14bGJtZDBhRHRjYmx4dVhIUjNhR2xzWlNBb0lHa3RMU0FwSUh0Y2JseDBYSFJ1WVcxbElEMGdZM056VUhKbFptbDRaWE5iSUdrZ1hTQXJJR05oY0U1aGJXVTdYRzVjZEZ4MGFXWWdLQ0J1WVcxbElHbHVJR1Z0Y0hSNVUzUjViR1VnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnYm1GdFpUdGNibHgwWEhSOVhHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwVUc5emFYUnBkbVZPZFcxaVpYSW9JR1ZzWlcwc0lIWmhiSFZsTENCemRXSjBjbUZqZENBcElIdGNibHh1WEhRdkx5QkJibmtnY21Wc1lYUnBkbVVnS0NzdkxTa2dkbUZzZFdWeklHaGhkbVVnWVd4eVpXRmtlU0JpWldWdVhHNWNkQzh2SUc1dmNtMWhiR2w2WldRZ1lYUWdkR2hwY3lCd2IybHVkRnh1WEhSMllYSWdiV0YwWTJobGN5QTlJSEpqYzNOT2RXMHVaWGhsWXlnZ2RtRnNkV1VnS1R0Y2JseDBjbVYwZFhKdUlHMWhkR05vWlhNZ1AxeHVYRzVjZEZ4MEx5OGdSM1ZoY21RZ1lXZGhhVzV6ZENCMWJtUmxabWx1WldRZ1hDSnpkV0owY21GamRGd2lMQ0JsTG1jdUxDQjNhR1Z1SUhWelpXUWdZWE1nYVc0Z1kzTnpTRzl2YTNOY2JseDBYSFJOWVhSb0xtMWhlQ2dnTUN3Z2JXRjBZMmhsYzFzZ01pQmRJQzBnS0NCemRXSjBjbUZqZENCOGZDQXdJQ2tnS1NBcklDZ2diV0YwWTJobGMxc2dNeUJkSUh4OElGd2ljSGhjSWlBcElEcGNibHgwWEhSMllXeDFaVHRjYm4xY2JseHVablZ1WTNScGIyNGdZWFZuYldWdWRGZHBaSFJvVDNKSVpXbG5hSFFvSUdWc1pXMHNJRzVoYldVc0lHVjRkSEpoTENCcGMwSnZjbVJsY2tKdmVDd2djM1I1YkdWeklDa2dlMXh1WEhSMllYSWdhU3hjYmx4MFhIUjJZV3dnUFNBd08xeHVYRzVjZEM4dklFbG1JSGRsSUdGc2NtVmhaSGtnYUdGMlpTQjBhR1VnY21sbmFIUWdiV1ZoYzNWeVpXMWxiblFzSUdGMmIybGtJR0YxWjIxbGJuUmhkR2x2Ymx4dVhIUnBaaUFvSUdWNGRISmhJRDA5UFNBb0lHbHpRbTl5WkdWeVFtOTRJRDhnWENKaWIzSmtaWEpjSWlBNklGd2lZMjl1ZEdWdWRGd2lJQ2tnS1NCN1hHNWNkRngwYVNBOUlEUTdYRzVjYmx4MEx5OGdUM1JvWlhKM2FYTmxJR2x1YVhScFlXeHBlbVVnWm05eUlHaHZjbWw2YjI1MFlXd2diM0lnZG1WeWRHbGpZV3dnY0hKdmNHVnlkR2xsYzF4dVhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEdrZ1BTQnVZVzFsSUQwOVBTQmNJbmRwWkhSb1hDSWdQeUF4SURvZ01EdGNibHgwZlZ4dVhHNWNkR1p2Y2lBb0lEc2dhU0E4SURRN0lHa2dLejBnTWlBcElIdGNibHh1WEhSY2RDOHZJRUp2ZEdnZ1ltOTRJRzF2WkdWc2N5QmxlR05zZFdSbElHMWhjbWRwYml3Z2MyOGdZV1JrSUdsMElHbG1JSGRsSUhkaGJuUWdhWFJjYmx4MFhIUnBaaUFvSUdWNGRISmhJRDA5UFNCY0ltMWhjbWRwYmx3aUlDa2dlMXh1WEhSY2RGeDBkbUZzSUNzOUlHcFJkV1Z5ZVM1amMzTW9JR1ZzWlcwc0lHVjRkSEpoSUNzZ1kzTnpSWGh3WVc1a1d5QnBJRjBzSUhSeWRXVXNJSE4wZVd4bGN5QXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnYVhOQ2IzSmtaWEpDYjNnZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUdKdmNtUmxjaTFpYjNnZ2FXNWpiSFZrWlhNZ2NHRmtaR2x1Wnl3Z2MyOGdjbVZ0YjNabElHbDBJR2xtSUhkbElIZGhiblFnWTI5dWRHVnVkRnh1WEhSY2RGeDBhV1lnS0NCbGVIUnlZU0E5UFQwZ1hDSmpiMjUwWlc1MFhDSWdLU0I3WEc1Y2RGeDBYSFJjZEhaaGJDQXRQU0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW5CaFpHUnBibWRjSWlBcklHTnpjMFY0Y0dGdVpGc2dhU0JkTENCMGNuVmxMQ0J6ZEhsc1pYTWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1FYUWdkR2hwY3lCd2IybHVkQ3dnWlhoMGNtRWdhWE51SjNRZ1ltOXlaR1Z5SUc1dmNpQnRZWEpuYVc0c0lITnZJSEpsYlc5MlpTQmliM0prWlhKY2JseDBYSFJjZEdsbUlDZ2daWGgwY21FZ0lUMDlJRndpYldGeVoybHVYQ0lnS1NCN1hHNWNkRngwWEhSY2RIWmhiQ0F0UFNCcVVYVmxjbmt1WTNOektDQmxiR1Z0TENCY0ltSnZjbVJsY2x3aUlDc2dZM056Ulhod1lXNWtXeUJwSUYwZ0t5QmNJbGRwWkhSb1hDSXNJSFJ5ZFdVc0lITjBlV3hsY3lBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2JseDBYSFJjZEM4dklFRjBJSFJvYVhNZ2NHOXBiblFzSUdWNGRISmhJR2x6YmlkMElHTnZiblJsYm5Rc0lITnZJR0ZrWkNCd1lXUmthVzVuWEc1Y2RGeDBYSFIyWVd3Z0t6MGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0p3WVdSa2FXNW5YQ0lnS3lCamMzTkZlSEJoYm1SYklHa2dYU3dnZEhKMVpTd2djM1I1YkdWeklDazdYRzVjYmx4MFhIUmNkQzh2SUVGMElIUm9hWE1nY0c5cGJuUXNJR1Y0ZEhKaElHbHpiaWQwSUdOdmJuUmxiblFnYm05eUlIQmhaR1JwYm1jc0lITnZJR0ZrWkNCaWIzSmtaWEpjYmx4MFhIUmNkR2xtSUNnZ1pYaDBjbUVnSVQwOUlGd2ljR0ZrWkdsdVoxd2lJQ2tnZTF4dVhIUmNkRngwWEhSMllXd2dLejBnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKaWIzSmtaWEpjSWlBcklHTnpjMFY0Y0dGdVpGc2dhU0JkSUNzZ1hDSlhhV1IwYUZ3aUxDQjBjblZsTENCemRIbHNaWE1nS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnZG1Gc08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlhhV1IwYUU5eVNHVnBaMmgwS0NCbGJHVnRMQ0J1WVcxbExDQmxlSFJ5WVNBcElIdGNibHh1WEhRdkx5QlRkR0Z5ZENCM2FYUm9JRzltWm5ObGRDQndjbTl3WlhKMGVTd2dkMmhwWTJnZ2FYTWdaWEYxYVhaaGJHVnVkQ0IwYnlCMGFHVWdZbTl5WkdWeUxXSnZlQ0IyWVd4MVpWeHVYSFIyWVhJZ2RtRnNMRnh1WEhSY2RIWmhiSFZsU1hOQ2IzSmtaWEpDYjNnZ1BTQjBjblZsTEZ4dVhIUmNkSE4wZVd4bGN5QTlJR2RsZEZOMGVXeGxjeWdnWld4bGJTQXBMRnh1WEhSY2RHbHpRbTl5WkdWeVFtOTRJRDBnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKaWIzaFRhWHBwYm1kY0lpd2dabUZzYzJVc0lITjBlV3hsY3lBcElEMDlQU0JjSW1KdmNtUmxjaTFpYjNoY0lqdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFeElHOXViSGxjYmx4MEx5OGdVblZ1Ym1sdVp5Qm5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FnYjI0Z1lTQmthWE5qYjI1dVpXTjBaV1FnYm05a1pWeHVYSFF2THlCcGJpQkpSU0IwYUhKdmQzTWdZVzRnWlhKeWIzSXVYRzVjZEdsbUlDZ2daV3hsYlM1blpYUkRiR2xsYm5SU1pXTjBjeWdwTG14bGJtZDBhQ0FwSUh0Y2JseDBYSFIyWVd3Z1BTQmxiR1Z0TG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BXeUJ1WVcxbElGMDdYRzVjZEgxY2JseHVYSFF2THlCVGIyMWxJRzV2Ymkxb2RHMXNJR1ZzWlcxbGJuUnpJSEpsZEhWeWJpQjFibVJsWm1sdVpXUWdabTl5SUc5bVpuTmxkRmRwWkhSb0xDQnpieUJqYUdWamF5Qm1iM0lnYm5Wc2JDOTFibVJsWm1sdVpXUmNibHgwTHk4Z2MzWm5JQzBnYUhSMGNITTZMeTlpZFdkNmFXeHNZUzV0YjNwcGJHeGhMbTl5Wnk5emFHOTNYMkoxWnk1aloyay9hV1E5TmpRNU1qZzFYRzVjZEM4dklFMWhkR2hOVENBdElHaDBkSEJ6T2k4dlluVm5lbWxzYkdFdWJXOTZhV3hzWVM1dmNtY3ZjMmh2ZDE5aWRXY3VZMmRwUDJsa1BUUTVNVFkyT0Z4dVhIUnBaaUFvSUhaaGJDQThQU0F3SUh4OElIWmhiQ0E5UFNCdWRXeHNJQ2tnZTF4dVhHNWNkRngwTHk4Z1JtRnNiQ0JpWVdOcklIUnZJR052YlhCMWRHVmtJSFJvWlc0Z2RXNWpiMjF3ZFhSbFpDQmpjM01nYVdZZ2JtVmpaWE56WVhKNVhHNWNkRngwZG1Gc0lEMGdZM1Z5UTFOVEtDQmxiR1Z0TENCdVlXMWxMQ0J6ZEhsc1pYTWdLVHRjYmx4MFhIUnBaaUFvSUhaaGJDQThJREFnZkh3Z2RtRnNJRDA5SUc1MWJHd2dLU0I3WEc1Y2RGeDBYSFIyWVd3Z1BTQmxiR1Z0TG5OMGVXeGxXeUJ1WVcxbElGMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRMjl0Y0hWMFpXUWdkVzVwZENCcGN5QnViM1FnY0dsNFpXeHpMaUJUZEc5d0lHaGxjbVVnWVc1a0lISmxkSFZ5Ymk1Y2JseDBYSFJwWmlBb0lISnVkVzF1YjI1d2VDNTBaWE4wS0NCMllXd2dLU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIyWVd3N1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1EyaGxZMnNnWm05eUlITjBlV3hsSUdsdUlHTmhjMlVnWVNCaWNtOTNjMlZ5SUhkb2FXTm9JSEpsZEhWeWJuTWdkVzV5Wld4cFlXSnNaU0IyWVd4MVpYTmNibHgwWEhRdkx5Qm1iM0lnWjJWMFEyOXRjSFYwWldSVGRIbHNaU0J6YVd4bGJuUnNlU0JtWVd4c2N5QmlZV05ySUhSdklIUm9aU0J5Wld4cFlXSnNaU0JsYkdWdExuTjBlV3hsWEc1Y2RGeDBkbUZzZFdWSmMwSnZjbVJsY2tKdmVDQTlJR2x6UW05eVpHVnlRbTk0SUNZbVhHNWNkRngwWEhRb0lITjFjSEJ2Y25RdVltOTRVMmw2YVc1blVtVnNhV0ZpYkdVb0tTQjhmQ0IyWVd3Z1BUMDlJR1ZzWlcwdWMzUjViR1ZiSUc1aGJXVWdYU0FwTzF4dVhHNWNkRngwTHk4Z1RtOXliV0ZzYVhwbElGd2lYQ0lzSUdGMWRHOHNJR0Z1WkNCd2NtVndZWEpsSUdadmNpQmxlSFJ5WVZ4dVhIUmNkSFpoYkNBOUlIQmhjbk5sUm14dllYUW9JSFpoYkNBcElIeDhJREE3WEc1Y2RIMWNibHh1WEhRdkx5QlZjMlVnZEdobElHRmpkR2wyWlNCaWIzZ3RjMmw2YVc1bklHMXZaR1ZzSUhSdklHRmtaQzl6ZFdKMGNtRmpkQ0JwY25KbGJHVjJZVzUwSUhOMGVXeGxjMXh1WEhSeVpYUjFjbTRnS0NCMllXd2dLMXh1WEhSY2RHRjFaMjFsYm5SWGFXUjBhRTl5U0dWcFoyaDBLRnh1WEhSY2RGeDBaV3hsYlN4Y2JseDBYSFJjZEc1aGJXVXNYRzVjZEZ4MFhIUmxlSFJ5WVNCOGZDQW9JR2x6UW05eVpHVnlRbTk0SUQ4Z1hDSmliM0prWlhKY0lpQTZJRndpWTI5dWRHVnVkRndpSUNrc1hHNWNkRngwWEhSMllXeDFaVWx6UW05eVpHVnlRbTk0TEZ4dVhIUmNkRngwYzNSNWJHVnpYRzVjZEZ4MEtWeHVYSFFwSUNzZ1hDSndlRndpTzF4dWZWeHVYRzVxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjYmx4MEx5OGdRV1JrSUdsdUlITjBlV3hsSUhCeWIzQmxjblI1SUdodmIydHpJR1p2Y2lCdmRtVnljbWxrYVc1bklIUm9aU0JrWldaaGRXeDBYRzVjZEM4dklHSmxhR0YyYVc5eUlHOW1JR2RsZEhScGJtY2dZVzVrSUhObGRIUnBibWNnWVNCemRIbHNaU0J3Y205d1pYSjBlVnh1WEhSamMzTkliMjlyY3pvZ2UxeHVYSFJjZEc5d1lXTnBkSGs2SUh0Y2JseDBYSFJjZEdkbGREb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHTnZiWEIxZEdWa0lDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lHTnZiWEIxZEdWa0lDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWMlVnYzJodmRXeGtJR0ZzZDJGNWN5Qm5aWFFnWVNCdWRXMWlaWElnWW1GamF5Qm1jbTl0SUc5d1lXTnBkSGxjYmx4MFhIUmNkRngwWEhSMllYSWdjbVYwSUQwZ1kzVnlRMU5US0NCbGJHVnRMQ0JjSW05d1lXTnBkSGxjSWlBcE8xeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaWFFnUFQwOUlGd2lYQ0lnUHlCY0lqRmNJaUE2SUhKbGREdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFF2THlCRWIyNG5kQ0JoZFhSdmJXRjBhV05oYkd4NUlHRmtaQ0JjSW5CNFhDSWdkRzhnZEdobGMyVWdjRzl6YzJsaWJIa3RkVzVwZEd4bGMzTWdjSEp2Y0dWeWRHbGxjMXh1WEhSamMzTk9kVzFpWlhJNklIdGNibHgwWEhSY0ltRnVhVzFoZEdsdmJrbDBaWEpoZEdsdmJrTnZkVzUwWENJNklIUnlkV1VzWEc1Y2RGeDBYQ0pqYjJ4MWJXNURiM1Z1ZEZ3aU9pQjBjblZsTEZ4dVhIUmNkRndpWm1sc2JFOXdZV05wZEhsY0lqb2dkSEoxWlN4Y2JseDBYSFJjSW1ac1pYaEhjbTkzWENJNklIUnlkV1VzWEc1Y2RGeDBYQ0ptYkdWNFUyaHlhVzVyWENJNklIUnlkV1VzWEc1Y2RGeDBYQ0ptYjI1MFYyVnBaMmgwWENJNklIUnlkV1VzWEc1Y2RGeDBYQ0pzYVc1bFNHVnBaMmgwWENJNklIUnlkV1VzWEc1Y2RGeDBYQ0p2Y0dGamFYUjVYQ0k2SUhSeWRXVXNYRzVjZEZ4MFhDSnZjbVJsY2x3aU9pQjBjblZsTEZ4dVhIUmNkRndpYjNKd2FHRnVjMXdpT2lCMGNuVmxMRnh1WEhSY2RGd2lkMmxrYjNkelhDSTZJSFJ5ZFdVc1hHNWNkRngwWENKNlNXNWtaWGhjSWpvZ2RISjFaU3hjYmx4MFhIUmNJbnB2YjIxY0lqb2dkSEoxWlZ4dVhIUjlMRnh1WEc1Y2RDOHZJRUZrWkNCcGJpQndjbTl3WlhKMGFXVnpJSGRvYjNObElHNWhiV1Z6SUhsdmRTQjNhWE5vSUhSdklHWnBlQ0JpWldadmNtVmNibHgwTHk4Z2MyVjBkR2x1WnlCdmNpQm5aWFIwYVc1bklIUm9aU0IyWVd4MVpWeHVYSFJqYzNOUWNtOXdjem9nZTF4dVhIUmNkRndpWm14dllYUmNJam9nWENKamMzTkdiRzloZEZ3aVhHNWNkSDBzWEc1Y2JseDBMeThnUjJWMElHRnVaQ0J6WlhRZ2RHaGxJSE4wZVd4bElIQnliM0JsY25SNUlHOXVJR0VnUkU5TklFNXZaR1ZjYmx4MGMzUjViR1U2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0J1WVcxbExDQjJZV3gxWlN3Z1pYaDBjbUVnS1NCN1hHNWNibHgwWEhRdkx5QkViMjRuZENCelpYUWdjM1I1YkdWeklHOXVJSFJsZUhRZ1lXNWtJR052YlcxbGJuUWdibTlrWlhOY2JseDBYSFJwWmlBb0lDRmxiR1Z0SUh4OElHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlETWdmSHdnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnT0NCOGZDQWhaV3hsYlM1emRIbHNaU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJOWVd0bElITjFjbVVnZEdoaGRDQjNaU2R5WlNCM2IzSnJhVzVuSUhkcGRHZ2dkR2hsSUhKcFoyaDBJRzVoYldWY2JseDBYSFIyWVhJZ2NtVjBMQ0IwZVhCbExDQm9iMjlyY3l4Y2JseDBYSFJjZEc5eWFXZE9ZVzFsSUQwZ2FsRjFaWEo1TG1OaGJXVnNRMkZ6WlNnZ2JtRnRaU0FwTEZ4dVhIUmNkRngwYzNSNWJHVWdQU0JsYkdWdExuTjBlV3hsTzF4dVhHNWNkRngwYm1GdFpTQTlJR3BSZFdWeWVTNWpjM05RY205d2Mxc2diM0pwWjA1aGJXVWdYU0I4ZkZ4dVhIUmNkRngwS0NCcVVYVmxjbmt1WTNOelVISnZjSE5iSUc5eWFXZE9ZVzFsSUYwZ1BTQjJaVzVrYjNKUWNtOXdUbUZ0WlNnZ2IzSnBaMDVoYldVZ0tTQjhmQ0J2Y21sblRtRnRaU0FwTzF4dVhHNWNkRngwTHk4Z1IyVjBjeUJvYjI5cklHWnZjaUIwYUdVZ2NISmxabWw0WldRZ2RtVnljMmx2Yml3Z2RHaGxiaUIxYm5CeVpXWnBlR1ZrSUhabGNuTnBiMjVjYmx4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2JtRnRaU0JkSUh4OElHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2IzSnBaMDVoYldVZ1hUdGNibHh1WEhSY2RDOHZJRU5vWldOcklHbG1JSGRsSjNKbElITmxkSFJwYm1jZ1lTQjJZV3gxWlZ4dVhIUmNkR2xtSUNnZ2RtRnNkV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkSFI1Y0dVZ1BTQjBlWEJsYjJZZ2RtRnNkV1U3WEc1Y2JseDBYSFJjZEM4dklFTnZiblpsY25RZ1hDSXJQVndpSUc5eUlGd2lMVDFjSWlCMGJ5QnlaV3hoZEdsMlpTQnVkVzFpWlhKeklDZ2pOek0wTlNsY2JseDBYSFJjZEdsbUlDZ2dkSGx3WlNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFtSmlBb0lISmxkQ0E5SUhKamMzTk9kVzB1WlhobFl5Z2dkbUZzZFdVZ0tTQXBJQ1ltSUhKbGRGc2dNU0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUjJZV3gxWlNBOUlHRmthblZ6ZEVOVFV5Z2daV3hsYlN3Z2JtRnRaU3dnY21WMElDazdYRzVjYmx4MFhIUmNkRngwTHk4Z1JtbDRaWE1nWW5WbklDTTVNak0zWEc1Y2RGeDBYSFJjZEhSNWNHVWdQU0JjSW01MWJXSmxjbHdpTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5Qk5ZV3RsSUhOMWNtVWdkR2hoZENCdWRXeHNJR0Z1WkNCT1lVNGdkbUZzZFdWeklHRnlaVzRuZENCelpYUWdLQ00zTVRFMktWeHVYSFJjZEZ4MGFXWWdLQ0IyWVd4MVpTQTlQU0J1ZFd4c0lIeDhJSFpoYkhWbElDRTlQU0IyWVd4MVpTQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCSlppQmhJRzUxYldKbGNpQjNZWE1nY0dGemMyVmtJR2x1TENCaFpHUWdkR2hsSUhWdWFYUWdLR1Y0WTJWd2RDQm1iM0lnWTJWeWRHRnBiaUJEVTFNZ2NISnZjR1Z5ZEdsbGN5bGNibHgwWEhSY2RHbG1JQ2dnZEhsd1pTQTlQVDBnWENKdWRXMWlaWEpjSWlBcElIdGNibHgwWEhSY2RGeDBkbUZzZFdVZ0t6MGdjbVYwSUNZbUlISmxkRnNnTXlCZElIeDhJQ2dnYWxGMVpYSjVMbU56YzA1MWJXSmxjbHNnYjNKcFowNWhiV1VnWFNBL0lGd2lYQ0lnT2lCY0luQjRYQ0lnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdZbUZqYTJkeWIzVnVaQzBxSUhCeWIzQnpJR0ZtWm1WamRDQnZjbWxuYVc1aGJDQmpiRzl1WlNkeklIWmhiSFZsYzF4dVhIUmNkRngwYVdZZ0tDQWhjM1Z3Y0c5eWRDNWpiR1ZoY2tOc2IyNWxVM1I1YkdVZ0ppWWdkbUZzZFdVZ1BUMDlJRndpWENJZ0ppWWdibUZ0WlM1cGJtUmxlRTltS0NCY0ltSmhZMnRuY205MWJtUmNJaUFwSUQwOVBTQXdJQ2tnZTF4dVhIUmNkRngwWEhSemRIbHNaVnNnYm1GdFpTQmRJRDBnWENKcGJtaGxjbWwwWENJN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRWxtSUdFZ2FHOXZheUIzWVhNZ2NISnZkbWxrWldRc0lIVnpaU0IwYUdGMElIWmhiSFZsTENCdmRHaGxjbmRwYzJVZ2FuVnpkQ0J6WlhRZ2RHaGxJSE53WldOcFptbGxaQ0IyWVd4MVpWeHVYSFJjZEZ4MGFXWWdLQ0FoYUc5dmEzTWdmSHdnSVNnZ1hDSnpaWFJjSWlCcGJpQm9iMjlyY3lBcElIeDhYRzVjZEZ4MFhIUmNkQ2dnZG1Gc2RXVWdQU0JvYjI5cmN5NXpaWFFvSUdWc1pXMHNJSFpoYkhWbExDQmxlSFJ5WVNBcElDa2dJVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHh1WEhSY2RGeDBYSFJ6ZEhsc1pWc2dibUZ0WlNCZElEMGdkbUZzZFdVN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhRdkx5QkpaaUJoSUdodmIyc2dkMkZ6SUhCeWIzWnBaR1ZrSUdkbGRDQjBhR1VnYm05dUxXTnZiWEIxZEdWa0lIWmhiSFZsSUdaeWIyMGdkR2hsY21WY2JseDBYSFJjZEdsbUlDZ2dhRzl2YTNNZ0ppWWdYQ0puWlhSY0lpQnBiaUJvYjI5cmN5QW1KbHh1WEhSY2RGeDBYSFFvSUhKbGRDQTlJR2h2YjJ0ekxtZGxkQ2dnWld4bGJTd2dabUZzYzJVc0lHVjRkSEpoSUNrZ0tTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFOTBhR1Z5ZDJselpTQnFkWE4wSUdkbGRDQjBhR1VnZG1Gc2RXVWdabkp2YlNCMGFHVWdjM1I1YkdVZ2IySnFaV04wWEc1Y2RGeDBYSFJ5WlhSMWNtNGdjM1I1YkdWYklHNWhiV1VnWFR0Y2JseDBYSFI5WEc1Y2RIMHNYRzVjYmx4MFkzTnpPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dibUZ0WlN3Z1pYaDBjbUVzSUhOMGVXeGxjeUFwSUh0Y2JseDBYSFIyWVhJZ2RtRnNMQ0J1ZFcwc0lHaHZiMnR6TEZ4dVhIUmNkRngwYjNKcFowNWhiV1VnUFNCcVVYVmxjbmt1WTJGdFpXeERZWE5sS0NCdVlXMWxJQ2s3WEc1Y2JseDBYSFF2THlCTllXdGxJSE4xY21VZ2RHaGhkQ0IzWlNkeVpTQjNiM0pyYVc1bklIZHBkR2dnZEdobElISnBaMmgwSUc1aGJXVmNibHgwWEhSdVlXMWxJRDBnYWxGMVpYSjVMbU56YzFCeWIzQnpXeUJ2Y21sblRtRnRaU0JkSUh4OFhHNWNkRngwWEhRb0lHcFJkV1Z5ZVM1amMzTlFjbTl3YzFzZ2IzSnBaMDVoYldVZ1hTQTlJSFpsYm1SdmNsQnliM0JPWVcxbEtDQnZjbWxuVG1GdFpTQXBJSHg4SUc5eWFXZE9ZVzFsSUNrN1hHNWNibHgwWEhRdkx5QlVjbmtnY0hKbFptbDRaV1FnYm1GdFpTQm1iMnhzYjNkbFpDQmllU0IwYUdVZ2RXNXdjbVZtYVhobFpDQnVZVzFsWEc1Y2RGeDBhRzl2YTNNZ1BTQnFVWFZsY25rdVkzTnpTRzl2YTNOYklHNWhiV1VnWFNCOGZDQnFVWFZsY25rdVkzTnpTRzl2YTNOYklHOXlhV2RPWVcxbElGMDdYRzVjYmx4MFhIUXZMeUJKWmlCaElHaHZiMnNnZDJGeklIQnliM1pwWkdWa0lHZGxkQ0IwYUdVZ1kyOXRjSFYwWldRZ2RtRnNkV1VnWm5KdmJTQjBhR1Z5WlZ4dVhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSm5aWFJjSWlCcGJpQm9iMjlyY3lBcElIdGNibHgwWEhSY2RIWmhiQ0E5SUdodmIydHpMbWRsZENnZ1pXeGxiU3dnZEhKMVpTd2daWGgwY21FZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlBkR2hsY25kcGMyVXNJR2xtSUdFZ2QyRjVJSFJ2SUdkbGRDQjBhR1VnWTI5dGNIVjBaV1FnZG1Gc2RXVWdaWGhwYzNSekxDQjFjMlVnZEdoaGRGeHVYSFJjZEdsbUlDZ2dkbUZzSUQwOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFIyWVd3Z1BTQmpkWEpEVTFNb0lHVnNaVzBzSUc1aGJXVXNJSE4wZVd4bGN5QXBPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU52Ym5abGNuUWdYQ0p1YjNKdFlXeGNJaUIwYnlCamIyMXdkWFJsWkNCMllXeDFaVnh1WEhSY2RHbG1JQ2dnZG1Gc0lEMDlQU0JjSW01dmNtMWhiRndpSUNZbUlHNWhiV1VnYVc0Z1kzTnpUbTl5YldGc1ZISmhibk5tYjNKdElDa2dlMXh1WEhSY2RGeDBkbUZzSUQwZ1kzTnpUbTl5YldGc1ZISmhibk5tYjNKdFd5QnVZVzFsSUYwN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1RXRnJaU0J1ZFcxbGNtbGpJR2xtSUdadmNtTmxaQ0J2Y2lCaElIRjFZV3hwWm1sbGNpQjNZWE1nY0hKdmRtbGtaV1FnWVc1a0lIWmhiQ0JzYjI5cmN5QnVkVzFsY21salhHNWNkRngwYVdZZ0tDQmxlSFJ5WVNBOVBUMGdYQ0pjSWlCOGZDQmxlSFJ5WVNBcElIdGNibHgwWEhSY2RHNTFiU0E5SUhCaGNuTmxSbXh2WVhRb0lIWmhiQ0FwTzF4dVhIUmNkRngwY21WMGRYSnVJR1Y0ZEhKaElEMDlQU0IwY25WbElIeDhJR2x6Um1sdWFYUmxLQ0J1ZFcwZ0tTQS9JRzUxYlNCOGZDQXdJRG9nZG1Gc08xeHVYSFJjZEgxY2JseDBYSFJ5WlhSMWNtNGdkbUZzTzF4dVhIUjlYRzU5SUNrN1hHNWNibXBSZFdWeWVTNWxZV05vS0NCYklGd2lhR1ZwWjJoMFhDSXNJRndpZDJsa2RHaGNJaUJkTENCbWRXNWpkR2x2YmlnZ2FTd2dibUZ0WlNBcElIdGNibHgwYWxGMVpYSjVMbU56YzBodmIydHpXeUJ1WVcxbElGMGdQU0I3WEc1Y2RGeDBaMlYwT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnWTI5dGNIVjBaV1FzSUdWNGRISmhJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQmpiMjF3ZFhSbFpDQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QkRaWEowWVdsdUlHVnNaVzFsYm5SeklHTmhiaUJvWVhabElHUnBiV1Z1YzJsdmJpQnBibVp2SUdsbUlIZGxJR2x1ZG1semFXSnNlU0J6YUc5M0lIUm9aVzFjYmx4MFhIUmNkRngwTHk4Z1luVjBJR2wwSUcxMWMzUWdhR0YyWlNCaElHTjFjbkpsYm5RZ1pHbHpjR3hoZVNCemRIbHNaU0IwYUdGMElIZHZkV3hrSUdKbGJtVm1hWFJjYmx4MFhIUmNkRngwY21WMGRYSnVJSEprYVhOd2JHRjVjM2RoY0M1MFpYTjBLQ0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW1ScGMzQnNZWGxjSWlBcElDa2dKaVpjYmx4dVhIUmNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRk5oWm1GeWFTQTRLMXh1WEhSY2RGeDBYSFJjZEM4dklGUmhZbXhsSUdOdmJIVnRibk1nYVc0Z1UyRm1ZWEpwSUdoaGRtVWdibTl1TFhwbGNtOGdiMlptYzJWMFYybGtkR2dnSmlCNlpYSnZYRzVjZEZ4MFhIUmNkRngwTHk4Z1oyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZDJsa2RHZ2dkVzVzWlhOeklHUnBjM0JzWVhrZ2FYTWdZMmhoYm1kbFpDNWNibHgwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVEV4SUc5dWJIbGNibHgwWEhSY2RGeDBYSFF2THlCU2RXNXVhVzVuSUdkbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDQnZiaUJoSUdScGMyTnZibTVsWTNSbFpDQnViMlJsWEc1Y2RGeDBYSFJjZEZ4MEx5OGdhVzRnU1VVZ2RHaHliM2R6SUdGdUlHVnljbTl5TGx4dVhIUmNkRngwWEhSY2RDZ2dJV1ZzWlcwdVoyVjBRMnhwWlc1MFVtVmpkSE1vS1M1c1pXNW5kR2dnZkh3Z0lXVnNaVzB1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VkMmxrZEdnZ0tTQS9YRzVjZEZ4MFhIUmNkRngwWEhSemQyRndLQ0JsYkdWdExDQmpjM05UYUc5M0xDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlHZGxkRmRwWkhSb1QzSklaV2xuYUhRb0lHVnNaVzBzSUc1aGJXVXNJR1Y0ZEhKaElDazdYRzVjZEZ4MFhIUmNkRngwWEhSOUlDa2dPbHh1WEhSY2RGeDBYSFJjZEZ4MFoyVjBWMmxrZEdoUGNraGxhV2RvZENnZ1pXeGxiU3dnYm1GdFpTd2daWGgwY21FZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOUxGeHVYRzVjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dkbUZzZFdVc0lHVjRkSEpoSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJRzFoZEdOb1pYTXNYRzVjZEZ4MFhIUmNkSE4wZVd4bGN5QTlJR1Y0ZEhKaElDWW1JR2RsZEZOMGVXeGxjeWdnWld4bGJTQXBMRnh1WEhSY2RGeDBYSFJ6ZFdKMGNtRmpkQ0E5SUdWNGRISmhJQ1ltSUdGMVoyMWxiblJYYVdSMGFFOXlTR1ZwWjJoMEtGeHVYSFJjZEZ4MFhIUmNkR1ZzWlcwc1hHNWNkRngwWEhSY2RGeDBibUZ0WlN4Y2JseDBYSFJjZEZ4MFhIUmxlSFJ5WVN4Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQmNJbUp2ZUZOcGVtbHVaMXdpTENCbVlXeHpaU3dnYzNSNWJHVnpJQ2tnUFQwOUlGd2lZbTl5WkdWeUxXSnZlRndpTEZ4dVhIUmNkRngwWEhSY2RITjBlV3hsYzF4dVhIUmNkRngwWEhRcE8xeHVYRzVjZEZ4MFhIUXZMeUJEYjI1MlpYSjBJSFJ2SUhCcGVHVnNjeUJwWmlCMllXeDFaU0JoWkdwMWMzUnRaVzUwSUdseklHNWxaV1JsWkZ4dVhIUmNkRngwYVdZZ0tDQnpkV0owY21GamRDQW1KaUFvSUcxaGRHTm9aWE1nUFNCeVkzTnpUblZ0TG1WNFpXTW9JSFpoYkhWbElDa2dLU0FtSmx4dVhIUmNkRngwWEhRb0lHMWhkR05vWlhOYklETWdYU0I4ZkNCY0luQjRYQ0lnS1NBaFBUMGdYQ0p3ZUZ3aUlDa2dlMXh1WEc1Y2RGeDBYSFJjZEdWc1pXMHVjM1I1YkdWYklHNWhiV1VnWFNBOUlIWmhiSFZsTzF4dVhIUmNkRngwWEhSMllXeDFaU0E5SUdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUc1aGJXVWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJSE5sZEZCdmMybDBhWFpsVG5WdFltVnlLQ0JsYkdWdExDQjJZV3gxWlN3Z2MzVmlkSEpoWTNRZ0tUdGNibHgwWEhSOVhHNWNkSDA3WEc1OUlDazdYRzVjYm1wUmRXVnllUzVqYzNOSWIyOXJjeTV0WVhKbmFXNU1aV1owSUQwZ1lXUmtSMlYwU0c5dmEwbG1LQ0J6ZFhCd2IzSjBMbkpsYkdsaFlteGxUV0Z5WjJsdVRHVm1kQ3hjYmx4MFpuVnVZM1JwYjI0b0lHVnNaVzBzSUdOdmJYQjFkR1ZrSUNrZ2UxeHVYSFJjZEdsbUlDZ2dZMjl0Y0hWMFpXUWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdLQ0J3WVhKelpVWnNiMkYwS0NCamRYSkRVMU1vSUdWc1pXMHNJRndpYldGeVoybHVUR1ZtZEZ3aUlDa2dLU0I4ZkZ4dVhIUmNkRngwWEhSbGJHVnRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncExteGxablFnTFZ4dVhIUmNkRngwWEhSY2RITjNZWEFvSUdWc1pXMHNJSHNnYldGeVoybHVUR1ZtZERvZ01DQjlMQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbXhsWm5RN1hHNWNkRngwWEhSY2RGeDBmU0FwWEc1Y2RGeDBYSFJjZENrZ0t5QmNJbkI0WENJN1hHNWNkRngwZlZ4dVhIUjlYRzRwTzF4dVhHNHZMeUJVYUdWelpTQm9iMjlyY3lCaGNtVWdkWE5sWkNCaWVTQmhibWx0WVhSbElIUnZJR1Y0Y0dGdVpDQndjbTl3WlhKMGFXVnpYRzVxVVhWbGNua3VaV0ZqYUNnZ2UxeHVYSFJ0WVhKbmFXNDZJRndpWENJc1hHNWNkSEJoWkdScGJtYzZJRndpWENJc1hHNWNkR0p2Y21SbGNqb2dYQ0pYYVdSMGFGd2lYRzU5TENCbWRXNWpkR2x2YmlnZ2NISmxabWw0TENCemRXWm1hWGdnS1NCN1hHNWNkR3BSZFdWeWVTNWpjM05JYjI5cmMxc2djSEpsWm1sNElDc2djM1ZtWm1sNElGMGdQU0I3WEc1Y2RGeDBaWGh3WVc1a09pQm1kVzVqZEdsdmJpZ2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUjJZWElnYVNBOUlEQXNYRzVjZEZ4MFhIUmNkR1Y0Y0dGdVpHVmtJRDBnZTMwc1hHNWNibHgwWEhSY2RGeDBMeThnUVhOemRXMWxjeUJoSUhOcGJtZHNaU0J1ZFcxaVpYSWdhV1lnYm05MElHRWdjM1J5YVc1blhHNWNkRngwWEhSY2RIQmhjblJ6SUQwZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNCY0luTjBjbWx1WjF3aUlEOGdkbUZzZFdVdWMzQnNhWFFvSUZ3aUlGd2lJQ2tnT2lCYklIWmhiSFZsSUYwN1hHNWNibHgwWEhSY2RHWnZjaUFvSURzZ2FTQThJRFE3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwWlhod1lXNWtaV1JiSUhCeVpXWnBlQ0FySUdOemMwVjRjR0Z1WkZzZ2FTQmRJQ3NnYzNWbVptbDRJRjBnUFZ4dVhIUmNkRngwWEhSY2RIQmhjblJ6V3lCcElGMGdmSHdnY0dGeWRITmJJR2tnTFNBeUlGMGdmSHdnY0dGeWRITmJJREFnWFR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUdWNGNHRnVaR1ZrTzF4dVhIUmNkSDFjYmx4MGZUdGNibHh1WEhScFppQW9JQ0Z5YldGeVoybHVMblJsYzNRb0lIQnlaV1pwZUNBcElDa2dlMXh1WEhSY2RHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2NISmxabWw0SUNzZ2MzVm1abWw0SUYwdWMyVjBJRDBnYzJWMFVHOXphWFJwZG1WT2RXMWlaWEk3WEc1Y2RIMWNibjBnS1R0Y2JseHVhbEYxWlhKNUxtWnVMbVY0ZEdWdVpDZ2dlMXh1WEhSamMzTTZJR1oxYm1OMGFXOXVLQ0J1WVcxbExDQjJZV3gxWlNBcElIdGNibHgwWEhSeVpYUjFjbTRnWVdOalpYTnpLQ0IwYUdsekxDQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z2JtRnRaU3dnZG1Gc2RXVWdLU0I3WEc1Y2RGeDBYSFIyWVhJZ2MzUjViR1Z6TENCc1pXNHNYRzVjZEZ4MFhIUmNkRzFoY0NBOUlIdDlMRnh1WEhSY2RGeDBYSFJwSUQwZ01EdGNibHh1WEhSY2RGeDBhV1lnS0NCcVVYVmxjbmt1YVhOQmNuSmhlU2dnYm1GdFpTQXBJQ2tnZTF4dVhIUmNkRngwWEhSemRIbHNaWE1nUFNCblpYUlRkSGxzWlhNb0lHVnNaVzBnS1R0Y2JseDBYSFJjZEZ4MGJHVnVJRDBnYm1GdFpTNXNaVzVuZEdnN1hHNWNibHgwWEhSY2RGeDBabTl5SUNnZ095QnBJRHdnYkdWdU95QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RGeDBiV0Z3V3lCdVlXMWxXeUJwSUYwZ1hTQTlJR3BSZFdWeWVTNWpjM01vSUdWc1pXMHNJRzVoYldWYklHa2dYU3dnWm1Gc2MyVXNJSE4wZVd4bGN5QXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUcxaGNEdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlIWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUWdQMXh1WEhSY2RGeDBYSFJxVVhWbGNua3VjM1I1YkdVb0lHVnNaVzBzSUc1aGJXVXNJSFpoYkhWbElDa2dPbHh1WEhSY2RGeDBYSFJxVVhWbGNua3VZM056S0NCbGJHVnRMQ0J1WVcxbElDazdYRzVjZEZ4MGZTd2dibUZ0WlN3Z2RtRnNkV1VzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElDazdYRzVjZEgxY2JuMGdLVHRjYmx4dVhHNW1kVzVqZEdsdmJpQlVkMlZsYmlnZ1pXeGxiU3dnYjNCMGFXOXVjeXdnY0hKdmNDd2daVzVrTENCbFlYTnBibWNnS1NCN1hHNWNkSEpsZEhWeWJpQnVaWGNnVkhkbFpXNHVjSEp2ZEc5MGVYQmxMbWx1YVhRb0lHVnNaVzBzSUc5d2RHbHZibk1zSUhCeWIzQXNJR1Z1WkN3Z1pXRnphVzVuSUNrN1hHNTlYRzVxVVhWbGNua3VWSGRsWlc0Z1BTQlVkMlZsYmp0Y2JseHVWSGRsWlc0dWNISnZkRzkwZVhCbElEMGdlMXh1WEhSamIyNXpkSEoxWTNSdmNqb2dWSGRsWlc0c1hHNWNkR2x1YVhRNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCdmNIUnBiMjV6TENCd2NtOXdMQ0JsYm1Rc0lHVmhjMmx1Wnl3Z2RXNXBkQ0FwSUh0Y2JseDBYSFIwYUdsekxtVnNaVzBnUFNCbGJHVnRPMXh1WEhSY2RIUm9hWE11Y0hKdmNDQTlJSEJ5YjNBN1hHNWNkRngwZEdocGN5NWxZWE5wYm1jZ1BTQmxZWE5wYm1jZ2ZId2dhbEYxWlhKNUxtVmhjMmx1Wnk1ZlpHVm1ZWFZzZER0Y2JseDBYSFIwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVYSFJjZEhSb2FYTXVjM1JoY25RZ1BTQjBhR2x6TG01dmR5QTlJSFJvYVhNdVkzVnlLQ2s3WEc1Y2RGeDBkR2hwY3k1bGJtUWdQU0JsYm1RN1hHNWNkRngwZEdocGN5NTFibWwwSUQwZ2RXNXBkQ0I4ZkNBb0lHcFJkV1Z5ZVM1amMzTk9kVzFpWlhKYklIQnliM0FnWFNBL0lGd2lYQ0lnT2lCY0luQjRYQ0lnS1R0Y2JseDBmU3hjYmx4MFkzVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFIyWVhJZ2FHOXZhM01nUFNCVWQyVmxiaTV3Y205d1NHOXZhM05iSUhSb2FYTXVjSEp2Y0NCZE8xeHVYRzVjZEZ4MGNtVjBkWEp1SUdodmIydHpJQ1ltSUdodmIydHpMbWRsZENBL1hHNWNkRngwWEhSb2IyOXJjeTVuWlhRb0lIUm9hWE1nS1NBNlhHNWNkRngwWEhSVWQyVmxiaTV3Y205d1NHOXZhM011WDJSbFptRjFiSFF1WjJWMEtDQjBhR2x6SUNrN1hHNWNkSDBzWEc1Y2RISjFiam9nWm5WdVkzUnBiMjRvSUhCbGNtTmxiblFnS1NCN1hHNWNkRngwZG1GeUlHVmhjMlZrTEZ4dVhIUmNkRngwYUc5dmEzTWdQU0JVZDJWbGJpNXdjbTl3U0c5dmEzTmJJSFJvYVhNdWNISnZjQ0JkTzF4dVhHNWNkRngwYVdZZ0tDQjBhR2x6TG05d2RHbHZibk11WkhWeVlYUnBiMjRnS1NCN1hHNWNkRngwWEhSMGFHbHpMbkJ2Y3lBOUlHVmhjMlZrSUQwZ2FsRjFaWEo1TG1WaGMybHVaMXNnZEdocGN5NWxZWE5wYm1jZ1hTaGNibHgwWEhSY2RGeDBjR1Z5WTJWdWRDd2dkR2hwY3k1dmNIUnBiMjV6TG1SMWNtRjBhVzl1SUNvZ2NHVnlZMlZ1ZEN3Z01Dd2dNU3dnZEdocGN5NXZjSFJwYjI1ekxtUjFjbUYwYVc5dVhHNWNkRngwWEhRcE8xeHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFIwYUdsekxuQnZjeUE5SUdWaGMyVmtJRDBnY0dWeVkyVnVkRHRjYmx4MFhIUjlYRzVjZEZ4MGRHaHBjeTV1YjNjZ1BTQW9JSFJvYVhNdVpXNWtJQzBnZEdocGN5NXpkR0Z5ZENBcElDb2daV0Z6WldRZ0t5QjBhR2x6TG5OMFlYSjBPMXh1WEc1Y2RGeDBhV1lnS0NCMGFHbHpMbTl3ZEdsdmJuTXVjM1JsY0NBcElIdGNibHgwWEhSY2RIUm9hWE11YjNCMGFXOXVjeTV6ZEdWd0xtTmhiR3dvSUhSb2FYTXVaV3hsYlN3Z2RHaHBjeTV1YjNjc0lIUm9hWE1nS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHaHZiMnR6SUNZbUlHaHZiMnR6TG5ObGRDQXBJSHRjYmx4MFhIUmNkR2h2YjJ0ekxuTmxkQ2dnZEdocGN5QXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSVWQyVmxiaTV3Y205d1NHOXZhM011WDJSbFptRjFiSFF1YzJWMEtDQjBhR2x6SUNrN1hHNWNkRngwZlZ4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlYRzU5TzF4dVhHNVVkMlZsYmk1d2NtOTBiM1I1Y0dVdWFXNXBkQzV3Y205MGIzUjVjR1VnUFNCVWQyVmxiaTV3Y205MGIzUjVjR1U3WEc1Y2JsUjNaV1Z1TG5CeWIzQkliMjlyY3lBOUlIdGNibHgwWDJSbFptRjFiSFE2SUh0Y2JseDBYSFJuWlhRNklHWjFibU4wYVc5dUtDQjBkMlZsYmlBcElIdGNibHgwWEhSY2RIWmhjaUJ5WlhOMWJIUTdYRzVjYmx4MFhIUmNkQzh2SUZWelpTQmhJSEJ5YjNCbGNuUjVJRzl1SUhSb1pTQmxiR1Z0Wlc1MElHUnBjbVZqZEd4NUlIZG9aVzRnYVhRZ2FYTWdibTkwSUdFZ1JFOU5JR1ZzWlcxbGJuUXNYRzVjZEZ4MFhIUXZMeUJ2Y2lCM2FHVnVJSFJvWlhKbElHbHpJRzV2SUcxaGRHTm9hVzVuSUhOMGVXeGxJSEJ5YjNCbGNuUjVJSFJvWVhRZ1pYaHBjM1J6TGx4dVhIUmNkRngwYVdZZ0tDQjBkMlZsYmk1bGJHVnRMbTV2WkdWVWVYQmxJQ0U5UFNBeElIeDhYRzVjZEZ4MFhIUmNkSFIzWldWdUxtVnNaVzFiSUhSM1pXVnVMbkJ5YjNBZ1hTQWhQU0J1ZFd4c0lDWW1JSFIzWldWdUxtVnNaVzB1YzNSNWJHVmJJSFIzWldWdUxuQnliM0FnWFNBOVBTQnVkV3hzSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RIZGxaVzR1Wld4bGJWc2dkSGRsWlc0dWNISnZjQ0JkTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlFZWE56YVc1bklHRnVJR1Z0Y0hSNUlITjBjbWx1WnlCaGN5QmhJRE55WkNCd1lYSmhiV1YwWlhJZ2RHOGdMbU56Y3lCM2FXeHNJR0YxZEc5dFlYUnBZMkZzYkhsY2JseDBYSFJjZEM4dklHRjBkR1Z0Y0hRZ1lTQndZWEp6WlVac2IyRjBJR0Z1WkNCbVlXeHNZbUZqYXlCMGJ5QmhJSE4wY21sdVp5QnBaaUIwYUdVZ2NHRnljMlVnWm1GcGJITXVYRzVjZEZ4MFhIUXZMeUJUYVcxd2JHVWdkbUZzZFdWeklITjFZMmdnWVhNZ1hDSXhNSEI0WENJZ1lYSmxJSEJoY25ObFpDQjBieUJHYkc5aGREdGNibHgwWEhSY2RDOHZJR052YlhCc1pYZ2dkbUZzZFdWeklITjFZMmdnWVhNZ1hDSnliM1JoZEdVb01YSmhaQ2xjSWlCaGNtVWdjbVYwZFhKdVpXUWdZWE10YVhNdVhHNWNkRngwWEhSeVpYTjFiSFFnUFNCcVVYVmxjbmt1WTNOektDQjBkMlZsYmk1bGJHVnRMQ0IwZDJWbGJpNXdjbTl3TENCY0lsd2lJQ2s3WEc1Y2JseDBYSFJjZEM4dklFVnRjSFI1SUhOMGNtbHVaM01zSUc1MWJHd3NJSFZ1WkdWbWFXNWxaQ0JoYm1RZ1hDSmhkWFJ2WENJZ1lYSmxJR052Ym5abGNuUmxaQ0IwYnlBd0xseHVYSFJjZEZ4MGNtVjBkWEp1SUNGeVpYTjFiSFFnZkh3Z2NtVnpkV3gwSUQwOVBTQmNJbUYxZEc5Y0lpQS9JREFnT2lCeVpYTjFiSFE3WEc1Y2RGeDBmU3hjYmx4MFhIUnpaWFE2SUdaMWJtTjBhVzl1S0NCMGQyVmxiaUFwSUh0Y2JseHVYSFJjZEZ4MEx5OGdWWE5sSUhOMFpYQWdhRzl2YXlCbWIzSWdZbUZqYXlCamIyMXdZWFF1WEc1Y2RGeDBYSFF2THlCVmMyVWdZM056U0c5dmF5QnBaaUJwZEhNZ2RHaGxjbVV1WEc1Y2RGeDBYSFF2THlCVmMyVWdMbk4wZVd4bElHbG1JR0YyWVdsc1lXSnNaU0JoYm1RZ2RYTmxJSEJzWVdsdUlIQnliM0JsY25ScFpYTWdkMmhsY21VZ1lYWmhhV3hoWW14bExseHVYSFJjZEZ4MGFXWWdLQ0JxVVhWbGNua3Vabmd1YzNSbGNGc2dkSGRsWlc0dWNISnZjQ0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUnFVWFZsY25rdVpuZ3VjM1JsY0ZzZ2RIZGxaVzR1Y0hKdmNDQmRLQ0IwZDJWbGJpQXBPMXh1WEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnZEhkbFpXNHVaV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0FtSmx4dVhIUmNkRngwWEhRb0lIUjNaV1Z1TG1Wc1pXMHVjM1I1YkdWYklHcFJkV1Z5ZVM1amMzTlFjbTl3YzFzZ2RIZGxaVzR1Y0hKdmNDQmRJRjBnSVQwZ2JuVnNiQ0I4ZkZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2RIZGxaVzR1Y0hKdmNDQmRJQ2tnS1NCN1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1emRIbHNaU2dnZEhkbFpXNHVaV3hsYlN3Z2RIZGxaVzR1Y0hKdmNDd2dkSGRsWlc0dWJtOTNJQ3NnZEhkbFpXNHVkVzVwZENBcE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGRIZGxaVzR1Wld4bGJWc2dkSGRsWlc0dWNISnZjQ0JkSUQwZ2RIZGxaVzR1Ym05M08xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmVnh1ZlR0Y2JseHVMeThnVTNWd2NHOXlkRG9nU1VVZ1BEMDVJRzl1YkhsY2JpOHZJRkJoYm1saklHSmhjMlZrSUdGd2NISnZZV05vSUhSdklITmxkSFJwYm1jZ2RHaHBibWR6SUc5dUlHUnBjMk52Ym01bFkzUmxaQ0J1YjJSbGMxeHVWSGRsWlc0dWNISnZjRWh2YjJ0ekxuTmpjbTlzYkZSdmNDQTlJRlIzWldWdUxuQnliM0JJYjI5cmN5NXpZM0p2Ykd4TVpXWjBJRDBnZTF4dVhIUnpaWFE2SUdaMWJtTjBhVzl1S0NCMGQyVmxiaUFwSUh0Y2JseDBYSFJwWmlBb0lIUjNaV1Z1TG1Wc1pXMHVibTlrWlZSNWNHVWdKaVlnZEhkbFpXNHVaV3hsYlM1d1lYSmxiblJPYjJSbElDa2dlMXh1WEhSY2RGeDBkSGRsWlc0dVpXeGxiVnNnZEhkbFpXNHVjSEp2Y0NCZElEMGdkSGRsWlc0dWJtOTNPMXh1WEhSY2RIMWNibHgwZlZ4dWZUdGNibHh1YWxGMVpYSjVMbVZoYzJsdVp5QTlJSHRjYmx4MGJHbHVaV0Z5T2lCbWRXNWpkR2x2YmlnZ2NDQXBJSHRjYmx4MFhIUnlaWFIxY200Z2NEdGNibHgwZlN4Y2JseDBjM2RwYm1jNklHWjFibU4wYVc5dUtDQndJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQXdMalVnTFNCTllYUm9MbU52Y3lnZ2NDQXFJRTFoZEdndVVFa2dLU0F2SURJN1hHNWNkSDBzWEc1Y2RGOWtaV1poZFd4ME9pQmNJbk4zYVc1blhDSmNibjA3WEc1Y2JtcFJkV1Z5ZVM1bWVDQTlJRlIzWldWdUxuQnliM1J2ZEhsd1pTNXBibWwwTzF4dVhHNHZMeUJDWVdOcklHTnZiWEJoZENBOE1TNDRJR1Y0ZEdWdWMybHZiaUJ3YjJsdWRGeHVhbEYxWlhKNUxtWjRMbk4wWlhBZ1BTQjdmVHRjYmx4dVhHNWNibHh1ZG1GeVhHNWNkR1o0VG05M0xDQjBhVzFsY2tsa0xGeHVYSFJ5Wm5oMGVYQmxjeUE5SUM5ZUtEODZkRzluWjJ4bGZITm9iM2Q4YUdsa1pTa2tMeXhjYmx4MGNuSjFiaUE5SUM5eGRXVjFaVWh2YjJ0ekpDODdYRzVjYm1aMWJtTjBhVzl1SUhKaFppZ3BJSHRjYmx4MGFXWWdLQ0IwYVcxbGNrbGtJQ2tnZTF4dVhIUmNkSGRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvSUhKaFppQXBPMXh1WEhSY2RHcFJkV1Z5ZVM1bWVDNTBhV05yS0NrN1hHNWNkSDFjYm4xY2JseHVMeThnUVc1cGJXRjBhVzl1Y3lCamNtVmhkR1ZrSUhONWJtTm9jbTl1YjNWemJIa2dkMmxzYkNCeWRXNGdjM2x1WTJoeWIyNXZkWE5zZVZ4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUm5oT2IzY29LU0I3WEc1Y2RIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUm1lRTV2ZHlBOUlIVnVaR1ZtYVc1bFpEdGNibHgwZlNBcE8xeHVYSFJ5WlhSMWNtNGdLQ0JtZUU1dmR5QTlJR3BSZFdWeWVTNXViM2NvS1NBcE8xeHVmVnh1WEc0dkx5QkhaVzVsY21GMFpTQndZWEpoYldWMFpYSnpJSFJ2SUdOeVpXRjBaU0JoSUhOMFlXNWtZWEprSUdGdWFXMWhkR2x2Ymx4dVpuVnVZM1JwYjI0Z1oyVnVSbmdvSUhSNWNHVXNJR2x1WTJ4MVpHVlhhV1IwYUNBcElIdGNibHgwZG1GeUlIZG9hV05vTEZ4dVhIUmNkR2tnUFNBd0xGeHVYSFJjZEdGMGRISnpJRDBnZXlCb1pXbG5hSFE2SUhSNWNHVWdmVHRjYmx4dVhIUXZMeUJKWmlCM1pTQnBibU5zZFdSbElIZHBaSFJvTENCemRHVndJSFpoYkhWbElHbHpJREVnZEc4Z1pHOGdZV3hzSUdOemMwVjRjR0Z1WkNCMllXeDFaWE1zWEc1Y2RDOHZJRzkwYUdWeWQybHpaU0J6ZEdWd0lIWmhiSFZsSUdseklESWdkRzhnYzJ0cGNDQnZkbVZ5SUV4bFpuUWdZVzVrSUZKcFoyaDBYRzVjZEdsdVkyeDFaR1ZYYVdSMGFDQTlJR2x1WTJ4MVpHVlhhV1IwYUNBL0lERWdPaUF3TzF4dVhIUm1iM0lnS0NBN0lHa2dQQ0EwT3lCcElDczlJRElnTFNCcGJtTnNkV1JsVjJsa2RHZ2dLU0I3WEc1Y2RGeDBkMmhwWTJnZ1BTQmpjM05GZUhCaGJtUmJJR2tnWFR0Y2JseDBYSFJoZEhSeWMxc2dYQ0p0WVhKbmFXNWNJaUFySUhkb2FXTm9JRjBnUFNCaGRIUnljMXNnWENKd1lXUmthVzVuWENJZ0t5QjNhR2xqYUNCZElEMGdkSGx3WlR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2dnYVc1amJIVmtaVmRwWkhSb0lDa2dlMXh1WEhSY2RHRjBkSEp6TG05d1lXTnBkSGtnUFNCaGRIUnljeTUzYVdSMGFDQTlJSFI1Y0dVN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z1lYUjBjbk03WEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpWUjNaV1Z1S0NCMllXeDFaU3dnY0hKdmNDd2dZVzVwYldGMGFXOXVJQ2tnZTF4dVhIUjJZWElnZEhkbFpXNHNYRzVjZEZ4MFkyOXNiR1ZqZEdsdmJpQTlJQ2dnUVc1cGJXRjBhVzl1TG5SM1pXVnVaWEp6V3lCd2NtOXdJRjBnZkh3Z1cxMGdLUzVqYjI1allYUW9JRUZ1YVcxaGRHbHZiaTUwZDJWbGJtVnljMXNnWENJcVhDSWdYU0FwTEZ4dVhIUmNkR2x1WkdWNElEMGdNQ3hjYmx4MFhIUnNaVzVuZEdnZ1BTQmpiMnhzWldOMGFXOXVMbXhsYm1kMGFEdGNibHgwWm05eUlDZ2dPeUJwYm1SbGVDQThJR3hsYm1kMGFEc2dhVzVrWlhnckt5QXBJSHRjYmx4MFhIUnBaaUFvSUNnZ2RIZGxaVzRnUFNCamIyeHNaV04wYVc5dVd5QnBibVJsZUNCZExtTmhiR3dvSUdGdWFXMWhkR2x2Yml3Z2NISnZjQ3dnZG1Gc2RXVWdLU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJYWlNkeVpTQmtiMjVsSUhkcGRHZ2dkR2hwY3lCd2NtOXdaWEowZVZ4dVhIUmNkRngwY21WMGRYSnVJSFIzWldWdU8xeHVYSFJjZEgxY2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFVISmxabWxzZEdWeUtDQmxiR1Z0TENCd2NtOXdjeXdnYjNCMGN5QXBJSHRjYmx4MGRtRnlJSEJ5YjNBc0lIWmhiSFZsTENCMGIyZG5iR1VzSUdodmIydHpMQ0J2YkdSbWFYSmxMQ0J3Y205d1ZIZGxaVzRzSUhKbGMzUnZjbVZFYVhOd2JHRjVMQ0JrYVhOd2JHRjVMRnh1WEhSY2RHbHpRbTk0SUQwZ1hDSjNhV1IwYUZ3aUlHbHVJSEJ5YjNCeklIeDhJRndpYUdWcFoyaDBYQ0lnYVc0Z2NISnZjSE1zWEc1Y2RGeDBZVzVwYlNBOUlIUm9hWE1zWEc1Y2RGeDBiM0pwWnlBOUlIdDlMRnh1WEhSY2RITjBlV3hsSUQwZ1pXeGxiUzV6ZEhsc1pTeGNibHgwWEhSb2FXUmtaVzRnUFNCbGJHVnRMbTV2WkdWVWVYQmxJQ1ltSUdselNHbGtaR1Z1VjJsMGFHbHVWSEpsWlNnZ1pXeGxiU0FwTEZ4dVhIUmNkR1JoZEdGVGFHOTNJRDBnWkdGMFlWQnlhWFl1WjJWMEtDQmxiR1Z0TENCY0ltWjRjMmh2ZDF3aUlDazdYRzVjYmx4MEx5OGdVWFZsZFdVdGMydHBjSEJwYm1jZ1lXNXBiV0YwYVc5dWN5Qm9hV3BoWTJzZ2RHaGxJR1o0SUdodmIydHpYRzVjZEdsbUlDZ2dJVzl3ZEhNdWNYVmxkV1VnS1NCN1hHNWNkRngwYUc5dmEzTWdQU0JxVVhWbGNua3VYM0YxWlhWbFNHOXZhM01vSUdWc1pXMHNJRndpWm5oY0lpQXBPMXh1WEhSY2RHbG1JQ2dnYUc5dmEzTXVkVzV4ZFdWMVpXUWdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkR2h2YjJ0ekxuVnVjWFZsZFdWa0lEMGdNRHRjYmx4MFhIUmNkRzlzWkdacGNtVWdQU0JvYjI5cmN5NWxiWEIwZVM1bWFYSmxPMXh1WEhSY2RGeDBhRzl2YTNNdVpXMXdkSGt1Wm1seVpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JQ0ZvYjI5cmN5NTFibkYxWlhWbFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSdmJHUm1hWEpsS0NrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMDdYRzVjZEZ4MGZWeHVYSFJjZEdodmIydHpMblZ1Y1hWbGRXVmtLeXM3WEc1Y2JseDBYSFJoYm1sdExtRnNkMkY1Y3lnZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVWdWMzVnlaU0IwYUdVZ1kyOXRjR3hsZEdVZ2FHRnVaR3hsY2lCcGN5QmpZV3hzWldRZ1ltVm1iM0psSUhSb2FYTWdZMjl0Y0d4bGRHVnpYRzVjZEZ4MFhIUmhibWx0TG1Gc2QyRjVjeWdnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RHaHZiMnR6TG5WdWNYVmxkV1ZrTFMwN1hHNWNkRngwWEhSY2RHbG1JQ2dnSVdwUmRXVnllUzV4ZFdWMVpTZ2daV3hsYlN3Z1hDSm1lRndpSUNrdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR2h2YjJ0ekxtVnRjSFI1TG1acGNtVW9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNBcE8xeHVYSFJjZEgwZ0tUdGNibHgwZlZ4dVhHNWNkQzh2SUVSbGRHVmpkQ0J6YUc5M0wyaHBaR1VnWVc1cGJXRjBhVzl1YzF4dVhIUm1iM0lnS0NCd2NtOXdJR2x1SUhCeWIzQnpJQ2tnZTF4dVhIUmNkSFpoYkhWbElEMGdjSEp2Y0hOYklIQnliM0FnWFR0Y2JseDBYSFJwWmlBb0lISm1lSFI1Y0dWekxuUmxjM1FvSUhaaGJIVmxJQ2tnS1NCN1hHNWNkRngwWEhSa1pXeGxkR1VnY0hKdmNITmJJSEJ5YjNBZ1hUdGNibHgwWEhSY2RIUnZaMmRzWlNBOUlIUnZaMmRzWlNCOGZDQjJZV3gxWlNBOVBUMGdYQ0owYjJkbmJHVmNJanRjYmx4MFhIUmNkR2xtSUNnZ2RtRnNkV1VnUFQwOUlDZ2dhR2xrWkdWdUlEOGdYQ0pvYVdSbFhDSWdPaUJjSW5Ob2IzZGNJaUFwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUZCeVpYUmxibVFnZEc4Z1ltVWdhR2xrWkdWdUlHbG1JSFJvYVhNZ2FYTWdZU0JjSW5Ob2IzZGNJaUJoYm1SY2JseDBYSFJjZEZ4MEx5OGdkR2hsY21VZ2FYTWdjM1JwYkd3Z1pHRjBZU0JtY205dElHRWdjM1J2Y0hCbFpDQnphRzkzTDJocFpHVmNibHgwWEhSY2RGeDBhV1lnS0NCMllXeDFaU0E5UFQwZ1hDSnphRzkzWENJZ0ppWWdaR0YwWVZOb2IzY2dKaVlnWkdGMFlWTm9iM2RiSUhCeWIzQWdYU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RGeDBYSFJjZEdocFpHUmxiaUE5SUhSeWRXVTdYRzVjYmx4MFhIUmNkRngwTHk4Z1NXZHViM0psSUdGc2JDQnZkR2hsY2lCdWJ5MXZjQ0J6YUc5M0wyaHBaR1VnWkdGMFlWeHVYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ2Y21sbld5QndjbTl3SUYwZ1BTQmtZWFJoVTJodmR5QW1KaUJrWVhSaFUyaHZkMXNnY0hKdmNDQmRJSHg4SUdwUmRXVnllUzV6ZEhsc1pTZ2daV3hsYlN3Z2NISnZjQ0FwTzF4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4dklFSmhhV3dnYjNWMElHbG1JSFJvYVhNZ2FYTWdZU0J1YnkxdmNDQnNhV3RsSUM1b2FXUmxLQ2t1YUdsa1pTZ3BYRzVjZEhCeWIzQlVkMlZsYmlBOUlDRnFVWFZsY25rdWFYTkZiWEIwZVU5aWFtVmpkQ2dnY0hKdmNITWdLVHRjYmx4MGFXWWdLQ0FoY0hKdmNGUjNaV1Z1SUNZbUlHcFJkV1Z5ZVM1cGMwVnRjSFI1VDJKcVpXTjBLQ0J2Y21sbklDa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdU8xeHVYSFI5WEc1Y2JseDBMeThnVW1WemRISnBZM1FnWENKdmRtVnlabXh2ZDF3aUlHRnVaQ0JjSW1ScGMzQnNZWGxjSWlCemRIbHNaWE1nWkhWeWFXNW5JR0p2ZUNCaGJtbHRZWFJwYjI1elhHNWNkR2xtSUNnZ2FYTkNiM2dnSmlZZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4dVhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0F0SURFeExDQkZaR2RsSURFeUlDMGdNVE5jYmx4MFhIUXZMeUJTWldOdmNtUWdZV3hzSURNZ2IzWmxjbVpzYjNjZ1lYUjBjbWxpZFhSbGN5QmlaV05oZFhObElFbEZJR1J2WlhNZ2JtOTBJR2x1Wm1WeUlIUm9aU0J6YUc5eWRHaGhibVJjYmx4MFhIUXZMeUJtY205dElHbGtaVzUwYVdOaGJHeDVMWFpoYkhWbFpDQnZkbVZ5Wm14dmQxZ2dZVzVrSUc5MlpYSm1iRzkzV1Z4dVhIUmNkRzl3ZEhNdWIzWmxjbVpzYjNjZ1BTQmJJSE4wZVd4bExtOTJaWEptYkc5M0xDQnpkSGxzWlM1dmRtVnlabXh2ZDFnc0lITjBlV3hsTG05MlpYSm1iRzkzV1NCZE8xeHVYRzVjZEZ4MEx5OGdTV1JsYm5ScFpua2dZU0JrYVhOd2JHRjVJSFI1Y0dVc0lIQnlaV1psY25KcGJtY2diMnhrSUhOb2IzY3ZhR2xrWlNCa1lYUmhJRzkyWlhJZ2RHaGxJRU5UVXlCallYTmpZV1JsWEc1Y2RGeDBjbVZ6ZEc5eVpVUnBjM0JzWVhrZ1BTQmtZWFJoVTJodmR5QW1KaUJrWVhSaFUyaHZkeTVrYVhOd2JHRjVPMXh1WEhSY2RHbG1JQ2dnY21WemRHOXlaVVJwYzNCc1lYa2dQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkSEpsYzNSdmNtVkVhWE53YkdGNUlEMGdaR0YwWVZCeWFYWXVaMlYwS0NCbGJHVnRMQ0JjSW1ScGMzQnNZWGxjSWlBcE8xeHVYSFJjZEgxY2JseDBYSFJrYVhOd2JHRjVJRDBnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKa2FYTndiR0Y1WENJZ0tUdGNibHgwWEhScFppQW9JR1JwYzNCc1lYa2dQVDA5SUZ3aWJtOXVaVndpSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0J5WlhOMGIzSmxSR2x6Y0d4aGVTQXBJSHRjYmx4MFhIUmNkRngwWkdsemNHeGhlU0E5SUhKbGMzUnZjbVZFYVhOd2JHRjVPMXh1WEhSY2RGeDBmU0JsYkhObElIdGNibHh1WEhSY2RGeDBYSFF2THlCSFpYUWdibTl1Wlcxd2RIa2dkbUZzZFdVb2N5a2dZbmtnZEdWdGNHOXlZWEpwYkhrZ1ptOXlZMmx1WnlCMmFYTnBZbWxzYVhSNVhHNWNkRngwWEhSY2RITm9iM2RJYVdSbEtDQmJJR1ZzWlcwZ1hTd2dkSEoxWlNBcE8xeHVYSFJjZEZ4MFhIUnlaWE4wYjNKbFJHbHpjR3hoZVNBOUlHVnNaVzB1YzNSNWJHVXVaR2x6Y0d4aGVTQjhmQ0J5WlhOMGIzSmxSR2x6Y0d4aGVUdGNibHgwWEhSY2RGeDBaR2x6Y0d4aGVTQTlJR3BSZFdWeWVTNWpjM01vSUdWc1pXMHNJRndpWkdsemNHeGhlVndpSUNrN1hHNWNkRngwWEhSY2RITm9iM2RJYVdSbEtDQmJJR1ZzWlcwZ1hTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRUZ1YVcxaGRHVWdhVzVzYVc1bElHVnNaVzFsYm5SeklHRnpJR2x1YkdsdVpTMWliRzlqYTF4dVhIUmNkR2xtSUNnZ1pHbHpjR3hoZVNBOVBUMGdYQ0pwYm14cGJtVmNJaUI4ZkNCa2FYTndiR0Y1SUQwOVBTQmNJbWx1YkdsdVpTMWliRzlqYTF3aUlDWW1JSEpsYzNSdmNtVkVhWE53YkdGNUlDRTlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUZ3aVpteHZZWFJjSWlBcElEMDlQU0JjSW01dmJtVmNJaUFwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJTWlhOMGIzSmxJSFJvWlNCdmNtbG5hVzVoYkNCa2FYTndiR0Y1SUhaaGJIVmxJR0YwSUhSb1pTQmxibVFnYjJZZ2NIVnlaU0J6YUc5M0wyaHBaR1VnWVc1cGJXRjBhVzl1YzF4dVhIUmNkRngwWEhScFppQW9JQ0Z3Y205d1ZIZGxaVzRnS1NCN1hHNWNkRngwWEhSY2RGeDBZVzVwYlM1a2IyNWxLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE4wZVd4bExtUnBjM0JzWVhrZ1BTQnlaWE4wYjNKbFJHbHpjR3hoZVR0Y2JseDBYSFJjZEZ4MFhIUjlJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0J5WlhOMGIzSmxSR2x6Y0d4aGVTQTlQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFpHbHpjR3hoZVNBOUlITjBlV3hsTG1ScGMzQnNZWGs3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWE4wYjNKbFJHbHpjR3hoZVNBOUlHUnBjM0JzWVhrZ1BUMDlJRndpYm05dVpWd2lJRDhnWENKY0lpQTZJR1JwYzNCc1lYazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RITjBlV3hsTG1ScGMzQnNZWGtnUFNCY0ltbHViR2x1WlMxaWJHOWphMXdpTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEdsbUlDZ2diM0IwY3k1dmRtVnlabXh2ZHlBcElIdGNibHgwWEhSemRIbHNaUzV2ZG1WeVpteHZkeUE5SUZ3aWFHbGtaR1Z1WENJN1hHNWNkRngwWVc1cGJTNWhiSGRoZVhNb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBjM1I1YkdVdWIzWmxjbVpzYjNjZ1BTQnZjSFJ6TG05MlpYSm1iRzkzV3lBd0lGMDdYRzVjZEZ4MFhIUnpkSGxzWlM1dmRtVnlabXh2ZDFnZ1BTQnZjSFJ6TG05MlpYSm1iRzkzV3lBeElGMDdYRzVjZEZ4MFhIUnpkSGxzWlM1dmRtVnlabXh2ZDFrZ1BTQnZjSFJ6TG05MlpYSm1iRzkzV3lBeUlGMDdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNWNibHgwTHk4Z1NXMXdiR1Z0Wlc1MElITm9iM2N2YUdsa1pTQmhibWx0WVhScGIyNXpYRzVjZEhCeWIzQlVkMlZsYmlBOUlHWmhiSE5sTzF4dVhIUm1iM0lnS0NCd2NtOXdJR2x1SUc5eWFXY2dLU0I3WEc1Y2JseDBYSFF2THlCSFpXNWxjbUZzSUhOb2IzY3ZhR2xrWlNCelpYUjFjQ0JtYjNJZ2RHaHBjeUJsYkdWdFpXNTBJR0Z1YVcxaGRHbHZibHh1WEhSY2RHbG1JQ2dnSVhCeWIzQlVkMlZsYmlBcElIdGNibHgwWEhSY2RHbG1JQ2dnWkdGMFlWTm9iM2NnS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2dnWENKb2FXUmtaVzVjSWlCcGJpQmtZWFJoVTJodmR5QXBJSHRjYmx4MFhIUmNkRngwWEhSb2FXUmtaVzRnUFNCa1lYUmhVMmh2ZHk1b2FXUmtaVzQ3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEdSaGRHRlRhRzkzSUQwZ1pHRjBZVkJ5YVhZdVlXTmpaWE56S0NCbGJHVnRMQ0JjSW1aNGMyaHZkMXdpTENCN0lHUnBjM0JzWVhrNklISmxjM1J2Y21WRWFYTndiR0Y1SUgwZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVTNSdmNtVWdhR2xrWkdWdUwzWnBjMmxpYkdVZ1ptOXlJSFJ2WjJkc1pTQnpieUJnTG5OMGIzQW9LUzUwYjJkbmJHVW9LV0FnWENKeVpYWmxjbk5sYzF3aVhHNWNkRngwWEhScFppQW9JSFJ2WjJkc1pTQXBJSHRjYmx4MFhIUmNkRngwWkdGMFlWTm9iM2N1YUdsa1pHVnVJRDBnSVdocFpHUmxianRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1UyaHZkeUJsYkdWdFpXNTBjeUJpWldadmNtVWdZVzVwYldGMGFXNW5JSFJvWlcxY2JseDBYSFJjZEdsbUlDZ2dhR2xrWkdWdUlDa2dlMXh1WEhSY2RGeDBYSFJ6YUc5M1NHbGtaU2dnV3lCbGJHVnRJRjBzSUhSeWRXVWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGJHOXZjQzFtZFc1aklDb3ZYRzVjYmx4MFhIUmNkR0Z1YVcwdVpHOXVaU2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNibHgwWEhSY2RDOHFJR1Z6YkdsdWRDMWxibUZpYkdVZ2JtOHRiRzl2Y0MxbWRXNWpJQ292WEc1Y2JseDBYSFJjZEZ4MEx5OGdWR2hsSUdacGJtRnNJSE4wWlhBZ2IyWWdZU0JjSW1ocFpHVmNJaUJoYm1sdFlYUnBiMjRnYVhNZ1lXTjBkV0ZzYkhrZ2FHbGthVzVuSUhSb1pTQmxiR1Z0Wlc1MFhHNWNkRngwWEhSY2RHbG1JQ2dnSVdocFpHUmxiaUFwSUh0Y2JseDBYSFJjZEZ4MFhIUnphRzkzU0dsa1pTZ2dXeUJsYkdWdElGMGdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSa1lYUmhVSEpwZGk1eVpXMXZkbVVvSUdWc1pXMHNJRndpWm5oemFHOTNYQ0lnS1R0Y2JseDBYSFJjZEZ4MFptOXlJQ2dnY0hKdmNDQnBiaUJ2Y21sbklDa2dlMXh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzV6ZEhsc1pTZ2daV3hsYlN3Z2NISnZjQ3dnYjNKcFoxc2djSEp2Y0NCZElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCUVpYSXRjSEp2Y0dWeWRIa2djMlYwZFhCY2JseDBYSFJ3Y205d1ZIZGxaVzRnUFNCamNtVmhkR1ZVZDJWbGJpZ2dhR2xrWkdWdUlEOGdaR0YwWVZOb2IzZGJJSEJ5YjNBZ1hTQTZJREFzSUhCeWIzQXNJR0Z1YVcwZ0tUdGNibHgwWEhScFppQW9JQ0VvSUhCeWIzQWdhVzRnWkdGMFlWTm9iM2NnS1NBcElIdGNibHgwWEhSY2RHUmhkR0ZUYUc5M1d5QndjbTl3SUYwZ1BTQndjbTl3VkhkbFpXNHVjM1JoY25RN1hHNWNkRngwWEhScFppQW9JR2hwWkdSbGJpQXBJSHRjYmx4MFhIUmNkRngwY0hKdmNGUjNaV1Z1TG1WdVpDQTlJSEJ5YjNCVWQyVmxiaTV6ZEdGeWREdGNibHgwWEhSY2RGeDBjSEp2Y0ZSM1pXVnVMbk4wWVhKMElEMGdNRHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKdmNFWnBiSFJsY2lnZ2NISnZjSE1zSUhOd1pXTnBZV3hGWVhOcGJtY2dLU0I3WEc1Y2RIWmhjaUJwYm1SbGVDd2dibUZ0WlN3Z1pXRnphVzVuTENCMllXeDFaU3dnYUc5dmEzTTdYRzVjYmx4MEx5OGdZMkZ0Wld4RFlYTmxMQ0J6Y0dWamFXRnNSV0Z6YVc1bklHRnVaQ0JsZUhCaGJtUWdZM056U0c5dmF5QndZWE56WEc1Y2RHWnZjaUFvSUdsdVpHVjRJR2x1SUhCeWIzQnpJQ2tnZTF4dVhIUmNkRzVoYldVZ1BTQnFVWFZsY25rdVkyRnRaV3hEWVhObEtDQnBibVJsZUNBcE8xeHVYSFJjZEdWaGMybHVaeUE5SUhOd1pXTnBZV3hGWVhOcGJtZGJJRzVoYldVZ1hUdGNibHgwWEhSMllXeDFaU0E5SUhCeWIzQnpXeUJwYm1SbGVDQmRPMXh1WEhSY2RHbG1JQ2dnYWxGMVpYSjVMbWx6UVhKeVlYa29JSFpoYkhWbElDa2dLU0I3WEc1Y2RGeDBYSFJsWVhOcGJtY2dQU0IyWVd4MVpWc2dNU0JkTzF4dVhIUmNkRngwZG1Gc2RXVWdQU0J3Y205d2Mxc2dhVzVrWlhnZ1hTQTlJSFpoYkhWbFd5QXdJRjA3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCcGJtUmxlQ0FoUFQwZ2JtRnRaU0FwSUh0Y2JseDBYSFJjZEhCeWIzQnpXeUJ1WVcxbElGMGdQU0IyWVd4MVpUdGNibHgwWEhSY2RHUmxiR1YwWlNCd2NtOXdjMXNnYVc1a1pYZ2dYVHRjYmx4MFhIUjlYRzVjYmx4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2JtRnRaU0JkTzF4dVhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSmxlSEJoYm1SY0lpQnBiaUJvYjI5cmN5QXBJSHRjYmx4MFhIUmNkSFpoYkhWbElEMGdhRzl2YTNNdVpYaHdZVzVrS0NCMllXeDFaU0FwTzF4dVhIUmNkRngwWkdWc1pYUmxJSEJ5YjNCeld5QnVZVzFsSUYwN1hHNWNibHgwWEhSY2RDOHZJRTV2ZENCeGRXbDBaU0FrTG1WNGRHVnVaQ3dnZEdocGN5QjNiMjRuZENCdmRtVnlkM0pwZEdVZ1pYaHBjM1JwYm1jZ2EyVjVjeTVjYmx4MFhIUmNkQzh2SUZKbGRYTnBibWNnSjJsdVpHVjRKeUJpWldOaGRYTmxJSGRsSUdoaGRtVWdkR2hsSUdOdmNuSmxZM1FnWENKdVlXMWxYQ0pjYmx4MFhIUmNkR1p2Y2lBb0lHbHVaR1Y0SUdsdUlIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUNFb0lHbHVaR1Y0SUdsdUlIQnliM0J6SUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY0hKdmNITmJJR2x1WkdWNElGMGdQU0IyWVd4MVpWc2dhVzVrWlhnZ1hUdGNibHgwWEhSY2RGeDBYSFJ6Y0dWamFXRnNSV0Z6YVc1bld5QnBibVJsZUNCZElEMGdaV0Z6YVc1bk8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEhOd1pXTnBZV3hGWVhOcGJtZGJJRzVoYldVZ1hTQTlJR1ZoYzJsdVp6dGNibHgwWEhSOVhHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdRVzVwYldGMGFXOXVLQ0JsYkdWdExDQndjbTl3WlhKMGFXVnpMQ0J2Y0hScGIyNXpJQ2tnZTF4dVhIUjJZWElnY21WemRXeDBMRnh1WEhSY2RITjBiM0J3WldRc1hHNWNkRngwYVc1a1pYZ2dQU0F3TEZ4dVhIUmNkR3hsYm1kMGFDQTlJRUZ1YVcxaGRHbHZiaTV3Y21WbWFXeDBaWEp6TG14bGJtZDBhQ3hjYmx4MFhIUmtaV1psY25KbFpDQTlJR3BSZFdWeWVTNUVaV1psY25KbFpDZ3BMbUZzZDJGNWN5Z2dablZ1WTNScGIyNG9LU0I3WEc1Y2JseDBYSFJjZEM4dklFUnZiaWQwSUcxaGRHTm9JR1ZzWlcwZ2FXNGdkR2hsSURwaGJtbHRZWFJsWkNCelpXeGxZM1J2Y2x4dVhIUmNkRngwWkdWc1pYUmxJSFJwWTJzdVpXeGxiVHRjYmx4MFhIUjlJQ2tzWEc1Y2RGeDBkR2xqYXlBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBhV1lnS0NCemRHOXdjR1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFIyWVhJZ1kzVnljbVZ1ZEZScGJXVWdQU0JtZUU1dmR5QjhmQ0JqY21WaGRHVkdlRTV2ZHlncExGeHVYSFJjZEZ4MFhIUnlaVzFoYVc1cGJtY2dQU0JOWVhSb0xtMWhlQ2dnTUN3Z1lXNXBiV0YwYVc5dUxuTjBZWEowVkdsdFpTQXJJR0Z1YVcxaGRHbHZiaTVrZFhKaGRHbHZiaUF0SUdOMWNuSmxiblJVYVcxbElDa3NYRzVjYmx4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1FXNWtjbTlwWkNBeUxqTWdiMjVzZVZ4dVhIUmNkRngwWEhRdkx5QkJjbU5vWVdsaklHTnlZWE5vSUdKMVp5QjNiMjRuZENCaGJHeHZkeUIxY3lCMGJ5QjFjMlVnWURFZ0xTQW9JREF1TlNCOGZDQXdJQ2xnSUNnak1USTBPVGNwWEc1Y2RGeDBYSFJjZEhSbGJYQWdQU0J5WlcxaGFXNXBibWNnTHlCaGJtbHRZWFJwYjI0dVpIVnlZWFJwYjI0Z2ZId2dNQ3hjYmx4MFhIUmNkRngwY0dWeVkyVnVkQ0E5SURFZ0xTQjBaVzF3TEZ4dVhIUmNkRngwWEhScGJtUmxlQ0E5SURBc1hHNWNkRngwWEhSY2RHeGxibWQwYUNBOUlHRnVhVzFoZEdsdmJpNTBkMlZsYm5NdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSbWIzSWdLQ0E3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JJQ2tnZTF4dVhIUmNkRngwWEhSaGJtbHRZWFJwYjI0dWRIZGxaVzV6V3lCcGJtUmxlQ0JkTG5KMWJpZ2djR1Z5WTJWdWRDQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJrWldabGNuSmxaQzV1YjNScFpubFhhWFJvS0NCbGJHVnRMQ0JiSUdGdWFXMWhkR2x2Yml3Z2NHVnlZMlZ1ZEN3Z2NtVnRZV2x1YVc1bklGMGdLVHRjYmx4dVhIUmNkRngwYVdZZ0tDQndaWEpqWlc1MElEd2dNU0FtSmlCc1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCeVpXMWhhVzVwYm1jN1hHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSa1pXWmxjbkpsWkM1eVpYTnZiSFpsVjJsMGFDZ2daV3hsYlN3Z1d5QmhibWx0WVhScGIyNGdYU0FwTzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTeGNibHgwWEhSaGJtbHRZWFJwYjI0Z1BTQmtaV1psY25KbFpDNXdjbTl0YVhObEtDQjdYRzVjZEZ4MFhIUmxiR1Z0T2lCbGJHVnRMRnh1WEhSY2RGeDBjSEp2Y0hNNklHcFJkV1Z5ZVM1bGVIUmxibVFvSUh0OUxDQndjbTl3WlhKMGFXVnpJQ2tzWEc1Y2RGeDBYSFJ2Y0hSek9pQnFVWFZsY25rdVpYaDBaVzVrS0NCMGNuVmxMQ0I3WEc1Y2RGeDBYSFJjZEhOd1pXTnBZV3hGWVhOcGJtYzZJSHQ5TEZ4dVhIUmNkRngwWEhSbFlYTnBibWM2SUdwUmRXVnllUzVsWVhOcGJtY3VYMlJsWm1GMWJIUmNibHgwWEhSY2RIMHNJRzl3ZEdsdmJuTWdLU3hjYmx4MFhIUmNkRzl5YVdkcGJtRnNVSEp2Y0dWeWRHbGxjem9nY0hKdmNHVnlkR2xsY3l4Y2JseDBYSFJjZEc5eWFXZHBibUZzVDNCMGFXOXVjem9nYjNCMGFXOXVjeXhjYmx4MFhIUmNkSE4wWVhKMFZHbHRaVG9nWm5oT2IzY2dmSHdnWTNKbFlYUmxSbmhPYjNjb0tTeGNibHgwWEhSY2RHUjFjbUYwYVc5dU9pQnZjSFJwYjI1ekxtUjFjbUYwYVc5dUxGeHVYSFJjZEZ4MGRIZGxaVzV6T2lCYlhTeGNibHgwWEhSY2RHTnlaV0YwWlZSM1pXVnVPaUJtZFc1amRHbHZiaWdnY0hKdmNDd2daVzVrSUNrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnZEhkbFpXNGdQU0JxVVhWbGNua3VWSGRsWlc0b0lHVnNaVzBzSUdGdWFXMWhkR2x2Ymk1dmNIUnpMQ0J3Y205d0xDQmxibVFzWEc1Y2RGeDBYSFJjZEZ4MFhIUmhibWx0WVhScGIyNHViM0IwY3k1emNHVmphV0ZzUldGemFXNW5XeUJ3Y205d0lGMGdmSHdnWVc1cGJXRjBhVzl1TG05d2RITXVaV0Z6YVc1bklDazdYRzVjZEZ4MFhIUmNkR0Z1YVcxaGRHbHZiaTUwZDJWbGJuTXVjSFZ6YUNnZ2RIZGxaVzRnS1R0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSM1pXVnVPMXh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkSE4wYjNBNklHWjFibU4wYVc5dUtDQm5iM1J2Ulc1a0lDa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ2FXNWtaWGdnUFNBd0xGeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1NXWWdkMlVnWVhKbElHZHZhVzVuSUhSdklIUm9aU0JsYm1Rc0lIZGxJSGRoYm5RZ2RHOGdjblZ1SUdGc2JDQjBhR1VnZEhkbFpXNXpYRzVjZEZ4MFhIUmNkRngwTHk4Z2IzUm9aWEozYVhObElIZGxJSE5yYVhBZ2RHaHBjeUJ3WVhKMFhHNWNkRngwWEhSY2RGeDBiR1Z1WjNSb0lEMGdaMjkwYjBWdVpDQS9JR0Z1YVcxaGRHbHZiaTUwZDJWbGJuTXViR1Z1WjNSb0lEb2dNRHRjYmx4MFhIUmNkRngwYVdZZ0tDQnpkRzl3Y0dWa0lDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSE4wYjNCd1pXUWdQU0IwY25WbE8xeHVYSFJjZEZ4MFhIUm1iM0lnS0NBN0lHbHVaR1Y0SUR3Z2JHVnVaM1JvT3lCcGJtUmxlQ3NySUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR0Z1YVcxaGRHbHZiaTUwZDJWbGJuTmJJR2x1WkdWNElGMHVjblZ1S0NBeElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QlNaWE52YkhabElIZG9aVzRnZDJVZ2NHeGhlV1ZrSUhSb1pTQnNZWE4wSUdaeVlXMWxPeUJ2ZEdobGNuZHBjMlVzSUhKbGFtVmpkRnh1WEhSY2RGeDBYSFJwWmlBb0lHZHZkRzlGYm1RZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWkdWbVpYSnlaV1F1Ym05MGFXWjVWMmwwYUNnZ1pXeGxiU3dnV3lCaGJtbHRZWFJwYjI0c0lERXNJREFnWFNBcE8xeHVYSFJjZEZ4MFhIUmNkR1JsWm1WeWNtVmtMbkpsYzI5c2RtVlhhWFJvS0NCbGJHVnRMQ0JiSUdGdWFXMWhkR2x2Yml3Z1oyOTBiMFZ1WkNCZElDazdYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwWkdWbVpYSnlaV1F1Y21WcVpXTjBWMmwwYUNnZ1pXeGxiU3dnV3lCaGJtbHRZWFJwYjI0c0lHZHZkRzlGYm1RZ1hTQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tTeGNibHgwWEhSd2NtOXdjeUE5SUdGdWFXMWhkR2x2Ymk1d2NtOXdjenRjYmx4dVhIUndjbTl3Um1sc2RHVnlLQ0J3Y205d2N5d2dZVzVwYldGMGFXOXVMbTl3ZEhNdWMzQmxZMmxoYkVWaGMybHVaeUFwTzF4dVhHNWNkR1p2Y2lBb0lEc2dhVzVrWlhnZ1BDQnNaVzVuZEdnN0lHbHVaR1Y0S3lzZ0tTQjdYRzVjZEZ4MGNtVnpkV3gwSUQwZ1FXNXBiV0YwYVc5dUxuQnlaV1pwYkhSbGNuTmJJR2x1WkdWNElGMHVZMkZzYkNnZ1lXNXBiV0YwYVc5dUxDQmxiR1Z0TENCd2NtOXdjeXdnWVc1cGJXRjBhVzl1TG05d2RITWdLVHRjYmx4MFhIUnBaaUFvSUhKbGMzVnNkQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtbHpSblZ1WTNScGIyNG9JSEpsYzNWc2RDNXpkRzl3SUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR3BSZFdWeWVTNWZjWFZsZFdWSWIyOXJjeWdnWVc1cGJXRjBhVzl1TG1Wc1pXMHNJR0Z1YVcxaGRHbHZiaTV2Y0hSekxuRjFaWFZsSUNrdWMzUnZjQ0E5WEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG5CeWIzaDVLQ0J5WlhOMWJIUXVjM1J2Y0N3Z2NtVnpkV3gwSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkR3BSZFdWeWVTNXRZWEFvSUhCeWIzQnpMQ0JqY21WaGRHVlVkMlZsYml3Z1lXNXBiV0YwYVc5dUlDazdYRzVjYmx4MGFXWWdLQ0JxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnWVc1cGJXRjBhVzl1TG05d2RITXVjM1JoY25RZ0tTQXBJSHRjYmx4MFhIUmhibWx0WVhScGIyNHViM0IwY3k1emRHRnlkQzVqWVd4c0tDQmxiR1Z0TENCaGJtbHRZWFJwYjI0Z0tUdGNibHgwZlZ4dVhHNWNkR3BSZFdWeWVTNW1lQzUwYVcxbGNpaGNibHgwWEhScVVYVmxjbmt1WlhoMFpXNWtLQ0IwYVdOckxDQjdYRzVjZEZ4MFhIUmxiR1Z0T2lCbGJHVnRMRnh1WEhSY2RGeDBZVzVwYlRvZ1lXNXBiV0YwYVc5dUxGeHVYSFJjZEZ4MGNYVmxkV1U2SUdGdWFXMWhkR2x2Ymk1dmNIUnpMbkYxWlhWbFhHNWNkRngwZlNBcFhHNWNkQ2s3WEc1Y2JseDBMeThnWVhSMFlXTm9JR05oYkd4aVlXTnJjeUJtY205dElHOXdkR2x2Ym5OY2JseDBjbVYwZFhKdUlHRnVhVzFoZEdsdmJpNXdjbTluY21WemN5Z2dZVzVwYldGMGFXOXVMbTl3ZEhNdWNISnZaM0psYzNNZ0tWeHVYSFJjZEM1a2IyNWxLQ0JoYm1sdFlYUnBiMjR1YjNCMGN5NWtiMjVsTENCaGJtbHRZWFJwYjI0dWIzQjBjeTVqYjIxd2JHVjBaU0FwWEc1Y2RGeDBMbVpoYVd3b0lHRnVhVzFoZEdsdmJpNXZjSFJ6TG1aaGFXd2dLVnh1WEhSY2RDNWhiSGRoZVhNb0lHRnVhVzFoZEdsdmJpNXZjSFJ6TG1Gc2QyRjVjeUFwTzF4dWZWeHVYRzVxVVhWbGNua3VRVzVwYldGMGFXOXVJRDBnYWxGMVpYSjVMbVY0ZEdWdVpDZ2dRVzVwYldGMGFXOXVMQ0I3WEc1Y2JseDBkSGRsWlc1bGNuTTZJSHRjYmx4MFhIUmNJaXBjSWpvZ1d5Qm1kVzVqZEdsdmJpZ2djSEp2Y0N3Z2RtRnNkV1VnS1NCN1hHNWNkRngwWEhSMllYSWdkSGRsWlc0Z1BTQjBhR2x6TG1OeVpXRjBaVlIzWldWdUtDQndjbTl3TENCMllXeDFaU0FwTzF4dVhIUmNkRngwWVdScWRYTjBRMU5US0NCMGQyVmxiaTVsYkdWdExDQndjbTl3TENCeVkzTnpUblZ0TG1WNFpXTW9JSFpoYkhWbElDa3NJSFIzWldWdUlDazdYRzVjZEZ4MFhIUnlaWFIxY200Z2RIZGxaVzQ3WEc1Y2RGeDBmU0JkWEc1Y2RIMHNYRzVjYmx4MGRIZGxaVzVsY2pvZ1puVnVZM1JwYjI0b0lIQnliM0J6TENCallXeHNZbUZqYXlBcElIdGNibHgwWEhScFppQW9JR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLQ0J3Y205d2N5QXBJQ2tnZTF4dVhIUmNkRngwWTJGc2JHSmhZMnNnUFNCd2NtOXdjenRjYmx4MFhIUmNkSEJ5YjNCeklEMGdXeUJjSWlwY0lpQmRPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSd2NtOXdjeUE5SUhCeWIzQnpMbTFoZEdOb0tDQnlibTkwYUhSdGJIZG9hWFJsSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwZG1GeUlIQnliM0FzWEc1Y2RGeDBYSFJwYm1SbGVDQTlJREFzWEc1Y2RGeDBYSFJzWlc1bmRHZ2dQU0J3Y205d2N5NXNaVzVuZEdnN1hHNWNibHgwWEhSbWIzSWdLQ0E3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JJQ2tnZTF4dVhIUmNkRngwY0hKdmNDQTlJSEJ5YjNCeld5QnBibVJsZUNCZE8xeHVYSFJjZEZ4MFFXNXBiV0YwYVc5dUxuUjNaV1Z1WlhKeld5QndjbTl3SUYwZ1BTQkJibWx0WVhScGIyNHVkSGRsWlc1bGNuTmJJSEJ5YjNBZ1hTQjhmQ0JiWFR0Y2JseDBYSFJjZEVGdWFXMWhkR2x2Ymk1MGQyVmxibVZ5YzFzZ2NISnZjQ0JkTG5WdWMyaHBablFvSUdOaGJHeGlZV05ySUNrN1hHNWNkRngwZlZ4dVhIUjlMRnh1WEc1Y2RIQnlaV1pwYkhSbGNuTTZJRnNnWkdWbVlYVnNkRkJ5WldacGJIUmxjaUJkTEZ4dVhHNWNkSEJ5WldacGJIUmxjam9nWm5WdVkzUnBiMjRvSUdOaGJHeGlZV05yTENCd2NtVndaVzVrSUNrZ2UxeHVYSFJjZEdsbUlDZ2djSEpsY0dWdVpDQXBJSHRjYmx4MFhIUmNkRUZ1YVcxaGRHbHZiaTV3Y21WbWFXeDBaWEp6TG5WdWMyaHBablFvSUdOaGJHeGlZV05ySUNrN1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRUZ1YVcxaGRHbHZiaTV3Y21WbWFXeDBaWEp6TG5CMWMyZ29JR05oYkd4aVlXTnJJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNTlJQ2s3WEc1Y2JtcFJkV1Z5ZVM1emNHVmxaQ0E5SUdaMWJtTjBhVzl1S0NCemNHVmxaQ3dnWldGemFXNW5MQ0JtYmlBcElIdGNibHgwZG1GeUlHOXdkQ0E5SUhOd1pXVmtJQ1ltSUhSNWNHVnZaaUJ6Y0dWbFpDQTlQVDBnWENKdlltcGxZM1JjSWlBL0lHcFJkV1Z5ZVM1bGVIUmxibVFvSUh0OUxDQnpjR1ZsWkNBcElEb2dlMXh1WEhSY2RHTnZiWEJzWlhSbE9pQm1iaUI4ZkNBaFptNGdKaVlnWldGemFXNW5JSHg4WEc1Y2RGeDBYSFJxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnYzNCbFpXUWdLU0FtSmlCemNHVmxaQ3hjYmx4MFhIUmtkWEpoZEdsdmJqb2djM0JsWldRc1hHNWNkRngwWldGemFXNW5PaUJtYmlBbUppQmxZWE5wYm1jZ2ZId2daV0Z6YVc1bklDWW1JQ0ZxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnWldGemFXNW5JQ2tnSmlZZ1pXRnphVzVuWEc1Y2RIMDdYRzVjYmx4MEx5OGdSMjhnZEc4Z2RHaGxJR1Z1WkNCemRHRjBaU0JwWmlCbWVDQmhjbVVnYjJabUlHOXlJR2xtSUdSdlkzVnRaVzUwSUdseklHaHBaR1JsYmx4dVhIUnBaaUFvSUdwUmRXVnllUzVtZUM1dlptWWdmSHdnWkc5amRXMWxiblF1YUdsa1pHVnVJQ2tnZTF4dVhIUmNkRzl3ZEM1a2RYSmhkR2x2YmlBOUlEQTdYRzVjYmx4MGZTQmxiSE5sSUh0Y2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCdmNIUXVaSFZ5WVhScGIyNGdJVDA5SUZ3aWJuVnRZbVZ5WENJZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUc5d2RDNWtkWEpoZEdsdmJpQnBiaUJxVVhWbGNua3Vabmd1YzNCbFpXUnpJQ2tnZTF4dVhIUmNkRngwWEhSdmNIUXVaSFZ5WVhScGIyNGdQU0JxVVhWbGNua3Vabmd1YzNCbFpXUnpXeUJ2Y0hRdVpIVnlZWFJwYjI0Z1hUdGNibHh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBiM0IwTG1SMWNtRjBhVzl1SUQwZ2FsRjFaWEo1TG1aNExuTndaV1ZrY3k1ZlpHVm1ZWFZzZER0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhRdkx5Qk9iM0p0WVd4cGVtVWdiM0IwTG5GMVpYVmxJQzBnZEhKMVpTOTFibVJsWm1sdVpXUXZiblZzYkNBdFBpQmNJbVo0WENKY2JseDBhV1lnS0NCdmNIUXVjWFZsZFdVZ1BUMGdiblZzYkNCOGZDQnZjSFF1Y1hWbGRXVWdQVDA5SUhSeWRXVWdLU0I3WEc1Y2RGeDBiM0IwTG5GMVpYVmxJRDBnWENKbWVGd2lPMXh1WEhSOVhHNWNibHgwTHk4Z1VYVmxkV1ZwYm1kY2JseDBiM0IwTG05c1pDQTlJRzl3ZEM1amIyMXdiR1YwWlR0Y2JseHVYSFJ2Y0hRdVkyOXRjR3hsZEdVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCdmNIUXViMnhrSUNrZ0tTQjdYRzVjZEZ4MFhIUnZjSFF1YjJ4a0xtTmhiR3dvSUhSb2FYTWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvSUc5d2RDNXhkV1YxWlNBcElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1a1pYRjFaWFZsS0NCMGFHbHpMQ0J2Y0hRdWNYVmxkV1VnS1R0Y2JseDBYSFI5WEc1Y2RIMDdYRzVjYmx4MGNtVjBkWEp1SUc5d2REdGNibjA3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwWm1Ga1pWUnZPaUJtZFc1amRHbHZiaWdnYzNCbFpXUXNJSFJ2TENCbFlYTnBibWNzSUdOaGJHeGlZV05ySUNrZ2UxeHVYRzVjZEZ4MEx5OGdVMmh2ZHlCaGJua2dhR2xrWkdWdUlHVnNaVzFsYm5SeklHRm1kR1Z5SUhObGRIUnBibWNnYjNCaFkybDBlU0IwYnlBd1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdVptbHNkR1Z5S0NCcGMwaHBaR1JsYmxkcGRHaHBibFJ5WldVZ0tTNWpjM01vSUZ3aWIzQmhZMmwwZVZ3aUxDQXdJQ2t1YzJodmR5Z3BYRzVjYmx4MFhIUmNkQzh2SUVGdWFXMWhkR1VnZEc4Z2RHaGxJSFpoYkhWbElITndaV05wWm1sbFpGeHVYSFJjZEZ4MExtVnVaQ2dwTG1GdWFXMWhkR1VvSUhzZ2IzQmhZMmwwZVRvZ2RHOGdmU3dnYzNCbFpXUXNJR1ZoYzJsdVp5d2dZMkZzYkdKaFkyc2dLVHRjYmx4MGZTeGNibHgwWVc1cGJXRjBaVG9nWm5WdVkzUnBiMjRvSUhCeWIzQXNJSE53WldWa0xDQmxZWE5wYm1jc0lHTmhiR3hpWVdOcklDa2dlMXh1WEhSY2RIWmhjaUJsYlhCMGVTQTlJR3BSZFdWeWVTNXBjMFZ0Y0hSNVQySnFaV04wS0NCd2NtOXdJQ2tzWEc1Y2RGeDBYSFJ2Y0hSaGJHd2dQU0JxVVhWbGNua3VjM0JsWldRb0lITndaV1ZrTENCbFlYTnBibWNzSUdOaGJHeGlZV05ySUNrc1hHNWNkRngwWEhSa2IwRnVhVzFoZEdsdmJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRTl3WlhKaGRHVWdiMjRnWVNCamIzQjVJRzltSUhCeWIzQWdjMjhnY0dWeUxYQnliM0JsY25SNUlHVmhjMmx1WnlCM2IyNG5kQ0JpWlNCc2IzTjBYRzVjZEZ4MFhIUmNkSFpoY2lCaGJtbHRJRDBnUVc1cGJXRjBhVzl1S0NCMGFHbHpMQ0JxVVhWbGNua3VaWGgwWlc1a0tDQjdmU3dnY0hKdmNDQXBMQ0J2Y0hSaGJHd2dLVHRjYmx4dVhIUmNkRngwWEhRdkx5QkZiWEIwZVNCaGJtbHRZWFJwYjI1ekxDQnZjaUJtYVc1cGMyaHBibWNnY21WemIyeDJaWE1nYVcxdFpXUnBZWFJsYkhsY2JseDBYSFJjZEZ4MGFXWWdLQ0JsYlhCMGVTQjhmQ0JrWVhSaFVISnBkaTVuWlhRb0lIUm9hWE1zSUZ3aVptbHVhWE5vWENJZ0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSaGJtbHRMbk4wYjNBb0lIUnlkV1VnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZUdGNibHgwWEhSY2RHUnZRVzVwYldGMGFXOXVMbVpwYm1semFDQTlJR1J2UVc1cGJXRjBhVzl1TzF4dVhHNWNkRngwY21WMGRYSnVJR1Z0Y0hSNUlIeDhJRzl3ZEdGc2JDNXhkV1YxWlNBOVBUMGdabUZzYzJVZ1AxeHVYSFJjZEZ4MGRHaHBjeTVsWVdOb0tDQmtiMEZ1YVcxaGRHbHZiaUFwSURwY2JseDBYSFJjZEhSb2FYTXVjWFZsZFdVb0lHOXdkR0ZzYkM1eGRXVjFaU3dnWkc5QmJtbHRZWFJwYjI0Z0tUdGNibHgwZlN4Y2JseDBjM1J2Y0RvZ1puVnVZM1JwYjI0b0lIUjVjR1VzSUdOc1pXRnlVWFZsZFdVc0lHZHZkRzlGYm1RZ0tTQjdYRzVjZEZ4MGRtRnlJSE4wYjNCUmRXVjFaU0E5SUdaMWJtTjBhVzl1S0NCb2IyOXJjeUFwSUh0Y2JseDBYSFJjZEhaaGNpQnpkRzl3SUQwZ2FHOXZhM011YzNSdmNEdGNibHgwWEhSY2RHUmxiR1YwWlNCb2IyOXJjeTV6ZEc5d08xeHVYSFJjZEZ4MGMzUnZjQ2dnWjI5MGIwVnVaQ0FwTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCMGVYQmxJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RGeDBaMjkwYjBWdVpDQTlJR05zWldGeVVYVmxkV1U3WEc1Y2RGeDBYSFJqYkdWaGNsRjFaWFZsSUQwZ2RIbHdaVHRjYmx4MFhIUmNkSFI1Y0dVZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYSFJjZEdsbUlDZ2dZMnhsWVhKUmRXVjFaU0FtSmlCMGVYQmxJQ0U5UFNCbVlXeHpaU0FwSUh0Y2JseDBYSFJjZEhSb2FYTXVjWFZsZFdVb0lIUjVjR1VnZkh3Z1hDSm1lRndpTENCYlhTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkbUZ5SUdSbGNYVmxkV1VnUFNCMGNuVmxMRnh1WEhSY2RGeDBYSFJwYm1SbGVDQTlJSFI1Y0dVZ0lUMGdiblZzYkNBbUppQjBlWEJsSUNzZ1hDSnhkV1YxWlVodmIydHpYQ0lzWEc1Y2RGeDBYSFJjZEhScGJXVnljeUE5SUdwUmRXVnllUzUwYVcxbGNuTXNYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUhSb2FYTWdLVHRjYmx4dVhIUmNkRngwYVdZZ0tDQnBibVJsZUNBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NCa1lYUmhXeUJwYm1SbGVDQmRJQ1ltSUdSaGRHRmJJR2x1WkdWNElGMHVjM1J2Y0NBcElIdGNibHgwWEhSY2RGeDBYSFJ6ZEc5d1VYVmxkV1VvSUdSaGRHRmJJR2x1WkdWNElGMGdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWm05eUlDZ2dhVzVrWlhnZ2FXNGdaR0YwWVNBcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lHUmhkR0ZiSUdsdVpHVjRJRjBnSmlZZ1pHRjBZVnNnYVc1a1pYZ2dYUzV6ZEc5d0lDWW1JSEp5ZFc0dWRHVnpkQ2dnYVc1a1pYZ2dLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE4wYjNCUmRXVjFaU2dnWkdGMFlWc2dhVzVrWlhnZ1hTQXBPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUm1iM0lnS0NCcGJtUmxlQ0E5SUhScGJXVnljeTVzWlc1bmRHZzdJR2x1WkdWNExTMDdJQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JSFJwYldWeWMxc2dhVzVrWlhnZ1hTNWxiR1Z0SUQwOVBTQjBhR2x6SUNZbVhHNWNkRngwWEhSY2RGeDBLQ0IwZVhCbElEMDlJRzUxYkd3Z2ZId2dkR2x0WlhKeld5QnBibVJsZUNCZExuRjFaWFZsSUQwOVBTQjBlWEJsSUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSMGFXMWxjbk5iSUdsdVpHVjRJRjB1WVc1cGJTNXpkRzl3S0NCbmIzUnZSVzVrSUNrN1hHNWNkRngwWEhSY2RGeDBaR1Z4ZFdWMVpTQTlJR1poYkhObE8xeHVYSFJjZEZ4MFhIUmNkSFJwYldWeWN5NXpjR3hwWTJVb0lHbHVaR1Y0TENBeElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1UzUmhjblFnZEdobElHNWxlSFFnYVc0Z2RHaGxJSEYxWlhWbElHbG1JSFJvWlNCc1lYTjBJSE4wWlhBZ2QyRnpiaWQwSUdadmNtTmxaQzVjYmx4MFhIUmNkQzh2SUZScGJXVnljeUJqZFhKeVpXNTBiSGtnZDJsc2JDQmpZV3hzSUhSb1pXbHlJR052YlhCc1pYUmxJR05oYkd4aVlXTnJjeXdnZDJocFkyaGNibHgwWEhSY2RDOHZJSGRwYkd3Z1pHVnhkV1YxWlNCaWRYUWdiMjVzZVNCcFppQjBhR1Y1SUhkbGNtVWdaMjkwYjBWdVpDNWNibHgwWEhSY2RHbG1JQ2dnWkdWeGRXVjFaU0I4ZkNBaFoyOTBiMFZ1WkNBcElIdGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtUmxjWFZsZFdVb0lIUm9hWE1zSUhSNWNHVWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlJQ2s3WEc1Y2RIMHNYRzVjZEdacGJtbHphRG9nWm5WdVkzUnBiMjRvSUhSNWNHVWdLU0I3WEc1Y2RGeDBhV1lnS0NCMGVYQmxJQ0U5UFNCbVlXeHpaU0FwSUh0Y2JseDBYSFJjZEhSNWNHVWdQU0IwZVhCbElIeDhJRndpWm5oY0lqdGNibHgwWEhSOVhHNWNkRngwY21WMGRYSnVJSFJvYVhNdVpXRmphQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSMllYSWdhVzVrWlhnc1hHNWNkRngwWEhSY2RHUmhkR0VnUFNCa1lYUmhVSEpwZGk1blpYUW9JSFJvYVhNZ0tTeGNibHgwWEhSY2RGeDBjWFZsZFdVZ1BTQmtZWFJoV3lCMGVYQmxJQ3NnWENKeGRXVjFaVndpSUYwc1hHNWNkRngwWEhSY2RHaHZiMnR6SUQwZ1pHRjBZVnNnZEhsd1pTQXJJRndpY1hWbGRXVkliMjlyYzF3aUlGMHNYRzVjZEZ4MFhIUmNkSFJwYldWeWN5QTlJR3BSZFdWeWVTNTBhVzFsY25Nc1hHNWNkRngwWEhSY2RHeGxibWQwYUNBOUlIRjFaWFZsSUQ4Z2NYVmxkV1V1YkdWdVozUm9JRG9nTUR0Y2JseHVYSFJjZEZ4MEx5OGdSVzVoWW14bElHWnBibWx6YUdsdVp5Qm1iR0ZuSUc5dUlIQnlhWFpoZEdVZ1pHRjBZVnh1WEhSY2RGeDBaR0YwWVM1bWFXNXBjMmdnUFNCMGNuVmxPMXh1WEc1Y2RGeDBYSFF2THlCRmJYQjBlU0IwYUdVZ2NYVmxkV1VnWm1seWMzUmNibHgwWEhSY2RHcFJkV1Z5ZVM1eGRXVjFaU2dnZEdocGN5d2dkSGx3WlN3Z1cxMGdLVHRjYmx4dVhIUmNkRngwYVdZZ0tDQm9iMjlyY3lBbUppQm9iMjlyY3k1emRHOXdJQ2tnZTF4dVhIUmNkRngwWEhSb2IyOXJjeTV6ZEc5d0xtTmhiR3dvSUhSb2FYTXNJSFJ5ZFdVZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVEc5dmF5Qm1iM0lnWVc1NUlHRmpkR2wyWlNCaGJtbHRZWFJwYjI1ekxDQmhibVFnWm1sdWFYTm9JSFJvWlcxY2JseDBYSFJjZEdadmNpQW9JR2x1WkdWNElEMGdkR2x0WlhKekxteGxibWQwYURzZ2FXNWtaWGd0TFRzZ0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ2RHbHRaWEp6V3lCcGJtUmxlQ0JkTG1Wc1pXMGdQVDA5SUhSb2FYTWdKaVlnZEdsdFpYSnpXeUJwYm1SbGVDQmRMbkYxWlhWbElEMDlQU0IwZVhCbElDa2dlMXh1WEhSY2RGeDBYSFJjZEhScGJXVnljMXNnYVc1a1pYZ2dYUzVoYm1sdExuTjBiM0FvSUhSeWRXVWdLVHRjYmx4MFhIUmNkRngwWEhSMGFXMWxjbk11YzNCc2FXTmxLQ0JwYm1SbGVDd2dNU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRXh2YjJzZ1ptOXlJR0Z1ZVNCaGJtbHRZWFJwYjI1eklHbHVJSFJvWlNCdmJHUWdjWFZsZFdVZ1lXNWtJR1pwYm1semFDQjBhR1Z0WEc1Y2RGeDBYSFJtYjNJZ0tDQnBibVJsZUNBOUlEQTdJR2x1WkdWNElEd2diR1Z1WjNSb095QnBibVJsZUNzcklDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lIRjFaWFZsV3lCcGJtUmxlQ0JkSUNZbUlIRjFaWFZsV3lCcGJtUmxlQ0JkTG1acGJtbHphQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnhkV1YxWlZzZ2FXNWtaWGdnWFM1bWFXNXBjMmd1WTJGc2JDZ2dkR2hwY3lBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZSMWNtNGdiMlptSUdacGJtbHphR2x1WnlCbWJHRm5YRzVjZEZ4MFhIUmtaV3hsZEdVZ1pHRjBZUzVtYVc1cGMyZzdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JtcFJkV1Z5ZVM1bFlXTm9LQ0JiSUZ3aWRHOW5aMnhsWENJc0lGd2ljMmh2ZDF3aUxDQmNJbWhwWkdWY0lpQmRMQ0JtZFc1amRHbHZiaWdnYVN3Z2JtRnRaU0FwSUh0Y2JseDBkbUZ5SUdOemMwWnVJRDBnYWxGMVpYSjVMbVp1V3lCdVlXMWxJRjA3WEc1Y2RHcFJkV1Z5ZVM1bWJsc2dibUZ0WlNCZElEMGdablZ1WTNScGIyNG9JSE53WldWa0xDQmxZWE5wYm1jc0lHTmhiR3hpWVdOcklDa2dlMXh1WEhSY2RISmxkSFZ5YmlCemNHVmxaQ0E5UFNCdWRXeHNJSHg4SUhSNWNHVnZaaUJ6Y0dWbFpDQTlQVDBnWENKaWIyOXNaV0Z1WENJZ1AxeHVYSFJjZEZ4MFkzTnpSbTR1WVhCd2JIa29JSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5QXBJRHBjYmx4MFhIUmNkSFJvYVhNdVlXNXBiV0YwWlNnZ1oyVnVSbmdvSUc1aGJXVXNJSFJ5ZFdVZ0tTd2djM0JsWldRc0lHVmhjMmx1Wnl3Z1kyRnNiR0poWTJzZ0tUdGNibHgwZlR0Y2JuMGdLVHRjYmx4dUx5OGdSMlZ1WlhKaGRHVWdjMmh2Y25SamRYUnpJR1p2Y2lCamRYTjBiMjBnWVc1cGJXRjBhVzl1YzF4dWFsRjFaWEo1TG1WaFkyZ29JSHRjYmx4MGMyeHBaR1ZFYjNkdU9pQm5aVzVHZUNnZ1hDSnphRzkzWENJZ0tTeGNibHgwYzJ4cFpHVlZjRG9nWjJWdVJuZ29JRndpYUdsa1pWd2lJQ2tzWEc1Y2RITnNhV1JsVkc5bloyeGxPaUJuWlc1R2VDZ2dYQ0owYjJkbmJHVmNJaUFwTEZ4dVhIUm1ZV1JsU1c0NklIc2diM0JoWTJsMGVUb2dYQ0p6YUc5M1hDSWdmU3hjYmx4MFptRmtaVTkxZERvZ2V5QnZjR0ZqYVhSNU9pQmNJbWhwWkdWY0lpQjlMRnh1WEhSbVlXUmxWRzluWjJ4bE9pQjdJRzl3WVdOcGRIazZJRndpZEc5bloyeGxYQ0lnZlZ4dWZTd2dablZ1WTNScGIyNG9JRzVoYldVc0lIQnliM0J6SUNrZ2UxeHVYSFJxVVhWbGNua3VabTViSUc1aGJXVWdYU0E5SUdaMWJtTjBhVzl1S0NCemNHVmxaQ3dnWldGemFXNW5MQ0JqWVd4c1ltRmpheUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1aGJtbHRZWFJsS0NCd2NtOXdjeXdnYzNCbFpXUXNJR1ZoYzJsdVp5d2dZMkZzYkdKaFkyc2dLVHRjYmx4MGZUdGNibjBnS1R0Y2JseHVhbEYxWlhKNUxuUnBiV1Z5Y3lBOUlGdGRPMXh1YWxGMVpYSjVMbVo0TG5ScFkyc2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBkbUZ5SUhScGJXVnlMRnh1WEhSY2RHa2dQU0F3TEZ4dVhIUmNkSFJwYldWeWN5QTlJR3BSZFdWeWVTNTBhVzFsY25NN1hHNWNibHgwWm5oT2IzY2dQU0JxVVhWbGNua3VibTkzS0NrN1hHNWNibHgwWm05eUlDZ2dPeUJwSUR3Z2RHbHRaWEp6TG14bGJtZDBhRHNnYVNzcklDa2dlMXh1WEhSY2RIUnBiV1Z5SUQwZ2RHbHRaWEp6V3lCcElGMDdYRzVjYmx4MFhIUXZMeUJEYUdWamEzTWdkR2hsSUhScGJXVnlJR2hoY3lCdWIzUWdZV3h5WldGa2VTQmlaV1Z1SUhKbGJXOTJaV1JjYmx4MFhIUnBaaUFvSUNGMGFXMWxjaWdwSUNZbUlIUnBiV1Z5YzFzZ2FTQmRJRDA5UFNCMGFXMWxjaUFwSUh0Y2JseDBYSFJjZEhScGJXVnljeTV6Y0d4cFkyVW9JR2t0TFN3Z01TQXBPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkR2xtSUNnZ0lYUnBiV1Z5Y3k1c1pXNW5kR2dnS1NCN1hHNWNkRngwYWxGMVpYSjVMbVo0TG5OMGIzQW9LVHRjYmx4MGZWeHVYSFJtZUU1dmR5QTlJSFZ1WkdWbWFXNWxaRHRjYm4wN1hHNWNibXBSZFdWeWVTNW1lQzUwYVcxbGNpQTlJR1oxYm1OMGFXOXVLQ0IwYVcxbGNpQXBJSHRjYmx4MGFsRjFaWEo1TG5ScGJXVnljeTV3ZFhOb0tDQjBhVzFsY2lBcE8xeHVYSFJwWmlBb0lIUnBiV1Z5S0NrZ0tTQjdYRzVjZEZ4MGFsRjFaWEo1TG1aNExuTjBZWEowS0NrN1hHNWNkSDBnWld4elpTQjdYRzVjZEZ4MGFsRjFaWEo1TG5ScGJXVnljeTV3YjNBb0tUdGNibHgwZlZ4dWZUdGNibHh1YWxGMVpYSjVMbVo0TG1sdWRHVnlkbUZzSUQwZ01UTTdYRzVxVVhWbGNua3Vabmd1YzNSaGNuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBhV1lnS0NBaGRHbHRaWEpKWkNBcElIdGNibHgwWEhSMGFXMWxja2xrSUQwZ2QybHVaRzkzTG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQS9YRzVjZEZ4MFhIUjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLQ0J5WVdZZ0tTQTZYRzVjZEZ4MFhIUjNhVzVrYjNjdWMyVjBTVzUwWlhKMllXd29JR3BSZFdWeWVTNW1lQzUwYVdOckxDQnFVWFZsY25rdVpuZ3VhVzUwWlhKMllXd2dLVHRjYmx4MGZWeHVmVHRjYmx4dWFsRjFaWEo1TG1aNExuTjBiM0FnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwYVdZZ0tDQjNhVzVrYjNjdVkyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVWdLU0I3WEc1Y2RGeDBkMmx1Wkc5M0xtTmhibU5sYkVGdWFXMWhkR2x2YmtaeVlXMWxLQ0IwYVcxbGNrbGtJQ2s3WEc1Y2RIMGdaV3h6WlNCN1hHNWNkRngwZDJsdVpHOTNMbU5zWldGeVNXNTBaWEoyWVd3b0lIUnBiV1Z5U1dRZ0tUdGNibHgwZlZ4dVhHNWNkSFJwYldWeVNXUWdQU0J1ZFd4c08xeHVmVHRjYmx4dWFsRjFaWEo1TG1aNExuTndaV1ZrY3lBOUlIdGNibHgwYzJ4dmR6b2dOakF3TEZ4dVhIUm1ZWE4wT2lBeU1EQXNYRzVjYmx4MEx5OGdSR1ZtWVhWc2RDQnpjR1ZsWkZ4dVhIUmZaR1ZtWVhWc2REb2dOREF3WEc1OU8xeHVYRzVjYmk4dklFSmhjMlZrSUc5bVppQnZaaUIwYUdVZ2NHeDFaMmx1SUdKNUlFTnNhVzUwSUVobGJHWmxjbk1zSUhkcGRHZ2djR1Z5YldsemMybHZiaTVjYmk4dklHaDBkSEJ6T2k4dmQyVmlMbUZ5WTJocGRtVXViM0puTDNkbFlpOHlNREV3TURNeU5EQXhORGMwTnk5b2RIUndPaTh2WW14cGJtUnphV2R1WVd4ekxtTnZiUzlwYm1SbGVDNXdhSEF2TWpBd09TOHdOeTlxY1hWbGNua3RaR1ZzWVhrdlhHNXFVWFZsY25rdVptNHVaR1ZzWVhrZ1BTQm1kVzVqZEdsdmJpZ2dkR2x0WlN3Z2RIbHdaU0FwSUh0Y2JseDBkR2x0WlNBOUlHcFJkV1Z5ZVM1bWVDQS9JR3BSZFdWeWVTNW1lQzV6Y0dWbFpITmJJSFJwYldVZ1hTQjhmQ0IwYVcxbElEb2dkR2x0WlR0Y2JseDBkSGx3WlNBOUlIUjVjR1VnZkh3Z1hDSm1lRndpTzF4dVhHNWNkSEpsZEhWeWJpQjBhR2x6TG5GMVpYVmxLQ0IwZVhCbExDQm1kVzVqZEdsdmJpZ2dibVY0ZEN3Z2FHOXZhM01nS1NCN1hHNWNkRngwZG1GeUlIUnBiV1Z2ZFhRZ1BTQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDZ2dibVY0ZEN3Z2RHbHRaU0FwTzF4dVhIUmNkR2h2YjJ0ekxuTjBiM0FnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RIZHBibVJ2ZHk1amJHVmhjbFJwYldWdmRYUW9JSFJwYldWdmRYUWdLVHRjYmx4MFhIUjlPMXh1WEhSOUlDazdYRzU5TzF4dVhHNWNiaWdnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFpoY2lCcGJuQjFkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JRndpYVc1d2RYUmNJaUFwTEZ4dVhIUmNkSE5sYkdWamRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2ljMlZzWldOMFhDSWdLU3hjYmx4MFhIUnZjSFFnUFNCelpXeGxZM1F1WVhCd1pXNWtRMmhwYkdRb0lHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aWIzQjBhVzl1WENJZ0tTQXBPMXh1WEc1Y2RHbHVjSFYwTG5SNWNHVWdQU0JjSW1Ob1pXTnJZbTk0WENJN1hHNWNibHgwTHk4Z1UzVndjRzl5ZERvZ1FXNWtjbTlwWkNBOFBUUXVNeUJ2Ym14NVhHNWNkQzh2SUVSbFptRjFiSFFnZG1Gc2RXVWdabTl5SUdFZ1kyaGxZMnRpYjNnZ2MyaHZkV3hrSUdKbElGd2liMjVjSWx4dVhIUnpkWEJ3YjNKMExtTm9aV05yVDI0Z1BTQnBibkIxZEM1MllXeDFaU0FoUFQwZ1hDSmNJanRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBURXhJRzl1YkhsY2JseDBMeThnVFhWemRDQmhZMk5sYzNNZ2MyVnNaV04wWldSSmJtUmxlQ0IwYnlCdFlXdGxJR1JsWm1GMWJIUWdiM0IwYVc5dWN5QnpaV3hsWTNSY2JseDBjM1Z3Y0c5eWRDNXZjSFJUWld4bFkzUmxaQ0E5SUc5d2RDNXpaV3hsWTNSbFpEdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFeElHOXViSGxjYmx4MEx5OGdRVzRnYVc1d2RYUWdiRzl6WlhNZ2FYUnpJSFpoYkhWbElHRm1kR1Z5SUdKbFkyOXRhVzVuSUdFZ2NtRmthVzljYmx4MGFXNXdkWFFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ0JjSW1sdWNIVjBYQ0lnS1R0Y2JseDBhVzV3ZFhRdWRtRnNkV1VnUFNCY0luUmNJanRjYmx4MGFXNXdkWFF1ZEhsd1pTQTlJRndpY21Ga2FXOWNJanRjYmx4MGMzVndjRzl5ZEM1eVlXUnBiMVpoYkhWbElEMGdhVzV3ZFhRdWRtRnNkV1VnUFQwOUlGd2lkRndpTzF4dWZTQXBLQ2s3WEc1Y2JseHVkbUZ5SUdKdmIyeEliMjlyTEZ4dVhIUmhkSFJ5U0dGdVpHeGxJRDBnYWxGMVpYSjVMbVY0Y0hJdVlYUjBja2hoYm1Sc1pUdGNibHh1YWxGMVpYSjVMbVp1TG1WNGRHVnVaQ2dnZTF4dVhIUmhkSFJ5T2lCbWRXNWpkR2x2YmlnZ2JtRnRaU3dnZG1Gc2RXVWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHRmpZMlZ6Y3lnZ2RHaHBjeXdnYWxGMVpYSjVMbUYwZEhJc0lHNWhiV1VzSUhaaGJIVmxMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBcE8xeHVYSFI5TEZ4dVhHNWNkSEpsYlc5MlpVRjBkSEk2SUdaMWJtTjBhVzl1S0NCdVlXMWxJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVMbkpsYlc5MlpVRjBkSElvSUhSb2FYTXNJRzVoYldVZ0tUdGNibHgwWEhSOUlDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhIUmhkSFJ5T2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGRtRnlJSEpsZEN3Z2FHOXZhM01zWEc1Y2RGeDBYSFJ1Vkhsd1pTQTlJR1ZzWlcwdWJtOWtaVlI1Y0dVN1hHNWNibHgwWEhRdkx5QkViMjRuZENCblpYUXZjMlYwSUdGMGRISnBZblYwWlhNZ2IyNGdkR1Y0ZEN3Z1kyOXRiV1Z1ZENCaGJtUWdZWFIwY21saWRYUmxJRzV2WkdWelhHNWNkRngwYVdZZ0tDQnVWSGx3WlNBOVBUMGdNeUI4ZkNCdVZIbHdaU0E5UFQwZ09DQjhmQ0J1Vkhsd1pTQTlQVDBnTWlBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCR1lXeHNZbUZqYXlCMGJ5QndjbTl3SUhkb1pXNGdZWFIwY21saWRYUmxjeUJoY21VZ2JtOTBJSE4xY0hCdmNuUmxaRnh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3BSZFdWeWVTNXdjbTl3S0NCbGJHVnRMQ0J1WVcxbExDQjJZV3gxWlNBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFRjBkSEpwWW5WMFpTQm9iMjlyY3lCaGNtVWdaR1YwWlhKdGFXNWxaQ0JpZVNCMGFHVWdiRzkzWlhKallYTmxJSFpsY25OcGIyNWNibHgwWEhRdkx5QkhjbUZpSUc1bFkyVnpjMkZ5ZVNCb2IyOXJJR2xtSUc5dVpTQnBjeUJrWldacGJtVmtYRzVjZEZ4MGFXWWdLQ0J1Vkhsd1pTQWhQVDBnTVNCOGZDQWhhbEYxWlhKNUxtbHpXRTFNUkc5aktDQmxiR1Z0SUNrZ0tTQjdYRzVjZEZ4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1aGRIUnlTRzl2YTNOYklHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQmRJSHg4WEc1Y2RGeDBYSFJjZENnZ2FsRjFaWEo1TG1WNGNISXViV0YwWTJndVltOXZiQzUwWlhOMEtDQnVZVzFsSUNrZ1B5QmliMjlzU0c5dmF5QTZJSFZ1WkdWbWFXNWxaQ0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ2RtRnNkV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2RtRnNkV1VnUFQwOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1eVpXMXZkbVZCZEhSeUtDQmxiR1Z0TENCdVlXMWxJQ2s3WEc1Y2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZZ0tDQm9iMjlyY3lBbUppQmNJbk5sZEZ3aUlHbHVJR2h2YjJ0eklDWW1YRzVjZEZ4MFhIUmNkQ2dnY21WMElEMGdhRzl2YTNNdWMyVjBLQ0JsYkdWdExDQjJZV3gxWlN3Z2JtRnRaU0FwSUNrZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhKbGREdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBaV3hsYlM1elpYUkJkSFJ5YVdKMWRHVW9JRzVoYldVc0lIWmhiSFZsSUNzZ1hDSmNJaUFwTzF4dVhIUmNkRngwY21WMGRYSnVJSFpoYkhWbE8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dhRzl2YTNNZ0ppWWdYQ0puWlhSY0lpQnBiaUJvYjI5cmN5QW1KaUFvSUhKbGRDQTlJR2h2YjJ0ekxtZGxkQ2dnWld4bGJTd2dibUZ0WlNBcElDa2dJVDA5SUc1MWJHd2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbVYwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZENBOUlHcFJkV1Z5ZVM1bWFXNWtMbUYwZEhJb0lHVnNaVzBzSUc1aGJXVWdLVHRjYmx4dVhIUmNkQzh2SUU1dmJpMWxlR2x6ZEdWdWRDQmhkSFJ5YVdKMWRHVnpJSEpsZEhWeWJpQnVkV3hzTENCM1pTQnViM0p0WVd4cGVtVWdkRzhnZFc1a1pXWnBibVZrWEc1Y2RGeDBjbVYwZFhKdUlISmxkQ0E5UFNCdWRXeHNJRDhnZFc1a1pXWnBibVZrSURvZ2NtVjBPMXh1WEhSOUxGeHVYRzVjZEdGMGRISkliMjlyY3pvZ2UxeHVYSFJjZEhSNWNHVTZJSHRjYmx4MFhIUmNkSE5sZERvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JQ0Z6ZFhCd2IzSjBMbkpoWkdsdlZtRnNkV1VnSmlZZ2RtRnNkV1VnUFQwOUlGd2ljbUZrYVc5Y0lpQW1KbHh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzV1YjJSbFRtRnRaU2dnWld4bGJTd2dYQ0pwYm5CMWRGd2lJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBkbUZ5SUhaaGJDQTlJR1ZzWlcwdWRtRnNkV1U3WEc1Y2RGeDBYSFJjZEZ4MFpXeGxiUzV6WlhSQmRIUnlhV0oxZEdVb0lGd2lkSGx3WlZ3aUxDQjJZV3gxWlNBcE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2RtRnNJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBaV3hsYlM1MllXeDFaU0E5SUhaaGJEdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhaaGJIVmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEhKbGJXOTJaVUYwZEhJNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCMllXeDFaU0FwSUh0Y2JseDBYSFIyWVhJZ2JtRnRaU3hjYmx4MFhIUmNkR2tnUFNBd0xGeHVYRzVjZEZ4MFhIUXZMeUJCZEhSeWFXSjFkR1VnYm1GdFpYTWdZMkZ1SUdOdmJuUmhhVzRnYm05dUxVaFVUVXdnZDJocGRHVnpjR0ZqWlNCamFHRnlZV04wWlhKelhHNWNkRngwWEhRdkx5Qm9kSFJ3Y3pvdkwyaDBiV3d1YzNCbFl5NTNhR0YwZDJjdWIzSm5MMjExYkhScGNHRm5aUzl6ZVc1MFlYZ3VhSFJ0YkNOaGRIUnlhV0oxZEdWekxUSmNibHgwWEhSY2RHRjBkSEpPWVcxbGN5QTlJSFpoYkhWbElDWW1JSFpoYkhWbExtMWhkR05vS0NCeWJtOTBhSFJ0Ykhkb2FYUmxJQ2s3WEc1Y2JseDBYSFJwWmlBb0lHRjBkSEpPWVcxbGN5QW1KaUJsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4SUNrZ2UxeHVYSFJjZEZ4MGQyaHBiR1VnS0NBb0lHNWhiV1VnUFNCaGRIUnlUbUZ0WlhOYklHa3JLeUJkSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR1ZzWlcwdWNtVnRiM1psUVhSMGNtbGlkWFJsS0NCdVlXMWxJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNTlJQ2s3WEc1Y2JpOHZJRWh2YjJ0eklHWnZjaUJpYjI5c1pXRnVJR0YwZEhKcFluVjBaWE5jYm1KdmIyeEliMjlySUQwZ2UxeHVYSFJ6WlhRNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCMllXeDFaU3dnYm1GdFpTQXBJSHRjYmx4MFhIUnBaaUFvSUhaaGJIVmxJRDA5UFNCbVlXeHpaU0FwSUh0Y2JseHVYSFJjZEZ4MEx5OGdVbVZ0YjNabElHSnZiMnhsWVc0Z1lYUjBjbWxpZFhSbGN5QjNhR1Z1SUhObGRDQjBieUJtWVd4elpWeHVYSFJjZEZ4MGFsRjFaWEo1TG5KbGJXOTJaVUYwZEhJb0lHVnNaVzBzSUc1aGJXVWdLVHRjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFpXeGxiUzV6WlhSQmRIUnlhV0oxZEdVb0lHNWhiV1VzSUc1aGJXVWdLVHRjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUc1aGJXVTdYRzVjZEgxY2JuMDdYRzVjYm1wUmRXVnllUzVsWVdOb0tDQnFVWFZsY25rdVpYaHdjaTV0WVhSamFDNWliMjlzTG5OdmRYSmpaUzV0WVhSamFDZ2dMMXhjZHlzdlp5QXBMQ0JtZFc1amRHbHZiaWdnYVN3Z2JtRnRaU0FwSUh0Y2JseDBkbUZ5SUdkbGRIUmxjaUE5SUdGMGRISklZVzVrYkdWYklHNWhiV1VnWFNCOGZDQnFVWFZsY25rdVptbHVaQzVoZEhSeU8xeHVYRzVjZEdGMGRISklZVzVrYkdWYklHNWhiV1VnWFNBOUlHWjFibU4wYVc5dUtDQmxiR1Z0TENCdVlXMWxMQ0JwYzFoTlRDQXBJSHRjYmx4MFhIUjJZWElnY21WMExDQm9ZVzVrYkdVc1hHNWNkRngwWEhSc2IzZGxjbU5oYzJWT1lXMWxJRDBnYm1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhHNWNkRngwYVdZZ0tDQWhhWE5ZVFV3Z0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVGMmIybGtJR0Z1SUdsdVptbHVhWFJsSUd4dmIzQWdZbmtnZEdWdGNHOXlZWEpwYkhrZ2NtVnRiM1pwYm1jZ2RHaHBjeUJtZFc1amRHbHZiaUJtY205dElIUm9aU0JuWlhSMFpYSmNibHgwWEhSY2RHaGhibVJzWlNBOUlHRjBkSEpJWVc1a2JHVmJJR3h2ZDJWeVkyRnpaVTVoYldVZ1hUdGNibHgwWEhSY2RHRjBkSEpJWVc1a2JHVmJJR3h2ZDJWeVkyRnpaVTVoYldVZ1hTQTlJSEpsZER0Y2JseDBYSFJjZEhKbGRDQTlJR2RsZEhSbGNpZ2daV3hsYlN3Z2JtRnRaU3dnYVhOWVRVd2dLU0FoUFNCdWRXeHNJRDljYmx4MFhIUmNkRngwYkc5M1pYSmpZWE5sVG1GdFpTQTZYRzVjZEZ4MFhIUmNkRzUxYkd3N1hHNWNkRngwWEhSaGRIUnlTR0Z1Wkd4bFd5QnNiM2RsY21OaGMyVk9ZVzFsSUYwZ1BTQm9ZVzVrYkdVN1hHNWNkRngwZlZ4dVhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RIMDdYRzU5SUNrN1hHNWNibHh1WEc1Y2JuWmhjaUJ5Wm05amRYTmhZbXhsSUQwZ0wxNG9QenBwYm5CMWRIeHpaV3hsWTNSOGRHVjRkR0Z5WldGOFluVjBkRzl1S1NRdmFTeGNibHgwY21Oc2FXTnJZV0pzWlNBOUlDOWVLRDg2WVh4aGNtVmhLU1F2YVR0Y2JseHVhbEYxWlhKNUxtWnVMbVY0ZEdWdVpDZ2dlMXh1WEhSd2NtOXdPaUJtZFc1amRHbHZiaWdnYm1GdFpTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdGalkyVnpjeWdnZEdocGN5d2dhbEYxWlhKNUxuQnliM0FzSUc1aGJXVXNJSFpoYkhWbExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0FwTzF4dVhIUjlMRnh1WEc1Y2RISmxiVzkyWlZCeWIzQTZJR1oxYm1OMGFXOXVLQ0J1WVcxbElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBaR1ZzWlhSbElIUm9hWE5iSUdwUmRXVnllUzV3Y205d1JtbDRXeUJ1WVcxbElGMGdmSHdnYm1GdFpTQmRPMXh1WEhSY2RIMGdLVHRjYmx4MGZWeHVmU0FwTzF4dVhHNXFVWFZsY25rdVpYaDBaVzVrS0NCN1hHNWNkSEJ5YjNBNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCdVlXMWxMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUjJZWElnY21WMExDQm9iMjlyY3l4Y2JseDBYSFJjZEc1VWVYQmxJRDBnWld4bGJTNXViMlJsVkhsd1pUdGNibHh1WEhSY2RDOHZJRVJ2YmlkMElHZGxkQzl6WlhRZ2NISnZjR1Z5ZEdsbGN5QnZiaUIwWlhoMExDQmpiMjF0Wlc1MElHRnVaQ0JoZEhSeWFXSjFkR1VnYm05a1pYTmNibHgwWEhScFppQW9JRzVVZVhCbElEMDlQU0F6SUh4OElHNVVlWEJsSUQwOVBTQTRJSHg4SUc1VWVYQmxJRDA5UFNBeUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dibFI1Y0dVZ0lUMDlJREVnZkh3Z0lXcFJkV1Z5ZVM1cGMxaE5URVJ2WXlnZ1pXeGxiU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJHYVhnZ2JtRnRaU0JoYm1RZ1lYUjBZV05vSUdodmIydHpYRzVjZEZ4MFhIUnVZVzFsSUQwZ2FsRjFaWEo1TG5CeWIzQkdhWGhiSUc1aGJXVWdYU0I4ZkNCdVlXMWxPMXh1WEhSY2RGeDBhRzl2YTNNZ1BTQnFVWFZsY25rdWNISnZjRWh2YjJ0eld5QnVZVzFsSUYwN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDQjJZV3gxWlNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQm9iMjlyY3lBbUppQmNJbk5sZEZ3aUlHbHVJR2h2YjJ0eklDWW1YRzVjZEZ4MFhIUmNkQ2dnY21WMElEMGdhRzl2YTNNdWMyVjBLQ0JsYkdWdExDQjJZV3gxWlN3Z2JtRnRaU0FwSUNrZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhKbGREdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlDZ2daV3hsYlZzZ2JtRnRaU0JkSUQwZ2RtRnNkV1VnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHaHZiMnR6SUNZbUlGd2laMlYwWENJZ2FXNGdhRzl2YTNNZ0ppWWdLQ0J5WlhRZ1BTQm9iMjlyY3k1blpYUW9JR1ZzWlcwc0lHNWhiV1VnS1NBcElDRTlQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlISmxkRHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z1pXeGxiVnNnYm1GdFpTQmRPMXh1WEhSOUxGeHVYRzVjZEhCeWIzQkliMjlyY3pvZ2UxeHVYSFJjZEhSaFlrbHVaR1Y0T2lCN1hHNWNkRngwWEhSblpYUTZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T1NBdElERXhJRzl1YkhsY2JseDBYSFJjZEZ4MEx5OGdaV3hsYlM1MFlXSkpibVJsZUNCa2IyVnpiaWQwSUdGc2QyRjVjeUJ5WlhSMWNtNGdkR2hsWEc1Y2RGeDBYSFJjZEM4dklHTnZjbkpsWTNRZ2RtRnNkV1VnZDJobGJpQnBkQ0JvWVhOdUozUWdZbVZsYmlCbGVIQnNhV05wZEd4NUlITmxkRnh1WEhSY2RGeDBYSFF2THlCb2RIUndjem92TDNkbFlpNWhjbU5vYVhabExtOXlaeTkzWldJdk1qQXhOREV4TVRZeU16TXpORGN2YUhSMGNEb3ZMMlpzZFdsa2NISnZhbVZqZEM1dmNtY3ZZbXh2Wnk4eU1EQTRMekF4THpBNUwyZGxkSFJwYm1jdGMyVjBkR2x1WnkxaGJtUXRjbVZ0YjNacGJtY3RkR0ZpYVc1a1pYZ3RkbUZzZFdWekxYZHBkR2d0YW1GMllYTmpjbWx3ZEM5Y2JseDBYSFJjZEZ4MEx5OGdWWE5sSUhCeWIzQmxjaUJoZEhSeWFXSjFkR1VnY21WMGNtbGxkbUZzS0NNeE1qQTNNaWxjYmx4MFhIUmNkRngwZG1GeUlIUmhZbWx1WkdWNElEMGdhbEYxWlhKNUxtWnBibVF1WVhSMGNpZ2daV3hsYlN3Z1hDSjBZV0pwYm1SbGVGd2lJQ2s3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0IwWVdKcGJtUmxlQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2NHRnljMlZKYm5Rb0lIUmhZbWx1WkdWNExDQXhNQ0FwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBhV1lnS0Z4dVhIUmNkRngwWEhSY2RISm1iMk4xYzJGaWJHVXVkR1Z6ZENnZ1pXeGxiUzV1YjJSbFRtRnRaU0FwSUh4OFhHNWNkRngwWEhSY2RGeDBjbU5zYVdOcllXSnNaUzUwWlhOMEtDQmxiR1Z0TG01dlpHVk9ZVzFsSUNrZ0ppWmNibHgwWEhSY2RGeDBYSFJsYkdWdExtaHlaV1pjYmx4MFhIUmNkRngwS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlEQTdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSeVpYUjFjbTRnTFRFN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlMRnh1WEc1Y2RIQnliM0JHYVhnNklIdGNibHgwWEhSY0ltWnZjbHdpT2lCY0ltaDBiV3hHYjNKY0lpeGNibHgwWEhSY0ltTnNZWE56WENJNklGd2lZMnhoYzNOT1lXMWxYQ0pjYmx4MGZWeHVmU0FwTzF4dVhHNHZMeUJUZFhCd2IzSjBPaUJKUlNBOFBURXhJRzl1YkhsY2JpOHZJRUZqWTJWemMybHVaeUIwYUdVZ2MyVnNaV04wWldSSmJtUmxlQ0J3Y205d1pYSjBlVnh1THk4Z1ptOXlZMlZ6SUhSb1pTQmljbTkzYzJWeUlIUnZJSEpsYzNCbFkzUWdjMlYwZEdsdVp5QnpaV3hsWTNSbFpGeHVMeThnYjI0Z2RHaGxJRzl3ZEdsdmJseHVMeThnVkdobElHZGxkSFJsY2lCbGJuTjFjbVZ6SUdFZ1pHVm1ZWFZzZENCdmNIUnBiMjRnYVhNZ2MyVnNaV04wWldSY2JpOHZJSGRvWlc0Z2FXNGdZVzRnYjNCMFozSnZkWEJjYmk4dklHVnpiR2x1ZENCeWRXeGxJRndpYm04dGRXNTFjMlZrTFdWNGNISmxjM05wYjI1elhDSWdhWE1nWkdsellXSnNaV1FnWm05eUlIUm9hWE1nWTI5a1pWeHVMeThnYzJsdVkyVWdhWFFnWTI5dWMybGtaWEp6SUhOMVkyZ2dZV05qWlhOemFXOXVjeUJ1YjI5d1hHNXBaaUFvSUNGemRYQndiM0owTG05d2RGTmxiR1ZqZEdWa0lDa2dlMXh1WEhScVVYVmxjbmt1Y0hKdmNFaHZiMnR6TG5ObGJHVmpkR1ZrSUQwZ2UxeHVYSFJjZEdkbGREb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjYmx4MFhIUmNkQzhxSUdWemJHbHVkQ0J1YnkxMWJuVnpaV1F0Wlhod2NtVnpjMmx2Ym5NNklGd2liMlptWENJZ0tpOWNibHh1WEhSY2RGeDBkbUZ5SUhCaGNtVnVkQ0E5SUdWc1pXMHVjR0Z5Wlc1MFRtOWtaVHRjYmx4MFhIUmNkR2xtSUNnZ2NHRnlaVzUwSUNZbUlIQmhjbVZ1ZEM1d1lYSmxiblJPYjJSbElDa2dlMXh1WEhSY2RGeDBYSFJ3WVhKbGJuUXVjR0Z5Wlc1MFRtOWtaUzV6Wld4bFkzUmxaRWx1WkdWNE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEZ4MGZTeGNibHgwWEhSelpYUTZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEc1Y2RGeDBYSFF2S2lCbGMyeHBiblFnYm04dGRXNTFjMlZrTFdWNGNISmxjM05wYjI1ek9pQmNJbTltWmx3aUlDb3ZYRzVjYmx4MFhIUmNkSFpoY2lCd1lYSmxiblFnUFNCbGJHVnRMbkJoY21WdWRFNXZaR1U3WEc1Y2RGeDBYSFJwWmlBb0lIQmhjbVZ1ZENBcElIdGNibHgwWEhSY2RGeDBjR0Z5Wlc1MExuTmxiR1ZqZEdWa1NXNWtaWGc3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0J3WVhKbGJuUXVjR0Z5Wlc1MFRtOWtaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUndZWEpsYm5RdWNHRnlaVzUwVG05a1pTNXpaV3hsWTNSbFpFbHVaR1Y0TzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlPMXh1ZlZ4dVhHNXFVWFZsY25rdVpXRmphQ2dnVzF4dVhIUmNJblJoWWtsdVpHVjRYQ0lzWEc1Y2RGd2ljbVZoWkU5dWJIbGNJaXhjYmx4MFhDSnRZWGhNWlc1bmRHaGNJaXhjYmx4MFhDSmpaV3hzVTNCaFkybHVaMXdpTEZ4dVhIUmNJbU5sYkd4UVlXUmthVzVuWENJc1hHNWNkRndpY205M1UzQmhibHdpTEZ4dVhIUmNJbU52YkZOd1lXNWNJaXhjYmx4MFhDSjFjMlZOWVhCY0lpeGNibHgwWENKbWNtRnRaVUp2Y21SbGNsd2lMRnh1WEhSY0ltTnZiblJsYm5SRlpHbDBZV0pzWlZ3aVhHNWRMQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBhbEYxWlhKNUxuQnliM0JHYVhoYklIUm9hWE11ZEc5TWIzZGxja05oYzJVb0tTQmRJRDBnZEdocGN6dGNibjBnS1R0Y2JseHVYRzVjYmx4dVhIUXZMeUJUZEhKcGNDQmhibVFnWTI5c2JHRndjMlVnZDJocGRHVnpjR0ZqWlNCaFkyTnZjbVJwYm1jZ2RHOGdTRlJOVENCemNHVmpYRzVjZEM4dklHaDBkSEJ6T2k4dmFIUnRiQzV6Y0dWakxuZG9ZWFIzWnk1dmNtY3ZiWFZzZEdsd1lXZGxMMmx1Wm5KaGMzUnlkV04wZFhKbExtaDBiV3dqYzNSeWFYQXRZVzVrTFdOdmJHeGhjSE5sTFhkb2FYUmxjM0JoWTJWY2JseDBablZ1WTNScGIyNGdjM1J5YVhCQmJtUkRiMnhzWVhCelpTZ2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGRtRnlJSFJ2YTJWdWN5QTlJSFpoYkhWbExtMWhkR05vS0NCeWJtOTBhSFJ0Ykhkb2FYUmxJQ2tnZkh3Z1cxMDdYRzVjZEZ4MGNtVjBkWEp1SUhSdmEyVnVjeTVxYjJsdUtDQmNJaUJjSWlBcE8xeHVYSFI5WEc1Y2JseHVablZ1WTNScGIyNGdaMlYwUTJ4aGMzTW9JR1ZzWlcwZ0tTQjdYRzVjZEhKbGRIVnliaUJsYkdWdExtZGxkRUYwZEhKcFluVjBaU0FtSmlCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNnZ1hDSmpiR0Z6YzF3aUlDa2dmSHdnWENKY0lqdGNibjFjYmx4dWFsRjFaWEo1TG1adUxtVjRkR1Z1WkNnZ2UxeHVYSFJoWkdSRGJHRnpjem9nWm5WdVkzUnBiMjRvSUhaaGJIVmxJQ2tnZTF4dVhIUmNkSFpoY2lCamJHRnpjMlZ6TENCbGJHVnRMQ0JqZFhJc0lHTjFjbFpoYkhWbExDQmpiR0Y2ZWl3Z2Fpd2dabWx1WVd4V1lXeDFaU3hjYmx4MFhIUmNkR2tnUFNBd08xeHVYRzVjZEZ4MGFXWWdLQ0JxVVhWbGNua3VhWE5HZFc1amRHbHZiaWdnZG1Gc2RXVWdLU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NCcUlDa2dlMXh1WEhSY2RGeDBYSFJxVVhWbGNua29JSFJvYVhNZ0tTNWhaR1JEYkdGemN5Z2dkbUZzZFdVdVkyRnNiQ2dnZEdocGN5d2dhaXdnWjJWMFEyeGhjM01vSUhSb2FYTWdLU0FwSUNrN1hHNWNkRngwWEhSOUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJRndpYzNSeWFXNW5YQ0lnSmlZZ2RtRnNkV1VnS1NCN1hHNWNkRngwWEhSamJHRnpjMlZ6SUQwZ2RtRnNkV1V1YldGMFkyZ29JSEp1YjNSb2RHMXNkMmhwZEdVZ0tTQjhmQ0JiWFR0Y2JseHVYSFJjZEZ4MGQyaHBiR1VnS0NBb0lHVnNaVzBnUFNCMGFHbHpXeUJwS3lzZ1hTQXBJQ2tnZTF4dVhIUmNkRngwWEhSamRYSldZV3gxWlNBOUlHZGxkRU5zWVhOektDQmxiR1Z0SUNrN1hHNWNkRngwWEhSY2RHTjFjaUE5SUdWc1pXMHVibTlrWlZSNWNHVWdQVDA5SURFZ0ppWWdLQ0JjSWlCY0lpQXJJSE4wY21sd1FXNWtRMjlzYkdGd2MyVW9JR04xY2xaaGJIVmxJQ2tnS3lCY0lpQmNJaUFwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnWTNWeUlDa2dlMXh1WEhSY2RGeDBYSFJjZEdvZ1BTQXdPMXh1WEhSY2RGeDBYSFJjZEhkb2FXeGxJQ2dnS0NCamJHRjZlaUE5SUdOc1lYTnpaWE5iSUdvckt5QmRJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJwWmlBb0lHTjFjaTVwYm1SbGVFOW1LQ0JjSWlCY0lpQXJJR05zWVhwNklDc2dYQ0lnWENJZ0tTQThJREFnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdOMWNpQXJQU0JqYkdGNmVpQXJJRndpSUZ3aU8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEM4dklFOXViSGtnWVhOemFXZHVJR2xtSUdScFptWmxjbVZ1ZENCMGJ5QmhkbTlwWkNCMWJtNWxaV1JsWkNCeVpXNWtaWEpwYm1jdVhHNWNkRngwWEhSY2RGeDBabWx1WVd4V1lXeDFaU0E5SUhOMGNtbHdRVzVrUTI5c2JHRndjMlVvSUdOMWNpQXBPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dZM1Z5Vm1Gc2RXVWdJVDA5SUdacGJtRnNWbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnZ1hDSmpiR0Z6YzF3aUxDQm1hVzVoYkZaaGJIVmxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgwc1hHNWNibHgwY21WdGIzWmxRMnhoYzNNNklHWjFibU4wYVc5dUtDQjJZV3gxWlNBcElIdGNibHgwWEhSMllYSWdZMnhoYzNObGN5d2daV3hsYlN3Z1kzVnlMQ0JqZFhKV1lXeDFaU3dnWTJ4aGVub3NJR29zSUdacGJtRnNWbUZzZFdVc1hHNWNkRngwWEhScElEMGdNRHRjYmx4dVhIUmNkR2xtSUNnZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDQm1kVzVqZEdsdmJpZ2dhaUFwSUh0Y2JseDBYSFJjZEZ4MGFsRjFaWEo1S0NCMGFHbHpJQ2t1Y21WdGIzWmxRMnhoYzNNb0lIWmhiSFZsTG1OaGJHd29JSFJvYVhNc0lHb3NJR2RsZEVOc1lYTnpLQ0IwYUdseklDa2dLU0FwTzF4dVhIUmNkRngwZlNBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dJV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1aGRIUnlLQ0JjSW1Oc1lYTnpYQ0lzSUZ3aVhDSWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnWENKemRISnBibWRjSWlBbUppQjJZV3gxWlNBcElIdGNibHgwWEhSY2RHTnNZWE56WlhNZ1BTQjJZV3gxWlM1dFlYUmphQ2dnY201dmRHaDBiV3gzYUdsMFpTQXBJSHg4SUZ0ZE8xeHVYRzVjZEZ4MFhIUjNhR2xzWlNBb0lDZ2daV3hsYlNBOUlIUm9hWE5iSUdrckt5QmRJQ2tnS1NCN1hHNWNkRngwWEhSY2RHTjFjbFpoYkhWbElEMGdaMlYwUTJ4aGMzTW9JR1ZzWlcwZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCVWFHbHpJR1Y0Y0hKbGMzTnBiMjRnYVhNZ2FHVnlaU0JtYjNJZ1ltVjBkR1Z5SUdOdmJYQnlaWE56YVdKcGJHbDBlU0FvYzJWbElHRmtaRU5zWVhOektWeHVYSFJjZEZ4MFhIUmpkWElnUFNCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElDWW1JQ2dnWENJZ1hDSWdLeUJ6ZEhKcGNFRnVaRU52Ykd4aGNITmxLQ0JqZFhKV1lXeDFaU0FwSUNzZ1hDSWdYQ0lnS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUdOMWNpQXBJSHRjYmx4MFhIUmNkRngwWEhScUlEMGdNRHRjYmx4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUNnZ1kyeGhlbm9nUFNCamJHRnpjMlZ6V3lCcUt5c2dYU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QlNaVzF2ZG1VZ0ttRnNiQ29nYVc1emRHRnVZMlZ6WEc1Y2RGeDBYSFJjZEZ4MFhIUjNhR2xzWlNBb0lHTjFjaTVwYm1SbGVFOW1LQ0JjSWlCY0lpQXJJR05zWVhwNklDc2dYQ0lnWENJZ0tTQStJQzB4SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSamRYSWdQU0JqZFhJdWNtVndiR0ZqWlNnZ1hDSWdYQ0lnS3lCamJHRjZlaUFySUZ3aUlGd2lMQ0JjSWlCY0lpQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RDOHZJRTl1YkhrZ1lYTnphV2R1SUdsbUlHUnBabVpsY21WdWRDQjBieUJoZG05cFpDQjFibTVsWldSbFpDQnlaVzVrWlhKcGJtY3VYRzVjZEZ4MFhIUmNkRngwWm1sdVlXeFdZV3gxWlNBOUlITjBjbWx3UVc1a1EyOXNiR0Z3YzJVb0lHTjFjaUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWTNWeVZtRnNkV1VnSVQwOUlHWnBibUZzVm1Gc2RXVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0TG5ObGRFRjBkSEpwWW5WMFpTZ2dYQ0pqYkdGemMxd2lMQ0JtYVc1aGJGWmhiSFZsSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMHNYRzVjYmx4MGRHOW5aMnhsUTJ4aGMzTTZJR1oxYm1OMGFXOXVLQ0IyWVd4MVpTd2djM1JoZEdWV1lXd2dLU0I3WEc1Y2RGeDBkbUZ5SUhSNWNHVWdQU0IwZVhCbGIyWWdkbUZzZFdVN1hHNWNibHgwWEhScFppQW9JSFI1Y0dWdlppQnpkR0YwWlZaaGJDQTlQVDBnWENKaWIyOXNaV0Z1WENJZ0ppWWdkSGx3WlNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJ6ZEdGMFpWWmhiQ0EvSUhSb2FYTXVZV1JrUTJ4aGMzTW9JSFpoYkhWbElDa2dPaUIwYUdsekxuSmxiVzkyWlVOc1lYTnpLQ0IyWVd4MVpTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnYWxGMVpYSjVMbWx6Um5WdVkzUnBiMjRvSUhaaGJIVmxJQ2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlnZ2FTQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVLQ0IwYUdseklDa3VkRzluWjJ4bFEyeGhjM01vWEc1Y2RGeDBYSFJjZEZ4MGRtRnNkV1V1WTJGc2JDZ2dkR2hwY3l3Z2FTd2daMlYwUTJ4aGMzTW9JSFJvYVhNZ0tTd2djM1JoZEdWV1lXd2dLU3hjYmx4MFhIUmNkRngwWEhSemRHRjBaVlpoYkZ4dVhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkbUZ5SUdOc1lYTnpUbUZ0WlN3Z2FTd2djMlZzWml3Z1kyeGhjM05PWVcxbGN6dGNibHh1WEhSY2RGeDBhV1lnS0NCMGVYQmxJRDA5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGUnZaMmRzWlNCcGJtUnBkbWxrZFdGc0lHTnNZWE56SUc1aGJXVnpYRzVjZEZ4MFhIUmNkR2tnUFNBd08xeHVYSFJjZEZ4MFhIUnpaV3htSUQwZ2FsRjFaWEo1S0NCMGFHbHpJQ2s3WEc1Y2RGeDBYSFJjZEdOc1lYTnpUbUZ0WlhNZ1BTQjJZV3gxWlM1dFlYUmphQ2dnY201dmRHaDBiV3gzYUdsMFpTQXBJSHg4SUZ0ZE8xeHVYRzVjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLQ0JqYkdGemMwNWhiV1VnUFNCamJHRnpjMDVoYldWeld5QnBLeXNnWFNBcElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdRMmhsWTJzZ1pXRmphQ0JqYkdGemMwNWhiV1VnWjJsMlpXNHNJSE53WVdObElITmxjR0Z5WVhSbFpDQnNhWE4wWEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0J6Wld4bUxtaGhjME5zWVhOektDQmpiR0Z6YzA1aGJXVWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE5sYkdZdWNtVnRiM1psUTJ4aGMzTW9JR05zWVhOelRtRnRaU0FwTzF4dVhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJ6Wld4bUxtRmtaRU5zWVhOektDQmpiR0Z6YzA1aGJXVWdLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVkc5bloyeGxJSGRvYjJ4bElHTnNZWE56SUc1aGJXVmNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9JSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2RIbHdaU0E5UFQwZ1hDSmliMjlzWldGdVhDSWdLU0I3WEc1Y2RGeDBYSFJjZEdOc1lYTnpUbUZ0WlNBOUlHZGxkRU5zWVhOektDQjBhR2x6SUNrN1hHNWNkRngwWEhSY2RHbG1JQ2dnWTJ4aGMzTk9ZVzFsSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1UzUnZjbVVnWTJ4aGMzTk9ZVzFsSUdsbUlITmxkRnh1WEhSY2RGeDBYSFJjZEdSaGRHRlFjbWwyTG5ObGRDZ2dkR2hwY3l3Z1hDSmZYMk5zWVhOelRtRnRaVjlmWENJc0lHTnNZWE56VG1GdFpTQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnZEdobElHVnNaVzFsYm5RZ2FHRnpJR0VnWTJ4aGMzTWdibUZ0WlNCdmNpQnBaaUIzWlNkeVpTQndZWE56WldRZ1lHWmhiSE5sWUN4Y2JseDBYSFJjZEZ4MEx5OGdkR2hsYmlCeVpXMXZkbVVnZEdobElIZG9iMnhsSUdOc1lYTnpibUZ0WlNBb2FXWWdkR2hsY21VZ2QyRnpJRzl1WlN3Z2RHaGxJR0ZpYjNabElITmhkbVZrSUdsMEtTNWNibHgwWEhSY2RGeDBMeThnVDNSb1pYSjNhWE5sSUdKeWFXNW5JR0poWTJzZ2QyaGhkR1YyWlhJZ2QyRnpJSEJ5WlhacGIzVnpiSGtnYzJGMlpXUWdLR2xtSUdGdWVYUm9hVzVuS1N4Y2JseDBYSFJjZEZ4MEx5OGdabUZzYkdsdVp5QmlZV05ySUhSdklIUm9aU0JsYlhCMGVTQnpkSEpwYm1jZ2FXWWdibTkwYUdsdVp5QjNZWE1nYzNSdmNtVmtMbHh1WEhSY2RGeDBYSFJwWmlBb0lIUm9hWE11YzJWMFFYUjBjbWxpZFhSbElDa2dlMXh1WEhSY2RGeDBYSFJjZEhSb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0NCY0ltTnNZWE56WENJc1hHNWNkRngwWEhSY2RGeDBYSFJqYkdGemMwNWhiV1VnZkh3Z2RtRnNkV1VnUFQwOUlHWmhiSE5sSUQ5Y2JseDBYSFJjZEZ4MFhIUmNkRndpWENJZ09seHVYSFJjZEZ4MFhIUmNkRngwWkdGMFlWQnlhWFl1WjJWMEtDQjBhR2x6TENCY0lsOWZZMnhoYzNOT1lXMWxYMTljSWlBcElIeDhJRndpWENKY2JseDBYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0FwTzF4dVhIUjlMRnh1WEc1Y2RHaGhjME5zWVhOek9pQm1kVzVqZEdsdmJpZ2djMlZzWldOMGIzSWdLU0I3WEc1Y2RGeDBkbUZ5SUdOc1lYTnpUbUZ0WlN3Z1pXeGxiU3hjYmx4MFhIUmNkR2tnUFNBd08xeHVYRzVjZEZ4MFkyeGhjM05PWVcxbElEMGdYQ0lnWENJZ0t5QnpaV3hsWTNSdmNpQXJJRndpSUZ3aU8xeHVYSFJjZEhkb2FXeGxJQ2dnS0NCbGJHVnRJRDBnZEdocGMxc2dhU3NySUYwZ0tTQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KbHh1WEhSY2RGeDBYSFFvSUZ3aUlGd2lJQ3NnYzNSeWFYQkJibVJEYjJ4c1lYQnpaU2dnWjJWMFEyeGhjM01vSUdWc1pXMGdLU0FwSUNzZ1hDSWdYQ0lnS1M1cGJtUmxlRTltS0NCamJHRnpjMDVoYldVZ0tTQStJQzB4SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1ZlNBcE8xeHVYRzVjYmx4dVhHNTJZWElnY25KbGRIVnliaUE5SUM5Y1hISXZaenRjYmx4dWFsRjFaWEo1TG1adUxtVjRkR1Z1WkNnZ2UxeHVYSFIyWVd3NklHWjFibU4wYVc5dUtDQjJZV3gxWlNBcElIdGNibHgwWEhSMllYSWdhRzl2YTNNc0lISmxkQ3dnYVhOR2RXNWpkR2x2Yml4Y2JseDBYSFJjZEdWc1pXMGdQU0IwYUdseld5QXdJRjA3WEc1Y2JseDBYSFJwWmlBb0lDRmhjbWQxYldWdWRITXViR1Z1WjNSb0lDa2dlMXh1WEhSY2RGeDBhV1lnS0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwWEhSb2IyOXJjeUE5SUdwUmRXVnllUzUyWVd4SWIyOXJjMXNnWld4bGJTNTBlWEJsSUYwZ2ZIeGNibHgwWEhSY2RGeDBYSFJxVVhWbGNua3VkbUZzU0c5dmEzTmJJR1ZzWlcwdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0JkTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnYUc5dmEzTWdKaVpjYmx4MFhIUmNkRngwWEhSY0ltZGxkRndpSUdsdUlHaHZiMnR6SUNZbVhHNWNkRngwWEhSY2RGeDBLQ0J5WlhRZ1BTQm9iMjlyY3k1blpYUW9JR1ZzWlcwc0lGd2lkbUZzZFdWY0lpQXBJQ2tnSVQwOUlIVnVaR1ZtYVc1bFpGeHVYSFJjZEZ4MFhIUXBJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwY21WMElEMGdaV3hsYlM1MllXeDFaVHRjYmx4dVhIUmNkRngwWEhRdkx5QklZVzVrYkdVZ2JXOXpkQ0JqYjIxdGIyNGdjM1J5YVc1bklHTmhjMlZ6WEc1Y2RGeDBYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlISmxkQ0E5UFQwZ1hDSnpkSEpwYm1kY0lpQXBJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WMExuSmxjR3hoWTJVb0lISnlaWFIxY200c0lGd2lYQ0lnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUVoaGJtUnNaU0JqWVhObGN5QjNhR1Z5WlNCMllXeDFaU0JwY3lCdWRXeHNMM1Z1WkdWbUlHOXlJRzUxYldKbGNseHVYSFJjZEZ4MFhIUnlaWFIxY200Z2NtVjBJRDA5SUc1MWJHd2dQeUJjSWx3aUlEb2djbVYwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhWE5HZFc1amRHbHZiaUE5SUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCMllXeDFaU0FwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNdVpXRmphQ2dnWm5WdVkzUnBiMjRvSUdrZ0tTQjdYRzVjZEZ4MFhIUjJZWElnZG1Gc08xeHVYRzVjZEZ4MFhIUnBaaUFvSUhSb2FYTXVibTlrWlZSNWNHVWdJVDA5SURFZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBhV1lnS0NCcGMwWjFibU4wYVc5dUlDa2dlMXh1WEhSY2RGeDBYSFIyWVd3Z1BTQjJZV3gxWlM1allXeHNLQ0IwYUdsekxDQnBMQ0JxVVhWbGNua29JSFJvYVhNZ0tTNTJZV3dvS1NBcE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGRtRnNJRDBnZG1Gc2RXVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZSeVpXRjBJRzUxYkd3dmRXNWtaV1pwYm1Wa0lHRnpJRndpWENJN0lHTnZiblpsY25RZ2JuVnRZbVZ5Y3lCMGJ5QnpkSEpwYm1kY2JseDBYSFJjZEdsbUlDZ2dkbUZzSUQwOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSY2RIWmhiQ0E5SUZ3aVhDSTdYRzVjYmx4MFhIUmNkSDBnWld4elpTQnBaaUFvSUhSNWNHVnZaaUIyWVd3Z1BUMDlJRndpYm5WdFltVnlYQ0lnS1NCN1hHNWNkRngwWEhSY2RIWmhiQ0FyUFNCY0lsd2lPMXh1WEc1Y2RGeDBYSFI5SUdWc2MyVWdhV1lnS0NCcVVYVmxjbmt1YVhOQmNuSmhlU2dnZG1Gc0lDa2dLU0I3WEc1Y2RGeDBYSFJjZEhaaGJDQTlJR3BSZFdWeWVTNXRZWEFvSUhaaGJDd2dablZ1WTNScGIyNG9JSFpoYkhWbElDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIyWVd4MVpTQTlQU0J1ZFd4c0lEOGdYQ0pjSWlBNklIWmhiSFZsSUNzZ1hDSmNJanRjYmx4MFhIUmNkRngwZlNBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1MllXeEliMjlyYzFzZ2RHaHBjeTUwZVhCbElGMGdmSHdnYWxGMVpYSjVMblpoYkVodmIydHpXeUIwYUdsekxtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnWFR0Y2JseHVYSFJjZEZ4MEx5OGdTV1lnYzJWMElISmxkSFZ5Ym5NZ2RXNWtaV1pwYm1Wa0xDQm1ZV3hzSUdKaFkyc2dkRzhnYm05eWJXRnNJSE5sZEhScGJtZGNibHgwWEhSY2RHbG1JQ2dnSVdodmIydHpJSHg4SUNFb0lGd2ljMlYwWENJZ2FXNGdhRzl2YTNNZ0tTQjhmQ0JvYjI5cmN5NXpaWFFvSUhSb2FYTXNJSFpoYkN3Z1hDSjJZV3gxWlZ3aUlDa2dQVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RGeDBkR2hwY3k1MllXeDFaU0E5SUhaaGJEdGNibHgwWEhSY2RIMWNibHgwWEhSOUlDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhIUjJZV3hJYjI5cmN6b2dlMXh1WEhSY2RHOXdkR2x2YmpvZ2UxeHVYSFJjZEZ4MFoyVjBPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4dVhIUmNkRngwWEhSMllYSWdkbUZzSUQwZ2FsRjFaWEo1TG1acGJtUXVZWFIwY2lnZ1pXeGxiU3dnWENKMllXeDFaVndpSUNrN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMllXd2dJVDBnYm5Wc2JDQS9YRzVjZEZ4MFhIUmNkRngwZG1Gc0lEcGNibHh1WEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5TVRBZ0xTQXhNU0J2Ym14NVhHNWNkRngwWEhSY2RGeDBMeThnYjNCMGFXOXVMblJsZUhRZ2RHaHliM2R6SUdWNFkyVndkR2x2Ym5NZ0tDTXhORFk0Tml3Z0l6RTBPRFU0S1Z4dVhIUmNkRngwWEhSY2RDOHZJRk4wY21sd0lHRnVaQ0JqYjJ4c1lYQnpaU0IzYUdsMFpYTndZV05sWEc1Y2RGeDBYSFJjZEZ4MEx5OGdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeThqYzNSeWFYQXRZVzVrTFdOdmJHeGhjSE5sTFhkb2FYUmxjM0JoWTJWY2JseDBYSFJjZEZ4MFhIUnpkSEpwY0VGdVpFTnZiR3hoY0hObEtDQnFVWFZsY25rdWRHVjRkQ2dnWld4bGJTQXBJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU3hjYmx4MFhIUnpaV3hsWTNRNklIdGNibHgwWEhSY2RHZGxkRG9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQjJZV3gxWlN3Z2IzQjBhVzl1TENCcExGeHVYSFJjZEZ4MFhIUmNkRzl3ZEdsdmJuTWdQU0JsYkdWdExtOXdkR2x2Ym5Nc1hHNWNkRngwWEhSY2RGeDBhVzVrWlhnZ1BTQmxiR1Z0TG5ObGJHVmpkR1ZrU1c1a1pYZ3NYRzVjZEZ4MFhIUmNkRngwYjI1bElEMGdaV3hsYlM1MGVYQmxJRDA5UFNCY0luTmxiR1ZqZEMxdmJtVmNJaXhjYmx4MFhIUmNkRngwWEhSMllXeDFaWE1nUFNCdmJtVWdQeUJ1ZFd4c0lEb2dXMTBzWEc1Y2RGeDBYSFJjZEZ4MGJXRjRJRDBnYjI1bElEOGdhVzVrWlhnZ0t5QXhJRG9nYjNCMGFXOXVjeTVzWlc1bmRHZzdYRzVjYmx4MFhIUmNkRngwYVdZZ0tDQnBibVJsZUNBOElEQWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFTQTlJRzFoZUR0Y2JseHVYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkR2tnUFNCdmJtVWdQeUJwYm1SbGVDQTZJREE3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUXZMeUJNYjI5d0lIUm9jbTkxWjJnZ1lXeHNJSFJvWlNCelpXeGxZM1JsWkNCdmNIUnBiMjV6WEc1Y2RGeDBYSFJjZEdadmNpQW9JRHNnYVNBOElHMWhlRHNnYVNzcklDa2dlMXh1WEhSY2RGeDBYSFJjZEc5d2RHbHZiaUE5SUc5d2RHbHZibk5iSUdrZ1hUdGNibHh1WEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T1NCdmJteDVYRzVjZEZ4MFhIUmNkRngwTHk4Z1NVVTRMVGtnWkc5bGMyNG5kQ0IxY0dSaGRHVWdjMlZzWldOMFpXUWdZV1owWlhJZ1ptOXliU0J5WlhObGRDQW9JekkxTlRFcFhHNWNkRngwWEhSY2RGeDBhV1lnS0NBb0lHOXdkR2x2Ymk1elpXeGxZM1JsWkNCOGZDQnBJRDA5UFNCcGJtUmxlQ0FwSUNZbVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdSRzl1SjNRZ2NtVjBkWEp1SUc5d2RHbHZibk1nZEdoaGRDQmhjbVVnWkdsellXSnNaV1FnYjNJZ2FXNGdZU0JrYVhOaFlteGxaQ0J2Y0hSbmNtOTFjRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUWhiM0IwYVc5dUxtUnBjMkZpYkdWa0lDWW1YRzVjZEZ4MFhIUmNkRngwWEhSY2RDZ2dJVzl3ZEdsdmJpNXdZWEpsYm5ST2IyUmxMbVJwYzJGaWJHVmtJSHg4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwSVdwUmRXVnllUzV1YjJSbFRtRnRaU2dnYjNCMGFXOXVMbkJoY21WdWRFNXZaR1VzSUZ3aWIzQjBaM0p2ZFhCY0lpQXBJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEM4dklFZGxkQ0IwYUdVZ2MzQmxZMmxtYVdNZ2RtRnNkV1VnWm05eUlIUm9aU0J2Y0hScGIyNWNibHgwWEhSY2RGeDBYSFJjZEhaaGJIVmxJRDBnYWxGMVpYSjVLQ0J2Y0hScGIyNGdLUzUyWVd3b0tUdGNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdWMlVnWkc5dUozUWdibVZsWkNCaGJpQmhjbkpoZVNCbWIzSWdiMjVsSUhObGJHVmpkSE5jYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnYjI1bElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RtRnNkV1U3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhSY2RDOHZJRTExYkhScExWTmxiR1ZqZEhNZ2NtVjBkWEp1SUdGdUlHRnljbUY1WEc1Y2RGeDBYSFJjZEZ4MFhIUjJZV3gxWlhNdWNIVnphQ2dnZG1Gc2RXVWdLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkbUZzZFdWek8xeHVYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBjMlYwT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnZG1Gc2RXVWdLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnZjSFJwYjI1VFpYUXNJRzl3ZEdsdmJpeGNibHgwWEhSY2RGeDBYSFJ2Y0hScGIyNXpJRDBnWld4bGJTNXZjSFJwYjI1ekxGeHVYSFJjZEZ4MFhIUmNkSFpoYkhWbGN5QTlJR3BSZFdWeWVTNXRZV3RsUVhKeVlYa29JSFpoYkhWbElDa3NYRzVjZEZ4MFhIUmNkRngwYVNBOUlHOXdkR2x2Ym5NdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwWEhSY2RHOXdkR2x2YmlBOUlHOXdkR2x2Ym5OYklHa2dYVHRjYmx4dVhIUmNkRngwWEhSY2RDOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMV052Ym1RdFlYTnphV2R1SUNvdlhHNWNibHgwWEhSY2RGeDBYSFJwWmlBb0lHOXdkR2x2Ymk1elpXeGxZM1JsWkNBOVhHNWNkRngwWEhSY2RGeDBYSFJxVVhWbGNua3VhVzVCY25KaGVTZ2dhbEYxWlhKNUxuWmhiRWh2YjJ0ekxtOXdkR2x2Ymk1blpYUW9JRzl3ZEdsdmJpQXBMQ0IyWVd4MVpYTWdLU0ErSUMweFhHNWNkRngwWEhSY2RGeDBLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnZjSFJwYjI1VFpYUWdQU0IwY25WbE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RDOHFJR1Z6YkdsdWRDMWxibUZpYkdVZ2JtOHRZMjl1WkMxaGMzTnBaMjRnS2k5Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUVadmNtTmxJR0p5YjNkelpYSnpJSFJ2SUdKbGFHRjJaU0JqYjI1emFYTjBaVzUwYkhrZ2QyaGxiaUJ1YjI0dGJXRjBZMmhwYm1jZ2RtRnNkV1VnYVhNZ2MyVjBYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXOXdkR2x2YmxObGRDQXBJSHRjYmx4MFhIUmNkRngwWEhSbGJHVnRMbk5sYkdWamRHVmtTVzVrWlhnZ1BTQXRNVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVnpPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlZ4dWZTQXBPMXh1WEc0dkx5QlNZV1JwYjNNZ1lXNWtJR05vWldOclltOTRaWE1nWjJWMGRHVnlMM05sZEhSbGNseHVhbEYxWlhKNUxtVmhZMmdvSUZzZ1hDSnlZV1JwYjF3aUxDQmNJbU5vWldOclltOTRYQ0lnWFN3Z1puVnVZM1JwYjI0b0tTQjdYRzVjZEdwUmRXVnllUzUyWVd4SWIyOXJjMXNnZEdocGN5QmRJRDBnZTF4dVhIUmNkSE5sZERvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQnFVWFZsY25rdWFYTkJjbkpoZVNnZ2RtRnNkV1VnS1NBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDZ2daV3hsYlM1amFHVmphMlZrSUQwZ2FsRjFaWEo1TG1sdVFYSnlZWGtvSUdwUmRXVnllU2dnWld4bGJTQXBMblpoYkNncExDQjJZV3gxWlNBcElENGdMVEVnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMDdYRzVjZEdsbUlDZ2dJWE4xY0hCdmNuUXVZMmhsWTJ0UGJpQXBJSHRjYmx4MFhIUnFVWFZsY25rdWRtRnNTRzl2YTNOYklIUm9hWE1nWFM1blpYUWdQU0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpTZ2dYQ0oyWVd4MVpWd2lJQ2tnUFQwOUlHNTFiR3dnUHlCY0ltOXVYQ0lnT2lCbGJHVnRMblpoYkhWbE8xeHVYSFJjZEgwN1hHNWNkSDFjYm4wZ0tUdGNibHh1WEc1Y2JseHVMeThnVW1WMGRYSnVJR3BSZFdWeWVTQm1iM0lnWVhSMGNtbGlkWFJsY3kxdmJteDVJR2x1WTJ4MWMybHZibHh1WEc1Y2JuWmhjaUJ5Wm05amRYTk5iM0p3YUNBOUlDOWVLRDg2Wm05amRYTnBibVp2WTNWemZHWnZZM1Z6YjNWMFlteDFjaWtrTHp0Y2JseHVhbEYxWlhKNUxtVjRkR1Z1WkNnZ2FsRjFaWEo1TG1WMlpXNTBMQ0I3WEc1Y2JseDBkSEpwWjJkbGNqb2dablZ1WTNScGIyNG9JR1YyWlc1MExDQmtZWFJoTENCbGJHVnRMQ0J2Ym14NVNHRnVaR3hsY25NZ0tTQjdYRzVjYmx4MFhIUjJZWElnYVN3Z1kzVnlMQ0IwYlhBc0lHSjFZbUpzWlZSNWNHVXNJRzl1ZEhsd1pTd2dhR0Z1Wkd4bExDQnpjR1ZqYVdGc0xGeHVYSFJjZEZ4MFpYWmxiblJRWVhSb0lEMGdXeUJsYkdWdElIeDhJR1J2WTNWdFpXNTBJRjBzWEc1Y2RGeDBYSFIwZVhCbElEMGdhR0Z6VDNkdUxtTmhiR3dvSUdWMlpXNTBMQ0JjSW5SNWNHVmNJaUFwSUQ4Z1pYWmxiblF1ZEhsd1pTQTZJR1YyWlc1MExGeHVYSFJjZEZ4MGJtRnRaWE53WVdObGN5QTlJR2hoYzA5M2JpNWpZV3hzS0NCbGRtVnVkQ3dnWENKdVlXMWxjM0JoWTJWY0lpQXBJRDhnWlhabGJuUXVibUZ0WlhOd1lXTmxMbk53YkdsMEtDQmNJaTVjSWlBcElEb2dXMTA3WEc1Y2JseDBYSFJqZFhJZ1BTQjBiWEFnUFNCbGJHVnRJRDBnWld4bGJTQjhmQ0JrYjJOMWJXVnVkRHRjYmx4dVhIUmNkQzh2SUVSdmJpZDBJR1J2SUdWMlpXNTBjeUJ2YmlCMFpYaDBJR0Z1WkNCamIyMXRaVzUwSUc1dlpHVnpYRzVjZEZ4MGFXWWdLQ0JsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F6SUh4OElHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlEZ2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdabTlqZFhNdllteDFjaUJ0YjNKd2FITWdkRzhnWm05amRYTnBiaTl2ZFhRN0lHVnVjM1Z5WlNCM1pTZHlaU0J1YjNRZ1ptbHlhVzVuSUhSb1pXMGdjbWxuYUhRZ2JtOTNYRzVjZEZ4MGFXWWdLQ0J5Wm05amRYTk5iM0p3YUM1MFpYTjBLQ0IwZVhCbElDc2dhbEYxWlhKNUxtVjJaVzUwTG5SeWFXZG5aWEpsWkNBcElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dkSGx3WlM1cGJtUmxlRTltS0NCY0lpNWNJaUFwSUQ0Z0xURWdLU0I3WEc1Y2JseDBYSFJjZEM4dklFNWhiV1Z6Y0dGalpXUWdkSEpwWjJkbGNqc2dZM0psWVhSbElHRWdjbVZuWlhod0lIUnZJRzFoZEdOb0lHVjJaVzUwSUhSNWNHVWdhVzRnYUdGdVpHeGxLQ2xjYmx4MFhIUmNkRzVoYldWemNHRmpaWE1nUFNCMGVYQmxMbk53YkdsMEtDQmNJaTVjSWlBcE8xeHVYSFJjZEZ4MGRIbHdaU0E5SUc1aGJXVnpjR0ZqWlhNdWMyaHBablFvS1R0Y2JseDBYSFJjZEc1aGJXVnpjR0ZqWlhNdWMyOXlkQ2dwTzF4dVhIUmNkSDFjYmx4MFhIUnZiblI1Y0dVZ1BTQjBlWEJsTG1sdVpHVjRUMllvSUZ3aU9sd2lJQ2tnUENBd0lDWW1JRndpYjI1Y0lpQXJJSFI1Y0dVN1hHNWNibHgwWEhRdkx5QkRZV3hzWlhJZ1kyRnVJSEJoYzNNZ2FXNGdZU0JxVVhWbGNua3VSWFpsYm5RZ2IySnFaV04wTENCUFltcGxZM1FzSUc5eUlHcDFjM1FnWVc0Z1pYWmxiblFnZEhsd1pTQnpkSEpwYm1kY2JseDBYSFJsZG1WdWRDQTlJR1YyWlc1MFd5QnFVWFZsY25rdVpYaHdZVzVrYnlCZElEOWNibHgwWEhSY2RHVjJaVzUwSURwY2JseDBYSFJjZEc1bGR5QnFVWFZsY25rdVJYWmxiblFvSUhSNWNHVXNJSFI1Y0dWdlppQmxkbVZ1ZENBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCbGRtVnVkQ0FwTzF4dVhHNWNkRngwTHk4Z1ZISnBaMmRsY2lCaWFYUnRZWE5yT2lBbUlERWdabTl5SUc1aGRHbDJaU0JvWVc1a2JHVnljenNnSmlBeUlHWnZjaUJxVVhWbGNua2dLR0ZzZDJGNWN5QjBjblZsS1Z4dVhIUmNkR1YyWlc1MExtbHpWSEpwWjJkbGNpQTlJRzl1YkhsSVlXNWtiR1Z5Y3lBL0lESWdPaUF6TzF4dVhIUmNkR1YyWlc1MExtNWhiV1Z6Y0dGalpTQTlJRzVoYldWemNHRmpaWE11YW05cGJpZ2dYQ0l1WENJZ0tUdGNibHgwWEhSbGRtVnVkQzV5Ym1GdFpYTndZV05sSUQwZ1pYWmxiblF1Ym1GdFpYTndZV05sSUQ5Y2JseDBYSFJjZEc1bGR5QlNaV2RGZUhBb0lGd2lLRjU4WEZ4Y1hDNHBYQ0lnS3lCdVlXMWxjM0JoWTJWekxtcHZhVzRvSUZ3aVhGeGNYQzRvUHpvdUtseGNYRnd1ZkNsY0lpQXBJQ3NnWENJb1hGeGNYQzU4SkNsY0lpQXBJRHBjYmx4MFhIUmNkRzUxYkd3N1hHNWNibHgwWEhRdkx5QkRiR1ZoYmlCMWNDQjBhR1VnWlhabGJuUWdhVzRnWTJGelpTQnBkQ0JwY3lCaVpXbHVaeUJ5WlhWelpXUmNibHgwWEhSbGRtVnVkQzV5WlhOMWJIUWdQU0IxYm1SbFptbHVaV1E3WEc1Y2RGeDBhV1lnS0NBaFpYWmxiblF1ZEdGeVoyVjBJQ2tnZTF4dVhIUmNkRngwWlhabGJuUXVkR0Z5WjJWMElEMGdaV3hsYlR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCRGJHOXVaU0JoYm5rZ2FXNWpiMjFwYm1jZ1pHRjBZU0JoYm1RZ2NISmxjR1Z1WkNCMGFHVWdaWFpsYm5Rc0lHTnlaV0YwYVc1bklIUm9aU0JvWVc1a2JHVnlJR0Z5WnlCc2FYTjBYRzVjZEZ4MFpHRjBZU0E5SUdSaGRHRWdQVDBnYm5Wc2JDQS9YRzVjZEZ4MFhIUmJJR1YyWlc1MElGMGdPbHh1WEhSY2RGeDBhbEYxWlhKNUxtMWhhMlZCY25KaGVTZ2daR0YwWVN3Z1d5QmxkbVZ1ZENCZElDazdYRzVjYmx4MFhIUXZMeUJCYkd4dmR5QnpjR1ZqYVdGc0lHVjJaVzUwY3lCMGJ5QmtjbUYzSUc5MWRITnBaR1VnZEdobElHeHBibVZ6WEc1Y2RGeDBjM0JsWTJsaGJDQTlJR3BSZFdWeWVTNWxkbVZ1ZEM1emNHVmphV0ZzV3lCMGVYQmxJRjBnZkh3Z2UzMDdYRzVjZEZ4MGFXWWdLQ0FoYjI1c2VVaGhibVJzWlhKeklDWW1JSE53WldOcFlXd3VkSEpwWjJkbGNpQW1KaUJ6Y0dWamFXRnNMblJ5YVdkblpYSXVZWEJ3Ykhrb0lHVnNaVzBzSUdSaGRHRWdLU0E5UFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUkdWMFpYSnRhVzVsSUdWMlpXNTBJSEJ5YjNCaFoyRjBhVzl1SUhCaGRHZ2dhVzRnWVdSMllXNWpaU3dnY0dWeUlGY3pReUJsZG1WdWRITWdjM0JsWXlBb0l6azVOVEVwWEc1Y2RGeDBMeThnUW5WaVlteGxJSFZ3SUhSdklHUnZZM1Z0Wlc1MExDQjBhR1Z1SUhSdklIZHBibVJ2ZHpzZ2QyRjBZMmdnWm05eUlHRWdaMnh2WW1Gc0lHOTNibVZ5Ukc5amRXMWxiblFnZG1GeUlDZ2pPVGN5TkNsY2JseDBYSFJwWmlBb0lDRnZibXg1U0dGdVpHeGxjbk1nSmlZZ0lYTndaV05wWVd3dWJtOUNkV0ppYkdVZ0ppWWdJV3BSZFdWeWVTNXBjMWRwYm1SdmR5Z2daV3hsYlNBcElDa2dlMXh1WEc1Y2RGeDBYSFJpZFdKaWJHVlVlWEJsSUQwZ2MzQmxZMmxoYkM1a1pXeGxaMkYwWlZSNWNHVWdmSHdnZEhsd1pUdGNibHgwWEhSY2RHbG1JQ2dnSVhKbWIyTjFjMDF2Y25Cb0xuUmxjM1FvSUdKMVltSnNaVlI1Y0dVZ0t5QjBlWEJsSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR04xY2lBOUlHTjFjaTV3WVhKbGJuUk9iMlJsTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwWm05eUlDZ2dPeUJqZFhJN0lHTjFjaUE5SUdOMWNpNXdZWEpsYm5ST2IyUmxJQ2tnZTF4dVhIUmNkRngwWEhSbGRtVnVkRkJoZEdndWNIVnphQ2dnWTNWeUlDazdYRzVjZEZ4MFhIUmNkSFJ0Y0NBOUlHTjFjanRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1QyNXNlU0JoWkdRZ2QybHVaRzkzSUdsbUlIZGxJR2R2ZENCMGJ5QmtiMk4xYldWdWRDQW9aUzVuTGl3Z2JtOTBJSEJzWVdsdUlHOWlhaUJ2Y2lCa1pYUmhZMmhsWkNCRVQwMHBYRzVjZEZ4MFhIUnBaaUFvSUhSdGNDQTlQVDBnS0NCbGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daRzlqZFcxbGJuUWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFpYWmxiblJRWVhSb0xuQjFjMmdvSUhSdGNDNWtaV1poZFd4MFZtbGxkeUI4ZkNCMGJYQXVjR0Z5Wlc1MFYybHVaRzkzSUh4OElIZHBibVJ2ZHlBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFWnBjbVVnYUdGdVpHeGxjbk1nYjI0Z2RHaGxJR1YyWlc1MElIQmhkR2hjYmx4MFhIUnBJRDBnTUR0Y2JseDBYSFIzYUdsc1pTQW9JQ2dnWTNWeUlEMGdaWFpsYm5SUVlYUm9XeUJwS3lzZ1hTQXBJQ1ltSUNGbGRtVnVkQzVwYzFCeWIzQmhaMkYwYVc5dVUzUnZjSEJsWkNncElDa2dlMXh1WEc1Y2RGeDBYSFJsZG1WdWRDNTBlWEJsSUQwZ2FTQStJREVnUDF4dVhIUmNkRngwWEhSaWRXSmliR1ZVZVhCbElEcGNibHgwWEhSY2RGeDBjM0JsWTJsaGJDNWlhVzVrVkhsd1pTQjhmQ0IwZVhCbE8xeHVYRzVjZEZ4MFhIUXZMeUJxVVhWbGNua2dhR0Z1Wkd4bGNseHVYSFJjZEZ4MGFHRnVaR3hsSUQwZ0tDQmtZWFJoVUhKcGRpNW5aWFFvSUdOMWNpd2dYQ0psZG1WdWRITmNJaUFwSUh4OElIdDlJQ2xiSUdWMlpXNTBMblI1Y0dVZ1hTQW1KbHh1WEhSY2RGeDBYSFJrWVhSaFVISnBkaTVuWlhRb0lHTjFjaXdnWENKb1lXNWtiR1ZjSWlBcE8xeHVYSFJjZEZ4MGFXWWdLQ0JvWVc1a2JHVWdLU0I3WEc1Y2RGeDBYSFJjZEdoaGJtUnNaUzVoY0hCc2VTZ2dZM1Z5TENCa1lYUmhJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFNWhkR2wyWlNCb1lXNWtiR1Z5WEc1Y2RGeDBYSFJvWVc1a2JHVWdQU0J2Ym5SNWNHVWdKaVlnWTNWeVd5QnZiblI1Y0dVZ1hUdGNibHgwWEhSY2RHbG1JQ2dnYUdGdVpHeGxJQ1ltSUdoaGJtUnNaUzVoY0hCc2VTQW1KaUJoWTJObGNIUkVZWFJoS0NCamRYSWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFpYWmxiblF1Y21WemRXeDBJRDBnYUdGdVpHeGxMbUZ3Y0d4NUtDQmpkWElzSUdSaGRHRWdLVHRjYmx4MFhIUmNkRngwYVdZZ0tDQmxkbVZ1ZEM1eVpYTjFiSFFnUFQwOUlHWmhiSE5sSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkRngwWlhabGJuUXVkSGx3WlNBOUlIUjVjR1U3WEc1Y2JseDBYSFF2THlCSlppQnViMkp2WkhrZ2NISmxkbVZ1ZEdWa0lIUm9aU0JrWldaaGRXeDBJR0ZqZEdsdmJpd2daRzhnYVhRZ2JtOTNYRzVjZEZ4MGFXWWdLQ0FoYjI1c2VVaGhibVJzWlhKeklDWW1JQ0ZsZG1WdWRDNXBjMFJsWm1GMWJIUlFjbVYyWlc1MFpXUW9LU0FwSUh0Y2JseHVYSFJjZEZ4MGFXWWdLQ0FvSUNGemNHVmphV0ZzTGw5a1pXWmhkV3gwSUh4OFhHNWNkRngwWEhSY2RITndaV05wWVd3dVgyUmxabUYxYkhRdVlYQndiSGtvSUdWMlpXNTBVR0YwYUM1d2IzQW9LU3dnWkdGMFlTQXBJRDA5UFNCbVlXeHpaU0FwSUNZbVhHNWNkRngwWEhSY2RHRmpZMlZ3ZEVSaGRHRW9JR1ZzWlcwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QkRZV3hzSUdFZ2JtRjBhWFpsSUVSUFRTQnRaWFJvYjJRZ2IyNGdkR2hsSUhSaGNtZGxkQ0IzYVhSb0lIUm9aU0J6WVcxbElHNWhiV1VnWVhNZ2RHaGxJR1YyWlc1MExseHVYSFJjZEZ4MFhIUXZMeUJFYjI0bmRDQmtieUJrWldaaGRXeDBJR0ZqZEdsdmJuTWdiMjRnZDJsdVpHOTNMQ0IwYUdGMEozTWdkMmhsY21VZ1oyeHZZbUZzSUhaaGNtbGhZbXhsY3lCaVpTQW9Jell4TnpBcFhHNWNkRngwWEhSY2RHbG1JQ2dnYjI1MGVYQmxJQ1ltSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCbGJHVnRXeUIwZVhCbElGMGdLU0FtSmlBaGFsRjFaWEo1TG1selYybHVaRzkzS0NCbGJHVnRJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFF2THlCRWIyNG5kQ0J5WlMxMGNtbG5aMlZ5SUdGdUlHOXVSazlQSUdWMlpXNTBJSGRvWlc0Z2QyVWdZMkZzYkNCcGRITWdSazlQS0NrZ2JXVjBhRzlrWEc1Y2RGeDBYSFJjZEZ4MGRHMXdJRDBnWld4bGJWc2diMjUwZVhCbElGMDdYRzVjYmx4MFhIUmNkRngwWEhScFppQW9JSFJ0Y0NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEdWc1pXMWJJRzl1ZEhsd1pTQmRJRDBnYm5Wc2JEdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJRY21WMlpXNTBJSEpsTFhSeWFXZG5aWEpwYm1jZ2IyWWdkR2hsSUhOaGJXVWdaWFpsYm5Rc0lITnBibU5sSUhkbElHRnNjbVZoWkhrZ1luVmlZbXhsWkNCcGRDQmhZbTkyWlZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzUwY21sbloyVnlaV1FnUFNCMGVYQmxPMXh1WEhSY2RGeDBYSFJjZEdWc1pXMWJJSFI1Y0dVZ1hTZ3BPMXh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzVsZG1WdWRDNTBjbWxuWjJWeVpXUWdQU0IxYm1SbFptbHVaV1E3WEc1Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUhSdGNDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHVnNaVzFiSUc5dWRIbHdaU0JkSUQwZ2RHMXdPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJsZG1WdWRDNXlaWE4xYkhRN1hHNWNkSDBzWEc1Y2JseDBMeThnVUdsblozbGlZV05ySUc5dUlHRWdaRzl1YjNJZ1pYWmxiblFnZEc4Z2MybHRkV3hoZEdVZ1lTQmthV1ptWlhKbGJuUWdiMjVsWEc1Y2RDOHZJRlZ6WldRZ2IyNXNlU0JtYjNJZ1lHWnZZM1Z6S0dsdUlId2diM1YwS1dBZ1pYWmxiblJ6WEc1Y2RITnBiWFZzWVhSbE9pQm1kVzVqZEdsdmJpZ2dkSGx3WlN3Z1pXeGxiU3dnWlhabGJuUWdLU0I3WEc1Y2RGeDBkbUZ5SUdVZ1BTQnFVWFZsY25rdVpYaDBaVzVrS0Z4dVhIUmNkRngwYm1WM0lHcFJkV1Z5ZVM1RmRtVnVkQ2dwTEZ4dVhIUmNkRngwWlhabGJuUXNYRzVjZEZ4MFhIUjdYRzVjZEZ4MFhIUmNkSFI1Y0dVNklIUjVjR1VzWEc1Y2RGeDBYSFJjZEdselUybHRkV3hoZEdWa09pQjBjblZsWEc1Y2RGeDBYSFI5WEc1Y2RGeDBLVHRjYmx4dVhIUmNkR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5S0NCbExDQnVkV3hzTENCbGJHVnRJQ2s3WEc1Y2RIMWNibHh1ZlNBcE8xeHVYRzVxVVhWbGNua3VabTR1WlhoMFpXNWtLQ0I3WEc1Y2JseDBkSEpwWjJkbGNqb2dablZ1WTNScGIyNG9JSFI1Y0dVc0lHUmhkR0VnS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdVpXRmphQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhScVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNpZ2dkSGx3WlN3Z1pHRjBZU3dnZEdocGN5QXBPMXh1WEhSY2RIMGdLVHRjYmx4MGZTeGNibHgwZEhKcFoyZGxja2hoYm1Sc1pYSTZJR1oxYm1OMGFXOXVLQ0IwZVhCbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhaaGNpQmxiR1Z0SUQwZ2RHaHBjMXNnTUNCZE8xeHVYSFJjZEdsbUlDZ2daV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCcVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNpZ2dkSGx3WlN3Z1pHRjBZU3dnWld4bGJTd2dkSEoxWlNBcE8xeHVYSFJjZEgxY2JseDBmVnh1ZlNBcE8xeHVYRzVjYm1wUmRXVnllUzVsWVdOb0tDQW9JRndpWW14MWNpQm1iMk4xY3lCbWIyTjFjMmx1SUdadlkzVnpiM1YwSUhKbGMybDZaU0J6WTNKdmJHd2dZMnhwWTJzZ1pHSnNZMnhwWTJzZ1hDSWdLMXh1WEhSY0ltMXZkWE5sWkc5M2JpQnRiM1Z6WlhWd0lHMXZkWE5sYlc5MlpTQnRiM1Z6Wlc5MlpYSWdiVzkxYzJWdmRYUWdiVzkxYzJWbGJuUmxjaUJ0YjNWelpXeGxZWFpsSUZ3aUlDdGNibHgwWENKamFHRnVaMlVnYzJWc1pXTjBJSE4xWW0xcGRDQnJaWGxrYjNkdUlHdGxlWEJ5WlhOeklHdGxlWFZ3SUdOdmJuUmxlSFJ0Wlc1MVhDSWdLUzV6Y0d4cGRDZ2dYQ0lnWENJZ0tTeGNibHgwWm5WdVkzUnBiMjRvSUdrc0lHNWhiV1VnS1NCN1hHNWNibHgwTHk4Z1NHRnVaR3hsSUdWMlpXNTBJR0pwYm1ScGJtZGNibHgwYWxGMVpYSjVMbVp1V3lCdVlXMWxJRjBnUFNCbWRXNWpkR2x2YmlnZ1pHRjBZU3dnWm00Z0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBd0lEOWNibHgwWEhSY2RIUm9hWE11YjI0b0lHNWhiV1VzSUc1MWJHd3NJR1JoZEdFc0lHWnVJQ2tnT2x4dVhIUmNkRngwZEdocGN5NTBjbWxuWjJWeUtDQnVZVzFsSUNrN1hHNWNkSDA3WEc1OUlDazdYRzVjYm1wUmRXVnllUzVtYmk1bGVIUmxibVFvSUh0Y2JseDBhRzkyWlhJNklHWjFibU4wYVc5dUtDQm1iazkyWlhJc0lHWnVUM1YwSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtMXZkWE5sWlc1MFpYSW9JR1p1VDNabGNpQXBMbTF2ZFhObGJHVmhkbVVvSUdadVQzVjBJSHg4SUdadVQzWmxjaUFwTzF4dVhIUjlYRzU5SUNrN1hHNWNibHh1WEc1Y2JuTjFjSEJ2Y25RdVptOWpkWE5wYmlBOUlGd2liMjVtYjJOMWMybHVYQ0lnYVc0Z2QybHVaRzkzTzF4dVhHNWNiaTh2SUZOMWNIQnZjblE2SUVacGNtVm1iM2dnUEQwME5GeHVMeThnUm1seVpXWnZlQ0JrYjJWemJpZDBJR2hoZG1VZ1ptOWpkWE1vYVc0Z2ZDQnZkWFFwSUdWMlpXNTBjMXh1THk4Z1VtVnNZWFJsWkNCMGFXTnJaWFFnTFNCb2RIUndjem92TDJKMVozcHBiR3hoTG0xdmVtbHNiR0V1YjNKbkwzTm9iM2RmWW5WbkxtTm5hVDlwWkQwMk9EYzNPRGRjYmk4dlhHNHZMeUJUZFhCd2IzSjBPaUJEYUhKdmJXVWdQRDAwT0NBdElEUTVMQ0JUWVdaaGNta2dQRDA1TGpBZ0xTQTVMakZjYmk4dklHWnZZM1Z6S0dsdUlId2diM1YwS1NCbGRtVnVkSE1nWm1seVpTQmhablJsY2lCbWIyTjFjeUFtSUdKc2RYSWdaWFpsYm5SekxGeHVMeThnZDJocFkyZ2dhWE1nYzNCbFl5QjJhVzlzWVhScGIyNGdMU0JvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5RVQwMHRUR1YyWld3dE15MUZkbVZ1ZEhNdkkyVjJaVzUwY3kxbWIyTjFjMlYyWlc1MExXVjJaVzUwTFc5eVpHVnlYRzR2THlCU1pXeGhkR1ZrSUhScFkydGxkQ0F0SUdoMGRIQnpPaTh2WW5WbmN5NWphSEp2YldsMWJTNXZjbWN2Y0M5amFISnZiV2wxYlM5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRRME9UZzFOMXh1YVdZZ0tDQWhjM1Z3Y0c5eWRDNW1iMk4xYzJsdUlDa2dlMXh1WEhScVVYVmxjbmt1WldGamFDZ2dleUJtYjJOMWN6b2dYQ0ptYjJOMWMybHVYQ0lzSUdKc2RYSTZJRndpWm05amRYTnZkWFJjSWlCOUxDQm1kVzVqZEdsdmJpZ2diM0pwWnl3Z1ptbDRJQ2tnZTF4dVhHNWNkRngwTHk4Z1FYUjBZV05vSUdFZ2MybHVaMnhsSUdOaGNIUjFjbWx1WnlCb1lXNWtiR1Z5SUc5dUlIUm9aU0JrYjJOMWJXVnVkQ0IzYUdsc1pTQnpiMjFsYjI1bElIZGhiblJ6SUdadlkzVnphVzR2Wm05amRYTnZkWFJjYmx4MFhIUjJZWElnYUdGdVpHeGxjaUE5SUdaMWJtTjBhVzl1S0NCbGRtVnVkQ0FwSUh0Y2JseDBYSFJjZEdwUmRXVnllUzVsZG1WdWRDNXphVzExYkdGMFpTZ2dabWw0TENCbGRtVnVkQzUwWVhKblpYUXNJR3BSZFdWeWVTNWxkbVZ1ZEM1bWFYZ29JR1YyWlc1MElDa2dLVHRjYmx4MFhIUjlPMXh1WEc1Y2RGeDBhbEYxWlhKNUxtVjJaVzUwTG5Od1pXTnBZV3hiSUdacGVDQmRJRDBnZTF4dVhIUmNkRngwYzJWMGRYQTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSMllYSWdaRzlqSUQwZ2RHaHBjeTV2ZDI1bGNrUnZZM1Z0Wlc1MElIeDhJSFJvYVhNc1hHNWNkRngwWEhSY2RGeDBZWFIwWVdOb1pYTWdQU0JrWVhSaFVISnBkaTVoWTJObGMzTW9JR1J2WXl3Z1ptbDRJQ2s3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0FoWVhSMFlXTm9aWE1nS1NCN1hHNWNkRngwWEhSY2RGeDBaRzlqTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSUc5eWFXY3NJR2hoYm1Sc1pYSXNJSFJ5ZFdVZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJrWVhSaFVISnBkaTVoWTJObGMzTW9JR1J2WXl3Z1ptbDRMQ0FvSUdGMGRHRmphR1Z6SUh4OElEQWdLU0FySURFZ0tUdGNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUjBaV0Z5Wkc5M2Jqb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQmtiMk1nUFNCMGFHbHpMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2dkR2hwY3l4Y2JseDBYSFJjZEZ4MFhIUmhkSFJoWTJobGN5QTlJR1JoZEdGUWNtbDJMbUZqWTJWemN5Z2daRzlqTENCbWFYZ2dLU0F0SURFN1hHNWNibHgwWEhSY2RGeDBhV1lnS0NBaFlYUjBZV05vWlhNZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWkc5akxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JRzl5YVdjc0lHaGhibVJzWlhJc0lIUnlkV1VnS1R0Y2JseDBYSFJjZEZ4MFhIUmtZWFJoVUhKcGRpNXlaVzF2ZG1Vb0lHUnZZeXdnWm1sNElDazdYRzVjYmx4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSa1lYUmhVSEpwZGk1aFkyTmxjM01vSUdSdll5d2dabWw0TENCaGRIUmhZMmhsY3lBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZUdGNibHgwZlNBcE8xeHVmVnh1ZG1GeUlHeHZZMkYwYVc5dUlEMGdkMmx1Wkc5M0xteHZZMkYwYVc5dU8xeHVYRzUyWVhJZ2JtOXVZMlVnUFNCcVVYVmxjbmt1Ym05M0tDazdYRzVjYm5aaGNpQnljWFZsY25rZ1BTQW9JQzljWEQ4dklDazdYRzVjYmx4dVhHNHZMeUJEY205emN5MWljbTkzYzJWeUlIaHRiQ0J3WVhKemFXNW5YRzVxVVhWbGNua3VjR0Z5YzJWWVRVd2dQU0JtZFc1amRHbHZiaWdnWkdGMFlTQXBJSHRjYmx4MGRtRnlJSGh0YkR0Y2JseDBhV1lnS0NBaFpHRjBZU0I4ZkNCMGVYQmxiMllnWkdGMFlTQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSeVpYUjFjbTRnYm5Wc2JEdGNibHgwZlZ4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVsRklEa2dMU0F4TVNCdmJteDVYRzVjZEM4dklFbEZJSFJvY205M2N5QnZiaUJ3WVhKelpVWnliMjFUZEhKcGJtY2dkMmwwYUNCcGJuWmhiR2xrSUdsdWNIVjBMbHh1WEhSMGNua2dlMXh1WEhSY2RIaHRiQ0E5SUNnZ2JtVjNJSGRwYm1SdmR5NUVUMDFRWVhKelpYSW9LU0FwTG5CaGNuTmxSbkp2YlZOMGNtbHVaeWdnWkdGMFlTd2dYQ0owWlhoMEwzaHRiRndpSUNrN1hHNWNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYSFJjZEhodGJDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MGZWeHVYRzVjZEdsbUlDZ2dJWGh0YkNCOGZDQjRiV3d1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0lGd2ljR0Z5YzJWeVpYSnliM0pjSWlBcExteGxibWQwYUNBcElIdGNibHgwWEhScVVYVmxjbmt1WlhKeWIzSW9JRndpU1c1MllXeHBaQ0JZVFV3NklGd2lJQ3NnWkdGMFlTQXBPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQjRiV3c3WEc1OU8xeHVYRzVjYm5aaGNseHVYSFJ5WW5KaFkydGxkQ0E5SUM5Y1hGdGNYRjBrTHl4Y2JseDBja05TVEVZZ1BTQXZYRnh5UDF4Y2JpOW5MRnh1WEhSeWMzVmliV2wwZEdWeVZIbHdaWE1nUFNBdlhpZy9Pbk4xWW0xcGRIeGlkWFIwYjI1OGFXMWhaMlY4Y21WelpYUjhabWxzWlNra0wya3NYRzVjZEhKemRXSnRhWFIwWVdKc1pTQTlJQzllS0Q4NmFXNXdkWFI4YzJWc1pXTjBmSFJsZUhSaGNtVmhmR3RsZVdkbGJpa3ZhVHRjYmx4dVpuVnVZM1JwYjI0Z1luVnBiR1JRWVhKaGJYTW9JSEJ5WldacGVDd2diMkpxTENCMGNtRmthWFJwYjI1aGJDd2dZV1JrSUNrZ2UxeHVYSFIyWVhJZ2JtRnRaVHRjYmx4dVhIUnBaaUFvSUdwUmRXVnllUzVwYzBGeWNtRjVLQ0J2WW1vZ0tTQXBJSHRjYmx4dVhIUmNkQzh2SUZObGNtbGhiR2w2WlNCaGNuSmhlU0JwZEdWdExseHVYSFJjZEdwUmRXVnllUzVsWVdOb0tDQnZZbW9zSUdaMWJtTjBhVzl1S0NCcExDQjJJQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQjBjbUZrYVhScGIyNWhiQ0I4ZkNCeVluSmhZMnRsZEM1MFpYTjBLQ0J3Y21WbWFYZ2dLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJVY21WaGRDQmxZV05vSUdGeWNtRjVJR2wwWlcwZ1lYTWdZU0J6WTJGc1lYSXVYRzVjZEZ4MFhIUmNkR0ZrWkNnZ2NISmxabWw0TENCMklDazdYRzVjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1NYUmxiU0JwY3lCdWIyNHRjMk5oYkdGeUlDaGhjbkpoZVNCdmNpQnZZbXBsWTNRcExDQmxibU52WkdVZ2FYUnpJRzUxYldWeWFXTWdhVzVrWlhndVhHNWNkRngwWEhSY2RHSjFhV3hrVUdGeVlXMXpLRnh1WEhSY2RGeDBYSFJjZEhCeVpXWnBlQ0FySUZ3aVcxd2lJQ3NnS0NCMGVYQmxiMllnZGlBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCMklDRTlJRzUxYkd3Z1B5QnBJRG9nWENKY0lpQXBJQ3NnWENKZFhDSXNYRzVjZEZ4MFhIUmNkRngwZGl4Y2JseDBYSFJjZEZ4MFhIUjBjbUZrYVhScGIyNWhiQ3hjYmx4MFhIUmNkRngwWEhSaFpHUmNibHgwWEhSY2RGeDBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlJQ2s3WEc1Y2JseDBmU0JsYkhObElHbG1JQ2dnSVhSeVlXUnBkR2x2Ym1Gc0lDWW1JR3BSZFdWeWVTNTBlWEJsS0NCdlltb2dLU0E5UFQwZ1hDSnZZbXBsWTNSY0lpQXBJSHRjYmx4dVhIUmNkQzh2SUZObGNtbGhiR2w2WlNCdlltcGxZM1FnYVhSbGJTNWNibHgwWEhSbWIzSWdLQ0J1WVcxbElHbHVJRzlpYWlBcElIdGNibHgwWEhSY2RHSjFhV3hrVUdGeVlXMXpLQ0J3Y21WbWFYZ2dLeUJjSWx0Y0lpQXJJRzVoYldVZ0t5QmNJbDFjSWl3Z2IySnFXeUJ1WVcxbElGMHNJSFJ5WVdScGRHbHZibUZzTENCaFpHUWdLVHRjYmx4MFhIUjlYRzVjYmx4MGZTQmxiSE5sSUh0Y2JseHVYSFJjZEM4dklGTmxjbWxoYkdsNlpTQnpZMkZzWVhJZ2FYUmxiUzVjYmx4MFhIUmhaR1FvSUhCeVpXWnBlQ3dnYjJKcUlDazdYRzVjZEgxY2JuMWNibHh1THk4Z1UyVnlhV0ZzYVhwbElHRnVJR0Z5Y21GNUlHOW1JR1p2Y20wZ1pXeGxiV1Z1ZEhNZ2IzSWdZU0J6WlhRZ2IyWmNiaTh2SUd0bGVTOTJZV3gxWlhNZ2FXNTBieUJoSUhGMVpYSjVJSE4wY21sdVoxeHVhbEYxWlhKNUxuQmhjbUZ0SUQwZ1puVnVZM1JwYjI0b0lHRXNJSFJ5WVdScGRHbHZibUZzSUNrZ2UxeHVYSFIyWVhJZ2NISmxabWw0TEZ4dVhIUmNkSE1nUFNCYlhTeGNibHgwWEhSaFpHUWdQU0JtZFc1amRHbHZiaWdnYTJWNUxDQjJZV3gxWlU5eVJuVnVZM1JwYjI0Z0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVsbUlIWmhiSFZsSUdseklHRWdablZ1WTNScGIyNHNJR2x1ZG05clpTQnBkQ0JoYm1RZ2RYTmxJR2wwY3lCeVpYUjFjbTRnZG1Gc2RXVmNibHgwWEhSY2RIWmhjaUIyWVd4MVpTQTlJR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLQ0IyWVd4MVpVOXlSblZ1WTNScGIyNGdLU0EvWEc1Y2RGeDBYSFJjZEhaaGJIVmxUM0pHZFc1amRHbHZiaWdwSURwY2JseDBYSFJjZEZ4MGRtRnNkV1ZQY2taMWJtTjBhVzl1TzF4dVhHNWNkRngwWEhSeld5QnpMbXhsYm1kMGFDQmRJRDBnWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwS0NCclpYa2dLU0FySUZ3aVBWd2lJQ3RjYmx4MFhIUmNkRngwWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwS0NCMllXeDFaU0E5UFNCdWRXeHNJRDhnWENKY0lpQTZJSFpoYkhWbElDazdYRzVjZEZ4MGZUdGNibHh1WEhRdkx5QkpaaUJoYmlCaGNuSmhlU0IzWVhNZ2NHRnpjMlZrSUdsdUxDQmhjM04xYldVZ2RHaGhkQ0JwZENCcGN5QmhiaUJoY25KaGVTQnZaaUJtYjNKdElHVnNaVzFsYm5SekxseHVYSFJwWmlBb0lHcFJkV1Z5ZVM1cGMwRnljbUY1S0NCaElDa2dmSHdnS0NCaExtcHhkV1Z5ZVNBbUppQWhhbEYxWlhKNUxtbHpVR3hoYVc1UFltcGxZM1FvSUdFZ0tTQXBJQ2tnZTF4dVhHNWNkRngwTHk4Z1UyVnlhV0ZzYVhwbElIUm9aU0JtYjNKdElHVnNaVzFsYm5SelhHNWNkRngwYWxGMVpYSjVMbVZoWTJnb0lHRXNJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWVdSa0tDQjBhR2x6TG01aGJXVXNJSFJvYVhNdWRtRnNkV1VnS1R0Y2JseDBYSFI5SUNrN1hHNWNibHgwZlNCbGJITmxJSHRjYmx4dVhIUmNkQzh2SUVsbUlIUnlZV1JwZEdsdmJtRnNMQ0JsYm1OdlpHVWdkR2hsSUZ3aWIyeGtYQ0lnZDJGNUlDaDBhR1VnZDJGNUlERXVNeTR5SUc5eUlHOXNaR1Z5WEc1Y2RGeDBMeThnWkdsa0lHbDBLU3dnYjNSb1pYSjNhWE5sSUdWdVkyOWtaU0J3WVhKaGJYTWdjbVZqZFhKemFYWmxiSGt1WEc1Y2RGeDBabTl5SUNnZ2NISmxabWw0SUdsdUlHRWdLU0I3WEc1Y2RGeDBYSFJpZFdsc1pGQmhjbUZ0Y3lnZ2NISmxabWw0TENCaFd5QndjbVZtYVhnZ1hTd2dkSEpoWkdsMGFXOXVZV3dzSUdGa1pDQXBPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkQzh2SUZKbGRIVnliaUIwYUdVZ2NtVnpkV3gwYVc1bklITmxjbWxoYkdsNllYUnBiMjVjYmx4MGNtVjBkWEp1SUhNdWFtOXBiaWdnWENJbVhDSWdLVHRjYm4wN1hHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4MGMyVnlhV0ZzYVhwbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG5CaGNtRnRLQ0IwYUdsekxuTmxjbWxoYkdsNlpVRnljbUY1S0NrZ0tUdGNibHgwZlN4Y2JseDBjMlZ5YVdGc2FYcGxRWEp5WVhrNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbTFoY0NnZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVOaGJpQmhaR1FnY0hKdmNFaHZiMnNnWm05eUlGd2laV3hsYldWdWRITmNJaUIwYnlCbWFXeDBaWElnYjNJZ1lXUmtJR1p2Y20wZ1pXeGxiV1Z1ZEhOY2JseDBYSFJjZEhaaGNpQmxiR1Z0Wlc1MGN5QTlJR3BSZFdWeWVTNXdjbTl3S0NCMGFHbHpMQ0JjSW1Wc1pXMWxiblJ6WENJZ0tUdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRaVzUwY3lBL0lHcFJkV1Z5ZVM1dFlXdGxRWEp5WVhrb0lHVnNaVzFsYm5SeklDa2dPaUIwYUdsek8xeHVYSFJjZEgwZ0tWeHVYSFJjZEM1bWFXeDBaWElvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJSFI1Y0dVZ1BTQjBhR2x6TG5SNWNHVTdYRzVjYmx4MFhIUmNkQzh2SUZWelpTQXVhWE1vSUZ3aU9tUnBjMkZpYkdWa1hDSWdLU0J6YnlCMGFHRjBJR1pwWld4a2MyVjBXMlJwYzJGaWJHVmtYU0IzYjNKcmMxeHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTXVibUZ0WlNBbUppQWhhbEYxWlhKNUtDQjBhR2x6SUNrdWFYTW9JRndpT21ScGMyRmliR1ZrWENJZ0tTQW1KbHh1WEhSY2RGeDBYSFJ5YzNWaWJXbDBkR0ZpYkdVdWRHVnpkQ2dnZEdocGN5NXViMlJsVG1GdFpTQXBJQ1ltSUNGeWMzVmliV2wwZEdWeVZIbHdaWE11ZEdWemRDZ2dkSGx3WlNBcElDWW1YRzVjZEZ4MFhIUmNkQ2dnZEdocGN5NWphR1ZqYTJWa0lIeDhJQ0Z5WTJobFkydGhZbXhsVkhsd1pTNTBaWE4wS0NCMGVYQmxJQ2tnS1R0Y2JseDBYSFI5SUNsY2JseDBYSFF1YldGd0tDQm1kVzVqZEdsdmJpZ2dhU3dnWld4bGJTQXBJSHRjYmx4MFhIUmNkSFpoY2lCMllXd2dQU0JxVVhWbGNua29JSFJvYVhNZ0tTNTJZV3dvS1R0Y2JseHVYSFJjZEZ4MGFXWWdLQ0IyWVd3Z1BUMGdiblZzYkNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHNTFiR3c3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtbHpRWEp5WVhrb0lIWmhiQ0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG0xaGNDZ2dkbUZzTENCbWRXNWpkR2x2YmlnZ2RtRnNJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCN0lHNWhiV1U2SUdWc1pXMHVibUZ0WlN3Z2RtRnNkV1U2SUhaaGJDNXlaWEJzWVdObEtDQnlRMUpNUml3Z1hDSmNYSEpjWEc1Y0lpQXBJSDA3WEc1Y2RGeDBYSFJjZEgwZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlIc2dibUZ0WlRvZ1pXeGxiUzV1WVcxbExDQjJZV3gxWlRvZ2RtRnNMbkpsY0d4aFkyVW9JSEpEVWt4R0xDQmNJbHhjY2x4Y2Jsd2lJQ2tnZlR0Y2JseDBYSFI5SUNrdVoyVjBLQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVYRzUyWVhKY2JseDBjakl3SUQwZ0x5VXlNQzluTEZ4dVhIUnlhR0Z6YUNBOUlDOGpMaW9rTHl4Y2JseDBjbUZ1ZEdsRFlXTm9aU0E5SUM4b1d6OG1YU2xmUFZ0ZUpsMHFMeXhjYmx4MGNtaGxZV1JsY25NZ1BTQXZYaWd1S2o4cE9sc2dYRngwWFNvb1cxNWNYSEpjWEc1ZEtpa2tMMjFuTEZ4dVhHNWNkQzh2SUNNM05qVXpMQ0FqT0RFeU5Td2dJemd4TlRJNklHeHZZMkZzSUhCeWIzUnZZMjlzSUdSbGRHVmpkR2x2Ymx4dVhIUnliRzlqWVd4UWNtOTBiMk52YkNBOUlDOWVLRDg2WVdKdmRYUjhZWEJ3ZkdGd2NDMXpkRzl5WVdkbGZDNHJMV1Y0ZEdWdWMybHZibnhtYVd4bGZISmxjM3gzYVdSblpYUXBPaVF2TEZ4dVhIUnlibTlEYjI1MFpXNTBJRDBnTDE0b1B6cEhSVlI4U0VWQlJDa2tMeXhjYmx4MGNuQnliM1J2WTI5c0lEMGdMMTVjWEM5Y1hDOHZMRnh1WEc1Y2RDOHFJRkJ5WldacGJIUmxjbk5jYmx4MElDb2dNU2tnVkdobGVTQmhjbVVnZFhObFpuVnNJSFJ2SUdsdWRISnZaSFZqWlNCamRYTjBiMjBnWkdGMFlWUjVjR1Z6SUNoelpXVWdZV3BoZUM5cWMyOXVjQzVxY3lCbWIzSWdZVzRnWlhoaGJYQnNaU2xjYmx4MElDb2dNaWtnVkdobGMyVWdZWEpsSUdOaGJHeGxaRHBjYmx4MElDb2dJQ0FnTFNCQ1JVWlBVa1VnWVhOcmFXNW5JR1p2Y2lCaElIUnlZVzV6Y0c5eWRGeHVYSFFnS2lBZ0lDQXRJRUZHVkVWU0lIQmhjbUZ0SUhObGNtbGhiR2w2WVhScGIyNGdLSE11WkdGMFlTQnBjeUJoSUhOMGNtbHVaeUJwWmlCekxuQnliMk5sYzNORVlYUmhJR2x6SUhSeWRXVXBYRzVjZENBcUlETXBJR3RsZVNCcGN5QjBhR1VnWkdGMFlWUjVjR1ZjYmx4MElDb2dOQ2tnZEdobElHTmhkR05vWVd4c0lITjViV0p2YkNCY0lpcGNJaUJqWVc0Z1ltVWdkWE5sWkZ4dVhIUWdLaUExS1NCbGVHVmpkWFJwYjI0Z2QybHNiQ0J6ZEdGeWRDQjNhWFJvSUhSeVlXNXpjRzl5ZENCa1lYUmhWSGx3WlNCaGJtUWdWRWhGVGlCamIyNTBhVzUxWlNCa2IzZHVJSFJ2SUZ3aUtsd2lJR2xtSUc1bFpXUmxaRnh1WEhRZ0tpOWNibHgwY0hKbFptbHNkR1Z5Y3lBOUlIdDlMRnh1WEc1Y2RDOHFJRlJ5WVc1emNHOXlkSE1nWW1sdVpHbHVaM05jYmx4MElDb2dNU2tnYTJWNUlHbHpJSFJvWlNCa1lYUmhWSGx3WlZ4dVhIUWdLaUF5S1NCMGFHVWdZMkYwWTJoaGJHd2djM2x0WW05c0lGd2lLbHdpSUdOaGJpQmlaU0IxYzJWa1hHNWNkQ0FxSURNcElITmxiR1ZqZEdsdmJpQjNhV3hzSUhOMFlYSjBJSGRwZEdnZ2RISmhibk53YjNKMElHUmhkR0ZVZVhCbElHRnVaQ0JVU0VWT0lHZHZJSFJ2SUZ3aUtsd2lJR2xtSUc1bFpXUmxaRnh1WEhRZ0tpOWNibHgwZEhKaGJuTndiM0owY3lBOUlIdDlMRnh1WEc1Y2RDOHZJRUYyYjJsa0lHTnZiVzFsYm5RdGNISnZiRzluSUdOb1lYSWdjMlZ4ZFdWdVkyVWdLQ014TURBNU9DazdJRzExYzNRZ1lYQndaV0Z6WlNCc2FXNTBJR0Z1WkNCbGRtRmtaU0JqYjIxd2NtVnpjMmx2Ymx4dVhIUmhiR3hVZVhCbGN5QTlJRndpS2k5Y0lpNWpiMjVqWVhRb0lGd2lLbHdpSUNrc1hHNWNibHgwTHk4Z1FXNWphRzl5SUhSaFp5Qm1iM0lnY0dGeWMybHVaeUIwYUdVZ1pHOWpkVzFsYm5RZ2IzSnBaMmx1WEc1Y2RHOXlhV2RwYmtGdVkyaHZjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9JRndpWVZ3aUlDazdYRzVjZEc5eWFXZHBia0Z1WTJodmNpNW9jbVZtSUQwZ2JHOWpZWFJwYjI0dWFISmxaanRjYmx4dUx5OGdRbUZ6WlNCY0ltTnZibk4wY25WamRHOXlYQ0lnWm05eUlHcFJkV1Z5ZVM1aGFtRjRVSEpsWm1sc2RHVnlJR0Z1WkNCcVVYVmxjbmt1WVdwaGVGUnlZVzV6Y0c5eWRGeHVablZ1WTNScGIyNGdZV1JrVkc5UWNtVm1hV3gwWlhKelQzSlVjbUZ1YzNCdmNuUnpLQ0J6ZEhKMVkzUjFjbVVnS1NCN1hHNWNibHgwTHk4Z1pHRjBZVlI1Y0dWRmVIQnlaWE56YVc5dUlHbHpJRzl3ZEdsdmJtRnNJR0Z1WkNCa1pXWmhkV3gwY3lCMGJ5QmNJaXBjSWx4dVhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpd2dablZ1WXlBcElIdGNibHh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR1JoZEdGVWVYQmxSWGh3Y21WemMybHZiaUFoUFQwZ1hDSnpkSEpwYm1kY0lpQXBJSHRjYmx4MFhIUmNkR1oxYm1NZ1BTQmtZWFJoVkhsd1pVVjRjSEpsYzNOcGIyNDdYRzVjZEZ4MFhIUmtZWFJoVkhsd1pVVjRjSEpsYzNOcGIyNGdQU0JjSWlwY0lqdGNibHgwWEhSOVhHNWNibHgwWEhSMllYSWdaR0YwWVZSNWNHVXNYRzVjZEZ4MFhIUnBJRDBnTUN4Y2JseDBYSFJjZEdSaGRHRlVlWEJsY3lBOUlHUmhkR0ZVZVhCbFJYaHdjbVZ6YzJsdmJpNTBiMHh2ZDJWeVEyRnpaU2dwTG0xaGRHTm9LQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dmSHdnVzEwN1hHNWNibHgwWEhScFppQW9JR3BSZFdWeWVTNXBjMFoxYm1OMGFXOXVLQ0JtZFc1aklDa2dLU0I3WEc1Y2JseDBYSFJjZEM4dklFWnZjaUJsWVdOb0lHUmhkR0ZVZVhCbElHbHVJSFJvWlNCa1lYUmhWSGx3WlVWNGNISmxjM05wYjI1Y2JseDBYSFJjZEhkb2FXeGxJQ2dnS0NCa1lYUmhWSGx3WlNBOUlHUmhkR0ZVZVhCbGMxc2dhU3NySUYwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlFjbVZ3Wlc1a0lHbG1JSEpsY1hWbGMzUmxaRnh1WEhSY2RGeDBYSFJwWmlBb0lHUmhkR0ZVZVhCbFd5QXdJRjBnUFQwOUlGd2lLMXdpSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR1JoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1V1YzJ4cFkyVW9JREVnS1NCOGZDQmNJaXBjSWp0Y2JseDBYSFJjZEZ4MFhIUW9JSE4wY25WamRIVnlaVnNnWkdGMFlWUjVjR1VnWFNBOUlITjBjblZqZEhWeVpWc2daR0YwWVZSNWNHVWdYU0I4ZkNCYlhTQXBMblZ1YzJocFpuUW9JR1oxYm1NZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCUGRHaGxjbmRwYzJVZ1lYQndaVzVrWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MEtDQnpkSEoxWTNSMWNtVmJJR1JoZEdGVWVYQmxJRjBnUFNCemRISjFZM1IxY21WYklHUmhkR0ZVZVhCbElGMGdmSHdnVzEwZ0tTNXdkWE5vS0NCbWRXNWpJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMDdYRzU5WEc1Y2JpOHZJRUpoYzJVZ2FXNXpjR1ZqZEdsdmJpQm1kVzVqZEdsdmJpQm1iM0lnY0hKbFptbHNkR1Z5Y3lCaGJtUWdkSEpoYm5Od2IzSjBjMXh1Wm5WdVkzUnBiMjRnYVc1emNHVmpkRkJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lITjBjblZqZEhWeVpTd2diM0IwYVc5dWN5d2diM0pwWjJsdVlXeFBjSFJwYjI1ekxDQnFjVmhJVWlBcElIdGNibHh1WEhSMllYSWdhVzV6Y0dWamRHVmtJRDBnZTMwc1hHNWNkRngwYzJWbGEybHVaMVJ5WVc1emNHOXlkQ0E5SUNnZ2MzUnlkV04wZFhKbElEMDlQU0IwY21GdWMzQnZjblJ6SUNrN1hHNWNibHgwWm5WdVkzUnBiMjRnYVc1emNHVmpkQ2dnWkdGMFlWUjVjR1VnS1NCN1hHNWNkRngwZG1GeUlITmxiR1ZqZEdWa08xeHVYSFJjZEdsdWMzQmxZM1JsWkZzZ1pHRjBZVlI1Y0dVZ1hTQTlJSFJ5ZFdVN1hHNWNkRngwYWxGMVpYSjVMbVZoWTJnb0lITjBjblZqZEhWeVpWc2daR0YwWVZSNWNHVWdYU0I4ZkNCYlhTd2dablZ1WTNScGIyNG9JRjhzSUhCeVpXWnBiSFJsY2s5eVJtRmpkRzl5ZVNBcElIdGNibHgwWEhSY2RIWmhjaUJrWVhSaFZIbHdaVTl5VkhKaGJuTndiM0owSUQwZ2NISmxabWxzZEdWeVQzSkdZV04wYjNKNUtDQnZjSFJwYjI1ekxDQnZjbWxuYVc1aGJFOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNkRngwWEhScFppQW9JSFI1Y0dWdlppQmtZWFJoVkhsd1pVOXlWSEpoYm5Od2IzSjBJRDA5UFNCY0luTjBjbWx1WjF3aUlDWW1YRzVjZEZ4MFhIUmNkQ0Z6WldWcmFXNW5WSEpoYm5Od2IzSjBJQ1ltSUNGcGJuTndaV04wWldSYklHUmhkR0ZVZVhCbFQzSlVjbUZ1YzNCdmNuUWdYU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUnZjSFJwYjI1ekxtUmhkR0ZVZVhCbGN5NTFibk5vYVdaMEtDQmtZWFJoVkhsd1pVOXlWSEpoYm5Od2IzSjBJQ2s3WEc1Y2RGeDBYSFJjZEdsdWMzQmxZM1FvSUdSaGRHRlVlWEJsVDNKVWNtRnVjM0J2Y25RZ0tUdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNnZ2MyVmxhMmx1WjFSeVlXNXpjRzl5ZENBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDRW9JSE5sYkdWamRHVmtJRDBnWkdGMFlWUjVjR1ZQY2xSeVlXNXpjRzl5ZENBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tUdGNibHgwWEhSeVpYUjFjbTRnYzJWc1pXTjBaV1E3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnYVc1emNHVmpkQ2dnYjNCMGFXOXVjeTVrWVhSaFZIbHdaWE5iSURBZ1hTQXBJSHg4SUNGcGJuTndaV04wWldSYklGd2lLbHdpSUYwZ0ppWWdhVzV6Y0dWamRDZ2dYQ0lxWENJZ0tUdGNibjFjYmx4dUx5OGdRU0J6Y0dWamFXRnNJR1Y0ZEdWdVpDQm1iM0lnWVdwaGVDQnZjSFJwYjI1elhHNHZMeUIwYUdGMElIUmhhMlZ6SUZ3aVpteGhkRndpSUc5d2RHbHZibk1nS0c1dmRDQjBieUJpWlNCa1pXVndJR1Y0ZEdWdVpHVmtLVnh1THk4Z1JtbDRaWE1nSXprNE9EZGNibVoxYm1OMGFXOXVJR0ZxWVhoRmVIUmxibVFvSUhSaGNtZGxkQ3dnYzNKaklDa2dlMXh1WEhSMllYSWdhMlY1TENCa1pXVndMRnh1WEhSY2RHWnNZWFJQY0hScGIyNXpJRDBnYWxGMVpYSjVMbUZxWVhoVFpYUjBhVzVuY3k1bWJHRjBUM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVYSFJtYjNJZ0tDQnJaWGtnYVc0Z2MzSmpJQ2tnZTF4dVhIUmNkR2xtSUNnZ2MzSmpXeUJyWlhrZ1hTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MEtDQm1iR0YwVDNCMGFXOXVjMXNnYTJWNUlGMGdQeUIwWVhKblpYUWdPaUFvSUdSbFpYQWdmSHdnS0NCa1pXVndJRDBnZTMwZ0tTQXBJQ2xiSUd0bGVTQmRJRDBnYzNKald5QnJaWGtnWFR0Y2JseDBYSFI5WEc1Y2RIMWNibHgwYVdZZ0tDQmtaV1Z3SUNrZ2UxeHVYSFJjZEdwUmRXVnllUzVsZUhSbGJtUW9JSFJ5ZFdVc0lIUmhjbWRsZEN3Z1pHVmxjQ0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhSaGNtZGxkRHRjYm4xY2JseHVMeW9nU0dGdVpHeGxjeUJ5WlhOd2IyNXpaWE1nZEc4Z1lXNGdZV3BoZUNCeVpYRjFaWE4wT2x4dUlDb2dMU0JtYVc1a2N5QjBhR1VnY21sbmFIUWdaR0YwWVZSNWNHVWdLRzFsWkdsaGRHVnpJR0psZEhkbFpXNGdZMjl1ZEdWdWRDMTBlWEJsSUdGdVpDQmxlSEJsWTNSbFpDQmtZWFJoVkhsd1pTbGNiaUFxSUMwZ2NtVjBkWEp1Y3lCMGFHVWdZMjl5Y21WemNHOXVaR2x1WnlCeVpYTndiMjV6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYW1GNFNHRnVaR3hsVW1WemNHOXVjMlZ6S0NCekxDQnFjVmhJVWl3Z2NtVnpjRzl1YzJWeklDa2dlMXh1WEc1Y2RIWmhjaUJqZEN3Z2RIbHdaU3dnWm1sdVlXeEVZWFJoVkhsd1pTd2dabWx5YzNSRVlYUmhWSGx3WlN4Y2JseDBYSFJqYjI1MFpXNTBjeUE5SUhNdVkyOXVkR1Z1ZEhNc1hHNWNkRngwWkdGMFlWUjVjR1Z6SUQwZ2N5NWtZWFJoVkhsd1pYTTdYRzVjYmx4MEx5OGdVbVZ0YjNabElHRjFkRzhnWkdGMFlWUjVjR1VnWVc1a0lHZGxkQ0JqYjI1MFpXNTBMWFI1Y0dVZ2FXNGdkR2hsSUhCeWIyTmxjM05jYmx4MGQyaHBiR1VnS0NCa1lYUmhWSGx3WlhOYklEQWdYU0E5UFQwZ1hDSXFYQ0lnS1NCN1hHNWNkRngwWkdGMFlWUjVjR1Z6TG5Ob2FXWjBLQ2s3WEc1Y2RGeDBhV1lnS0NCamRDQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFkzUWdQU0J6TG0xcGJXVlVlWEJsSUh4OElHcHhXRWhTTG1kbGRGSmxjM0J2Ym5ObFNHVmhaR1Z5S0NCY0lrTnZiblJsYm5RdFZIbHdaVndpSUNrN1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdRMmhsWTJzZ2FXWWdkMlVuY21VZ1pHVmhiR2x1WnlCM2FYUm9JR0VnYTI1dmQyNGdZMjl1ZEdWdWRDMTBlWEJsWEc1Y2RHbG1JQ2dnWTNRZ0tTQjdYRzVjZEZ4MFptOXlJQ2dnZEhsd1pTQnBiaUJqYjI1MFpXNTBjeUFwSUh0Y2JseDBYSFJjZEdsbUlDZ2dZMjl1ZEdWdWRITmJJSFI1Y0dVZ1hTQW1KaUJqYjI1MFpXNTBjMXNnZEhsd1pTQmRMblJsYzNRb0lHTjBJQ2tnS1NCN1hHNWNkRngwWEhSY2RHUmhkR0ZVZVhCbGN5NTFibk5vYVdaMEtDQjBlWEJsSUNrN1hHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4dklFTm9aV05ySUhSdklITmxaU0JwWmlCM1pTQm9ZWFpsSUdFZ2NtVnpjRzl1YzJVZ1ptOXlJSFJvWlNCbGVIQmxZM1JsWkNCa1lYUmhWSGx3WlZ4dVhIUnBaaUFvSUdSaGRHRlVlWEJsYzFzZ01DQmRJR2x1SUhKbGMzQnZibk5sY3lBcElIdGNibHgwWEhSbWFXNWhiRVJoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1Z6V3lBd0lGMDdYRzVjZEgwZ1pXeHpaU0I3WEc1Y2JseDBYSFF2THlCVWNua2dZMjl1ZG1WeWRHbGliR1VnWkdGMFlWUjVjR1Z6WEc1Y2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCeVpYTndiMjV6WlhNZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUNGa1lYUmhWSGx3WlhOYklEQWdYU0I4ZkNCekxtTnZiblpsY25SbGNuTmJJSFI1Y0dVZ0t5QmNJaUJjSWlBcklHUmhkR0ZVZVhCbGMxc2dNQ0JkSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkR1pwYm1Gc1JHRjBZVlI1Y0dVZ1BTQjBlWEJsTzF4dVhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR2xtSUNnZ0lXWnBjbk4wUkdGMFlWUjVjR1VnS1NCN1hHNWNkRngwWEhSY2RHWnBjbk4wUkdGMFlWUjVjR1VnUFNCMGVYQmxPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRTl5SUdwMWMzUWdkWE5sSUdacGNuTjBJRzl1WlZ4dVhIUmNkR1pwYm1Gc1JHRjBZVlI1Y0dVZ1BTQm1hVzVoYkVSaGRHRlVlWEJsSUh4OElHWnBjbk4wUkdGMFlWUjVjR1U3WEc1Y2RIMWNibHh1WEhRdkx5QkpaaUIzWlNCbWIzVnVaQ0JoSUdSaGRHRlVlWEJsWEc1Y2RDOHZJRmRsSUdGa1pDQjBhR1VnWkdGMFlWUjVjR1VnZEc4Z2RHaGxJR3hwYzNRZ2FXWWdibVZsWkdWa1hHNWNkQzh2SUdGdVpDQnlaWFIxY200Z2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2NtVnpjRzl1YzJWY2JseDBhV1lnS0NCbWFXNWhiRVJoZEdGVWVYQmxJQ2tnZTF4dVhIUmNkR2xtSUNnZ1ptbHVZV3hFWVhSaFZIbHdaU0FoUFQwZ1pHRjBZVlI1Y0dWeld5QXdJRjBnS1NCN1hHNWNkRngwWEhSa1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ1ptbHVZV3hFWVhSaFZIbHdaU0FwTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2NtVnpjRzl1YzJWeld5Qm1hVzVoYkVSaGRHRlVlWEJsSUYwN1hHNWNkSDFjYm4xY2JseHVMeW9nUTJoaGFXNGdZMjl1ZG1WeWMybHZibk1nWjJsMlpXNGdkR2hsSUhKbGNYVmxjM1FnWVc1a0lIUm9aU0J2Y21sbmFXNWhiQ0J5WlhOd2IyNXpaVnh1SUNvZ1FXeHpieUJ6WlhSeklIUm9aU0J5WlhOd2IyNXpaVmhZV0NCbWFXVnNaSE1nYjI0Z2RHaGxJR3B4V0VoU0lHbHVjM1JoYm1ObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdGcVlYaERiMjUyWlhKMEtDQnpMQ0J5WlhOd2IyNXpaU3dnYW5GWVNGSXNJR2x6VTNWalkyVnpjeUFwSUh0Y2JseDBkbUZ5SUdOdmJuWXlMQ0JqZFhKeVpXNTBMQ0JqYjI1MkxDQjBiWEFzSUhCeVpYWXNYRzVjZEZ4MFkyOXVkbVZ5ZEdWeWN5QTlJSHQ5TEZ4dVhHNWNkRngwTHk4Z1YyOXlheUIzYVhSb0lHRWdZMjl3ZVNCdlppQmtZWFJoVkhsd1pYTWdhVzRnWTJGelpTQjNaU0J1WldWa0lIUnZJRzF2WkdsbWVTQnBkQ0JtYjNJZ1kyOXVkbVZ5YzJsdmJseHVYSFJjZEdSaGRHRlVlWEJsY3lBOUlITXVaR0YwWVZSNWNHVnpMbk5zYVdObEtDazdYRzVjYmx4MEx5OGdRM0psWVhSbElHTnZiblpsY25SbGNuTWdiV0Z3SUhkcGRHZ2diRzkzWlhKallYTmxaQ0JyWlhselhHNWNkR2xtSUNnZ1pHRjBZVlI1Y0dWeld5QXhJRjBnS1NCN1hHNWNkRngwWm05eUlDZ2dZMjl1ZGlCcGJpQnpMbU52Ym5abGNuUmxjbk1nS1NCN1hHNWNkRngwWEhSamIyNTJaWEowWlhKeld5QmpiMjUyTG5SdlRHOTNaWEpEWVhObEtDa2dYU0E5SUhNdVkyOXVkbVZ5ZEdWeWMxc2dZMjl1ZGlCZE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHTjFjbkpsYm5RZ1BTQmtZWFJoVkhsd1pYTXVjMmhwWm5Rb0tUdGNibHh1WEhRdkx5QkRiMjUyWlhKMElIUnZJR1ZoWTJnZ2MyVnhkV1Z1ZEdsaGJDQmtZWFJoVkhsd1pWeHVYSFIzYUdsc1pTQW9JR04xY25KbGJuUWdLU0I3WEc1Y2JseDBYSFJwWmlBb0lITXVjbVZ6Y0c5dWMyVkdhV1ZzWkhOYklHTjFjbkpsYm5RZ1hTQXBJSHRjYmx4MFhIUmNkR3B4V0VoU1d5QnpMbkpsYzNCdmJuTmxSbWxsYkdSeld5QmpkWEp5Wlc1MElGMGdYU0E5SUhKbGMzQnZibk5sTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGd2NHeDVJSFJvWlNCa1lYUmhSbWxzZEdWeUlHbG1JSEJ5YjNacFpHVmtYRzVjZEZ4MGFXWWdLQ0FoY0hKbGRpQW1KaUJwYzFOMVkyTmxjM01nSmlZZ2N5NWtZWFJoUm1sc2RHVnlJQ2tnZTF4dVhIUmNkRngwY21WemNHOXVjMlVnUFNCekxtUmhkR0ZHYVd4MFpYSW9JSEpsYzNCdmJuTmxMQ0J6TG1SaGRHRlVlWEJsSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY0hKbGRpQTlJR04xY25KbGJuUTdYRzVjZEZ4MFkzVnljbVZ1ZENBOUlHUmhkR0ZVZVhCbGN5NXphR2xtZENncE8xeHVYRzVjZEZ4MGFXWWdLQ0JqZFhKeVpXNTBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlVhR1Z5WlNkeklHOXViSGtnZDI5eWF5QjBieUJrYnlCcFppQmpkWEp5Wlc1MElHUmhkR0ZVZVhCbElHbHpJRzV2YmkxaGRYUnZYRzVjZEZ4MFhIUnBaaUFvSUdOMWNuSmxiblFnUFQwOUlGd2lLbHdpSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkR04xY25KbGJuUWdQU0J3Y21WMk8xeHVYRzVjZEZ4MFhIUXZMeUJEYjI1MlpYSjBJSEpsYzNCdmJuTmxJR2xtSUhCeVpYWWdaR0YwWVZSNWNHVWdhWE1nYm05dUxXRjFkRzhnWVc1a0lHUnBabVpsY25NZ1puSnZiU0JqZFhKeVpXNTBYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0J3Y21WMklDRTlQU0JjSWlwY0lpQW1KaUJ3Y21WMklDRTlQU0JqZFhKeVpXNTBJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRk5sWldzZ1lTQmthWEpsWTNRZ1kyOXVkbVZ5ZEdWeVhHNWNkRngwWEhSY2RHTnZibllnUFNCamIyNTJaWEowWlhKeld5QndjbVYySUNzZ1hDSWdYQ0lnS3lCamRYSnlaVzUwSUYwZ2ZId2dZMjl1ZG1WeWRHVnljMXNnWENJcUlGd2lJQ3NnWTNWeWNtVnVkQ0JkTzF4dVhHNWNkRngwWEhSY2RDOHZJRWxtSUc1dmJtVWdabTkxYm1Rc0lITmxaV3NnWVNCd1lXbHlYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXTnZibllnS1NCN1hHNWNkRngwWEhSY2RGeDBabTl5SUNnZ1kyOXVkaklnYVc0Z1kyOXVkbVZ5ZEdWeWN5QXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnU1dZZ1kyOXVkaklnYjNWMGNIVjBjeUJqZFhKeVpXNTBYRzVjZEZ4MFhIUmNkRngwWEhSMGJYQWdQU0JqYjI1Mk1pNXpjR3hwZENnZ1hDSWdYQ0lnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2RHMXdXeUF4SUYwZ1BUMDlJR04xY25KbGJuUWdLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1NXWWdjSEpsZGlCallXNGdZbVVnWTI5dWRtVnlkR1ZrSUhSdklHRmpZMlZ3ZEdWa0lHbHVjSFYwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5ZZ1BTQmpiMjUyWlhKMFpYSnpXeUJ3Y21WMklDc2dYQ0lnWENJZ0t5QjBiWEJiSURBZ1hTQmRJSHg4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWTI5dWRtVnlkR1Z5YzFzZ1hDSXFJRndpSUNzZ2RHMXdXeUF3SUYwZ1hUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JqYjI1MklDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1EyOXVaR1Z1YzJVZ1pYRjFhWFpoYkdWdVkyVWdZMjl1ZG1WeWRHVnljMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kyOXVkaUE5UFQwZ2RISjFaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHTnZibllnUFNCamIyNTJaWEowWlhKeld5QmpiMjUyTWlCZE8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVDNSb1pYSjNhWE5sTENCcGJuTmxjblFnZEdobElHbHVkR1Z5YldWa2FXRjBaU0JrWVhSaFZIbHdaVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvSUdOdmJuWmxjblJsY25OYklHTnZibll5SUYwZ0lUMDlJSFJ5ZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJqZFhKeVpXNTBJRDBnZEcxd1d5QXdJRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSa1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ2RHMXdXeUF4SUYwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCQmNIQnNlU0JqYjI1MlpYSjBaWElnS0dsbUlHNXZkQ0JoYmlCbGNYVnBkbUZzWlc1alpTbGNibHgwWEhSY2RGeDBhV1lnS0NCamIyNTJJQ0U5UFNCMGNuVmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBMeThnVlc1c1pYTnpJR1Z5Y205eWN5QmhjbVVnWVd4c2IzZGxaQ0IwYnlCaWRXSmliR1VzSUdOaGRHTm9JR0Z1WkNCeVpYUjFjbTRnZEdobGJWeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kyOXVkaUFtSmlCekxuUm9jbTkzY3lBcElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sSUQwZ1kyOXVkaWdnY21WemNHOXVjMlVnS1R0Y2JseDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEhKNUlIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGNtVnpjRzl1YzJVZ1BTQmpiMjUyS0NCeVpYTndiMjV6WlNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGMzUmhkR1U2SUZ3aWNHRnljMlZ5WlhKeWIzSmNJaXhjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJsY25KdmNqb2dZMjl1ZGlBL0lHVWdPaUJjSWs1dklHTnZiblpsY25OcGIyNGdabkp2YlNCY0lpQXJJSEJ5WlhZZ0t5QmNJaUIwYnlCY0lpQXJJR04xY25KbGJuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdleUJ6ZEdGMFpUb2dYQ0p6ZFdOalpYTnpYQ0lzSUdSaGRHRTZJSEpsYzNCdmJuTmxJSDA3WEc1OVhHNWNibXBSZFdWeWVTNWxlSFJsYm1Rb0lIdGNibHh1WEhRdkx5QkRiM1Z1ZEdWeUlHWnZjaUJvYjJ4a2FXNW5JSFJvWlNCdWRXMWlaWElnYjJZZ1lXTjBhWFpsSUhGMVpYSnBaWE5jYmx4MFlXTjBhWFpsT2lBd0xGeHVYRzVjZEM4dklFeGhjM1F0VFc5a2FXWnBaV1FnYUdWaFpHVnlJR05oWTJobElHWnZjaUJ1WlhoMElISmxjWFZsYzNSY2JseDBiR0Z6ZEUxdlpHbG1hV1ZrT2lCN2ZTeGNibHgwWlhSaFp6b2dlMzBzWEc1Y2JseDBZV3BoZUZObGRIUnBibWR6T2lCN1hHNWNkRngwZFhKc09pQnNiMk5oZEdsdmJpNW9jbVZtTEZ4dVhIUmNkSFI1Y0dVNklGd2lSMFZVWENJc1hHNWNkRngwYVhOTWIyTmhiRG9nY214dlkyRnNVSEp2ZEc5amIyd3VkR1Z6ZENnZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0tTeGNibHgwWEhSbmJHOWlZV3c2SUhSeWRXVXNYRzVjZEZ4MGNISnZZMlZ6YzBSaGRHRTZJSFJ5ZFdVc1hHNWNkRngwWVhONWJtTTZJSFJ5ZFdVc1hHNWNkRngwWTI5dWRHVnVkRlI1Y0dVNklGd2lZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa095QmphR0Z5YzJWMFBWVlVSaTA0WENJc1hHNWNibHgwWEhRdktseHVYSFJjZEhScGJXVnZkWFE2SURBc1hHNWNkRngwWkdGMFlUb2diblZzYkN4Y2JseDBYSFJrWVhSaFZIbHdaVG9nYm5Wc2JDeGNibHgwWEhSMWMyVnlibUZ0WlRvZ2JuVnNiQ3hjYmx4MFhIUndZWE56ZDI5eVpEb2diblZzYkN4Y2JseDBYSFJqWVdOb1pUb2diblZzYkN4Y2JseDBYSFIwYUhKdmQzTTZJR1poYkhObExGeHVYSFJjZEhSeVlXUnBkR2x2Ym1Gc09pQm1ZV3h6WlN4Y2JseDBYSFJvWldGa1pYSnpPaUI3ZlN4Y2JseDBYSFFxTDF4dVhHNWNkRngwWVdOalpYQjBjem9nZTF4dVhIUmNkRngwWENJcVhDSTZJR0ZzYkZSNWNHVnpMRnh1WEhSY2RGeDBkR1Y0ZERvZ1hDSjBaWGgwTDNCc1lXbHVYQ0lzWEc1Y2RGeDBYSFJvZEcxc09pQmNJblJsZUhRdmFIUnRiRndpTEZ4dVhIUmNkRngwZUcxc09pQmNJbUZ3Y0d4cFkyRjBhVzl1TDNodGJDd2dkR1Y0ZEM5NGJXeGNJaXhjYmx4MFhIUmNkR3B6YjI0NklGd2lZWEJ3YkdsallYUnBiMjR2YW5OdmJpd2dkR1Y0ZEM5cVlYWmhjMk55YVhCMFhDSmNibHgwWEhSOUxGeHVYRzVjZEZ4MFkyOXVkR1Z1ZEhNNklIdGNibHgwWEhSY2RIaHRiRG9nTDF4Y1luaHRiRnhjWWk4c1hHNWNkRngwWEhSb2RHMXNPaUF2WEZ4aWFIUnRiQzhzWEc1Y2RGeDBYSFJxYzI5dU9pQXZYRnhpYW5OdmJseGNZaTljYmx4MFhIUjlMRnh1WEc1Y2RGeDBjbVZ6Y0c5dWMyVkdhV1ZzWkhNNklIdGNibHgwWEhSY2RIaHRiRG9nWENKeVpYTndiMjV6WlZoTlRGd2lMRnh1WEhSY2RGeDBkR1Y0ZERvZ1hDSnlaWE53YjI1elpWUmxlSFJjSWl4Y2JseDBYSFJjZEdwemIyNDZJRndpY21WemNHOXVjMlZLVTA5T1hDSmNibHgwWEhSOUxGeHVYRzVjZEZ4MEx5OGdSR0YwWVNCamIyNTJaWEowWlhKelhHNWNkRngwTHk4Z1MyVjVjeUJ6WlhCaGNtRjBaU0J6YjNWeVkyVWdLRzl5SUdOaGRHTm9ZV3hzSUZ3aUtsd2lLU0JoYm1RZ1pHVnpkR2x1WVhScGIyNGdkSGx3WlhNZ2QybDBhQ0JoSUhOcGJtZHNaU0J6Y0dGalpWeHVYSFJjZEdOdmJuWmxjblJsY25NNklIdGNibHh1WEhSY2RGeDBMeThnUTI5dWRtVnlkQ0JoYm5sMGFHbHVaeUIwYnlCMFpYaDBYRzVjZEZ4MFhIUmNJaW9nZEdWNGRGd2lPaUJUZEhKcGJtY3NYRzVjYmx4MFhIUmNkQzh2SUZSbGVIUWdkRzhnYUhSdGJDQW9kSEoxWlNBOUlHNXZJSFJ5WVc1elptOXliV0YwYVc5dUtWeHVYSFJjZEZ4MFhDSjBaWGgwSUdoMGJXeGNJam9nZEhKMVpTeGNibHh1WEhSY2RGeDBMeThnUlhaaGJIVmhkR1VnZEdWNGRDQmhjeUJoSUdwemIyNGdaWGh3Y21WemMybHZibHh1WEhSY2RGeDBYQ0owWlhoMElHcHpiMjVjSWpvZ1NsTlBUaTV3WVhKelpTeGNibHh1WEhSY2RGeDBMeThnVUdGeWMyVWdkR1Y0ZENCaGN5QjRiV3hjYmx4MFhIUmNkRndpZEdWNGRDQjRiV3hjSWpvZ2FsRjFaWEo1TG5CaGNuTmxXRTFNWEc1Y2RGeDBmU3hjYmx4dVhIUmNkQzh2SUVadmNpQnZjSFJwYjI1eklIUm9ZWFFnYzJodmRXeGtiaWQwSUdKbElHUmxaWEFnWlhoMFpXNWtaV1E2WEc1Y2RGeDBMeThnZVc5MUlHTmhiaUJoWkdRZ2VXOTFjaUJ2ZDI0Z1kzVnpkRzl0SUc5d2RHbHZibk1nYUdWeVpTQnBabHh1WEhSY2RDOHZJR0Z1WkNCM2FHVnVJSGx2ZFNCamNtVmhkR1VnYjI1bElIUm9ZWFFnYzJodmRXeGtiaWQwSUdKbFhHNWNkRngwTHk4Z1pHVmxjQ0JsZUhSbGJtUmxaQ0FvYzJWbElHRnFZWGhGZUhSbGJtUXBYRzVjZEZ4MFpteGhkRTl3ZEdsdmJuTTZJSHRjYmx4MFhIUmNkSFZ5YkRvZ2RISjFaU3hjYmx4MFhIUmNkR052Ym5SbGVIUTZJSFJ5ZFdWY2JseDBYSFI5WEc1Y2RIMHNYRzVjYmx4MEx5OGdRM0psWVhSbGN5QmhJR1oxYkd3Z1pteGxaR2RsWkNCelpYUjBhVzVuY3lCdlltcGxZM1FnYVc1MGJ5QjBZWEpuWlhSY2JseDBMeThnZDJsMGFDQmliM1JvSUdGcVlYaFRaWFIwYVc1bmN5QmhibVFnYzJWMGRHbHVaM01nWm1sbGJHUnpMbHh1WEhRdkx5QkpaaUIwWVhKblpYUWdhWE1nYjIxcGRIUmxaQ3dnZDNKcGRHVnpJR2x1ZEc4Z1lXcGhlRk5sZEhScGJtZHpMbHh1WEhSaGFtRjRVMlYwZFhBNklHWjFibU4wYVc5dUtDQjBZWEpuWlhRc0lITmxkSFJwYm1keklDa2dlMXh1WEhSY2RISmxkSFZ5YmlCelpYUjBhVzVuY3lBL1hHNWNibHgwWEhSY2RDOHZJRUoxYVd4a2FXNW5JR0VnYzJWMGRHbHVaM01nYjJKcVpXTjBYRzVjZEZ4MFhIUmhhbUY0UlhoMFpXNWtLQ0JoYW1GNFJYaDBaVzVrS0NCMFlYSm5aWFFzSUdwUmRXVnllUzVoYW1GNFUyVjBkR2x1WjNNZ0tTd2djMlYwZEdsdVozTWdLU0E2WEc1Y2JseDBYSFJjZEM4dklFVjRkR1Z1WkdsdVp5QmhhbUY0VTJWMGRHbHVaM05jYmx4MFhIUmNkR0ZxWVhoRmVIUmxibVFvSUdwUmRXVnllUzVoYW1GNFUyVjBkR2x1WjNNc0lIUmhjbWRsZENBcE8xeHVYSFI5TEZ4dVhHNWNkR0ZxWVhoUWNtVm1hV3gwWlhJNklHRmtaRlJ2VUhKbFptbHNkR1Z5YzA5eVZISmhibk53YjNKMGN5Z2djSEpsWm1sc2RHVnljeUFwTEZ4dVhIUmhhbUY0VkhKaGJuTndiM0owT2lCaFpHUlViMUJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lIUnlZVzV6Y0c5eWRITWdLU3hjYmx4dVhIUXZMeUJOWVdsdUlHMWxkR2h2WkZ4dVhIUmhhbUY0T2lCbWRXNWpkR2x2YmlnZ2RYSnNMQ0J2Y0hScGIyNXpJQ2tnZTF4dVhHNWNkRngwTHk4Z1NXWWdkWEpzSUdseklHRnVJRzlpYW1WamRDd2djMmx0ZFd4aGRHVWdjSEpsTFRFdU5TQnphV2R1WVhSMWNtVmNibHgwWEhScFppQW9JSFI1Y0dWdlppQjFjbXdnUFQwOUlGd2liMkpxWldOMFhDSWdLU0I3WEc1Y2RGeDBYSFJ2Y0hScGIyNXpJRDBnZFhKc08xeHVYSFJjZEZ4MGRYSnNJRDBnZFc1a1pXWnBibVZrTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVadmNtTmxJRzl3ZEdsdmJuTWdkRzhnWW1VZ1lXNGdiMkpxWldOMFhHNWNkRngwYjNCMGFXOXVjeUE5SUc5d2RHbHZibk1nZkh3Z2UzMDdYRzVjYmx4MFhIUjJZWElnZEhKaGJuTndiM0owTEZ4dVhHNWNkRngwWEhRdkx5QlZVa3dnZDJsMGFHOTFkQ0JoYm5ScExXTmhZMmhsSUhCaGNtRnRYRzVjZEZ4MFhIUmpZV05vWlZWU1RDeGNibHh1WEhSY2RGeDBMeThnVW1WemNHOXVjMlVnYUdWaFpHVnljMXh1WEhSY2RGeDBjbVZ6Y0c5dWMyVklaV0ZrWlhKelUzUnlhVzVuTEZ4dVhIUmNkRngwY21WemNHOXVjMlZJWldGa1pYSnpMRnh1WEc1Y2RGeDBYSFF2THlCMGFXMWxiM1YwSUdoaGJtUnNaVnh1WEhSY2RGeDBkR2x0Wlc5MWRGUnBiV1Z5TEZ4dVhHNWNkRngwWEhRdkx5QlZjbXdnWTJ4bFlXNTFjQ0IyWVhKY2JseDBYSFJjZEhWeWJFRnVZMmh2Y2l4Y2JseHVYSFJjZEZ4MEx5OGdVbVZ4ZFdWemRDQnpkR0YwWlNBb1ltVmpiMjFsY3lCbVlXeHpaU0IxY0c5dUlITmxibVFnWVc1a0lIUnlkV1VnZFhCdmJpQmpiMjF3YkdWMGFXOXVLVnh1WEhSY2RGeDBZMjl0Y0d4bGRHVmtMRnh1WEc1Y2RGeDBYSFF2THlCVWJ5QnJibTkzSUdsbUlHZHNiMkpoYkNCbGRtVnVkSE1nWVhKbElIUnZJR0psSUdScGMzQmhkR05vWldSY2JseDBYSFJjZEdacGNtVkhiRzlpWVd4ekxGeHVYRzVjZEZ4MFhIUXZMeUJNYjI5d0lIWmhjbWxoWW14bFhHNWNkRngwWEhScExGeHVYRzVjZEZ4MFhIUXZMeUIxYm1OaFkyaGxaQ0J3WVhKMElHOW1JSFJvWlNCMWNteGNibHgwWEhSY2RIVnVZMkZqYUdWa0xGeHVYRzVjZEZ4MFhIUXZMeUJEY21WaGRHVWdkR2hsSUdacGJtRnNJRzl3ZEdsdmJuTWdiMkpxWldOMFhHNWNkRngwWEhSeklEMGdhbEYxWlhKNUxtRnFZWGhUWlhSMWNDZ2dlMzBzSUc5d2RHbHZibk1nS1N4Y2JseHVYSFJjZEZ4MEx5OGdRMkZzYkdKaFkydHpJR052Ym5SbGVIUmNibHgwWEhSY2RHTmhiR3hpWVdOclEyOXVkR1Y0ZENBOUlITXVZMjl1ZEdWNGRDQjhmQ0J6TEZ4dVhHNWNkRngwWEhRdkx5QkRiMjUwWlhoMElHWnZjaUJuYkc5aVlXd2daWFpsYm5SeklHbHpJR05oYkd4aVlXTnJRMjl1ZEdWNGRDQnBaaUJwZENCcGN5QmhJRVJQVFNCdWIyUmxJRzl5SUdwUmRXVnllU0JqYjJ4c1pXTjBhVzl1WEc1Y2RGeDBYSFJuYkc5aVlXeEZkbVZ1ZEVOdmJuUmxlSFFnUFNCekxtTnZiblJsZUhRZ0ppWmNibHgwWEhSY2RGeDBLQ0JqWVd4c1ltRmphME52Ym5SbGVIUXVibTlrWlZSNWNHVWdmSHdnWTJGc2JHSmhZMnREYjI1MFpYaDBMbXB4ZFdWeWVTQXBJRDljYmx4MFhIUmNkRngwWEhScVVYVmxjbmtvSUdOaGJHeGlZV05yUTI5dWRHVjRkQ0FwSURwY2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblFzWEc1Y2JseDBYSFJjZEM4dklFUmxabVZ5Y21Wa2MxeHVYSFJjZEZ4MFpHVm1aWEp5WldRZ1BTQnFVWFZsY25rdVJHVm1aWEp5WldRb0tTeGNibHgwWEhSY2RHTnZiWEJzWlhSbFJHVm1aWEp5WldRZ1BTQnFVWFZsY25rdVEyRnNiR0poWTJ0ektDQmNJbTl1WTJVZ2JXVnRiM0o1WENJZ0tTeGNibHh1WEhSY2RGeDBMeThnVTNSaGRIVnpMV1JsY0dWdVpHVnVkQ0JqWVd4c1ltRmphM05jYmx4MFhIUmNkSE4wWVhSMWMwTnZaR1VnUFNCekxuTjBZWFIxYzBOdlpHVWdmSHdnZTMwc1hHNWNibHgwWEhSY2RDOHZJRWhsWVdSbGNuTWdLSFJvWlhrZ1lYSmxJSE5sYm5RZ1lXeHNJR0YwSUc5dVkyVXBYRzVjZEZ4MFhIUnlaWEYxWlhOMFNHVmhaR1Z5Y3lBOUlIdDlMRnh1WEhSY2RGeDBjbVZ4ZFdWemRFaGxZV1JsY25OT1lXMWxjeUE5SUh0OUxGeHVYRzVjZEZ4MFhIUXZMeUJFWldaaGRXeDBJR0ZpYjNKMElHMWxjM05oWjJWY2JseDBYSFJjZEhOMGNrRmliM0owSUQwZ1hDSmpZVzVqWld4bFpGd2lMRnh1WEc1Y2RGeDBYSFF2THlCR1lXdGxJSGhvY2x4dVhIUmNkRngwYW5GWVNGSWdQU0I3WEc1Y2RGeDBYSFJjZEhKbFlXUjVVM1JoZEdVNklEQXNYRzVjYmx4MFhIUmNkRngwTHk4Z1FuVnBiR1J6SUdobFlXUmxjbk1nYUdGemFIUmhZbXhsSUdsbUlHNWxaV1JsWkZ4dVhIUmNkRngwWEhSblpYUlNaWE53YjI1elpVaGxZV1JsY2pvZ1puVnVZM1JwYjI0b0lHdGxlU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnYldGMFkyZzdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUNGeVpYTndiMjV6WlVobFlXUmxjbk1nS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sU0dWaFpHVnljeUE5SUh0OU8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUNnZ2JXRjBZMmdnUFNCeWFHVmhaR1Z5Y3k1bGVHVmpLQ0J5WlhOd2IyNXpaVWhsWVdSbGNuTlRkSEpwYm1jZ0tTQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sU0dWaFpHVnljMXNnYldGMFkyaGJJREVnWFM1MGIweHZkMlZ5UTJGelpTZ3BJRjBnUFNCdFlYUmphRnNnTWlCZE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUnRZWFJqYUNBOUlISmxjM0J2Ym5ObFNHVmhaR1Z5YzFzZ2EyVjVMblJ2VEc5M1pYSkRZWE5sS0NrZ1hUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUcxaGRHTm9JRDA5SUc1MWJHd2dQeUJ1ZFd4c0lEb2diV0YwWTJnN1hHNWNkRngwWEhSY2RIMHNYRzVjYmx4MFhIUmNkRngwTHk4Z1VtRjNJSE4wY21sdVoxeHVYSFJjZEZ4MFhIUm5aWFJCYkd4U1pYTndiMjV6WlVobFlXUmxjbk02SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQmpiMjF3YkdWMFpXUWdQeUJ5WlhOd2IyNXpaVWhsWVdSbGNuTlRkSEpwYm1jZ09pQnVkV3hzTzF4dVhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkQzh2SUVOaFkyaGxjeUIwYUdVZ2FHVmhaR1Z5WEc1Y2RGeDBYSFJjZEhObGRGSmxjWFZsYzNSSVpXRmtaWEk2SUdaMWJtTjBhVzl1S0NCdVlXMWxMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUmNkRngwWEhScFppQW9JR052YlhCc1pYUmxaQ0E5UFNCdWRXeHNJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBibUZ0WlNBOUlISmxjWFZsYzNSSVpXRmtaWEp6VG1GdFpYTmJJRzVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0JkSUQxY2JseDBYSFJjZEZ4MFhIUmNkRngwY21WeGRXVnpkRWhsWVdSbGNuTk9ZVzFsYzFzZ2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElGMGdmSHdnYm1GdFpUdGNibHgwWEhSY2RGeDBYSFJjZEhKbGNYVmxjM1JJWldGa1pYSnpXeUJ1WVcxbElGMGdQU0IyWVd4MVpUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MEx5OGdUM1psY25KcFpHVnpJSEpsYzNCdmJuTmxJR052Ym5SbGJuUXRkSGx3WlNCb1pXRmtaWEpjYmx4MFhIUmNkRngwYjNabGNuSnBaR1ZOYVcxbFZIbHdaVG9nWm5WdVkzUnBiMjRvSUhSNWNHVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnUFQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE11YldsdFpWUjVjR1VnUFNCMGVYQmxPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUXZMeUJUZEdGMGRYTXRaR1Z3Wlc1a1pXNTBJR05oYkd4aVlXTnJjMXh1WEhSY2RGeDBYSFJ6ZEdGMGRYTkRiMlJsT2lCbWRXNWpkR2x2YmlnZ2JXRndJQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJqYjJSbE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JXRndJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NCamIyMXdiR1YwWldRZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnUlhobFkzVjBaU0IwYUdVZ1lYQndjbTl3Y21saGRHVWdZMkZzYkdKaFkydHpYRzVjZEZ4MFhIUmNkRngwWEhSY2RHcHhXRWhTTG1Gc2QyRjVjeWdnYldGd1d5QnFjVmhJVWk1emRHRjBkWE1nWFNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCTVlYcDVMV0ZrWkNCMGFHVWdibVYzSUdOaGJHeGlZV05yY3lCcGJpQmhJSGRoZVNCMGFHRjBJSEJ5WlhObGNuWmxjeUJ2YkdRZ2IyNWxjMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUm1iM0lnS0NCamIyUmxJR2x1SUcxaGNDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ6ZEdGMGRYTkRiMlJsV3lCamIyUmxJRjBnUFNCYklITjBZWFIxYzBOdlpHVmJJR052WkdVZ1hTd2diV0Z3V3lCamIyUmxJRjBnWFR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUXZMeUJEWVc1alpXd2dkR2hsSUhKbGNYVmxjM1JjYmx4MFhIUmNkRngwWVdKdmNuUTZJR1oxYm1OMGFXOXVLQ0J6ZEdGMGRYTlVaWGgwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFpoY2lCbWFXNWhiRlJsZUhRZ1BTQnpkR0YwZFhOVVpYaDBJSHg4SUhOMGNrRmliM0owTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnZEhKaGJuTndiM0owSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEhKaGJuTndiM0owTG1GaWIzSjBLQ0JtYVc1aGJGUmxlSFFnS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWkc5dVpTZ2dNQ3dnWm1sdVlXeFVaWGgwSUNrN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwN1hHNWNibHgwWEhRdkx5QkJkSFJoWTJnZ1pHVm1aWEp5WldSelhHNWNkRngwWkdWbVpYSnlaV1F1Y0hKdmJXbHpaU2dnYW5GWVNGSWdLVHRjYmx4dVhIUmNkQzh2SUVGa1pDQndjbTkwYjJOdmJDQnBaaUJ1YjNRZ2NISnZkbWxrWldRZ0tIQnlaV1pwYkhSbGNuTWdiV2xuYUhRZ1pYaHdaV04wSUdsMEtWeHVYSFJjZEM4dklFaGhibVJzWlNCbVlXeHplU0IxY213Z2FXNGdkR2hsSUhObGRIUnBibWR6SUc5aWFtVmpkQ0FvSXpFd01Ea3pPaUJqYjI1emFYTjBaVzVqZVNCM2FYUm9JRzlzWkNCemFXZHVZWFIxY21VcFhHNWNkRngwTHk4Z1YyVWdZV3h6YnlCMWMyVWdkR2hsSUhWeWJDQndZWEpoYldWMFpYSWdhV1lnWVhaaGFXeGhZbXhsWEc1Y2RGeDBjeTUxY213Z1BTQW9JQ2dnZFhKc0lIeDhJSE11ZFhKc0lIeDhJR3h2WTJGMGFXOXVMbWh5WldZZ0tTQXJJRndpWENJZ0tWeHVYSFJjZEZ4MExuSmxjR3hoWTJVb0lISndjbTkwYjJOdmJDd2diRzlqWVhScGIyNHVjSEp2ZEc5amIyd2dLeUJjSWk4dlhDSWdLVHRjYmx4dVhIUmNkQzh2SUVGc2FXRnpJRzFsZEdodlpDQnZjSFJwYjI0Z2RHOGdkSGx3WlNCaGN5QndaWElnZEdsamEyVjBJQ014TWpBd05GeHVYSFJjZEhNdWRIbHdaU0E5SUc5d2RHbHZibk11YldWMGFHOWtJSHg4SUc5d2RHbHZibk11ZEhsd1pTQjhmQ0J6TG0xbGRHaHZaQ0I4ZkNCekxuUjVjR1U3WEc1Y2JseDBYSFF2THlCRmVIUnlZV04wSUdSaGRHRlVlWEJsY3lCc2FYTjBYRzVjZEZ4MGN5NWtZWFJoVkhsd1pYTWdQU0FvSUhNdVpHRjBZVlI1Y0dVZ2ZId2dYQ0lxWENJZ0tTNTBiMHh2ZDJWeVEyRnpaU2dwTG0xaGRHTm9LQ0J5Ym05MGFIUnRiSGRvYVhSbElDa2dmSHdnV3lCY0lsd2lJRjA3WEc1Y2JseDBYSFF2THlCQklHTnliM056TFdSdmJXRnBiaUJ5WlhGMVpYTjBJR2x6SUdsdUlHOXlaR1Z5SUhkb1pXNGdkR2hsSUc5eWFXZHBiaUJrYjJWemJpZDBJRzFoZEdOb0lIUm9aU0JqZFhKeVpXNTBJRzl5YVdkcGJpNWNibHgwWEhScFppQW9JSE11WTNKdmMzTkViMjFoYVc0Z1BUMGdiblZzYkNBcElIdGNibHgwWEhSY2RIVnliRUZ1WTJodmNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lZVndpSUNrN1hHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9DQXRJREV4TENCRlpHZGxJREV5SUMwZ01UTmNibHgwWEhSY2RDOHZJRWxGSUhSb2NtOTNjeUJsZUdObGNIUnBiMjRnYjI0Z1lXTmpaWE56YVc1bklIUm9aU0JvY21WbUlIQnliM0JsY25SNUlHbG1JSFZ5YkNCcGN5QnRZV3htYjNKdFpXUXNYRzVjZEZ4MFhIUXZMeUJsTG1jdUlHaDBkSEE2THk5bGVHRnRjR3hsTG1OdmJUbzRNSGd2WEc1Y2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUjFjbXhCYm1Ob2IzSXVhSEpsWmlBOUlITXVkWEpzTzF4dVhHNWNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9DQXRJREV4SUc5dWJIbGNibHgwWEhSY2RGeDBMeThnUVc1amFHOXlKM01nYUc5emRDQndjbTl3WlhKMGVTQnBjMjRuZENCamIzSnlaV04wYkhrZ2MyVjBJSGRvWlc0Z2N5NTFjbXdnYVhNZ2NtVnNZWFJwZG1WY2JseDBYSFJjZEZ4MGRYSnNRVzVqYUc5eUxtaHlaV1lnUFNCMWNteEJibU5vYjNJdWFISmxaanRjYmx4MFhIUmNkRngwY3k1amNtOXpjMFJ2YldGcGJpQTlJRzl5YVdkcGJrRnVZMmh2Y2k1d2NtOTBiMk52YkNBcklGd2lMeTljSWlBcklHOXlhV2RwYmtGdVkyaHZjaTVvYjNOMElDRTlQVnh1WEhSY2RGeDBYSFJjZEhWeWJFRnVZMmh2Y2k1d2NtOTBiMk52YkNBcklGd2lMeTljSWlBcklIVnliRUZ1WTJodmNpNW9iM04wTzF4dVhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1NXWWdkR2hsY21VZ2FYTWdZVzRnWlhKeWIzSWdjR0Z5YzJsdVp5QjBhR1VnVlZKTUxDQmhjM04xYldVZ2FYUWdhWE1nWTNKdmMzTkViMjFoYVc0c1hHNWNkRngwWEhSY2RDOHZJR2wwSUdOaGJpQmlaU0J5WldwbFkzUmxaQ0JpZVNCMGFHVWdkSEpoYm5Od2IzSjBJR2xtSUdsMElHbHpJR2x1ZG1Gc2FXUmNibHgwWEhSY2RGeDBjeTVqY205emMwUnZiV0ZwYmlBOUlIUnlkV1U3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUTI5dWRtVnlkQ0JrWVhSaElHbG1JRzV2ZENCaGJISmxZV1I1SUdFZ2MzUnlhVzVuWEc1Y2RGeDBhV1lnS0NCekxtUmhkR0VnSmlZZ2N5NXdjbTlqWlhOelJHRjBZU0FtSmlCMGVYQmxiMllnY3k1a1lYUmhJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RGeDBjeTVrWVhSaElEMGdhbEYxWlhKNUxuQmhjbUZ0S0NCekxtUmhkR0VzSUhNdWRISmhaR2wwYVc5dVlXd2dLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJCY0hCc2VTQndjbVZtYVd4MFpYSnpYRzVjZEZ4MGFXNXpjR1ZqZEZCeVpXWnBiSFJsY25OUGNsUnlZVzV6Y0c5eWRITW9JSEJ5WldacGJIUmxjbk1zSUhNc0lHOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNibHgwWEhRdkx5QkpaaUJ5WlhGMVpYTjBJSGRoY3lCaFltOXlkR1ZrSUdsdWMybGtaU0JoSUhCeVpXWnBiSFJsY2l3Z2MzUnZjQ0IwYUdWeVpWeHVYSFJjZEdsbUlDZ2dZMjl0Y0d4bGRHVmtJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3B4V0VoU08xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGZGxJR05oYmlCbWFYSmxJR2RzYjJKaGJDQmxkbVZ1ZEhNZ1lYTWdiMllnYm05M0lHbG1JR0Z6YTJWa0lIUnZYRzVjZEZ4MEx5OGdSRzl1SjNRZ1ptbHlaU0JsZG1WdWRITWdhV1lnYWxGMVpYSjVMbVYyWlc1MElHbHpJSFZ1WkdWbWFXNWxaQ0JwYmlCaGJpQkJUVVF0ZFhOaFoyVWdjMk5sYm1GeWFXOGdLQ014TlRFeE9DbGNibHgwWEhSbWFYSmxSMnh2WW1Gc2N5QTlJR3BSZFdWeWVTNWxkbVZ1ZENBbUppQnpMbWRzYjJKaGJEdGNibHh1WEhSY2RDOHZJRmRoZEdOb0lHWnZjaUJoSUc1bGR5QnpaWFFnYjJZZ2NtVnhkV1Z6ZEhOY2JseDBYSFJwWmlBb0lHWnBjbVZIYkc5aVlXeHpJQ1ltSUdwUmRXVnllUzVoWTNScGRtVXJLeUE5UFQwZ01DQXBJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhUZEdGeWRGd2lJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVlhCd1pYSmpZWE5sSUhSb1pTQjBlWEJsWEc1Y2RGeDBjeTUwZVhCbElEMGdjeTUwZVhCbExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc1Y2JseDBYSFF2THlCRVpYUmxjbTFwYm1VZ2FXWWdjbVZ4ZFdWemRDQm9ZWE1nWTI5dWRHVnVkRnh1WEhSY2RITXVhR0Z6UTI5dWRHVnVkQ0E5SUNGeWJtOURiMjUwWlc1MExuUmxjM1FvSUhNdWRIbHdaU0FwTzF4dVhHNWNkRngwTHk4Z1UyRjJaU0IwYUdVZ1ZWSk1JR2x1SUdOaGMyVWdkMlVuY21VZ2RHOTVhVzVuSUhkcGRHZ2dkR2hsSUVsbUxVMXZaR2xtYVdWa0xWTnBibU5sWEc1Y2RGeDBMeThnWVc1a0wyOXlJRWxtTFU1dmJtVXRUV0YwWTJnZ2FHVmhaR1Z5SUd4aGRHVnlJRzl1WEc1Y2RGeDBMeThnVW1WdGIzWmxJR2hoYzJnZ2RHOGdjMmx0Y0d4cFpua2dkWEpzSUcxaGJtbHdkV3hoZEdsdmJseHVYSFJjZEdOaFkyaGxWVkpNSUQwZ2N5NTFjbXd1Y21Wd2JHRmpaU2dnY21oaGMyZ3NJRndpWENJZ0tUdGNibHh1WEhSY2RDOHZJRTF2Y21VZ2IzQjBhVzl1Y3lCb1lXNWtiR2x1WnlCbWIzSWdjbVZ4ZFdWemRITWdkMmwwYUNCdWJ5QmpiMjUwWlc1MFhHNWNkRngwYVdZZ0tDQWhjeTVvWVhORGIyNTBaVzUwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJTWlcxbGJXSmxjaUIwYUdVZ2FHRnphQ0J6YnlCM1pTQmpZVzRnY0hWMElHbDBJR0poWTJ0Y2JseDBYSFJjZEhWdVkyRmphR1ZrSUQwZ2N5NTFjbXd1YzJ4cFkyVW9JR05oWTJobFZWSk1MbXhsYm1kMGFDQXBPMXh1WEc1Y2RGeDBYSFF2THlCSlppQmtZWFJoSUdseklHRjJZV2xzWVdKc1pTd2dZWEJ3Wlc1a0lHUmhkR0VnZEc4Z2RYSnNYRzVjZEZ4MFhIUnBaaUFvSUhNdVpHRjBZU0FwSUh0Y2JseDBYSFJjZEZ4MFkyRmphR1ZWVWt3Z0t6MGdLQ0J5Y1hWbGNua3VkR1Z6ZENnZ1kyRmphR1ZWVWt3Z0tTQS9JRndpSmx3aUlEb2dYQ0kvWENJZ0tTQXJJSE11WkdGMFlUdGNibHh1WEhSY2RGeDBYSFF2THlBak9UWTRNam9nY21WdGIzWmxJR1JoZEdFZ2MyOGdkR2hoZENCcGRDZHpJRzV2ZENCMWMyVmtJR2x1SUdGdUlHVjJaVzUwZFdGc0lISmxkSEo1WEc1Y2RGeDBYSFJjZEdSbGJHVjBaU0J6TG1SaGRHRTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVGa1pDQnZjaUIxY0dSaGRHVWdZVzUwYVMxallXTm9aU0J3WVhKaGJTQnBaaUJ1WldWa1pXUmNibHgwWEhSY2RHbG1JQ2dnY3k1allXTm9aU0E5UFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSY2RHTmhZMmhsVlZKTUlEMGdZMkZqYUdWVlVrd3VjbVZ3YkdGalpTZ2djbUZ1ZEdsRFlXTm9aU3dnWENJa01Wd2lJQ2s3WEc1Y2RGeDBYSFJjZEhWdVkyRmphR1ZrSUQwZ0tDQnljWFZsY25rdWRHVnpkQ2dnWTJGamFHVlZVa3dnS1NBL0lGd2lKbHdpSURvZ1hDSS9YQ0lnS1NBcklGd2lYejFjSWlBcklDZ2dibTl1WTJVckt5QXBJQ3NnZFc1allXTm9aV1E3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGQjFkQ0JvWVhOb0lHRnVaQ0JoYm5ScExXTmhZMmhsSUc5dUlIUm9aU0JWVWt3Z2RHaGhkQ0IzYVd4c0lHSmxJSEpsY1hWbGMzUmxaQ0FvWjJndE1UY3pNaWxjYmx4MFhIUmNkSE11ZFhKc0lEMGdZMkZqYUdWVlVrd2dLeUIxYm1OaFkyaGxaRHRjYmx4dVhIUmNkQzh2SUVOb1lXNW5aU0FuSlRJd0p5QjBieUFuS3ljZ2FXWWdkR2hwY3lCcGN5QmxibU52WkdWa0lHWnZjbTBnWW05a2VTQmpiMjUwWlc1MElDaG5hQzB5TmpVNEtWeHVYSFJjZEgwZ1pXeHpaU0JwWmlBb0lITXVaR0YwWVNBbUppQnpMbkJ5YjJObGMzTkVZWFJoSUNZbVhHNWNkRngwWEhRb0lITXVZMjl1ZEdWdWRGUjVjR1VnZkh3Z1hDSmNJaUFwTG1sdVpHVjRUMllvSUZ3aVlYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrWENJZ0tTQTlQVDBnTUNBcElIdGNibHgwWEhSY2RITXVaR0YwWVNBOUlITXVaR0YwWVM1eVpYQnNZV05sS0NCeU1qQXNJRndpSzF3aUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVMlYwSUhSb1pTQkpaaTFOYjJScFptbGxaQzFUYVc1alpTQmhibVF2YjNJZ1NXWXRUbTl1WlMxTllYUmphQ0JvWldGa1pYSXNJR2xtSUdsdUlHbG1UVzlrYVdacFpXUWdiVzlrWlM1Y2JseDBYSFJwWmlBb0lITXVhV1pOYjJScFptbGxaQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxteGhjM1JOYjJScFptbGxaRnNnWTJGamFHVlZVa3dnWFNBcElIdGNibHgwWEhSY2RGeDBhbkZZU0ZJdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2lnZ1hDSkpaaTFOYjJScFptbGxaQzFUYVc1alpWd2lMQ0JxVVhWbGNua3ViR0Z6ZEUxdlpHbG1hV1ZrV3lCallXTm9aVlZTVENCZElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVsZEdGbld5QmpZV05vWlZWU1RDQmRJQ2tnZTF4dVhIUmNkRngwWEhScWNWaElVaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLQ0JjSWtsbUxVNXZibVV0VFdGMFkyaGNJaXdnYWxGMVpYSjVMbVYwWVdkYklHTmhZMmhsVlZKTUlGMGdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJUWlhRZ2RHaGxJR052Y25KbFkzUWdhR1ZoWkdWeUxDQnBaaUJrWVhSaElHbHpJR0psYVc1bklITmxiblJjYmx4MFhIUnBaaUFvSUhNdVpHRjBZU0FtSmlCekxtaGhjME52Ym5SbGJuUWdKaVlnY3k1amIyNTBaVzUwVkhsd1pTQWhQVDBnWm1Gc2MyVWdmSHdnYjNCMGFXOXVjeTVqYjI1MFpXNTBWSGx3WlNBcElIdGNibHgwWEhSY2RHcHhXRWhTTG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvSUZ3aVEyOXVkR1Z1ZEMxVWVYQmxYQ0lzSUhNdVkyOXVkR1Z1ZEZSNWNHVWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJUWlhRZ2RHaGxJRUZqWTJWd2RITWdhR1ZoWkdWeUlHWnZjaUIwYUdVZ2MyVnlkbVZ5TENCa1pYQmxibVJwYm1jZ2IyNGdkR2hsSUdSaGRHRlVlWEJsWEc1Y2RGeDBhbkZZU0ZJdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loY2JseDBYSFJjZEZ3aVFXTmpaWEIwWENJc1hHNWNkRngwWEhSekxtUmhkR0ZVZVhCbGMxc2dNQ0JkSUNZbUlITXVZV05qWlhCMGMxc2djeTVrWVhSaFZIbHdaWE5iSURBZ1hTQmRJRDljYmx4MFhIUmNkRngwY3k1aFkyTmxjSFJ6V3lCekxtUmhkR0ZVZVhCbGMxc2dNQ0JkSUYwZ0sxeHVYSFJjZEZ4MFhIUmNkQ2dnY3k1a1lYUmhWSGx3WlhOYklEQWdYU0FoUFQwZ1hDSXFYQ0lnUHlCY0lpd2dYQ0lnS3lCaGJHeFVlWEJsY3lBcklGd2lPeUJ4UFRBdU1ERmNJaUE2SUZ3aVhDSWdLU0E2WEc1Y2RGeDBYSFJjZEhNdVlXTmpaWEIwYzFzZ1hDSXFYQ0lnWFZ4dVhIUmNkQ2s3WEc1Y2JseDBYSFF2THlCRGFHVmpheUJtYjNJZ2FHVmhaR1Z5Y3lCdmNIUnBiMjVjYmx4MFhIUm1iM0lnS0NCcElHbHVJSE11YUdWaFpHVnljeUFwSUh0Y2JseDBYSFJjZEdweFdFaFNMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9JR2tzSUhNdWFHVmhaR1Z5YzFzZ2FTQmRJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUVd4c2IzY2dZM1Z6ZEc5dElHaGxZV1JsY25NdmJXbHRaWFI1Y0dWeklHRnVaQ0JsWVhKc2VTQmhZbTl5ZEZ4dVhIUmNkR2xtSUNnZ2N5NWlaV1p2Y21WVFpXNWtJQ1ltWEc1Y2RGeDBYSFFvSUhNdVltVm1iM0psVTJWdVpDNWpZV3hzS0NCallXeHNZbUZqYTBOdmJuUmxlSFFzSUdweFdFaFNMQ0J6SUNrZ1BUMDlJR1poYkhObElIeDhJR052YlhCc1pYUmxaQ0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJCWW05eWRDQnBaaUJ1YjNRZ1pHOXVaU0JoYkhKbFlXUjVJR0Z1WkNCeVpYUjFjbTVjYmx4MFhIUmNkSEpsZEhWeWJpQnFjVmhJVWk1aFltOXlkQ2dwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVGaWIzSjBhVzVuSUdseklHNXZJR3h2Ym1kbGNpQmhJR05oYm1ObGJHeGhkR2x2Ymx4dVhIUmNkSE4wY2tGaWIzSjBJRDBnWENKaFltOXlkRndpTzF4dVhHNWNkRngwTHk4Z1NXNXpkR0ZzYkNCallXeHNZbUZqYTNNZ2IyNGdaR1ZtWlhKeVpXUnpYRzVjZEZ4MFkyOXRjR3hsZEdWRVpXWmxjbkpsWkM1aFpHUW9JSE11WTI5dGNHeGxkR1VnS1R0Y2JseDBYSFJxY1ZoSVVpNWtiMjVsS0NCekxuTjFZMk5sYzNNZ0tUdGNibHgwWEhScWNWaElVaTVtWVdsc0tDQnpMbVZ5Y205eUlDazdYRzVjYmx4MFhIUXZMeUJIWlhRZ2RISmhibk53YjNKMFhHNWNkRngwZEhKaGJuTndiM0owSUQwZ2FXNXpjR1ZqZEZCeVpXWnBiSFJsY25OUGNsUnlZVzV6Y0c5eWRITW9JSFJ5WVc1emNHOXlkSE1zSUhNc0lHOXdkR2x2Ym5Nc0lHcHhXRWhTSUNrN1hHNWNibHgwWEhRdkx5QkpaaUJ1YnlCMGNtRnVjM0J2Y25Rc0lIZGxJR0YxZEc4dFlXSnZjblJjYmx4MFhIUnBaaUFvSUNGMGNtRnVjM0J2Y25RZ0tTQjdYRzVjZEZ4MFhIUmtiMjVsS0NBdE1Td2dYQ0pPYnlCVWNtRnVjM0J2Y25SY0lpQXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhScWNWaElVaTV5WldGa2VWTjBZWFJsSUQwZ01UdGNibHh1WEhSY2RGeDBMeThnVTJWdVpDQm5iRzlpWVd3Z1pYWmxiblJjYmx4MFhIUmNkR2xtSUNnZ1ptbHlaVWRzYjJKaGJITWdLU0I3WEc1Y2RGeDBYSFJjZEdkc2IySmhiRVYyWlc1MFEyOXVkR1Y0ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhUWlc1a1hDSXNJRnNnYW5GWVNGSXNJSE1nWFNBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJKWmlCeVpYRjFaWE4wSUhkaGN5QmhZbTl5ZEdWa0lHbHVjMmxrWlNCaGFtRjRVMlZ1WkN3Z2MzUnZjQ0IwYUdWeVpWeHVYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCcWNWaElVanRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1ZHbHRaVzkxZEZ4dVhIUmNkRngwYVdZZ0tDQnpMbUZ6ZVc1aklDWW1JSE11ZEdsdFpXOTFkQ0ErSURBZ0tTQjdYRzVjZEZ4MFhIUmNkSFJwYldWdmRYUlVhVzFsY2lBOUlIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhScWNWaElVaTVoWW05eWRDZ2dYQ0owYVcxbGIzVjBYQ0lnS1R0Y2JseDBYSFJjZEZ4MGZTd2djeTUwYVcxbGIzVjBJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhSeWVTQjdYRzVjZEZ4MFhIUmNkR052YlhCc1pYUmxaQ0E5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFIwY21GdWMzQnZjblF1YzJWdVpDZ2djbVZ4ZFdWemRFaGxZV1JsY25Nc0lHUnZibVVnS1R0Y2JseDBYSFJjZEgwZ1kyRjBZMmdnS0NCbElDa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklGSmxkR2h5YjNjZ2NHOXpkQzFqYjIxd2JHVjBhVzl1SUdWNFkyVndkR2x2Ym5OY2JseDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2JHVjBaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBkR2h5YjNjZ1pUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEM4dklGQnliM0JoWjJGMFpTQnZkR2hsY25NZ1lYTWdjbVZ6ZFd4MGMxeHVYSFJjZEZ4MFhIUmtiMjVsS0NBdE1Td2daU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVOaGJHeGlZV05ySUdadmNpQjNhR1Z1SUdWMlpYSjVkR2hwYm1jZ2FYTWdaRzl1WlZ4dVhIUmNkR1oxYm1OMGFXOXVJR1J2Ym1Vb0lITjBZWFIxY3l3Z2JtRjBhWFpsVTNSaGRIVnpWR1Y0ZEN3Z2NtVnpjRzl1YzJWekxDQm9aV0ZrWlhKeklDa2dlMXh1WEhSY2RGeDBkbUZ5SUdselUzVmpZMlZ6Y3l3Z2MzVmpZMlZ6Y3l3Z1pYSnliM0lzSUhKbGMzQnZibk5sTENCdGIyUnBabWxsWkN4Y2JseDBYSFJjZEZ4MGMzUmhkSFZ6VkdWNGRDQTlJRzVoZEdsMlpWTjBZWFIxYzFSbGVIUTdYRzVjYmx4MFhIUmNkQzh2SUVsbmJtOXlaU0J5WlhCbFlYUWdhVzUyYjJOaGRHbHZibk5jYmx4MFhIUmNkR2xtSUNnZ1kyOXRjR3hsZEdWa0lDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR052YlhCc1pYUmxaQ0E5SUhSeWRXVTdYRzVjYmx4MFhIUmNkQzh2SUVOc1pXRnlJSFJwYldWdmRYUWdhV1lnYVhRZ1pYaHBjM1J6WEc1Y2RGeDBYSFJwWmlBb0lIUnBiV1Z2ZFhSVWFXMWxjaUFwSUh0Y2JseDBYSFJjZEZ4MGQybHVaRzkzTG1Oc1pXRnlWR2x0Wlc5MWRDZ2dkR2x0Wlc5MWRGUnBiV1Z5SUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRVJsY21WbVpYSmxibU5sSUhSeVlXNXpjRzl5ZENCbWIzSWdaV0Z5YkhrZ1oyRnlZbUZuWlNCamIyeHNaV04wYVc5dVhHNWNkRngwWEhRdkx5QW9ibThnYldGMGRHVnlJR2h2ZHlCc2IyNW5JSFJvWlNCcWNWaElVaUJ2WW1wbFkzUWdkMmxzYkNCaVpTQjFjMlZrS1Z4dVhIUmNkRngwZEhKaGJuTndiM0owSUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzVjZEZ4MFhIUXZMeUJEWVdOb1pTQnlaWE53YjI1elpTQm9aV0ZrWlhKelhHNWNkRngwWEhSeVpYTndiMjV6WlVobFlXUmxjbk5UZEhKcGJtY2dQU0JvWldGa1pYSnpJSHg4SUZ3aVhDSTdYRzVjYmx4MFhIUmNkQzh2SUZObGRDQnlaV0ZrZVZOMFlYUmxYRzVjZEZ4MFhIUnFjVmhJVWk1eVpXRmtlVk4wWVhSbElEMGdjM1JoZEhWeklENGdNQ0EvSURRZ09pQXdPMXh1WEc1Y2RGeDBYSFF2THlCRVpYUmxjbTFwYm1VZ2FXWWdjM1ZqWTJWemMyWjFiRnh1WEhSY2RGeDBhWE5UZFdOalpYTnpJRDBnYzNSaGRIVnpJRDQ5SURJd01DQW1KaUJ6ZEdGMGRYTWdQQ0F6TURBZ2ZId2djM1JoZEhWeklEMDlQU0F6TURRN1hHNWNibHgwWEhSY2RDOHZJRWRsZENCeVpYTndiMjV6WlNCa1lYUmhYRzVjZEZ4MFhIUnBaaUFvSUhKbGMzQnZibk5sY3lBcElIdGNibHgwWEhSY2RGeDBjbVZ6Y0c5dWMyVWdQU0JoYW1GNFNHRnVaR3hsVW1WemNHOXVjMlZ6S0NCekxDQnFjVmhJVWl3Z2NtVnpjRzl1YzJWeklDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVOdmJuWmxjblFnYm04Z2JXRjBkR1Z5SUhkb1lYUWdLSFJvWVhRZ2QyRjVJSEpsYzNCdmJuTmxXRmhZSUdacFpXeGtjeUJoY21VZ1lXeDNZWGx6SUhObGRDbGNibHgwWEhSY2RISmxjM0J2Ym5ObElEMGdZV3BoZUVOdmJuWmxjblFvSUhNc0lISmxjM0J2Ym5ObExDQnFjVmhJVWl3Z2FYTlRkV05qWlhOeklDazdYRzVjYmx4MFhIUmNkQzh2SUVsbUlITjFZMk5sYzNObWRXd3NJR2hoYm1Sc1pTQjBlWEJsSUdOb1lXbHVhVzVuWEc1Y2RGeDBYSFJwWmlBb0lHbHpVM1ZqWTJWemN5QXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlRaWFFnZEdobElFbG1MVTF2WkdsbWFXVmtMVk5wYm1ObElHRnVaQzl2Y2lCSlppMU9iMjVsTFUxaGRHTm9JR2hsWVdSbGNpd2dhV1lnYVc0Z2FXWk5iMlJwWm1sbFpDQnRiMlJsTGx4dVhIUmNkRngwWEhScFppQW9JSE11YVdaTmIyUnBabWxsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJ0YjJScFptbGxaQ0E5SUdweFdFaFNMbWRsZEZKbGMzQnZibk5sU0dWaFpHVnlLQ0JjSWt4aGMzUXRUVzlrYVdacFpXUmNJaUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYlc5a2FXWnBaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJxVVhWbGNua3ViR0Z6ZEUxdlpHbG1hV1ZrV3lCallXTm9aVlZTVENCZElEMGdiVzlrYVdacFpXUTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RHMXZaR2xtYVdWa0lEMGdhbkZZU0ZJdVoyVjBVbVZ6Y0c5dWMyVklaV0ZrWlhJb0lGd2laWFJoWjF3aUlDazdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQnRiMlJwWm1sbFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1bGRHRm5XeUJqWVdOb1pWVlNUQ0JkSUQwZ2JXOWthV1pwWldRN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdhV1lnYm04Z1kyOXVkR1Z1ZEZ4dVhIUmNkRngwWEhScFppQW9JSE4wWVhSMWN5QTlQVDBnTWpBMElIeDhJSE11ZEhsd1pTQTlQVDBnWENKSVJVRkVYQ0lnS1NCN1hHNWNkRngwWEhSY2RGeDBjM1JoZEhWelZHVjRkQ0E5SUZ3aWJtOWpiMjUwWlc1MFhDSTdYRzVjYmx4MFhIUmNkRngwTHk4Z2FXWWdibTkwSUcxdlpHbG1hV1ZrWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lITjBZWFIxY3lBOVBUMGdNekEwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSE4wWVhSMWMxUmxlSFFnUFNCY0ltNXZkRzF2WkdsbWFXVmtYQ0k3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnZDJVZ2FHRjJaU0JrWVhSaExDQnNaWFFuY3lCamIyNTJaWEowSUdsMFhHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBjM1JoZEhWelZHVjRkQ0E5SUhKbGMzQnZibk5sTG5OMFlYUmxPMXh1WEhSY2RGeDBYSFJjZEhOMVkyTmxjM01nUFNCeVpYTndiMjV6WlM1a1lYUmhPMXh1WEhSY2RGeDBYSFJjZEdWeWNtOXlJRDBnY21WemNHOXVjMlV1WlhKeWIzSTdYRzVjZEZ4MFhIUmNkRngwYVhOVGRXTmpaWE56SUQwZ0lXVnljbTl5TzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhSY2RDOHZJRVY0ZEhKaFkzUWdaWEp5YjNJZ1puSnZiU0J6ZEdGMGRYTlVaWGgwSUdGdVpDQnViM0p0WVd4cGVtVWdabTl5SUc1dmJpMWhZbTl5ZEhOY2JseDBYSFJjZEZ4MFpYSnliM0lnUFNCemRHRjBkWE5VWlhoME8xeHVYSFJjZEZ4MFhIUnBaaUFvSUhOMFlYUjFjeUI4ZkNBaGMzUmhkSFZ6VkdWNGRDQXBJSHRjYmx4MFhIUmNkRngwWEhSemRHRjBkWE5VWlhoMElEMGdYQ0psY25KdmNsd2lPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2djM1JoZEhWeklEd2dNQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSE4wWVhSMWN5QTlJREE3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZObGRDQmtZWFJoSUdadmNpQjBhR1VnWm1GclpTQjRhSElnYjJKcVpXTjBYRzVjZEZ4MFhIUnFjVmhJVWk1emRHRjBkWE1nUFNCemRHRjBkWE03WEc1Y2RGeDBYSFJxY1ZoSVVpNXpkR0YwZFhOVVpYaDBJRDBnS0NCdVlYUnBkbVZUZEdGMGRYTlVaWGgwSUh4OElITjBZWFIxYzFSbGVIUWdLU0FySUZ3aVhDSTdYRzVjYmx4MFhIUmNkQzh2SUZOMVkyTmxjM012UlhKeWIzSmNibHgwWEhSY2RHbG1JQ2dnYVhOVGRXTmpaWE56SUNrZ2UxeHVYSFJjZEZ4MFhIUmtaV1psY25KbFpDNXlaWE52YkhabFYybDBhQ2dnWTJGc2JHSmhZMnREYjI1MFpYaDBMQ0JiSUhOMVkyTmxjM01zSUhOMFlYUjFjMVJsZUhRc0lHcHhXRWhTSUYwZ0tUdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHUmxabVZ5Y21Wa0xuSmxhbVZqZEZkcGRHZ29JR05oYkd4aVlXTnJRMjl1ZEdWNGRDd2dXeUJxY1ZoSVVpd2djM1JoZEhWelZHVjRkQ3dnWlhKeWIzSWdYU0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlRkR0YwZFhNdFpHVndaVzVrWlc1MElHTmhiR3hpWVdOcmMxeHVYSFJjZEZ4MGFuRllTRkl1YzNSaGRIVnpRMjlrWlNnZ2MzUmhkSFZ6UTI5a1pTQXBPMXh1WEhSY2RGeDBjM1JoZEhWelEyOWtaU0E5SUhWdVpHVm1hVzVsWkR0Y2JseHVYSFJjZEZ4MGFXWWdLQ0JtYVhKbFIyeHZZbUZzY3lBcElIdGNibHgwWEhSY2RGeDBaMnh2WW1Gc1JYWmxiblJEYjI1MFpYaDBMblJ5YVdkblpYSW9JR2x6VTNWalkyVnpjeUEvSUZ3aVlXcGhlRk4xWTJObGMzTmNJaUE2SUZ3aVlXcGhlRVZ5Y205eVhDSXNYRzVjZEZ4MFhIUmNkRngwV3lCcWNWaElVaXdnY3l3Z2FYTlRkV05qWlhOeklEOGdjM1ZqWTJWemN5QTZJR1Z5Y205eUlGMGdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1EyOXRjR3hsZEdWY2JseDBYSFJjZEdOdmJYQnNaWFJsUkdWbVpYSnlaV1F1Wm1seVpWZHBkR2dvSUdOaGJHeGlZV05yUTI5dWRHVjRkQ3dnV3lCcWNWaElVaXdnYzNSaGRIVnpWR1Y0ZENCZElDazdYRzVjYmx4MFhIUmNkR2xtSUNnZ1ptbHlaVWRzYjJKaGJITWdLU0I3WEc1Y2RGeDBYSFJjZEdkc2IySmhiRVYyWlc1MFEyOXVkR1Y0ZEM1MGNtbG5aMlZ5S0NCY0ltRnFZWGhEYjIxd2JHVjBaVndpTENCYklHcHhXRWhTTENCeklGMGdLVHRjYmx4dVhIUmNkRngwWEhRdkx5QklZVzVrYkdVZ2RHaGxJR2RzYjJKaGJDQkJTa0ZZSUdOdmRXNTBaWEpjYmx4MFhIUmNkRngwYVdZZ0tDQWhLQ0F0TFdwUmRXVnllUzVoWTNScGRtVWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1ZEhKcFoyZGxjaWdnWENKaGFtRjRVM1J2Y0Z3aUlDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2FuRllTRkk3WEc1Y2RIMHNYRzVjYmx4MFoyVjBTbE5QVGpvZ1puVnVZM1JwYjI0b0lIVnliQ3dnWkdGMFlTd2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1blpYUW9JSFZ5YkN3Z1pHRjBZU3dnWTJGc2JHSmhZMnNzSUZ3aWFuTnZibHdpSUNrN1hHNWNkSDBzWEc1Y2JseDBaMlYwVTJOeWFYQjBPaUJtZFc1amRHbHZiaWdnZFhKc0xDQmpZV3hzWW1GamF5QXBJSHRjYmx4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG1kbGRDZ2dkWEpzTENCMWJtUmxabWx1WldRc0lHTmhiR3hpWVdOckxDQmNJbk5qY21sd2RGd2lJQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVhbEYxWlhKNUxtVmhZMmdvSUZzZ1hDSm5aWFJjSWl3Z1hDSndiM04wWENJZ1hTd2dablZ1WTNScGIyNG9JR2tzSUcxbGRHaHZaQ0FwSUh0Y2JseDBhbEYxWlhKNVd5QnRaWFJvYjJRZ1hTQTlJR1oxYm1OMGFXOXVLQ0IxY213c0lHUmhkR0VzSUdOaGJHeGlZV05yTENCMGVYQmxJQ2tnZTF4dVhHNWNkRngwTHk4Z1UyaHBablFnWVhKbmRXMWxiblJ6SUdsbUlHUmhkR0VnWVhKbmRXMWxiblFnZDJGeklHOXRhWFIwWldSY2JseDBYSFJwWmlBb0lHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQmtZWFJoSUNrZ0tTQjdYRzVjZEZ4MFhIUjBlWEJsSUQwZ2RIbHdaU0I4ZkNCallXeHNZbUZqYXp0Y2JseDBYSFJjZEdOaGJHeGlZV05ySUQwZ1pHRjBZVHRjYmx4MFhIUmNkR1JoZEdFZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdWR2hsSUhWeWJDQmpZVzRnWW1VZ1lXNGdiM0IwYVc5dWN5QnZZbXBsWTNRZ0tIZG9hV05vSUhSb1pXNGdiWFZ6ZENCb1lYWmxJQzUxY213cFhHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNWhhbUY0S0NCcVVYVmxjbmt1WlhoMFpXNWtLQ0I3WEc1Y2RGeDBYSFIxY213NklIVnliQ3hjYmx4MFhIUmNkSFI1Y0dVNklHMWxkR2h2WkN4Y2JseDBYSFJjZEdSaGRHRlVlWEJsT2lCMGVYQmxMRnh1WEhSY2RGeDBaR0YwWVRvZ1pHRjBZU3hjYmx4MFhIUmNkSE4xWTJObGMzTTZJR05oYkd4aVlXTnJYRzVjZEZ4MGZTd2dhbEYxWlhKNUxtbHpVR3hoYVc1UFltcGxZM1FvSUhWeWJDQXBJQ1ltSUhWeWJDQXBJQ2s3WEc1Y2RIMDdYRzU5SUNrN1hHNWNibHh1YWxGMVpYSjVMbDlsZG1Gc1ZYSnNJRDBnWm5WdVkzUnBiMjRvSUhWeWJDQXBJSHRjYmx4MGNtVjBkWEp1SUdwUmRXVnllUzVoYW1GNEtDQjdYRzVjZEZ4MGRYSnNPaUIxY213c1hHNWNibHgwWEhRdkx5Qk5ZV3RsSUhSb2FYTWdaWGh3YkdsamFYUXNJSE5wYm1ObElIVnpaWElnWTJGdUlHOTJaWEp5YVdSbElIUm9hWE1nZEdoeWIzVm5hQ0JoYW1GNFUyVjBkWEFnS0NNeE1USTJOQ2xjYmx4MFhIUjBlWEJsT2lCY0lrZEZWRndpTEZ4dVhIUmNkR1JoZEdGVWVYQmxPaUJjSW5OamNtbHdkRndpTEZ4dVhIUmNkR05oWTJobE9pQjBjblZsTEZ4dVhIUmNkR0Z6ZVc1ak9pQm1ZV3h6WlN4Y2JseDBYSFJuYkc5aVlXdzZJR1poYkhObExGeHVYSFJjZEZ3aWRHaHliM2R6WENJNklIUnlkV1ZjYmx4MGZTQXBPMXh1ZlR0Y2JseHVYRzVxVVhWbGNua3VabTR1WlhoMFpXNWtLQ0I3WEc1Y2RIZHlZWEJCYkd3NklHWjFibU4wYVc5dUtDQm9kRzFzSUNrZ2UxeHVYSFJjZEhaaGNpQjNjbUZ3TzF4dVhHNWNkRngwYVdZZ0tDQjBhR2x6V3lBd0lGMGdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQm9kRzFzSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkR2gwYld3Z1BTQm9kRzFzTG1OaGJHd29JSFJvYVhOYklEQWdYU0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlVhR1VnWld4bGJXVnVkSE1nZEc4Z2QzSmhjQ0IwYUdVZ2RHRnlaMlYwSUdGeWIzVnVaRnh1WEhSY2RGeDBkM0poY0NBOUlHcFJkV1Z5ZVNnZ2FIUnRiQ3dnZEdocGMxc2dNQ0JkTG05M2JtVnlSRzlqZFcxbGJuUWdLUzVsY1NnZ01DQXBMbU5zYjI1bEtDQjBjblZsSUNrN1hHNWNibHgwWEhSY2RHbG1JQ2dnZEdocGMxc2dNQ0JkTG5CaGNtVnVkRTV2WkdVZ0tTQjdYRzVjZEZ4MFhIUmNkSGR5WVhBdWFXNXpaWEowUW1WbWIzSmxLQ0IwYUdseld5QXdJRjBnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGQzSmhjQzV0WVhBb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ1pXeGxiU0E5SUhSb2FYTTdYRzVjYmx4MFhIUmNkRngwZDJocGJHVWdLQ0JsYkdWdExtWnBjbk4wUld4bGJXVnVkRU5vYVd4a0lDa2dlMXh1WEhSY2RGeDBYSFJjZEdWc1pXMGdQU0JsYkdWdExtWnBjbk4wUld4bGJXVnVkRU5vYVd4a08xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJR1ZzWlcwN1hHNWNkRngwWEhSOUlDa3VZWEJ3Wlc1a0tDQjBhR2x6SUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDBzWEc1Y2JseDBkM0poY0VsdWJtVnlPaUJtZFc1amRHbHZiaWdnYUhSdGJDQXBJSHRjYmx4MFhIUnBaaUFvSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCb2RHMXNJQ2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlnZ2FTQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVLQ0IwYUdseklDa3VkM0poY0VsdWJtVnlLQ0JvZEcxc0xtTmhiR3dvSUhSb2FYTXNJR2tnS1NBcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkbUZ5SUhObGJHWWdQU0JxVVhWbGNua29JSFJvYVhNZ0tTeGNibHgwWEhSY2RGeDBZMjl1ZEdWdWRITWdQU0J6Wld4bUxtTnZiblJsYm5SektDazdYRzVjYmx4MFhIUmNkR2xtSUNnZ1kyOXVkR1Z1ZEhNdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MFhIUmpiMjUwWlc1MGN5NTNjbUZ3UVd4c0tDQm9kRzFzSUNrN1hHNWNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RITmxiR1l1WVhCd1pXNWtLQ0JvZEcxc0lDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQXBPMXh1WEhSOUxGeHVYRzVjZEhkeVlYQTZJR1oxYm1OMGFXOXVLQ0JvZEcxc0lDa2dlMXh1WEhSY2RIWmhjaUJwYzBaMWJtTjBhVzl1SUQwZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lHaDBiV3dnS1R0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NCcElDa2dlMXh1WEhSY2RGeDBhbEYxWlhKNUtDQjBhR2x6SUNrdWQzSmhjRUZzYkNnZ2FYTkdkVzVqZEdsdmJpQS9JR2gwYld3dVkyRnNiQ2dnZEdocGN5d2dhU0FwSURvZ2FIUnRiQ0FwTzF4dVhIUmNkSDBnS1R0Y2JseDBmU3hjYmx4dVhIUjFibmR5WVhBNklHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUjBhR2x6TG5CaGNtVnVkQ2dnYzJWc1pXTjBiM0lnS1M1dWIzUW9JRndpWW05a2VWd2lJQ2t1WldGamFDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJxVVhWbGNua29JSFJvYVhNZ0tTNXlaWEJzWVdObFYybDBhQ2dnZEdocGN5NWphR2xzWkU1dlpHVnpJQ2s3WEc1Y2RGeDBmU0FwTzF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlYRzU5SUNrN1hHNWNibHh1YWxGMVpYSjVMbVY0Y0hJdWNITmxkV1J2Y3k1b2FXUmtaVzRnUFNCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBjbVYwZFhKdUlDRnFVWFZsY25rdVpYaHdjaTV3YzJWMVpHOXpMblpwYzJsaWJHVW9JR1ZzWlcwZ0tUdGNibjA3WEc1cVVYVmxjbmt1Wlhod2NpNXdjMlYxWkc5ekxuWnBjMmxpYkdVZ1BTQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwY21WMGRYSnVJQ0VoS0NCbGJHVnRMbTltWm5ObGRGZHBaSFJvSUh4OElHVnNaVzB1YjJabWMyVjBTR1ZwWjJoMElIeDhJR1ZzWlcwdVoyVjBRMnhwWlc1MFVtVmpkSE1vS1M1c1pXNW5kR2dnS1R0Y2JuMDdYRzVjYmx4dVhHNWNibXBSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM011ZUdoeUlEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RIUnllU0I3WEc1Y2RGeDBjbVYwZFhKdUlHNWxkeUIzYVc1a2IzY3VXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNibHgwZlNCallYUmphQ0FvSUdVZ0tTQjdmVnh1ZlR0Y2JseHVkbUZ5SUhob2NsTjFZMk5sYzNOVGRHRjBkWE1nUFNCN1hHNWNibHgwWEhRdkx5QkdhV3hsSUhCeWIzUnZZMjlzSUdGc2QyRjVjeUI1YVdWc1pITWdjM1JoZEhWeklHTnZaR1VnTUN3Z1lYTnpkVzFsSURJd01GeHVYSFJjZERBNklESXdNQ3hjYmx4dVhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0J2Ym14NVhHNWNkRngwTHk4Z0l6RTBOVEE2SUhOdmJXVjBhVzFsY3lCSlJTQnlaWFIxY201eklERXlNak1nZDJobGJpQnBkQ0J6YUc5MWJHUWdZbVVnTWpBMFhHNWNkRngwTVRJeU16b2dNakEwWEc1Y2RIMHNYRzVjZEhob2NsTjFjSEJ2Y25SbFpDQTlJR3BSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM011ZUdoeUtDazdYRzVjYm5OMWNIQnZjblF1WTI5eWN5QTlJQ0VoZUdoeVUzVndjRzl5ZEdWa0lDWW1JQ2dnWENKM2FYUm9RM0psWkdWdWRHbGhiSE5jSWlCcGJpQjRhSEpUZFhCd2IzSjBaV1FnS1R0Y2JuTjFjSEJ2Y25RdVlXcGhlQ0E5SUhob2NsTjFjSEJ2Y25SbFpDQTlJQ0VoZUdoeVUzVndjRzl5ZEdWa08xeHVYRzVxVVhWbGNua3VZV3BoZUZSeVlXNXpjRzl5ZENnZ1puVnVZM1JwYjI0b0lHOXdkR2x2Ym5NZ0tTQjdYRzVjZEhaaGNpQmpZV3hzWW1GamF5d2daWEp5YjNKRFlXeHNZbUZqYXp0Y2JseHVYSFF2THlCRGNtOXpjeUJrYjIxaGFXNGdiMjVzZVNCaGJHeHZkMlZrSUdsbUlITjFjSEJ2Y25SbFpDQjBhSEp2ZFdkb0lGaE5URWgwZEhCU1pYRjFaWE4wWEc1Y2RHbG1JQ2dnYzNWd2NHOXlkQzVqYjNKeklIeDhJSGhvY2xOMWNIQnZjblJsWkNBbUppQWhiM0IwYVc5dWN5NWpjbTl6YzBSdmJXRnBiaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdlMXh1WEhSY2RGeDBjMlZ1WkRvZ1puVnVZM1JwYjI0b0lHaGxZV1JsY25Nc0lHTnZiWEJzWlhSbElDa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ2FTeGNibHgwWEhSY2RGeDBYSFI0YUhJZ1BTQnZjSFJwYjI1ekxuaG9jaWdwTzF4dVhHNWNkRngwWEhSY2RIaG9jaTV2Y0dWdUtGeHVYSFJjZEZ4MFhIUmNkRzl3ZEdsdmJuTXVkSGx3WlN4Y2JseDBYSFJjZEZ4MFhIUnZjSFJwYjI1ekxuVnliQ3hjYmx4MFhIUmNkRngwWEhSdmNIUnBiMjV6TG1GemVXNWpMRnh1WEhSY2RGeDBYSFJjZEc5d2RHbHZibk11ZFhObGNtNWhiV1VzWEc1Y2RGeDBYSFJjZEZ4MGIzQjBhVzl1Y3k1d1lYTnpkMjl5WkZ4dVhIUmNkRngwWEhRcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVGd2NHeDVJR04xYzNSdmJTQm1hV1ZzWkhNZ2FXWWdjSEp2ZG1sa1pXUmNibHgwWEhSY2RGeDBhV1lnS0NCdmNIUnBiMjV6TG5ob2NrWnBaV3hrY3lBcElIdGNibHgwWEhSY2RGeDBYSFJtYjNJZ0tDQnBJR2x1SUc5d2RHbHZibk11ZUdoeVJtbGxiR1J6SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZUdoeVd5QnBJRjBnUFNCdmNIUnBiMjV6TG5ob2NrWnBaV3hrYzFzZ2FTQmRPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUU5MlpYSnlhV1JsSUcxcGJXVWdkSGx3WlNCcFppQnVaV1ZrWldSY2JseDBYSFJjZEZ4MGFXWWdLQ0J2Y0hScGIyNXpMbTFwYldWVWVYQmxJQ1ltSUhob2NpNXZkbVZ5Y21sa1pVMXBiV1ZVZVhCbElDa2dlMXh1WEhSY2RGeDBYSFJjZEhob2NpNXZkbVZ5Y21sa1pVMXBiV1ZVZVhCbEtDQnZjSFJwYjI1ekxtMXBiV1ZVZVhCbElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QllMVkpsY1hWbGMzUmxaQzFYYVhSb0lHaGxZV1JsY2x4dVhIUmNkRngwWEhRdkx5QkdiM0lnWTNKdmMzTXRaRzl0WVdsdUlISmxjWFZsYzNSekxDQnpaV1ZwYm1jZ1lYTWdZMjl1WkdsMGFXOXVjeUJtYjNJZ1lTQndjbVZtYkdsbmFIUWdZWEpsWEc1Y2RGeDBYSFJjZEM4dklHRnJhVzRnZEc4Z1lTQnFhV2R6WVhjZ2NIVjZlbXhsTENCM1pTQnphVzF3YkhrZ2JtVjJaWElnYzJWMElHbDBJSFJ2SUdKbElITjFjbVV1WEc1Y2RGeDBYSFJjZEM4dklDaHBkQ0JqWVc0Z1lXeDNZWGx6SUdKbElITmxkQ0J2YmlCaElIQmxjaTF5WlhGMVpYTjBJR0poYzJseklHOXlJR1YyWlc0Z2RYTnBibWNnWVdwaGVGTmxkSFZ3S1Z4dVhIUmNkRngwWEhRdkx5QkdiM0lnYzJGdFpTMWtiMjFoYVc0Z2NtVnhkV1Z6ZEhNc0lIZHZiaWQwSUdOb1lXNW5aU0JvWldGa1pYSWdhV1lnWVd4eVpXRmtlU0J3Y205MmFXUmxaQzVjYmx4MFhIUmNkRngwYVdZZ0tDQWhiM0IwYVc5dWN5NWpjbTl6YzBSdmJXRnBiaUFtSmlBaGFHVmhaR1Z5YzFzZ1hDSllMVkpsY1hWbGMzUmxaQzFYYVhSb1hDSWdYU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUm9aV0ZrWlhKeld5QmNJbGd0VW1WeGRXVnpkR1ZrTFZkcGRHaGNJaUJkSUQwZ1hDSllUVXhJZEhSd1VtVnhkV1Z6ZEZ3aU8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwTHk4Z1UyVjBJR2hsWVdSbGNuTmNibHgwWEhSY2RGeDBabTl5SUNnZ2FTQnBiaUJvWldGa1pYSnpJQ2tnZTF4dVhIUmNkRngwWEhSY2RIaG9jaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLQ0JwTENCb1pXRmtaWEp6V3lCcElGMGdLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRU5oYkd4aVlXTnJYRzVjZEZ4MFhIUmNkR05oYkd4aVlXTnJJRDBnWm5WdVkzUnBiMjRvSUhSNWNHVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQmpZV3hzWW1GamF5QXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBZMkZzYkdKaFkyc2dQU0JsY25KdmNrTmhiR3hpWVdOcklEMGdlR2h5TG05dWJHOWhaQ0E5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZUdoeUxtOXVaWEp5YjNJZ1BTQjRhSEl1YjI1aFltOXlkQ0E5SUhob2NpNXZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWdQU0J1ZFd4c08xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnZEhsd1pTQTlQVDBnWENKaFltOXlkRndpSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIaG9jaTVoWW05eWRDZ3BPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0IwZVhCbElEMDlQU0JjSW1WeWNtOXlYQ0lnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklFOXVJR0VnYldGdWRXRnNJRzVoZEdsMlpTQmhZbTl5ZEN3Z1NVVTVJSFJvY205M2MxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR1Z5Y205eWN5QnZiaUJoYm5rZ2NISnZjR1Z5ZEhrZ1lXTmpaWE56SUhSb1lYUWdhWE1nYm05MElISmxZV1I1VTNSaGRHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhSNWNHVnZaaUI0YUhJdWMzUmhkSFZ6SUNFOVBTQmNJbTUxYldKbGNsd2lJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyOXRjR3hsZEdVb0lEQXNJRndpWlhKeWIzSmNJaUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSamIyMXdiR1YwWlNoY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCR2FXeGxPaUJ3Y205MGIyTnZiQ0JoYkhkaGVYTWdlV2xsYkdSeklITjBZWFIxY3lBd095QnpaV1VnSXpnMk1EVXNJQ014TkRJd04xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFI0YUhJdWMzUmhkSFZ6TEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjRhSEl1YzNSaGRIVnpWR1Y0ZEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyOXRjR3hsZEdVb1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjRhSEpUZFdOalpYTnpVM1JoZEhWeld5QjRhSEl1YzNSaGRIVnpJRjBnZkh3Z2VHaHlMbk4wWVhSMWN5eGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSGhvY2k1emRHRjBkWE5VWlhoMExGeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnYjI1c2VWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnU1VVNUlHaGhjeUJ1YnlCWVNGSXlJR0oxZENCMGFISnZkM01nYjI0Z1ltbHVZWEo1SUNoMGNtRmpMVEV4TkRJMktWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnUm05eUlGaElVaklnYm05dUxYUmxlSFFzSUd4bGRDQjBhR1VnWTJGc2JHVnlJR2hoYm1Sc1pTQnBkQ0FvWjJndE1qUTVPQ2xjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZENnZ2VHaHlMbkpsYzNCdmJuTmxWSGx3WlNCOGZDQmNJblJsZUhSY0lpQXBJQ0U5UFNCY0luUmxlSFJjSWlBZ2ZIeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dWdlppQjRhSEl1Y21WemNHOXVjMlZVWlhoMElDRTlQU0JjSW5OMGNtbHVaMXdpSUQ5Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBleUJpYVc1aGNuazZJSGhvY2k1eVpYTndiMjV6WlNCOUlEcGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZXlCMFpYaDBPaUI0YUhJdWNtVnpjRzl1YzJWVVpYaDBJSDBzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSNGFISXVaMlYwUVd4c1VtVnpjRzl1YzJWSVpXRmtaWEp6S0NsY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBmVHRjYmx4dVhIUmNkRngwWEhRdkx5Qk1hWE4wWlc0Z2RHOGdaWFpsYm5SelhHNWNkRngwWEhSY2RIaG9jaTV2Ym14dllXUWdQU0JqWVd4c1ltRmpheWdwTzF4dVhIUmNkRngwWEhSbGNuSnZja05oYkd4aVlXTnJJRDBnZUdoeUxtOXVaWEp5YjNJZ1BTQmpZV3hzWW1GamF5Z2dYQ0psY25KdmNsd2lJQ2s3WEc1Y2JseDBYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnT1NCdmJteDVYRzVjZEZ4MFhIUmNkQzh2SUZWelpTQnZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWdkRzhnY21Wd2JHRmpaU0J2Ym1GaWIzSjBYRzVjZEZ4MFhIUmNkQzh2SUhSdklHaGhibVJzWlNCMWJtTmhkV2RvZENCaFltOXlkSE5jYmx4MFhIUmNkRngwYVdZZ0tDQjRhSEl1YjI1aFltOXlkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RGeDBYSFJjZEhob2NpNXZibUZpYjNKMElEMGdaWEp5YjNKRFlXeHNZbUZqYXp0Y2JseDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUjRhSEl1YjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RDOHZJRU5vWldOcklISmxZV1I1VTNSaGRHVWdZbVZtYjNKbElIUnBiV1Z2ZFhRZ1lYTWdhWFFnWTJoaGJtZGxjMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0I0YUhJdWNtVmhaSGxUZEdGMFpTQTlQVDBnTkNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJCYkd4dmR5QnZibVZ5Y205eUlIUnZJR0psSUdOaGJHeGxaQ0JtYVhKemRDeGNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdZblYwSUhSb1lYUWdkMmxzYkNCdWIzUWdhR0Z1Wkd4bElHRWdibUYwYVhabElHRmliM0owWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVGc2MyOHNJSE5oZG1VZ1pYSnliM0pEWVd4c1ltRmpheUIwYnlCaElIWmhjbWxoWW14bFhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklHRnpJSGhvY2k1dmJtVnljbTl5SUdOaGJtNXZkQ0JpWlNCaFkyTmxjM05sWkZ4dVhIUmNkRngwWEhSY2RGeDBYSFIzYVc1a2IzY3VjMlYwVkdsdFpXOTFkQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JqWVd4c1ltRmpheUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHVnljbTl5UTJGc2JHSmhZMnNvS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFJjZEgwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdRM0psWVhSbElIUm9aU0JoWW05eWRDQmpZV3hzWW1GamExeHVYSFJjZEZ4MFhIUmpZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJLQ0JjSW1GaWIzSjBYQ0lnS1R0Y2JseHVYSFJjZEZ4MFhIUjBjbmtnZTF4dVhHNWNkRngwWEhSY2RGeDBMeThnUkc4Z2MyVnVaQ0IwYUdVZ2NtVnhkV1Z6ZENBb2RHaHBjeUJ0WVhrZ2NtRnBjMlVnWVc0Z1pYaGpaWEIwYVc5dUtWeHVYSFJjZEZ4MFhIUmNkSGhvY2k1elpXNWtLQ0J2Y0hScGIyNXpMbWhoYzBOdmJuUmxiblFnSmlZZ2IzQjBhVzl1Y3k1a1lYUmhJSHg4SUc1MWJHd2dLVHRjYmx4MFhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QWpNVFEyT0RNNklFOXViSGtnY21WMGFISnZkeUJwWmlCMGFHbHpJR2hoYzI0bmRDQmlaV1Z1SUc1dmRHbG1hV1ZrSUdGeklHRnVJR1Z5Y205eUlIbGxkRnh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUjBhSEp2ZHlCbE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFlXSnZjblE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUdOaGJHeGlZV05ySUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR05oYkd4aVlXTnJLQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5TzF4dVhIUjlYRzU5SUNrN1hHNWNibHh1WEc1Y2JpOHZJRkJ5WlhabGJuUWdZWFYwYnkxbGVHVmpkWFJwYjI0Z2IyWWdjMk55YVhCMGN5QjNhR1Z1SUc1dklHVjRjR3hwWTJsMElHUmhkR0ZVZVhCbElIZGhjeUJ3Y205MmFXUmxaQ0FvVTJWbElHZG9MVEkwTXpJcFhHNXFVWFZsY25rdVlXcGhlRkJ5WldacGJIUmxjaWdnWm5WdVkzUnBiMjRvSUhNZ0tTQjdYRzVjZEdsbUlDZ2djeTVqY205emMwUnZiV0ZwYmlBcElIdGNibHgwWEhSekxtTnZiblJsYm5SekxuTmpjbWx3ZENBOUlHWmhiSE5sTzF4dVhIUjlYRzU5SUNrN1hHNWNiaTh2SUVsdWMzUmhiR3dnYzJOeWFYQjBJR1JoZEdGVWVYQmxYRzVxVVhWbGNua3VZV3BoZUZObGRIVndLQ0I3WEc1Y2RHRmpZMlZ3ZEhNNklIdGNibHgwWEhSelkzSnBjSFE2SUZ3aWRHVjRkQzlxWVhaaGMyTnlhWEIwTENCaGNIQnNhV05oZEdsdmJpOXFZWFpoYzJOeWFYQjBMQ0JjSWlBclhHNWNkRngwWEhSY0ltRndjR3hwWTJGMGFXOXVMMlZqYldGelkzSnBjSFFzSUdGd2NHeHBZMkYwYVc5dUwzZ3RaV050WVhOamNtbHdkRndpWEc1Y2RIMHNYRzVjZEdOdmJuUmxiblJ6T2lCN1hHNWNkRngwYzJOeWFYQjBPaUF2WEZ4aUtEODZhbUYyWVh4bFkyMWhLWE5qY21sd2RGeGNZaTljYmx4MGZTeGNibHgwWTI5dWRtVnlkR1Z5Y3pvZ2UxeHVYSFJjZEZ3aWRHVjRkQ0J6WTNKcGNIUmNJam9nWm5WdVkzUnBiMjRvSUhSbGVIUWdLU0I3WEc1Y2RGeDBYSFJxVVhWbGNua3VaMnh2WW1Gc1JYWmhiQ2dnZEdWNGRDQXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlIUmxlSFE3WEc1Y2RGeDBmVnh1WEhSOVhHNTlJQ2s3WEc1Y2JpOHZJRWhoYm1Sc1pTQmpZV05vWlNkeklITndaV05wWVd3Z1kyRnpaU0JoYm1RZ1kzSnZjM05FYjIxaGFXNWNibXBSZFdWeWVTNWhhbUY0VUhKbFptbHNkR1Z5S0NCY0luTmpjbWx3ZEZ3aUxDQm1kVzVqZEdsdmJpZ2djeUFwSUh0Y2JseDBhV1lnS0NCekxtTmhZMmhsSUQwOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBjeTVqWVdOb1pTQTlJR1poYkhObE8xeHVYSFI5WEc1Y2RHbG1JQ2dnY3k1amNtOXpjMFJ2YldGcGJpQXBJSHRjYmx4MFhIUnpMblI1Y0dVZ1BTQmNJa2RGVkZ3aU8xeHVYSFI5WEc1OUlDazdYRzVjYmk4dklFSnBibVFnYzJOeWFYQjBJSFJoWnlCb1lXTnJJSFJ5WVc1emNHOXlkRnh1YWxGMVpYSjVMbUZxWVhoVWNtRnVjM0J2Y25Rb0lGd2ljMk55YVhCMFhDSXNJR1oxYm1OMGFXOXVLQ0J6SUNrZ2UxeHVYRzVjZEM4dklGUm9hWE1nZEhKaGJuTndiM0owSUc5dWJIa2daR1ZoYkhNZ2QybDBhQ0JqY205emN5QmtiMjFoYVc0Z2NtVnhkV1Z6ZEhOY2JseDBhV1lnS0NCekxtTnliM056Ukc5dFlXbHVJQ2tnZTF4dVhIUmNkSFpoY2lCelkzSnBjSFFzSUdOaGJHeGlZV05yTzF4dVhIUmNkSEpsZEhWeWJpQjdYRzVjZEZ4MFhIUnpaVzVrT2lCbWRXNWpkR2x2YmlnZ1h5d2dZMjl0Y0d4bGRHVWdLU0I3WEc1Y2RGeDBYSFJjZEhOamNtbHdkQ0E5SUdwUmRXVnllU2dnWENJOGMyTnlhWEIwUGx3aUlDa3VjSEp2Y0NnZ2UxeHVYSFJjZEZ4MFhIUmNkR05vWVhKelpYUTZJSE11YzJOeWFYQjBRMmhoY25ObGRDeGNibHgwWEhSY2RGeDBYSFJ6Y21NNklITXVkWEpzWEc1Y2RGeDBYSFJjZEgwZ0tTNXZiaWhjYmx4MFhIUmNkRngwWEhSY0lteHZZV1FnWlhKeWIzSmNJaXhjYmx4MFhIUmNkRngwWEhSallXeHNZbUZqYXlBOUlHWjFibU4wYVc5dUtDQmxkblFnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ6WTNKcGNIUXVjbVZ0YjNabEtDazdYRzVjZEZ4MFhIUmNkRngwWEhSallXeHNZbUZqYXlBOUlHNTFiR3c3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdWMmRDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBZMjl0Y0d4bGRHVW9JR1YyZEM1MGVYQmxJRDA5UFNCY0ltVnljbTl5WENJZ1B5QTBNRFFnT2lBeU1EQXNJR1YyZEM1MGVYQmxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhRcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUZWelpTQnVZWFJwZG1VZ1JFOU5JRzFoYm1sd2RXeGhkR2x2YmlCMGJ5QmhkbTlwWkNCdmRYSWdaRzl0VFdGdWFYQWdRVXBCV0NCMGNtbGphMlZ5ZVZ4dVhIUmNkRngwWEhSa2IyTjFiV1Z1ZEM1b1pXRmtMbUZ3Y0dWdVpFTm9hV3hrS0NCelkzSnBjSFJiSURBZ1hTQXBPMXh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkR0ZpYjNKME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQmpZV3hzWW1GamF5QXBJSHRjYmx4MFhIUmNkRngwWEhSallXeHNZbUZqYXlncE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZUdGNibHgwZlZ4dWZTQXBPMXh1WEc1Y2JseHVYRzUyWVhJZ2IyeGtRMkZzYkdKaFkydHpJRDBnVzEwc1hHNWNkSEpxYzI5dWNDQTlJQzhvUFNsY1hEOG9QejBtZkNRcGZGeGNQMXhjUHk4N1hHNWNiaTh2SUVSbFptRjFiSFFnYW5OdmJuQWdjMlYwZEdsdVozTmNibXBSZFdWeWVTNWhhbUY0VTJWMGRYQW9JSHRjYmx4MGFuTnZibkE2SUZ3aVkyRnNiR0poWTJ0Y0lpeGNibHgwYW5OdmJuQkRZV3hzWW1GamF6b2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBkbUZ5SUdOaGJHeGlZV05ySUQwZ2IyeGtRMkZzYkdKaFkydHpMbkJ2Y0NncElIeDhJQ2dnYWxGMVpYSjVMbVY0Y0dGdVpHOGdLeUJjSWw5Y0lpQXJJQ2dnYm05dVkyVXJLeUFwSUNrN1hHNWNkRngwZEdocGMxc2dZMkZzYkdKaFkyc2dYU0E5SUhSeWRXVTdYRzVjZEZ4MGNtVjBkWEp1SUdOaGJHeGlZV05yTzF4dVhIUjlYRzU5SUNrN1hHNWNiaTh2SUVSbGRHVmpkQ3dnYm05eWJXRnNhWHBsSUc5d2RHbHZibk1nWVc1a0lHbHVjM1JoYkd3Z1kyRnNiR0poWTJ0eklHWnZjaUJxYzI5dWNDQnlaWEYxWlhOMGMxeHVhbEYxWlhKNUxtRnFZWGhRY21WbWFXeDBaWElvSUZ3aWFuTnZiaUJxYzI5dWNGd2lMQ0JtZFc1amRHbHZiaWdnY3l3Z2IzSnBaMmx1WVd4VFpYUjBhVzVuY3l3Z2FuRllTRklnS1NCN1hHNWNibHgwZG1GeUlHTmhiR3hpWVdOclRtRnRaU3dnYjNabGNuZHlhWFIwWlc0c0lISmxjM0J2Ym5ObFEyOXVkR0ZwYm1WeUxGeHVYSFJjZEdwemIyNVFjbTl3SUQwZ2N5NXFjMjl1Y0NBaFBUMGdabUZzYzJVZ0ppWWdLQ0J5YW5OdmJuQXVkR1Z6ZENnZ2N5NTFjbXdnS1NBL1hHNWNkRngwWEhSY0luVnliRndpSURwY2JseDBYSFJjZEhSNWNHVnZaaUJ6TG1SaGRHRWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWmNibHgwWEhSY2RGeDBLQ0J6TG1OdmJuUmxiblJVZVhCbElIeDhJRndpWENJZ0tWeHVYSFJjZEZ4MFhIUmNkQzVwYm1SbGVFOW1LQ0JjSW1Gd2NHeHBZMkYwYVc5dUwzZ3RkM2QzTFdadmNtMHRkWEpzWlc1amIyUmxaRndpSUNrZ1BUMDlJREFnSmlaY2JseDBYSFJjZEZ4MGNtcHpiMjV3TG5SbGMzUW9JSE11WkdGMFlTQXBJQ1ltSUZ3aVpHRjBZVndpWEc1Y2RGeDBLVHRjYmx4dVhIUXZMeUJJWVc1a2JHVWdhV1ptSUhSb1pTQmxlSEJsWTNSbFpDQmtZWFJoSUhSNWNHVWdhWE1nWENKcWMyOXVjRndpSUc5eUlIZGxJR2hoZG1VZ1lTQndZWEpoYldWMFpYSWdkRzhnYzJWMFhHNWNkR2xtSUNnZ2FuTnZibEJ5YjNBZ2ZId2djeTVrWVhSaFZIbHdaWE5iSURBZ1hTQTlQVDBnWENKcWMyOXVjRndpSUNrZ2UxeHVYRzVjZEZ4MEx5OGdSMlYwSUdOaGJHeGlZV05ySUc1aGJXVXNJSEpsYldWdFltVnlhVzVuSUhCeVpXVjRhWE4wYVc1bklIWmhiSFZsSUdGemMyOWphV0YwWldRZ2QybDBhQ0JwZEZ4dVhIUmNkR05oYkd4aVlXTnJUbUZ0WlNBOUlITXVhbk52Ym5CRFlXeHNZbUZqYXlBOUlHcFJkV1Z5ZVM1cGMwWjFibU4wYVc5dUtDQnpMbXB6YjI1d1EyRnNiR0poWTJzZ0tTQS9YRzVjZEZ4MFhIUnpMbXB6YjI1d1EyRnNiR0poWTJzb0tTQTZYRzVjZEZ4MFhIUnpMbXB6YjI1d1EyRnNiR0poWTJzN1hHNWNibHgwWEhRdkx5Qkpibk5sY25RZ1kyRnNiR0poWTJzZ2FXNTBieUIxY213Z2IzSWdabTl5YlNCa1lYUmhYRzVjZEZ4MGFXWWdLQ0JxYzI5dVVISnZjQ0FwSUh0Y2JseDBYSFJjZEhOYklHcHpiMjVRY205d0lGMGdQU0J6V3lCcWMyOXVVSEp2Y0NCZExuSmxjR3hoWTJVb0lISnFjMjl1Y0N3Z1hDSWtNVndpSUNzZ1kyRnNiR0poWTJ0T1lXMWxJQ2s3WEc1Y2RGeDBmU0JsYkhObElHbG1JQ2dnY3k1cWMyOXVjQ0FoUFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSekxuVnliQ0FyUFNBb0lISnhkV1Z5ZVM1MFpYTjBLQ0J6TG5WeWJDQXBJRDhnWENJbVhDSWdPaUJjSWo5Y0lpQXBJQ3NnY3k1cWMyOXVjQ0FySUZ3aVBWd2lJQ3NnWTJGc2JHSmhZMnRPWVcxbE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGVnpaU0JrWVhSaElHTnZiblpsY25SbGNpQjBieUJ5WlhSeWFXVjJaU0JxYzI5dUlHRm1kR1Z5SUhOamNtbHdkQ0JsZUdWamRYUnBiMjVjYmx4MFhIUnpMbU52Ym5abGNuUmxjbk5iSUZ3aWMyTnlhWEIwSUdwemIyNWNJaUJkSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUNGeVpYTndiMjV6WlVOdmJuUmhhVzVsY2lBcElIdGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtVnljbTl5S0NCallXeHNZbUZqYTA1aGJXVWdLeUJjSWlCM1lYTWdibTkwSUdOaGJHeGxaRndpSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSeVpYUjFjbTRnY21WemNHOXVjMlZEYjI1MFlXbHVaWEpiSURBZ1hUdGNibHgwWEhSOU8xeHVYRzVjZEZ4MEx5OGdSbTl5WTJVZ2FuTnZiaUJrWVhSaFZIbHdaVnh1WEhSY2RITXVaR0YwWVZSNWNHVnpXeUF3SUYwZ1BTQmNJbXB6YjI1Y0lqdGNibHh1WEhSY2RDOHZJRWx1YzNSaGJHd2dZMkZzYkdKaFkydGNibHgwWEhSdmRtVnlkM0pwZEhSbGJpQTlJSGRwYm1SdmQxc2dZMkZzYkdKaFkydE9ZVzFsSUYwN1hHNWNkRngwZDJsdVpHOTNXeUJqWVd4c1ltRmphMDVoYldVZ1hTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwY21WemNHOXVjMlZEYjI1MFlXbHVaWElnUFNCaGNtZDFiV1Z1ZEhNN1hHNWNkRngwZlR0Y2JseHVYSFJjZEM4dklFTnNaV0Z1TFhWd0lHWjFibU4wYVc5dUlDaG1hWEpsY3lCaFpuUmxjaUJqYjI1MlpYSjBaWEp6S1Z4dVhIUmNkR3B4V0VoU0xtRnNkMkY1Y3lnZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVsbUlIQnlaWFpwYjNWeklIWmhiSFZsSUdScFpHNG5kQ0JsZUdsemRDQXRJSEpsYlc5MlpTQnBkRnh1WEhSY2RGeDBhV1lnS0NCdmRtVnlkM0pwZEhSbGJpQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnFVWFZsY25rb0lIZHBibVJ2ZHlBcExuSmxiVzkyWlZCeWIzQW9JR05oYkd4aVlXTnJUbUZ0WlNBcE8xeHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnY21WemRHOXlaU0J3Y21WbGVHbHpkR2x1WnlCMllXeDFaVnh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBkMmx1Wkc5M1d5QmpZV3hzWW1GamEwNWhiV1VnWFNBOUlHOTJaWEozY21sMGRHVnVPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCVFlYWmxJR0poWTJzZ1lYTWdabkpsWlZ4dVhIUmNkRngwYVdZZ0tDQnpXeUJqWVd4c1ltRmphMDVoYldVZ1hTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5Qk5ZV3RsSUhOMWNtVWdkR2hoZENCeVpTMTFjMmx1WnlCMGFHVWdiM0IwYVc5dWN5QmtiMlZ6YmlkMElITmpjbVYzSUhSb2FXNW5jeUJoY205MWJtUmNibHgwWEhSY2RGeDBjeTVxYzI5dWNFTmhiR3hpWVdOcklEMGdiM0pwWjJsdVlXeFRaWFIwYVc1bmN5NXFjMjl1Y0VOaGJHeGlZV05yTzF4dVhHNWNkRngwWEhSY2RDOHZJRk5oZG1VZ2RHaGxJR05oYkd4aVlXTnJJRzVoYldVZ1ptOXlJR1oxZEhWeVpTQjFjMlZjYmx4MFhIUmNkRngwYjJ4a1EyRnNiR0poWTJ0ekxuQjFjMmdvSUdOaGJHeGlZV05yVG1GdFpTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCRFlXeHNJR2xtSUdsMElIZGhjeUJoSUdaMWJtTjBhVzl1SUdGdVpDQjNaU0JvWVhabElHRWdjbVZ6Y0c5dWMyVmNibHgwWEhSY2RHbG1JQ2dnY21WemNHOXVjMlZEYjI1MFlXbHVaWElnSmlZZ2FsRjFaWEo1TG1selJuVnVZM1JwYjI0b0lHOTJaWEozY21sMGRHVnVJQ2tnS1NCN1hHNWNkRngwWEhSY2RHOTJaWEozY21sMGRHVnVLQ0J5WlhOd2IyNXpaVU52Ym5SaGFXNWxjbHNnTUNCZElDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsYzNCdmJuTmxRMjl1ZEdGcGJtVnlJRDBnYjNabGNuZHlhWFIwWlc0Z1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZTQXBPMXh1WEc1Y2RGeDBMeThnUkdWc1pXZGhkR1VnZEc4Z2MyTnlhWEIwWEc1Y2RGeDBjbVYwZFhKdUlGd2ljMk55YVhCMFhDSTdYRzVjZEgxY2JuMGdLVHRjYmx4dVhHNWNibHh1THk4Z1UzVndjRzl5ZERvZ1UyRm1ZWEpwSURnZ2IyNXNlVnh1THk4Z1NXNGdVMkZtWVhKcElEZ2daRzlqZFcxbGJuUnpJR055WldGMFpXUWdkbWxoSUdSdlkzVnRaVzUwTG1sdGNHeGxiV1Z1ZEdGMGFXOXVMbU55WldGMFpVaFVUVXhFYjJOMWJXVnVkRnh1THk4Z1kyOXNiR0Z3YzJVZ2MybGliR2x1WnlCbWIzSnRjem9nZEdobElITmxZMjl1WkNCdmJtVWdZbVZqYjIxbGN5QmhJR05vYVd4a0lHOW1JSFJvWlNCbWFYSnpkQ0J2Ym1VdVhHNHZMeUJDWldOaGRYTmxJRzltSUhSb1lYUXNJSFJvYVhNZ2MyVmpkWEpwZEhrZ2JXVmhjM1Z5WlNCb1lYTWdkRzhnWW1VZ1pHbHpZV0pzWldRZ2FXNGdVMkZtWVhKcElEZ3VYRzR2THlCb2RIUndjem92TDJKMVozTXVkMlZpYTJsMExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlNVE0zTXpNM1hHNXpkWEJ3YjNKMExtTnlaV0YwWlVoVVRVeEViMk4xYldWdWRDQTlJQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFpoY2lCaWIyUjVJRDBnWkc5amRXMWxiblF1YVcxd2JHVnRaVzUwWVhScGIyNHVZM0psWVhSbFNGUk5URVJ2WTNWdFpXNTBLQ0JjSWx3aUlDa3VZbTlrZVR0Y2JseDBZbTlrZVM1cGJtNWxja2hVVFV3Z1BTQmNJanhtYjNKdFBqd3ZabTl5YlQ0OFptOXliVDQ4TDJadmNtMCtYQ0k3WEc1Y2RISmxkSFZ5YmlCaWIyUjVMbU5vYVd4a1RtOWtaWE11YkdWdVozUm9JRDA5UFNBeU8xeHVmU0FwS0NrN1hHNWNibHh1THk4Z1FYSm5kVzFsYm5RZ1hDSmtZWFJoWENJZ2MyaHZkV3hrSUdKbElITjBjbWx1WnlCdlppQm9kRzFzWEc0dkx5QmpiMjUwWlhoMElDaHZjSFJwYjI1aGJDazZJRWxtSUhOd1pXTnBabWxsWkN3Z2RHaGxJR1p5WVdkdFpXNTBJSGRwYkd3Z1ltVWdZM0psWVhSbFpDQnBiaUIwYUdseklHTnZiblJsZUhRc1hHNHZMeUJrWldaaGRXeDBjeUIwYnlCa2IyTjFiV1Z1ZEZ4dUx5OGdhMlZsY0ZOamNtbHdkSE1nS0c5d2RHbHZibUZzS1RvZ1NXWWdkSEoxWlN3Z2QybHNiQ0JwYm1Oc2RXUmxJSE5qY21sd2RITWdjR0Z6YzJWa0lHbHVJSFJvWlNCb2RHMXNJSE4wY21sdVoxeHVhbEYxWlhKNUxuQmhjbk5sU0ZSTlRDQTlJR1oxYm1OMGFXOXVLQ0JrWVhSaExDQmpiMjUwWlhoMExDQnJaV1Z3VTJOeWFYQjBjeUFwSUh0Y2JseDBhV1lnS0NCMGVYQmxiMllnWkdGMFlTQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSeVpYUjFjbTRnVzEwN1hHNWNkSDFjYmx4MGFXWWdLQ0IwZVhCbGIyWWdZMjl1ZEdWNGRDQTlQVDBnWENKaWIyOXNaV0Z1WENJZ0tTQjdYRzVjZEZ4MGEyVmxjRk5qY21sd2RITWdQU0JqYjI1MFpYaDBPMXh1WEhSY2RHTnZiblJsZUhRZ1BTQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RIWmhjaUJpWVhObExDQndZWEp6WldRc0lITmpjbWx3ZEhNN1hHNWNibHgwYVdZZ0tDQWhZMjl1ZEdWNGRDQXBJSHRjYmx4dVhIUmNkQzh2SUZOMGIzQWdjMk55YVhCMGN5QnZjaUJwYm14cGJtVWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1puSnZiU0JpWldsdVp5QmxlR1ZqZFhSbFpDQnBiVzFsWkdsaGRHVnNlVnh1WEhSY2RDOHZJR0o1SUhWemFXNW5JR1J2WTNWdFpXNTBMbWx0Y0d4bGJXVnVkR0YwYVc5dVhHNWNkRngwYVdZZ0tDQnpkWEJ3YjNKMExtTnlaV0YwWlVoVVRVeEViMk4xYldWdWRDQXBJSHRjYmx4MFhIUmNkR052Ym5SbGVIUWdQU0JrYjJOMWJXVnVkQzVwYlhCc1pXMWxiblJoZEdsdmJpNWpjbVZoZEdWSVZFMU1SRzlqZFcxbGJuUW9JRndpWENJZ0tUdGNibHh1WEhSY2RGeDBMeThnVTJWMElIUm9aU0JpWVhObElHaHlaV1lnWm05eUlIUm9aU0JqY21WaGRHVmtJR1J2WTNWdFpXNTBYRzVjZEZ4MFhIUXZMeUJ6YnlCaGJua2djR0Z5YzJWa0lHVnNaVzFsYm5SeklIZHBkR2dnVlZKTWMxeHVYSFJjZEZ4MEx5OGdZWEpsSUdKaGMyVmtJRzl1SUhSb1pTQmtiMk4xYldWdWRDZHpJRlZTVENBb1oyZ3RNamsyTlNsY2JseDBYSFJjZEdKaGMyVWdQU0JqYjI1MFpYaDBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lZbUZ6WlZ3aUlDazdYRzVjZEZ4MFhIUmlZWE5sTG1oeVpXWWdQU0JrYjJOMWJXVnVkQzVzYjJOaGRHbHZiaTVvY21WbU8xeHVYSFJjZEZ4MFkyOXVkR1Y0ZEM1b1pXRmtMbUZ3Y0dWdVpFTm9hV3hrS0NCaVlYTmxJQ2s3WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RHTnZiblJsZUhRZ1BTQmtiMk4xYldWdWREdGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUndZWEp6WldRZ1BTQnljMmx1WjJ4bFZHRm5MbVY0WldNb0lHUmhkR0VnS1R0Y2JseDBjMk55YVhCMGN5QTlJQ0ZyWldWd1UyTnlhWEIwY3lBbUppQmJYVHRjYmx4dVhIUXZMeUJUYVc1bmJHVWdkR0ZuWEc1Y2RHbG1JQ2dnY0dGeWMyVmtJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmJJR052Ym5SbGVIUXVZM0psWVhSbFJXeGxiV1Z1ZENnZ2NHRnljMlZrV3lBeElGMGdLU0JkTzF4dVhIUjlYRzVjYmx4MGNHRnljMlZrSUQwZ1luVnBiR1JHY21GbmJXVnVkQ2dnV3lCa1lYUmhJRjBzSUdOdmJuUmxlSFFzSUhOamNtbHdkSE1nS1R0Y2JseHVYSFJwWmlBb0lITmpjbWx3ZEhNZ0ppWWdjMk55YVhCMGN5NXNaVzVuZEdnZ0tTQjdYRzVjZEZ4MGFsRjFaWEo1S0NCelkzSnBjSFJ6SUNrdWNtVnRiM1psS0NrN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2FsRjFaWEo1TG0xbGNtZGxLQ0JiWFN3Z2NHRnljMlZrTG1Ob2FXeGtUbTlrWlhNZ0tUdGNibjA3WEc1Y2JseHVMeW9xWEc0Z0tpQk1iMkZrSUdFZ2RYSnNJR2x1ZEc4Z1lTQndZV2RsWEc0Z0tpOWNibXBSZFdWeWVTNW1iaTVzYjJGa0lEMGdablZ1WTNScGIyNG9JSFZ5YkN3Z2NHRnlZVzF6TENCallXeHNZbUZqYXlBcElIdGNibHgwZG1GeUlITmxiR1ZqZEc5eUxDQjBlWEJsTENCeVpYTndiMjV6WlN4Y2JseDBYSFJ6Wld4bUlEMGdkR2hwY3l4Y2JseDBYSFJ2Wm1ZZ1BTQjFjbXd1YVc1a1pYaFBaaWdnWENJZ1hDSWdLVHRjYmx4dVhIUnBaaUFvSUc5bVppQStJQzB4SUNrZ2UxeHVYSFJjZEhObGJHVmpkRzl5SUQwZ2MzUnlhWEJCYm1SRGIyeHNZWEJ6WlNnZ2RYSnNMbk5zYVdObEtDQnZabVlnS1NBcE8xeHVYSFJjZEhWeWJDQTlJSFZ5YkM1emJHbGpaU2dnTUN3Z2IyWm1JQ2s3WEc1Y2RIMWNibHh1WEhRdkx5QkpaaUJwZENkeklHRWdablZ1WTNScGIyNWNibHgwYVdZZ0tDQnFVWFZsY25rdWFYTkdkVzVqZEdsdmJpZ2djR0Z5WVcxeklDa2dLU0I3WEc1Y2JseDBYSFF2THlCWFpTQmhjM04xYldVZ2RHaGhkQ0JwZENkeklIUm9aU0JqWVd4c1ltRmphMXh1WEhSY2RHTmhiR3hpWVdOcklEMGdjR0Z5WVcxek8xeHVYSFJjZEhCaGNtRnRjeUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVYSFF2THlCUGRHaGxjbmRwYzJVc0lHSjFhV3hrSUdFZ2NHRnlZVzBnYzNSeWFXNW5YRzVjZEgwZ1pXeHpaU0JwWmlBb0lIQmhjbUZ0Y3lBbUppQjBlWEJsYjJZZ2NHRnlZVzF6SUQwOVBTQmNJbTlpYW1WamRGd2lJQ2tnZTF4dVhIUmNkSFI1Y0dVZ1BTQmNJbEJQVTFSY0lqdGNibHgwZlZ4dVhHNWNkQzh2SUVsbUlIZGxJR2hoZG1VZ1pXeGxiV1Z1ZEhNZ2RHOGdiVzlrYVdaNUxDQnRZV3RsSUhSb1pTQnlaWEYxWlhOMFhHNWNkR2xtSUNnZ2MyVnNaaTVzWlc1bmRHZ2dQaUF3SUNrZ2UxeHVYSFJjZEdwUmRXVnllUzVoYW1GNEtDQjdYRzVjZEZ4MFhIUjFjbXc2SUhWeWJDeGNibHh1WEhSY2RGeDBMeThnU1dZZ1hDSjBlWEJsWENJZ2RtRnlhV0ZpYkdVZ2FYTWdkVzVrWldacGJtVmtMQ0IwYUdWdUlGd2lSMFZVWENJZ2JXVjBhRzlrSUhkcGJHd2dZbVVnZFhObFpDNWNibHgwWEhSY2RDOHZJRTFoYTJVZ2RtRnNkV1VnYjJZZ2RHaHBjeUJtYVdWc1pDQmxlSEJzYVdOcGRDQnphVzVqWlZ4dVhIUmNkRngwTHk4Z2RYTmxjaUJqWVc0Z2IzWmxjbkpwWkdVZ2FYUWdkR2h5YjNWbmFDQmhhbUY0VTJWMGRYQWdiV1YwYUc5a1hHNWNkRngwWEhSMGVYQmxPaUIwZVhCbElIeDhJRndpUjBWVVhDSXNYRzVjZEZ4MFhIUmtZWFJoVkhsd1pUb2dYQ0pvZEcxc1hDSXNYRzVjZEZ4MFhIUmtZWFJoT2lCd1lYSmhiWE5jYmx4MFhIUjlJQ2t1Wkc5dVpTZ2dablZ1WTNScGIyNG9JSEpsYzNCdmJuTmxWR1Y0ZENBcElIdGNibHh1WEhSY2RGeDBMeThnVTJGMlpTQnlaWE53YjI1elpTQm1iM0lnZFhObElHbHVJR052YlhCc1pYUmxJR05oYkd4aVlXTnJYRzVjZEZ4MFhIUnlaWE53YjI1elpTQTlJR0Z5WjNWdFpXNTBjenRjYmx4dVhIUmNkRngwYzJWc1ppNW9kRzFzS0NCelpXeGxZM1J2Y2lBL1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ1lTQnpaV3hsWTNSdmNpQjNZWE1nYzNCbFkybG1hV1ZrTENCc2IyTmhkR1VnZEdobElISnBaMmgwSUdWc1pXMWxiblJ6SUdsdUlHRWdaSFZ0YlhrZ1pHbDJYRzVjZEZ4MFhIUmNkQzh2SUVWNFkyeDFaR1VnYzJOeWFYQjBjeUIwYnlCaGRtOXBaQ0JKUlNBblVHVnliV2x6YzJsdmJpQkVaVzVwWldRbklHVnljbTl5YzF4dVhIUmNkRngwWEhScVVYVmxjbmtvSUZ3aVBHUnBkajVjSWlBcExtRndjR1Z1WkNnZ2FsRjFaWEo1TG5CaGNuTmxTRlJOVENnZ2NtVnpjRzl1YzJWVVpYaDBJQ2tnS1M1bWFXNWtLQ0J6Wld4bFkzUnZjaUFwSURwY2JseHVYSFJjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnZFhObElIUm9aU0JtZFd4c0lISmxjM1ZzZEZ4dVhIUmNkRngwWEhSeVpYTndiMjV6WlZSbGVIUWdLVHRjYmx4dVhIUmNkQzh2SUVsbUlIUm9aU0J5WlhGMVpYTjBJSE4xWTJObFpXUnpMQ0IwYUdseklHWjFibU4wYVc5dUlHZGxkSE1nWENKa1lYUmhYQ0lzSUZ3aWMzUmhkSFZ6WENJc0lGd2lhbkZZU0ZKY0lseHVYSFJjZEM4dklHSjFkQ0IwYUdWNUlHRnlaU0JwWjI1dmNtVmtJR0psWTJGMWMyVWdjbVZ6Y0c5dWMyVWdkMkZ6SUhObGRDQmhZbTkyWlM1Y2JseDBYSFF2THlCSlppQnBkQ0JtWVdsc2N5d2dkR2hwY3lCbWRXNWpkR2x2YmlCblpYUnpJRndpYW5GWVNGSmNJaXdnWENKemRHRjBkWE5jSWl3Z1hDSmxjbkp2Y2x3aVhHNWNkRngwZlNBcExtRnNkMkY1Y3lnZ1kyRnNiR0poWTJzZ0ppWWdablZ1WTNScGIyNG9JR3B4V0VoU0xDQnpkR0YwZFhNZ0tTQjdYRzVjZEZ4MFhIUnpaV3htTG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSallXeHNZbUZqYXk1aGNIQnNlU2dnZEdocGN5d2djbVZ6Y0c5dWMyVWdmSHdnV3lCcWNWaElVaTV5WlhOd2IyNXpaVlJsZUhRc0lITjBZWFIxY3l3Z2FuRllTRklnWFNBcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMGdLVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dVhHNWNibHh1THk4Z1FYUjBZV05vSUdFZ1luVnVZMmdnYjJZZ1puVnVZM1JwYjI1eklHWnZjaUJvWVc1a2JHbHVaeUJqYjIxdGIyNGdRVXBCV0NCbGRtVnVkSE5jYm1wUmRXVnllUzVsWVdOb0tDQmJYRzVjZEZ3aVlXcGhlRk4wWVhKMFhDSXNYRzVjZEZ3aVlXcGhlRk4wYjNCY0lpeGNibHgwWENKaGFtRjRRMjl0Y0d4bGRHVmNJaXhjYmx4MFhDSmhhbUY0UlhKeWIzSmNJaXhjYmx4MFhDSmhhbUY0VTNWalkyVnpjMXdpTEZ4dVhIUmNJbUZxWVhoVFpXNWtYQ0pjYmwwc0lHWjFibU4wYVc5dUtDQnBMQ0IwZVhCbElDa2dlMXh1WEhScVVYVmxjbmt1Wm01YklIUjVjR1VnWFNBOUlHWjFibU4wYVc5dUtDQm1iaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1dmJpZ2dkSGx3WlN3Z1ptNGdLVHRjYmx4MGZUdGNibjBnS1R0Y2JseHVYRzVjYmx4dWFsRjFaWEo1TG1WNGNISXVjSE5sZFdSdmN5NWhibWx0WVhSbFpDQTlJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSeVpYUjFjbTRnYWxGMVpYSjVMbWR5WlhBb0lHcFJkV1Z5ZVM1MGFXMWxjbk1zSUdaMWJtTjBhVzl1S0NCbWJpQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pXeGxiU0E5UFQwZ1ptNHVaV3hsYlR0Y2JseDBmU0FwTG14bGJtZDBhRHRjYm4wN1hHNWNibHh1WEc1Y2JpOHFLbHh1SUNvZ1IyVjBjeUJoSUhkcGJtUnZkeUJtY205dElHRnVJR1ZzWlcxbGJuUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBWMmx1Wkc5M0tDQmxiR1Z0SUNrZ2UxeHVYSFJ5WlhSMWNtNGdhbEYxWlhKNUxtbHpWMmx1Wkc5M0tDQmxiR1Z0SUNrZ1B5QmxiR1Z0SURvZ1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ09TQW1KaUJsYkdWdExtUmxabUYxYkhSV2FXVjNPMXh1ZlZ4dVhHNXFVWFZsY25rdWIyWm1jMlYwSUQwZ2UxeHVYSFJ6WlhSUFptWnpaWFE2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0J2Y0hScGIyNXpMQ0JwSUNrZ2UxeHVYSFJjZEhaaGNpQmpkWEpRYjNOcGRHbHZiaXdnWTNWeVRHVm1kQ3dnWTNWeVExTlRWRzl3TENCamRYSlViM0FzSUdOMWNrOW1abk5sZEN3Z1kzVnlRMU5UVEdWbWRDd2dZMkZzWTNWc1lYUmxVRzl6YVhScGIyNHNYRzVjZEZ4MFhIUndiM05wZEdsdmJpQTlJR3BSZFdWeWVTNWpjM01vSUdWc1pXMHNJRndpY0c5emFYUnBiMjVjSWlBcExGeHVYSFJjZEZ4MFkzVnlSV3hsYlNBOUlHcFJkV1Z5ZVNnZ1pXeGxiU0FwTEZ4dVhIUmNkRngwY0hKdmNITWdQU0I3ZlR0Y2JseHVYSFJjZEM4dklGTmxkQ0J3YjNOcGRHbHZiaUJtYVhKemRDd2dhVzR0WTJGelpTQjBiM0F2YkdWbWRDQmhjbVVnYzJWMElHVjJaVzRnYjI0Z2MzUmhkR2xqSUdWc1pXMWNibHgwWEhScFppQW9JSEJ2YzJsMGFXOXVJRDA5UFNCY0luTjBZWFJwWTF3aUlDa2dlMXh1WEhSY2RGeDBaV3hsYlM1emRIbHNaUzV3YjNOcGRHbHZiaUE5SUZ3aWNtVnNZWFJwZG1WY0lqdGNibHgwWEhSOVhHNWNibHgwWEhSamRYSlBabVp6WlhRZ1BTQmpkWEpGYkdWdExtOW1abk5sZENncE8xeHVYSFJjZEdOMWNrTlRVMVJ2Y0NBOUlHcFJkV1Z5ZVM1amMzTW9JR1ZzWlcwc0lGd2lkRzl3WENJZ0tUdGNibHgwWEhSamRYSkRVMU5NWldaMElEMGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0pzWldaMFhDSWdLVHRjYmx4MFhIUmpZV3hqZFd4aGRHVlFiM05wZEdsdmJpQTlJQ2dnY0c5emFYUnBiMjRnUFQwOUlGd2lZV0p6YjJ4MWRHVmNJaUI4ZkNCd2IzTnBkR2x2YmlBOVBUMGdYQ0ptYVhobFpGd2lJQ2tnSmlaY2JseDBYSFJjZENnZ1kzVnlRMU5UVkc5d0lDc2dZM1Z5UTFOVFRHVm1kQ0FwTG1sdVpHVjRUMllvSUZ3aVlYVjBiMXdpSUNrZ1BpQXRNVHRjYmx4dVhIUmNkQzh2SUU1bFpXUWdkRzhnWW1VZ1lXSnNaU0IwYnlCallXeGpkV3hoZEdVZ2NHOXphWFJwYjI0Z2FXWWdaV2wwYUdWeVhHNWNkRngwTHk4Z2RHOXdJRzl5SUd4bFpuUWdhWE1nWVhWMGJ5QmhibVFnY0c5emFYUnBiMjRnYVhNZ1pXbDBhR1Z5SUdGaWMyOXNkWFJsSUc5eUlHWnBlR1ZrWEc1Y2RGeDBhV1lnS0NCallXeGpkV3hoZEdWUWIzTnBkR2x2YmlBcElIdGNibHgwWEhSY2RHTjFjbEJ2YzJsMGFXOXVJRDBnWTNWeVJXeGxiUzV3YjNOcGRHbHZiaWdwTzF4dVhIUmNkRngwWTNWeVZHOXdJRDBnWTNWeVVHOXphWFJwYjI0dWRHOXdPMXh1WEhSY2RGeDBZM1Z5VEdWbWRDQTlJR04xY2xCdmMybDBhVzl1TG14bFpuUTdYRzVjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFkzVnlWRzl3SUQwZ2NHRnljMlZHYkc5aGRDZ2dZM1Z5UTFOVFZHOXdJQ2tnZkh3Z01EdGNibHgwWEhSY2RHTjFja3hsWm5RZ1BTQndZWEp6WlVac2IyRjBLQ0JqZFhKRFUxTk1aV1owSUNrZ2ZId2dNRHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvSUdwUmRXVnllUzVwYzBaMWJtTjBhVzl1S0NCdmNIUnBiMjV6SUNrZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUZWelpTQnFVWFZsY25rdVpYaDBaVzVrSUdobGNtVWdkRzhnWVd4c2IzY2diVzlrYVdacFkyRjBhVzl1SUc5bUlHTnZiM0prYVc1aGRHVnpJR0Z5WjNWdFpXNTBJQ2huYUMweE9EUTRLVnh1WEhSY2RGeDBiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTXVZMkZzYkNnZ1pXeGxiU3dnYVN3Z2FsRjFaWEo1TG1WNGRHVnVaQ2dnZTMwc0lHTjFjazltWm5ObGRDQXBJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCdmNIUnBiMjV6TG5SdmNDQWhQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBjSEp2Y0hNdWRHOXdJRDBnS0NCdmNIUnBiMjV6TG5SdmNDQXRJR04xY2s5bVpuTmxkQzUwYjNBZ0tTQXJJR04xY2xSdmNEdGNibHgwWEhSOVhHNWNkRngwYVdZZ0tDQnZjSFJwYjI1ekxteGxablFnSVQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEhCeWIzQnpMbXhsWm5RZ1BTQW9JRzl3ZEdsdmJuTXViR1ZtZENBdElHTjFjazltWm5ObGRDNXNaV1owSUNrZ0t5QmpkWEpNWldaME8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dYQ0oxYzJsdVoxd2lJR2x1SUc5d2RHbHZibk1nS1NCN1hHNWNkRngwWEhSdmNIUnBiMjV6TG5WemFXNW5MbU5oYkd3b0lHVnNaVzBzSUhCeWIzQnpJQ2s3WEc1Y2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBZM1Z5Uld4bGJTNWpjM01vSUhCeWIzQnpJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNTlPMXh1WEc1cVVYVmxjbmt1Wm00dVpYaDBaVzVrS0NCN1hHNWNkRzltWm5ObGREb2dablZ1WTNScGIyNG9JRzl3ZEdsdmJuTWdLU0I3WEc1Y2JseDBYSFF2THlCUWNtVnpaWEoyWlNCamFHRnBibWx1WnlCbWIzSWdjMlYwZEdWeVhHNWNkRngwYVdZZ0tDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHOXdkR2x2Ym5NZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvWEc1Y2RGeDBYSFJjZEhSb2FYTWdPbHh1WEhSY2RGeDBYSFIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NCcElDa2dlMXh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzV2Wm1aelpYUXVjMlYwVDJabWMyVjBLQ0IwYUdsekxDQnZjSFJwYjI1ekxDQnBJQ2s3WEc1Y2RGeDBYSFJjZEgwZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhSMllYSWdaRzlqUld4bGJTd2dkMmx1TENCeVpXTjBMQ0JrYjJNc1hHNWNkRngwWEhSbGJHVnRJRDBnZEdocGMxc2dNQ0JkTzF4dVhHNWNkRngwYVdZZ0tDQWhaV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVEV4SUc5dWJIbGNibHgwWEhRdkx5QlNkVzV1YVc1bklHZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0J2YmlCaFhHNWNkRngwTHk4Z1pHbHpZMjl1Ym1WamRHVmtJRzV2WkdVZ2FXNGdTVVVnZEdoeWIzZHpJR0Z1SUdWeWNtOXlYRzVjZEZ4MGFXWWdLQ0FoWld4bGJTNW5aWFJEYkdsbGJuUlNaV04wY3lncExteGxibWQwYUNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCN0lIUnZjRG9nTUN3Z2JHVm1kRG9nTUNCOU8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbFkzUWdQU0JsYkdWdExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTzF4dVhHNWNkRngwTHk4Z1RXRnJaU0J6ZFhKbElHVnNaVzFsYm5RZ2FYTWdibTkwSUdocFpHUmxiaUFvWkdsemNHeGhlVG9nYm05dVpTbGNibHgwWEhScFppQW9JSEpsWTNRdWQybGtkR2dnZkh3Z2NtVmpkQzVvWldsbmFIUWdLU0I3WEc1Y2RGeDBYSFJrYjJNZ1BTQmxiR1Z0TG05M2JtVnlSRzlqZFcxbGJuUTdYRzVjZEZ4MFhIUjNhVzRnUFNCblpYUlhhVzVrYjNjb0lHUnZZeUFwTzF4dVhIUmNkRngwWkc5alJXeGxiU0E5SUdSdll5NWtiMk4xYldWdWRFVnNaVzFsYm5RN1hHNWNibHgwWEhSY2RISmxkSFZ5YmlCN1hHNWNkRngwWEhSY2RIUnZjRG9nY21WamRDNTBiM0FnS3lCM2FXNHVjR0ZuWlZsUFptWnpaWFFnTFNCa2IyTkZiR1Z0TG1Oc2FXVnVkRlJ2Y0N4Y2JseDBYSFJjZEZ4MGJHVm1kRG9nY21WamRDNXNaV1owSUNzZ2QybHVMbkJoWjJWWVQyWm1jMlYwSUMwZ1pHOWpSV3hsYlM1amJHbGxiblJNWldaMFhHNWNkRngwWEhSOU8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGSmxkSFZ5YmlCNlpYSnZjeUJtYjNJZ1pHbHpZMjl1Ym1WamRHVmtJR0Z1WkNCb2FXUmtaVzRnWld4bGJXVnVkSE1nS0dkb0xUSXpNVEFwWEc1Y2RGeDBjbVYwZFhKdUlISmxZM1E3WEc1Y2RIMHNYRzVjYmx4MGNHOXphWFJwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RHbG1JQ2dnSVhSb2FYTmJJREFnWFNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFIyWVhJZ2IyWm1jMlYwVUdGeVpXNTBMQ0J2Wm1aelpYUXNYRzVjZEZ4MFhIUmxiR1Z0SUQwZ2RHaHBjMXNnTUNCZExGeHVYSFJjZEZ4MGNHRnlaVzUwVDJabWMyVjBJRDBnZXlCMGIzQTZJREFzSUd4bFpuUTZJREFnZlR0Y2JseHVYSFJjZEM4dklFWnBlR1ZrSUdWc1pXMWxiblJ6SUdGeVpTQnZabVp6WlhRZ1puSnZiU0IzYVc1a2IzY2dLSEJoY21WdWRFOW1abk5sZENBOUlIdDBiM0E2TUN3Z2JHVm1kRG9nTUgwc1hHNWNkRngwTHk4Z1ltVmpZWFZ6WlNCcGRDQnBjeUJwZEhNZ2IyNXNlU0J2Wm1aelpYUWdjR0Z5Wlc1MFhHNWNkRngwYVdZZ0tDQnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQmNJbkJ2YzJsMGFXOXVYQ0lnS1NBOVBUMGdYQ0ptYVhobFpGd2lJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkJjM04xYldVZ1oyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBJR2x6SUhSb1pYSmxJSGRvWlc0Z1kyOXRjSFYwWldRZ2NHOXphWFJwYjI0Z2FYTWdabWw0WldSY2JseDBYSFJjZEc5bVpuTmxkQ0E5SUdWc1pXMHVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrN1hHNWNibHgwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhRdkx5QkhaWFFnS25KbFlXd3FJRzltWm5ObGRGQmhjbVZ1ZEZ4dVhIUmNkRngwYjJabWMyVjBVR0Z5Wlc1MElEMGdkR2hwY3k1dlptWnpaWFJRWVhKbGJuUW9LVHRjYmx4dVhIUmNkRngwTHk4Z1IyVjBJR052Y25KbFkzUWdiMlptYzJWMGMxeHVYSFJjZEZ4MGIyWm1jMlYwSUQwZ2RHaHBjeTV2Wm1aelpYUW9LVHRjYmx4MFhIUmNkR2xtSUNnZ0lXcFJkV1Z5ZVM1dWIyUmxUbUZ0WlNnZ2IyWm1jMlYwVUdGeVpXNTBXeUF3SUYwc0lGd2lhSFJ0YkZ3aUlDa2dLU0I3WEc1Y2RGeDBYSFJjZEhCaGNtVnVkRTltWm5ObGRDQTlJRzltWm5ObGRGQmhjbVZ1ZEM1dlptWnpaWFFvS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdRV1JrSUc5bVpuTmxkRkJoY21WdWRDQmliM0prWlhKelhHNWNkRngwWEhSd1lYSmxiblJQWm1aelpYUWdQU0I3WEc1Y2RGeDBYSFJjZEhSdmNEb2djR0Z5Wlc1MFQyWm1jMlYwTG5SdmNDQXJJR3BSZFdWeWVTNWpjM01vSUc5bVpuTmxkRkJoY21WdWRGc2dNQ0JkTENCY0ltSnZjbVJsY2xSdmNGZHBaSFJvWENJc0lIUnlkV1VnS1N4Y2JseDBYSFJjZEZ4MGJHVm1kRG9nY0dGeVpXNTBUMlptYzJWMExteGxablFnS3lCcVVYVmxjbmt1WTNOektDQnZabVp6WlhSUVlYSmxiblJiSURBZ1hTd2dYQ0ppYjNKa1pYSk1aV1owVjJsa2RHaGNJaXdnZEhKMVpTQXBYRzVjZEZ4MFhIUjlPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRk4xWW5SeVlXTjBJSEJoY21WdWRDQnZabVp6WlhSeklHRnVaQ0JsYkdWdFpXNTBJRzFoY21kcGJuTmNibHgwWEhSeVpYUjFjbTRnZTF4dVhIUmNkRngwZEc5d09pQnZabVp6WlhRdWRHOXdJQzBnY0dGeVpXNTBUMlptYzJWMExuUnZjQ0F0SUdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUZ3aWJXRnlaMmx1Vkc5d1hDSXNJSFJ5ZFdVZ0tTeGNibHgwWEhSY2RHeGxablE2SUc5bVpuTmxkQzVzWldaMElDMGdjR0Z5Wlc1MFQyWm1jMlYwTG14bFpuUWdMU0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW0xaGNtZHBia3hsWm5SY0lpd2dkSEoxWlNBcFhHNWNkRngwZlR0Y2JseDBmU3hjYmx4dVhIUXZMeUJVYUdseklHMWxkR2h2WkNCM2FXeHNJSEpsZEhWeWJpQmtiMk4xYldWdWRFVnNaVzFsYm5RZ2FXNGdkR2hsSUdadmJHeHZkMmx1WnlCallYTmxjenBjYmx4MEx5OGdNU2tnUm05eUlIUm9aU0JsYkdWdFpXNTBJR2x1YzJsa1pTQjBhR1VnYVdaeVlXMWxJSGRwZEdodmRYUWdiMlptYzJWMFVHRnlaVzUwTENCMGFHbHpJRzFsZEdodlpDQjNhV3hzSUhKbGRIVnlibHh1WEhRdkx5QWdJQ0JrYjJOMWJXVnVkRVZzWlcxbGJuUWdiMllnZEdobElIQmhjbVZ1ZENCM2FXNWtiM2RjYmx4MEx5OGdNaWtnUm05eUlIUm9aU0JvYVdSa1pXNGdiM0lnWkdWMFlXTm9aV1FnWld4bGJXVnVkRnh1WEhRdkx5QXpLU0JHYjNJZ1ltOWtlU0J2Y2lCb2RHMXNJR1ZzWlcxbGJuUXNJR2t1WlM0Z2FXNGdZMkZ6WlNCdlppQjBhR1VnYUhSdGJDQnViMlJsSUMwZ2FYUWdkMmxzYkNCeVpYUjFjbTRnYVhSelpXeG1YRzVjZEM4dlhHNWNkQzh2SUdKMWRDQjBhRzl6WlNCbGVHTmxjSFJwYjI1eklIZGxjbVVnYm1WMlpYSWdjSEpsYzJWdWRHVmtJR0Z6SUdFZ2NtVmhiQ0JzYVdabElIVnpaUzFqWVhObGMxeHVYSFF2THlCaGJtUWdiV2xuYUhRZ1ltVWdZMjl1YzJsa1pYSmxaQ0JoY3lCdGIzSmxJSEJ5WldabGNtRmliR1VnY21WemRXeDBjeTVjYmx4MEx5OWNibHgwTHk4Z1ZHaHBjeUJzYjJkcFl5d2dhRzkzWlhabGNpd2dhWE1nYm05MElHZDFZWEpoYm5SbFpXUWdZVzVrSUdOaGJpQmphR0Z1WjJVZ1lYUWdZVzU1SUhCdmFXNTBJR2x1SUhSb1pTQm1kWFIxY21WY2JseDBiMlptYzJWMFVHRnlaVzUwT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXRZWEFvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJRzltWm5ObGRGQmhjbVZ1ZENBOUlIUm9hWE11YjJabWMyVjBVR0Z5Wlc1ME8xeHVYRzVjZEZ4MFhIUjNhR2xzWlNBb0lHOW1abk5sZEZCaGNtVnVkQ0FtSmlCcVVYVmxjbmt1WTNOektDQnZabVp6WlhSUVlYSmxiblFzSUZ3aWNHOXphWFJwYjI1Y0lpQXBJRDA5UFNCY0luTjBZWFJwWTF3aUlDa2dlMXh1WEhSY2RGeDBYSFJ2Wm1aelpYUlFZWEpsYm5RZ1BTQnZabVp6WlhSUVlYSmxiblF1YjJabWMyVjBVR0Z5Wlc1ME8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z2IyWm1jMlYwVUdGeVpXNTBJSHg4SUdSdlkzVnRaVzUwUld4bGJXVnVkRHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMWNibjBnS1R0Y2JseHVMeThnUTNKbFlYUmxJSE5qY205c2JFeGxablFnWVc1a0lITmpjbTlzYkZSdmNDQnRaWFJvYjJSelhHNXFVWFZsY25rdVpXRmphQ2dnZXlCelkzSnZiR3hNWldaME9pQmNJbkJoWjJWWVQyWm1jMlYwWENJc0lITmpjbTlzYkZSdmNEb2dYQ0p3WVdkbFdVOW1abk5sZEZ3aUlIMHNJR1oxYm1OMGFXOXVLQ0J0WlhSb2IyUXNJSEJ5YjNBZ0tTQjdYRzVjZEhaaGNpQjBiM0FnUFNCY0luQmhaMlZaVDJabWMyVjBYQ0lnUFQwOUlIQnliM0E3WEc1Y2JseDBhbEYxWlhKNUxtWnVXeUJ0WlhSb2IyUWdYU0E5SUdaMWJtTjBhVzl1S0NCMllXd2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHRmpZMlZ6Y3lnZ2RHaHBjeXdnWm5WdVkzUnBiMjRvSUdWc1pXMHNJRzFsZEdodlpDd2dkbUZzSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJSGRwYmlBOUlHZGxkRmRwYm1SdmR5Z2daV3hsYlNBcE8xeHVYRzVjZEZ4MFhIUnBaaUFvSUhaaGJDQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2QybHVJRDhnZDJsdVd5QndjbTl3SUYwZ09pQmxiR1Z0V3lCdFpYUm9iMlFnWFR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGFXWWdLQ0IzYVc0Z0tTQjdYRzVjZEZ4MFhIUmNkSGRwYmk1elkzSnZiR3hVYnloY2JseDBYSFJjZEZ4MFhIUWhkRzl3SUQ4Z2RtRnNJRG9nZDJsdUxuQmhaMlZZVDJabWMyVjBMRnh1WEhSY2RGeDBYSFJjZEhSdmNDQS9JSFpoYkNBNklIZHBiaTV3WVdkbFdVOW1abk5sZEZ4dVhIUmNkRngwWEhRcE8xeHVYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmxiR1Z0V3lCdFpYUm9iMlFnWFNBOUlIWmhiRHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMQ0J0WlhSb2IyUXNJSFpoYkN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBcE8xeHVYSFI5TzF4dWZTQXBPMXh1WEc0dkx5QlRkWEJ3YjNKME9pQlRZV1poY21rZ1BEMDNJQzBnT1M0eExDQkRhSEp2YldVZ1BEMHpOeUF0SURRNVhHNHZMeUJCWkdRZ2RHaGxJSFJ2Y0M5c1pXWjBJR056YzBodmIydHpJSFZ6YVc1bklHcFJkV1Z5ZVM1bWJpNXdiM05wZEdsdmJseHVMeThnVjJWaWEybDBJR0oxWnpvZ2FIUjBjSE02THk5aWRXZHpMbmRsWW10cGRDNXZjbWN2YzJodmQxOWlkV2N1WTJkcFAybGtQVEk1TURnMFhHNHZMeUJDYkdsdWF5QmlkV2M2SUdoMGRIQnpPaTh2WW5WbmN5NWphSEp2YldsMWJTNXZjbWN2Y0M5amFISnZiV2wxYlM5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRVNE9UTTBOMXh1THk4Z1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNCeVpYUjFjbTV6SUhCbGNtTmxiblFnZDJobGJpQnpjR1ZqYVdacFpXUWdabTl5SUhSdmNDOXNaV1owTDJKdmRIUnZiUzl5YVdkb2REdGNiaTh2SUhKaGRHaGxjaUIwYUdGdUlHMWhhMlVnZEdobElHTnpjeUJ0YjJSMWJHVWdaR1Z3Wlc1a0lHOXVJSFJvWlNCdlptWnpaWFFnYlc5a2RXeGxMQ0JxZFhOMElHTm9aV05ySUdadmNpQnBkQ0JvWlhKbFhHNXFVWFZsY25rdVpXRmphQ2dnV3lCY0luUnZjRndpTENCY0lteGxablJjSWlCZExDQm1kVzVqZEdsdmJpZ2dhU3dnY0hKdmNDQXBJSHRjYmx4MGFsRjFaWEo1TG1OemMwaHZiMnR6V3lCd2NtOXdJRjBnUFNCaFpHUkhaWFJJYjI5clNXWW9JSE4xY0hCdmNuUXVjR2w0Wld4UWIzTnBkR2x2Yml4Y2JseDBYSFJtZFc1amRHbHZiaWdnWld4bGJTd2dZMjl0Y0hWMFpXUWdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHTnZiWEIxZEdWa0lDa2dlMXh1WEhSY2RGeDBYSFJqYjIxd2RYUmxaQ0E5SUdOMWNrTlRVeWdnWld4bGJTd2djSEp2Y0NBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVsbUlHTjFja05UVXlCeVpYUjFjbTV6SUhCbGNtTmxiblJoWjJVc0lHWmhiR3hpWVdOcklIUnZJRzltWm5ObGRGeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2NtNTFiVzV2Ym5CNExuUmxjM1FvSUdOdmJYQjFkR1ZrSUNrZ1AxeHVYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTZ2daV3hsYlNBcExuQnZjMmwwYVc5dUtDbGJJSEJ5YjNBZ1hTQXJJRndpY0hoY0lpQTZYRzVjZEZ4MFhIUmNkRngwWTI5dGNIVjBaV1E3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhRcE8xeHVmU0FwTzF4dVhHNWNiaTh2SUVOeVpXRjBaU0JwYm01bGNraGxhV2RvZEN3Z2FXNXVaWEpYYVdSMGFDd2dhR1ZwWjJoMExDQjNhV1IwYUN3Z2IzVjBaWEpJWldsbmFIUWdZVzVrSUc5MWRHVnlWMmxrZEdnZ2JXVjBhRzlrYzF4dWFsRjFaWEo1TG1WaFkyZ29JSHNnU0dWcFoyaDBPaUJjSW1obGFXZG9kRndpTENCWGFXUjBhRG9nWENKM2FXUjBhRndpSUgwc0lHWjFibU4wYVc5dUtDQnVZVzFsTENCMGVYQmxJQ2tnZTF4dVhIUnFVWFZsY25rdVpXRmphQ2dnZXlCd1lXUmthVzVuT2lCY0ltbHVibVZ5WENJZ0t5QnVZVzFsTENCamIyNTBaVzUwT2lCMGVYQmxMQ0JjSWx3aU9pQmNJbTkxZEdWeVhDSWdLeUJ1WVcxbElIMHNYRzVjZEZ4MFpuVnVZM1JwYjI0b0lHUmxabUYxYkhSRmVIUnlZU3dnWm5WdVkwNWhiV1VnS1NCN1hHNWNibHgwWEhRdkx5Qk5ZWEpuYVc0Z2FYTWdiMjVzZVNCbWIzSWdiM1YwWlhKSVpXbG5hSFFzSUc5MWRHVnlWMmxrZEdoY2JseDBYSFJxVVhWbGNua3VabTViSUdaMWJtTk9ZVzFsSUYwZ1BTQm1kVzVqZEdsdmJpZ2diV0Z5WjJsdUxDQjJZV3gxWlNBcElIdGNibHgwWEhSY2RIWmhjaUJqYUdGcGJtRmliR1VnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNZbUlDZ2daR1ZtWVhWc2RFVjRkSEpoSUh4OElIUjVjR1Z2WmlCdFlYSm5hVzRnSVQwOUlGd2lZbTl2YkdWaGJsd2lJQ2tzWEc1Y2RGeDBYSFJjZEdWNGRISmhJRDBnWkdWbVlYVnNkRVY0ZEhKaElIeDhJQ2dnYldGeVoybHVJRDA5UFNCMGNuVmxJSHg4SUhaaGJIVmxJRDA5UFNCMGNuVmxJRDhnWENKdFlYSm5hVzVjSWlBNklGd2lZbTl5WkdWeVhDSWdLVHRjYmx4dVhIUmNkRngwY21WMGRYSnVJR0ZqWTJWemN5Z2dkR2hwY3l3Z1puVnVZM1JwYjI0b0lHVnNaVzBzSUhSNWNHVXNJSFpoYkhWbElDa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ1pHOWpPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtbHpWMmx1Wkc5M0tDQmxiR1Z0SUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QWtLQ0IzYVc1a2IzY2dLUzV2ZFhSbGNsZHBaSFJvTDBobGFXZG9kQ0J5WlhSMWNtNGdkeTlvSUdsdVkyeDFaR2x1WnlCelkzSnZiR3hpWVhKeklDaG5hQzB4TnpJNUtWeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQm1kVzVqVG1GdFpTNXBibVJsZUU5bUtDQmNJbTkxZEdWeVhDSWdLU0E5UFQwZ01DQS9YRzVjZEZ4MFhIUmNkRngwWEhSbGJHVnRXeUJjSW1sdWJtVnlYQ0lnS3lCdVlXMWxJRjBnT2x4dVhIUmNkRngwWEhSY2RGeDBaV3hsYlM1a2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblJiSUZ3aVkyeHBaVzUwWENJZ0t5QnVZVzFsSUYwN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCSFpYUWdaRzlqZFcxbGJuUWdkMmxrZEdnZ2IzSWdhR1ZwWjJoMFhHNWNkRngwWEhSY2RHbG1JQ2dnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnT1NBcElIdGNibHgwWEhSY2RGeDBYSFJrYjJNZ1BTQmxiR1Z0TG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRVZwZEdobGNpQnpZM0p2Ykd4YlYybGtkR2d2U0dWcFoyaDBYU0J2Y2lCdlptWnpaWFJiVjJsa2RHZ3ZTR1ZwWjJoMFhTQnZjaUJqYkdsbGJuUmJWMmxrZEdndlNHVnBaMmgwWFN4Y2JseDBYSFJjZEZ4MFhIUXZMeUIzYUdsamFHVjJaWElnYVhNZ1ozSmxZWFJsYzNSY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1RXRjBhQzV0WVhnb1hHNWNkRngwWEhSY2RGeDBYSFJsYkdWdExtSnZaSGxiSUZ3aWMyTnliMnhzWENJZ0t5QnVZVzFsSUYwc0lHUnZZMXNnWENKelkzSnZiR3hjSWlBcklHNWhiV1VnWFN4Y2JseDBYSFJjZEZ4MFhIUmNkR1ZzWlcwdVltOWtlVnNnWENKdlptWnpaWFJjSWlBcklHNWhiV1VnWFN3Z1pHOWpXeUJjSW05bVpuTmxkRndpSUNzZ2JtRnRaU0JkTEZ4dVhIUmNkRngwWEhSY2RGeDBaRzlqV3lCY0ltTnNhV1Z1ZEZ3aUlDc2dibUZ0WlNCZFhHNWNkRngwWEhSY2RGeDBLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCMllXeDFaU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOWNibHh1WEhSY2RGeDBYSFJjZEM4dklFZGxkQ0IzYVdSMGFDQnZjaUJvWldsbmFIUWdiMjRnZEdobElHVnNaVzFsYm5Rc0lISmxjWFZsYzNScGJtY2dZblYwSUc1dmRDQm1iM0pqYVc1bklIQmhjbk5sUm14dllYUmNibHgwWEhSY2RGeDBYSFJxVVhWbGNua3VZM056S0NCbGJHVnRMQ0IwZVhCbExDQmxlSFJ5WVNBcElEcGNibHh1WEhSY2RGeDBYSFJjZEM4dklGTmxkQ0IzYVdSMGFDQnZjaUJvWldsbmFIUWdiMjRnZEdobElHVnNaVzFsYm5SY2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdWMzUjViR1VvSUdWc1pXMHNJSFI1Y0dVc0lIWmhiSFZsTENCbGVIUnlZU0FwTzF4dVhIUmNkRngwZlN3Z2RIbHdaU3dnWTJoaGFXNWhZbXhsSUQ4Z2JXRnlaMmx1SURvZ2RXNWtaV1pwYm1Wa0xDQmphR0ZwYm1GaWJHVWdLVHRjYmx4MFhIUjlPMXh1WEhSOUlDazdYRzU5SUNrN1hHNWNibHh1YWxGMVpYSjVMbVp1TG1WNGRHVnVaQ2dnZTF4dVhHNWNkR0pwYm1RNklHWjFibU4wYVc5dUtDQjBlWEJsY3l3Z1pHRjBZU3dnWm00Z0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXViMjRvSUhSNWNHVnpMQ0J1ZFd4c0xDQmtZWFJoTENCbWJpQXBPMXh1WEhSOUxGeHVYSFIxYm1KcGJtUTZJR1oxYm1OMGFXOXVLQ0IwZVhCbGN5d2dabTRnS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdWIyWm1LQ0IwZVhCbGN5d2diblZzYkN3Z1ptNGdLVHRjYmx4MGZTeGNibHh1WEhSa1pXeGxaMkYwWlRvZ1puVnVZM1JwYjI0b0lITmxiR1ZqZEc5eUxDQjBlWEJsY3l3Z1pHRjBZU3dnWm00Z0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXViMjRvSUhSNWNHVnpMQ0J6Wld4bFkzUnZjaXdnWkdGMFlTd2dabTRnS1R0Y2JseDBmU3hjYmx4MGRXNWtaV3hsWjJGMFpUb2dablZ1WTNScGIyNG9JSE5sYkdWamRHOXlMQ0IwZVhCbGN5d2dabTRnS1NCN1hHNWNibHgwWEhRdkx5QW9JRzVoYldWemNHRmpaU0FwSUc5eUlDZ2djMlZzWldOMGIzSXNJSFI1Y0dWeklGc3NJR1p1WFNBcFhHNWNkRngwY21WMGRYSnVJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURFZ1AxeHVYSFJjZEZ4MGRHaHBjeTV2Wm1Zb0lITmxiR1ZqZEc5eUxDQmNJaW9xWENJZ0tTQTZYRzVjZEZ4MFhIUjBhR2x6TG05bVppZ2dkSGx3WlhNc0lITmxiR1ZqZEc5eUlIeDhJRndpS2lwY0lpd2dabTRnS1R0Y2JseDBmVnh1ZlNBcE8xeHVYRzVxVVhWbGNua3VjR0Z5YzJWS1UwOU9JRDBnU2xOUFRpNXdZWEp6WlR0Y2JseHVYRzVjYmx4dUx5OGdVbVZuYVhOMFpYSWdZWE1nWVNCdVlXMWxaQ0JCVFVRZ2JXOWtkV3hsTENCemFXNWpaU0JxVVhWbGNua2dZMkZ1SUdKbElHTnZibU5oZEdWdVlYUmxaQ0IzYVhSb0lHOTBhR1Z5WEc0dkx5Qm1hV3hsY3lCMGFHRjBJRzFoZVNCMWMyVWdaR1ZtYVc1bExDQmlkWFFnYm05MElIWnBZU0JoSUhCeWIzQmxjaUJqYjI1allYUmxibUYwYVc5dUlITmpjbWx3ZENCMGFHRjBYRzR2THlCMWJtUmxjbk4wWVc1a2N5QmhibTl1ZVcxdmRYTWdRVTFFSUcxdlpIVnNaWE11SUVFZ2JtRnRaV1FnUVUxRUlHbHpJSE5oWm1WemRDQmhibVFnYlc5emRDQnliMkoxYzNSY2JpOHZJSGRoZVNCMGJ5QnlaV2RwYzNSbGNpNGdURzkzWlhKallYTmxJR3B4ZFdWeWVTQnBjeUIxYzJWa0lHSmxZMkYxYzJVZ1FVMUVJRzF2WkhWc1pTQnVZVzFsY3lCaGNtVmNiaTh2SUdSbGNtbDJaV1FnWm5KdmJTQm1hV3hsSUc1aGJXVnpMQ0JoYm1RZ2FsRjFaWEo1SUdseklHNXZjbTFoYkd4NUlHUmxiR2wyWlhKbFpDQnBiaUJoSUd4dmQyVnlZMkZ6WlZ4dUx5OGdabWxzWlNCdVlXMWxMaUJFYnlCMGFHbHpJR0ZtZEdWeUlHTnlaV0YwYVc1bklIUm9aU0JuYkc5aVlXd2djMjhnZEdoaGRDQnBaaUJoYmlCQlRVUWdiVzlrZFd4bElIZGhiblJ6WEc0dkx5QjBieUJqWVd4c0lHNXZRMjl1Wm14cFkzUWdkRzhnYUdsa1pTQjBhR2x6SUhabGNuTnBiMjRnYjJZZ2FsRjFaWEo1TENCcGRDQjNhV3hzSUhkdmNtc3VYRzVjYmk4dklFNXZkR1VnZEdoaGRDQm1iM0lnYldGNGFXMTFiU0J3YjNKMFlXSnBiR2wwZVN3Z2JHbGljbUZ5YVdWeklIUm9ZWFFnWVhKbElHNXZkQ0JxVVhWbGNua2djMmh2ZFd4a1hHNHZMeUJrWldOc1lYSmxJSFJvWlcxelpXeDJaWE1nWVhNZ1lXNXZibmx0YjNWeklHMXZaSFZzWlhNc0lHRnVaQ0JoZG05cFpDQnpaWFIwYVc1bklHRWdaMnh2WW1Gc0lHbG1JR0Z1WEc0dkx5QkJUVVFnYkc5aFpHVnlJR2x6SUhCeVpYTmxiblF1SUdwUmRXVnllU0JwY3lCaElITndaV05wWVd3Z1kyRnpaUzRnUm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0c0lITmxaVnh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwycHlZblZ5YTJVdmNtVnhkV2x5WldwekwzZHBhMmt2VlhCa1lYUnBibWN0WlhocGMzUnBibWN0YkdsaWNtRnlhV1Z6STNkcGEya3RZVzV2Ymx4dVhHNXBaaUFvSUhSNWNHVnZaaUJrWldacGJtVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJrWldacGJtVXVZVzFrSUNrZ2UxeHVYSFJrWldacGJtVW9JRndpYW5GMVpYSjVYQ0lzSUZ0ZExDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2FsRjFaWEo1TzF4dVhIUjlJQ2s3WEc1OVhHNWNibHh1WEc1Y2JuWmhjbHh1WEc1Y2RDOHZJRTFoY0NCdmRtVnlJR3BSZFdWeWVTQnBiaUJqWVhObElHOW1JRzkyWlhKM2NtbDBaVnh1WEhSZmFsRjFaWEo1SUQwZ2QybHVaRzkzTG1wUmRXVnllU3hjYmx4dVhIUXZMeUJOWVhBZ2IzWmxjaUIwYUdVZ0pDQnBiaUJqWVhObElHOW1JRzkyWlhKM2NtbDBaVnh1WEhSZkpDQTlJSGRwYm1SdmR5NGtPMXh1WEc1cVVYVmxjbmt1Ym05RGIyNW1iR2xqZENBOUlHWjFibU4wYVc5dUtDQmtaV1Z3SUNrZ2UxeHVYSFJwWmlBb0lIZHBibVJ2ZHk0a0lEMDlQU0JxVVhWbGNua2dLU0I3WEc1Y2RGeDBkMmx1Wkc5M0xpUWdQU0JmSkR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2dnWkdWbGNDQW1KaUIzYVc1a2IzY3VhbEYxWlhKNUlEMDlQU0JxVVhWbGNua2dLU0I3WEc1Y2RGeDBkMmx1Wkc5M0xtcFJkV1Z5ZVNBOUlGOXFVWFZsY25rN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2FsRjFaWEo1TzF4dWZUdGNibHh1THk4Z1JYaHdiM05sSUdwUmRXVnllU0JoYm1RZ0pDQnBaR1Z1ZEdsbWFXVnljeXdnWlhabGJpQnBiaUJCVFVSY2JpOHZJQ2dqTnpFd01pTmpiMjF0Wlc1ME9qRXdMQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YW5GMVpYSjVMMnB4ZFdWeWVTOXdkV3hzTHpVMU55bGNiaTh2SUdGdVpDQkRiMjF0YjI1S1V5Qm1iM0lnWW5KdmQzTmxjaUJsYlhWc1lYUnZjbk1nS0NNeE16VTJOaWxjYm1sbUlDZ2dJVzV2UjJ4dlltRnNJQ2tnZTF4dVhIUjNhVzVrYjNjdWFsRjFaWEo1SUQwZ2QybHVaRzkzTGlRZ1BTQnFVWFZsY25rN1hHNTlYRzVjYmx4dVhHNWNibHh1Y21WMGRYSnVJR3BSZFdWeWVUdGNibjBnS1R0Y2JpSXNJaThxSUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dUlDb2dRbTl2ZEhOMGNtRndPaUJoWm1acGVDNXFjeUIyTXk0ekxqZGNiaUFxSUdoMGRIQTZMeTluWlhSaWIyOTBjM1J5WVhBdVkyOXRMMnBoZG1GelkzSnBjSFF2STJGbVptbDRYRzRnS2lBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFeExUSXdNVFlnVkhkcGRIUmxjaXdnU1c1akxseHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdUVWxVSUNob2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRIZGljeTlpYjI5MGMzUnlZWEF2WW14dllpOXRZWE4wWlhJdlRFbERSVTVUUlNsY2JpQXFJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNWNiaXRtZFc1amRHbHZiaUFvSkNrZ2UxeHVJQ0FuZFhObElITjBjbWxqZENjN1hHNWNiaUFnTHk4Z1FVWkdTVmdnUTB4QlUxTWdSRVZHU1U1SlZFbFBUbHh1SUNBdkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JpQWdkbUZ5SUVGbVptbDRJRDBnWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQWtMbVY0ZEdWdVpDaDdmU3dnUVdabWFYZ3VSRVZHUVZWTVZGTXNJRzl3ZEdsdmJuTXBYRzVjYmlBZ0lDQjBhR2x6TGlSMFlYSm5aWFFnUFNBa0tIUm9hWE11YjNCMGFXOXVjeTUwWVhKblpYUXBYRzRnSUNBZ0lDQXViMjRvSjNOamNtOXNiQzVpY3k1aFptWnBlQzVrWVhSaExXRndhU2NzSUNRdWNISnZlSGtvZEdocGN5NWphR1ZqYTFCdmMybDBhVzl1TENCMGFHbHpLU2xjYmlBZ0lDQWdJQzV2YmlnblkyeHBZMnN1WW5NdVlXWm1hWGd1WkdGMFlTMWhjR2tuTENBZ0pDNXdjbTk0ZVNoMGFHbHpMbU5vWldOclVHOXphWFJwYjI1WGFYUm9SWFpsYm5STWIyOXdMQ0IwYUdsektTbGNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblFnSUNBZ0lEMGdKQ2hsYkdWdFpXNTBLVnh1SUNBZ0lIUm9hWE11WVdabWFYaGxaQ0FnSUNBZ0lEMGdiblZzYkZ4dUlDQWdJSFJvYVhNdWRXNXdhVzRnSUNBZ0lDQWdJRDBnYm5Wc2JGeHVJQ0FnSUhSb2FYTXVjR2x1Ym1Wa1QyWm1jMlYwSUQwZ2JuVnNiRnh1WEc0Z0lDQWdkR2hwY3k1amFHVmphMUJ2YzJsMGFXOXVLQ2xjYmlBZ2ZWeHVYRzRnSUVGbVptbDRMbFpGVWxOSlQwNGdJRDBnSnpNdU15NDNKMXh1WEc0Z0lFRm1abWw0TGxKRlUwVlVJQ0FnSUQwZ0oyRm1abWw0SUdGbVptbDRMWFJ2Y0NCaFptWnBlQzFpYjNSMGIyMG5YRzVjYmlBZ1FXWm1hWGd1UkVWR1FWVk1WRk1nUFNCN1hHNGdJQ0FnYjJabWMyVjBPaUF3TEZ4dUlDQWdJSFJoY21kbGREb2dkMmx1Wkc5M1hHNGdJSDFjYmx4dUlDQkJabVpwZUM1d2NtOTBiM1I1Y0dVdVoyVjBVM1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9jMk55YjJ4c1NHVnBaMmgwTENCb1pXbG5hSFFzSUc5bVpuTmxkRlJ2Y0N3Z2IyWm1jMlYwUW05MGRHOXRLU0I3WEc0Z0lDQWdkbUZ5SUhOamNtOXNiRlJ2Y0NBZ0lDQTlJSFJvYVhNdUpIUmhjbWRsZEM1elkzSnZiR3hVYjNBb0tWeHVJQ0FnSUhaaGNpQndiM05wZEdsdmJpQWdJQ0FnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbTltWm5ObGRDZ3BYRzRnSUNBZ2RtRnlJSFJoY21kbGRFaGxhV2RvZENBOUlIUm9hWE11SkhSaGNtZGxkQzVvWldsbmFIUW9LVnh1WEc0Z0lDQWdhV1lnS0c5bVpuTmxkRlJ2Y0NBaFBTQnVkV3hzSUNZbUlIUm9hWE11WVdabWFYaGxaQ0E5UFNBbmRHOXdKeWtnY21WMGRYSnVJSE5qY205c2JGUnZjQ0E4SUc5bVpuTmxkRlJ2Y0NBL0lDZDBiM0FuSURvZ1ptRnNjMlZjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbUZtWm1sNFpXUWdQVDBnSjJKdmRIUnZiU2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHZabVp6WlhSVWIzQWdJVDBnYm5Wc2JDa2djbVYwZFhKdUlDaHpZM0p2Ykd4VWIzQWdLeUIwYUdsekxuVnVjR2x1SUR3OUlIQnZjMmwwYVc5dUxuUnZjQ2tnUHlCbVlXeHpaU0E2SUNkaWIzUjBiMjBuWEc0Z0lDQWdJQ0J5WlhSMWNtNGdLSE5qY205c2JGUnZjQ0FySUhSaGNtZGxkRWhsYVdkb2RDQThQU0J6WTNKdmJHeElaV2xuYUhRZ0xTQnZabVp6WlhSQ2IzUjBiMjBwSUQ4Z1ptRnNjMlVnT2lBblltOTBkRzl0SjF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCcGJtbDBhV0ZzYVhwcGJtY2dJQ0E5SUhSb2FYTXVZV1ptYVhobFpDQTlQU0J1ZFd4c1hHNGdJQ0FnZG1GeUlHTnZiR3hwWkdWeVZHOXdJQ0FnSUQwZ2FXNXBkR2xoYkdsNmFXNW5JRDhnYzJOeWIyeHNWRzl3SURvZ2NHOXphWFJwYjI0dWRHOXdYRzRnSUNBZ2RtRnlJR052Ykd4cFpHVnlTR1ZwWjJoMElEMGdhVzVwZEdsaGJHbDZhVzVuSUQ4Z2RHRnlaMlYwU0dWcFoyaDBJRG9nYUdWcFoyaDBYRzVjYmlBZ0lDQnBaaUFvYjJabWMyVjBWRzl3SUNFOUlHNTFiR3dnSmlZZ2MyTnliMnhzVkc5d0lEdzlJRzltWm5ObGRGUnZjQ2tnY21WMGRYSnVJQ2QwYjNBblhHNGdJQ0FnYVdZZ0tHOW1abk5sZEVKdmRIUnZiU0FoUFNCdWRXeHNJQ1ltSUNoamIyeHNhV1JsY2xSdmNDQXJJR052Ykd4cFpHVnlTR1ZwWjJoMElENDlJSE5qY205c2JFaGxhV2RvZENBdElHOW1abk5sZEVKdmRIUnZiU2twSUhKbGRIVnliaUFuWW05MGRHOXRKMXh1WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNibHh1SUNCQlptWnBlQzV3Y205MGIzUjVjR1V1WjJWMFVHbHVibVZrVDJabWMyVjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CcGJtNWxaRTltWm5ObGRDa2djbVYwZFhKdUlIUm9hWE11Y0dsdWJtVmtUMlptYzJWMFhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXlaVzF2ZG1WRGJHRnpjeWhCWm1acGVDNVNSVk5GVkNrdVlXUmtRMnhoYzNNb0oyRm1abWw0SnlsY2JpQWdJQ0IyWVhJZ2MyTnliMnhzVkc5d0lEMGdkR2hwY3k0a2RHRnlaMlYwTG5OamNtOXNiRlJ2Y0NncFhHNGdJQ0FnZG1GeUlIQnZjMmwwYVc5dUlDQTlJSFJvYVhNdUpHVnNaVzFsYm5RdWIyWm1jMlYwS0NsY2JpQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWNHbHVibVZrVDJabWMyVjBJRDBnY0c5emFYUnBiMjR1ZEc5d0lDMGdjMk55YjJ4c1ZHOXdLVnh1SUNCOVhHNWNiaUFnUVdabWFYZ3VjSEp2ZEc5MGVYQmxMbU5vWldOclVHOXphWFJwYjI1WGFYUm9SWFpsYm5STWIyOXdJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhObGRGUnBiV1Z2ZFhRb0pDNXdjbTk0ZVNoMGFHbHpMbU5vWldOclVHOXphWFJwYjI0c0lIUm9hWE1wTENBeEtWeHVJQ0I5WEc1Y2JpQWdRV1ptYVhndWNISnZkRzkwZVhCbExtTm9aV05yVUc5emFYUnBiMjRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxpUmxiR1Z0Wlc1MExtbHpLQ2M2ZG1semFXSnNaU2NwS1NCeVpYUjFjbTVjYmx4dUlDQWdJSFpoY2lCb1pXbG5hSFFnSUNBZ0lDQWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtaGxhV2RvZENncFhHNGdJQ0FnZG1GeUlHOW1abk5sZENBZ0lDQWdJQ0E5SUhSb2FYTXViM0IwYVc5dWN5NXZabVp6WlhSY2JpQWdJQ0IyWVhJZ2IyWm1jMlYwVkc5d0lDQWdJRDBnYjJabWMyVjBMblJ2Y0Z4dUlDQWdJSFpoY2lCdlptWnpaWFJDYjNSMGIyMGdQU0J2Wm1aelpYUXVZbTkwZEc5dFhHNGdJQ0FnZG1GeUlITmpjbTlzYkVobGFXZG9kQ0E5SUUxaGRHZ3ViV0Y0S0NRb1pHOWpkVzFsYm5RcExtaGxhV2RvZENncExDQWtLR1J2WTNWdFpXNTBMbUp2WkhrcExtaGxhV2RvZENncEtWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnZabVp6WlhRZ0lUMGdKMjlpYW1WamRDY3BJQ0FnSUNBZ0lDQWdiMlptYzJWMFFtOTBkRzl0SUQwZ2IyWm1jMlYwVkc5d0lEMGdiMlptYzJWMFhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlptWnpaWFJVYjNBZ1BUMGdKMloxYm1OMGFXOXVKeWtnSUNBZ2IyWm1jMlYwVkc5d0lDQWdJRDBnYjJabWMyVjBMblJ2Y0NoMGFHbHpMaVJsYkdWdFpXNTBLVnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMlptYzJWMFFtOTBkRzl0SUQwOUlDZG1kVzVqZEdsdmJpY3BJRzltWm5ObGRFSnZkSFJ2YlNBOUlHOW1abk5sZEM1aWIzUjBiMjBvZEdocGN5NGtaV3hsYldWdWRDbGNibHh1SUNBZ0lIWmhjaUJoWm1acGVDQTlJSFJvYVhNdVoyVjBVM1JoZEdVb2MyTnliMnhzU0dWcFoyaDBMQ0JvWldsbmFIUXNJRzltWm5ObGRGUnZjQ3dnYjJabWMyVjBRbTkwZEc5dEtWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVlXWm1hWGhsWkNBaFBTQmhabVpwZUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRXNXdhVzRnSVQwZ2JuVnNiQ2tnZEdocGN5NGtaV3hsYldWdWRDNWpjM01vSjNSdmNDY3NJQ2NuS1Z4dVhHNGdJQ0FnSUNCMllYSWdZV1ptYVhoVWVYQmxJRDBnSjJGbVptbDRKeUFySUNoaFptWnBlQ0EvSUNjdEp5QXJJR0ZtWm1sNElEb2dKeWNwWEc0Z0lDQWdJQ0IyWVhJZ1pTQWdJQ0FnSUNBZ0lEMGdKQzVGZG1WdWRDaGhabVpwZUZSNWNHVWdLeUFuTG1KekxtRm1abWw0SnlsY2JseHVJQ0FnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzUwY21sbloyVnlLR1VwWEc1Y2JpQWdJQ0FnSUdsbUlDaGxMbWx6UkdWbVlYVnNkRkJ5WlhabGJuUmxaQ2dwS1NCeVpYUjFjbTVjYmx4dUlDQWdJQ0FnZEdocGN5NWhabVpwZUdWa0lEMGdZV1ptYVhoY2JpQWdJQ0FnSUhSb2FYTXVkVzV3YVc0Z1BTQmhabVpwZUNBOVBTQW5ZbTkwZEc5dEp5QS9JSFJvYVhNdVoyVjBVR2x1Ym1Wa1QyWm1jMlYwS0NrZ09pQnVkV3hzWEc1Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdMbkpsYlc5MlpVTnNZWE56S0VGbVptbDRMbEpGVTBWVUtWeHVJQ0FnSUNBZ0lDQXVZV1JrUTJ4aGMzTW9ZV1ptYVhoVWVYQmxLVnh1SUNBZ0lDQWdJQ0F1ZEhKcFoyZGxjaWhoWm1acGVGUjVjR1V1Y21Wd2JHRmpaU2duWVdabWFYZ25MQ0FuWVdabWFYaGxaQ2NwSUNzZ0p5NWljeTVoWm1acGVDY3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR0ZtWm1sNElEMDlJQ2RpYjNSMGIyMG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1abk5sZENoN1hHNGdJQ0FnSUNBZ0lIUnZjRG9nYzJOeWIyeHNTR1ZwWjJoMElDMGdhR1ZwWjJoMElDMGdiMlptYzJWMFFtOTBkRzl0WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzVjYmlBZ0x5OGdRVVpHU1ZnZ1VFeFZSMGxPSUVSRlJrbE9TVlJKVDA1Y2JpQWdMeThnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1SUNCbWRXNWpkR2x2YmlCUWJIVm5hVzRvYjNCMGFXOXVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ0pIUm9hWE1nSUNBOUlDUW9kR2hwY3lsY2JpQWdJQ0FnSUhaaGNpQmtZWFJoSUNBZ0lEMGdKSFJvYVhNdVpHRjBZU2duWW5NdVlXWm1hWGduS1Z4dUlDQWdJQ0FnZG1GeUlHOXdkR2x2Ym5NZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1SUQwOUlDZHZZbXBsWTNRbklDWW1JRzl3ZEdsdmJseHVYRzRnSUNBZ0lDQnBaaUFvSVdSaGRHRXBJQ1IwYUdsekxtUmhkR0VvSjJKekxtRm1abWw0Snl3Z0tHUmhkR0VnUFNCdVpYY2dRV1ptYVhnb2RHaHBjeXdnYjNCMGFXOXVjeWtwS1Z4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjRnUFQwZ0ozTjBjbWx1WnljcElHUmhkR0ZiYjNCMGFXOXVYU2dwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQnZiR1FnUFNBa0xtWnVMbUZtWm1sNFhHNWNiaUFnSkM1bWJpNWhabVpwZUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRkJzZFdkcGJseHVJQ0FrTG1adUxtRm1abWw0TGtOdmJuTjBjblZqZEc5eUlEMGdRV1ptYVhoY2JseHVYRzRnSUM4dklFRkdSa2xZSUU1UElFTlBUa1pNU1VOVVhHNGdJQzh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JpQWdKQzVtYmk1aFptWnBlQzV1YjBOdmJtWnNhV04wSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDUXVabTR1WVdabWFYZ2dQU0J2YkdSY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzVjYmx4dUlDQXZMeUJCUmtaSldDQkVRVlJCTFVGUVNWeHVJQ0F2THlBOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0Z0lDUW9kMmx1Wkc5M0tTNXZiaWduYkc5aFpDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FrS0NkYlpHRjBZUzF6Y0hrOVhDSmhabVpwZUZ3aVhTY3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkbUZ5SUNSemNIa2dQU0FrS0hSb2FYTXBYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJQ1J6Y0hrdVpHRjBZU2dwWEc1Y2JpQWdJQ0FnSUdSaGRHRXViMlptYzJWMElEMGdaR0YwWVM1dlptWnpaWFFnZkh3Z2UzMWNibHh1SUNBZ0lDQWdhV1lnS0dSaGRHRXViMlptYzJWMFFtOTBkRzl0SUNFOUlHNTFiR3dwSUdSaGRHRXViMlptYzJWMExtSnZkSFJ2YlNBOUlHUmhkR0V1YjJabWMyVjBRbTkwZEc5dFhHNGdJQ0FnSUNCcFppQW9aR0YwWVM1dlptWnpaWFJVYjNBZ0lDQWdJVDBnYm5Wc2JDa2daR0YwWVM1dlptWnpaWFF1ZEc5d0lDQWdJRDBnWkdGMFlTNXZabVp6WlhSVWIzQmNibHh1SUNBZ0lDQWdVR3gxWjJsdUxtTmhiR3dvSkhOd2VTd2daR0YwWVNsY2JpQWdJQ0I5S1Z4dUlDQjlLVnh1WEc1OUtHcFJkV1Z5ZVNrN1hHNGlMQ0lvWm5WdVkzUnBiMjRvS1h0MllYSWdKR005Wm5WdVkzUnBiMjRvWVNsN2RHaHBjeTUzUFdGOGZGdGRmVHNrWXk1d2NtOTBiM1I1Y0dVdWMyVjBQV1oxYm1OMGFXOXVLR0VwZTNSb2FYTXVkMXRoWFQwaE1IMDdKR011Y0hKdmRHOTBlWEJsTG1WdVkyOWtaVDFtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWVQxYlhTeGlQVEE3WWp4MGFHbHpMbmN1YkdWdVozUm9PMklyS3lsMGFHbHpMbmRiWWwwbUppaGhXMDFoZEdndVpteHZiM0lvWWk4MktWMWVQVEU4UEdJbE5pazdabTl5S0dJOU1EdGlQR0V1YkdWdVozUm9PMklyS3lsaFcySmRQVndpUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGt0WDF3aUxtTm9ZWEpCZENoaFcySmRmSHd3S1R0eVpYUjFjbTRnWVM1cWIybHVLRndpWENJcEsxd2lmbHdpZlR0MllYSWdkbVE5Ym1WM0lDUmpPMloxYm1OMGFXOXVJRW9vWVNsN2RtUXVjMlYwS0dFcGZYWmhjaUJPWkQxbWRXNWpkR2x2YmloaExHSXBlM1poY2lCalBXNWxkeUFrWXloRVpDaGhLU2s3WXk1elpYUW9ZaWs3WVM1elpYUW9SMlFzWXk1M0tYMHNWR1E5Wm5WdVkzUnBiMjRvWVNsN1lUMUVaQ2hoS1R0aFBXNWxkeUFrWXloaEtUdG1iM0lvZG1GeUlHSTlkbVF1ZHk1emJHbGpaU2dwTEdNOU1EdGpQR0V1ZHk1c1pXNW5kR2c3WXlzcktXSmJZMTA5WWx0alhYeDhZUzUzVzJOZE8zSmxkSFZ5YmlodVpYY2dKR01vWWlrcExtVnVZMjlrWlNncGZTeEVaRDFtZFc1amRHbHZiaWhoS1h0aFBXRXVaMlYwS0Vka0tUdHJZU2hoS1h4OEtHRTlXMTBwTzNKbGRIVnliaUJoZlR0MllYSWdaV0U5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1lYMHNhMkU5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1WENKYmIySnFaV04wSUVGeWNtRjVYVndpUFQxUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29UMkpxWldOMEtHRXBLWDBzY1dFOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlIWnZhV1FnTUNFOVlTWW1MVEU4S0dFdVkyOXVjM1J5ZFdOMGIzSXJYQ0pjSWlrdWFXNWtaWGhQWmloY0lsTjBjbWx1WjF3aUtYMHNSRDFtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlBd1BUMWhMbWx1WkdWNFQyWW9ZaWw5TEhOaFBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhQMkV1Y21Wd2JHRmpaU2d2WGx0Y1hITmNYSGhoTUYwcmZGdGNYSE5jWEhoaE1GMHJKQzluTEZ3aVhDSXBPbHdpWENKOUxIUmhQV1oxYm1OMGFXOXVLR0VwZTNaaGNpQmlQVTB1WTNKbFlYUmxSV3hsYldWdWRDaGNJbWx0WjF3aUtUdGlMbmRwWkhSb1BURTdZaTVvWldsbmFIUTlNVHRpTG5OeVl6MWhPM0psZEhWeWJpQmlmU3gxWVQxbWRXNWpkR2x2YmlncGUzMHNTejFtZFc1amRHbHZiaWhoS1h0cFppaGxibU52WkdWVlVrbERiMjF3YjI1bGJuUWdhVzV6ZEdGdVkyVnZaaUJHZFc1amRHbHZiaWx5WlhSMWNtNGdaVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR0VwTzBvb01qZ3BPM0psZEhWeWJpQmhmU3hjYmt3OVpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2RISjVlMkV1WVdSa1JYWmxiblJNYVhOMFpXNWxjajloTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWWl4akxDRWhaQ2s2WVM1aGRIUmhZMmhGZG1WdWRDWW1ZUzVoZEhSaFkyaEZkbVZ1ZENoY0ltOXVYQ0lyWWl4aktYMWpZWFJqYUNobEtYdEtLREkzS1gxOUxHWTlMMTViWEZ4M1hGd3RPaTh1UHowbUpTRmRLeVF2TEhkaFBXWjFibU4wYVc5dUtHRXNZaXhqTEdRcGUyRW1KaWhqUHloa1BWd2lYQ0lzWWlZbVppNTBaWE4wS0dJcEppWW9aRDBuSUdsa1BWd2lKeXRpS3lkY0lpY3BMR1l1ZEdWemRDaGhLU1ltVFM1M2NtbDBaU2hjSWp4elkzSnBjSFJjSWl0a0t5Y2djM0pqUFZ3aUp5dGhLeWRjSWo1Y1hIZ3pZeTl6WTNKcGNIUStKeWtwT2loalBVMHVZM0psWVhSbFJXeGxiV1Z1ZENoY0luTmpjbWx3ZEZ3aUtTeGpMblI1Y0dVOVhDSjBaWGgwTDJwaGRtRnpZM0pwY0hSY0lpeGpMbUZ6ZVc1alBTRXdMR011YzNKalBXRXNaQ1ltS0dNdWIyNXNiMkZrUFdRcExHSW1KaWhqTG1sa1BXSXBMR0U5VFM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTaGNJbk5qY21sd2RGd2lLVnN3WFN4aExuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0dNc1lTa3BLWDBzVldROVpuVnVZM1JwYjI0b0tYdHlaWFIxY201Y0ltaDBkSEJ6T2x3aVBUMU5MbXh2WTJGMGFXOXVMbkJ5YjNSdlkyOXNmU3hGUFZ4dVpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNG9ZVDFoTG0xaGRHTm9LRndpS0Q4Nkpud2pmRnhjWEZ3L0tWd2lLMHNvWWlrdWNtVndiR0ZqWlNndktGc3VLaXMvWGowaE9pUjdmU2dwZkZ4Y1cxeGNYVnhjTDF4Y1hGeGRLUzluTEZ3aVhGeGNYQ1F4WENJcEsxd2lQU2hiWGlZalhTb3BYQ0lwS1NZbU1qMDlZUzVzWlc1bmRHZy9ZVnN4WFRwY0lsd2lmU3g0WVQxbWRXNWpkR2x2YmlncGUzWmhjaUJoUFZ3aVhDSXJUUzVzYjJOaGRHbHZiaTVvYjNOMGJtRnRaVHR5WlhSMWNtNGdNRDA5WVM1cGJtUmxlRTltS0Z3aWQzZDNMbHdpS1Q5aExuTjFZbk4wY21sdVp5ZzBLVHBoZlN4NVlUMW1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMU5MbkpsWm1WeWNtVnlPMmxtS0M5ZWFIUjBjSE0vT2x4Y0wxeGNMeTlwTG5SbGMzUW9ZaWtwZTJsbUtHRXBjbVYwZFhKdUlHSTdZVDFjSWk4dlhDSXJUUzVzYjJOaGRHbHZiaTVvYjNOMGJtRnRaVHQyWVhJZ1l6MWlMbWx1WkdWNFQyWW9ZU2s3YVdZb05UMDlZM3g4TmowOVl5bHBaaWhoUFdJdVkyaGhja0YwS0dNcllTNXNaVzVuZEdncExGd2lMMXdpUFQxaGZIeGNJajljSWowOVlYeDhYQ0pjSWowOVlYeDhYQ0k2WENJOVBXRXBjbVYwZFhKdU8zSmxkSFZ5YmlCaWZYMHNlbUU5Wm5WdVkzUnBiMjRvWVN4aUtYdHBaaWd4UFQxaUxteGxibWQwYUNZbWJuVnNiQ0U5WWxzd1hTWW1YQ0p2WW1wbFkzUmNJajA5UFhSNWNHVnZaaUJpV3pCZEtYSmxkSFZ5YmlCaVd6QmRPMXh1Wm05eUtIWmhjaUJqUFh0OUxHUTlUV0YwYUM1dGFXNG9ZUzVzWlc1bmRHZ3JNU3hpTG14bGJtZDBhQ2tzWlQwd08yVThaRHRsS3lzcGFXWW9YQ0p2WW1wbFkzUmNJajA5UFhSNWNHVnZaaUJpVzJWZEtYdG1iM0lvZG1GeUlHY2dhVzRnWWx0bFhTbGlXMlZkTG1oaGMwOTNibEJ5YjNCbGNuUjVLR2NwSmlZb1kxdG5YVDFpVzJWZFcyZGRLVHRpY21WaGEzMWxiSE5sSUdVOFlTNXNaVzVuZEdnbUppaGpXMkZiWlYxZFBXSmJaVjBwTzNKbGRIVnliaUJqZlR0MllYSWdaV1U5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbXRsZVhNOVcxMDdkR2hwY3k1MllXeDFaWE05ZTMwN2RHaHBjeTV0UFh0OWZUdGxaUzV3Y205MGIzUjVjR1V1YzJWMFBXWjFibU4wYVc5dUtHRXNZaXhqS1h0MGFHbHpMbXRsZVhNdWNIVnphQ2hoS1R0alAzUm9hWE11YlZ0Y0lqcGNJaXRoWFQxaU9uUm9hWE11ZG1Gc2RXVnpXMXdpT2x3aUsyRmRQV0o5TzJWbExuQnliM1J2ZEhsd1pTNW5aWFE5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUhSb2FYTXViUzVvWVhOUGQyNVFjbTl3WlhKMGVTaGNJanBjSWl0aEtUOTBhR2x6TG0xYlhDSTZYQ0lyWVYwNmRHaHBjeTUyWVd4MVpYTmJYQ0k2WENJcllWMTlPMlZsTG5CeWIzUnZkSGx3WlM1dFlYQTlablZ1WTNScGIyNG9ZU2w3Wm05eUtIWmhjaUJpUFRBN1lqeDBhR2x6TG10bGVYTXViR1Z1WjNSb08ySXJLeWw3ZG1GeUlHTTlkR2hwY3k1clpYbHpXMkpkTEdROWRHaHBjeTVuWlhRb1l5azdaQ1ltWVNoakxHUXBmWDA3ZG1GeUlFODlkMmx1Wkc5M0xFMDlaRzlqZFcxbGJuUTdkbUZ5SUVZOWQybHVaRzkzTEVjOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOVJpNWZaMkZWYzJWeVVISmxabk03YVdZb1lpWW1ZaTVwYjI4bUptSXVhVzl2S0NsOGZHRW1KaUV3UFQwOVJsdGNJbWRoTFdScGMyRmliR1V0WENJcllWMHBjbVYwZFhKdUlUQTdkSEo1ZTNaaGNpQmpQVVl1WlhoMFpYSnVZV3c3YVdZb1l5WW1ZeTVmWjJGVmMyVnlVSEpsWm5NbUpsd2liMjljSWowOVl5NWZaMkZWYzJWeVVISmxabk1wY21WMGRYSnVJVEI5WTJGMFkyZ29aQ2w3ZlhKbGRIVnliaUV4ZlR0MllYSWdRMkU5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5VzEwc1l6MU5MbU52YjJ0cFpTNXpjR3hwZENoY0lqdGNJaWs3WVQxdVpYY2dVbVZuUlhod0tGd2lYbHhjWEZ4ektsd2lLMkVyWENJOVhGeGNYSE1xS0M0cVB5bGNYRnhjY3lva1hDSXBPMlp2Y2loMllYSWdaRDB3TzJROFl5NXNaVzVuZEdnN1pDc3JLWHQyWVhJZ1pUMWpXMlJkTG0xaGRHTm9LR0VwTzJVbUptSXVjSFZ6YUNobFd6RmRLWDF5WlhSMWNtNGdZbjBzZW1NOVpuVnVZM1JwYjI0b1lTeGlMR01zWkN4bExHY3BlMlU5UnlobEtUOGhNVHBsWWk1MFpYTjBLRTB1Ykc5allYUnBiMjR1YUc5emRHNWhiV1VwZkh4Y0lpOWNJajA5WXlZbWRtTXVkR1Z6ZENoa0tUOGhNVG9oTUR0cFppZ2haU2x5WlhSMWNtNGhNVHRpSmlZeE1qQXdQR0l1YkdWdVozUm9KaVlvWWoxaUxuTjFZbk4wY21sdVp5Z3dMREV5TURBcExFb29NalFwS1R0alBXRXJYQ0k5WENJcllpdGNJanNnY0dGMGFEMWNJaXRqSzF3aU95QmNJanRuSmlZb1l5czlYQ0psZUhCcGNtVnpQVndpS3lodVpYY2dSR0YwWlNnb2JtVjNJRVJoZEdVcExtZGxkRlJwYldVb0tTdG5LU2t1ZEc5SFRWUlRkSEpwYm1jb0tTdGNJanNnWENJcE8yUW1KbHdpYm05dVpWd2lJVDFrSmlZb1l5czlYQ0prYjIxaGFXNDlYQ0lyWkN0Y0lqdGNJaWs3WkQxTkxtTnZiMnRwWlR0TkxtTnZiMnRwWlQxak8ybG1LQ0VvWkQxa0lUMU5MbU52YjJ0cFpTa3BZVHA3WVQxY2JrTmhLR0VwTzJadmNpaGtQVEE3WkR4aExteGxibWQwYUR0a0t5c3BhV1lvWWowOVlWdGtYU2w3WkQwaE1EdGljbVZoYXlCaGZXUTlJVEY5Y21WMGRYSnVJR1I5TEVOalBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQkxLR0VwTG5KbGNHeGhZMlVvTDF4Y0tDOW5MRndpSlRJNFhDSXBMbkpsY0d4aFkyVW9MMXhjS1M5bkxGd2lKVEk1WENJcGZTeDJZejB2WGloM2QzZGNYQzRwUDJkdmIyZHNaU2hjWEM1amIyMC9LVDhvWEZ3dVcyRXRlbDE3TW4wcFB5UXZMR1ZpUFM4b1hueGNYQzRwWkc5MVlteGxZMnhwWTJ0Y1hDNXVaWFFrTDJrN2RtRnlJRzlqUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1S0VKaGZIeFZaQ2dwUDF3aWFIUjBjSE02WENJNlhDSm9kSFJ3T2x3aUtTdGNJaTh2ZDNkM0xtZHZiMmRzWlMxaGJtRnNlWFJwWTNNdVkyOXRYQ0o5TEVSaFBXWjFibU4wYVc5dUtHRXBlM1JvYVhNdWJtRnRaVDFjSW14bGJsd2lPM1JvYVhNdWJXVnpjMkZuWlQxaEsxd2lMVGd4T1RKY0luMHNZbUU5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMk05WTN4OGRXRTdhV1lvTWpBek5qNDlZaTVzWlc1bmRHZ3BkMk1vWVN4aUxHTXBPMlZzYzJVZ2FXWW9PREU1TWo0OVlpNXNaVzVuZEdncGVDaGhMR0lzWXlsOGZIZGtLR0VzWWl4aktYeDhkMk1vWVN4aUxHTXBPMlZzYzJVZ2RHaHliM2NnWjJVb1hDSnNaVzVjSWl4aUxteGxibWQwYUNrc2JtVjNJRVJoS0dJdWJHVnVaM1JvS1R0OUxIZGpQV1oxYm1OMGFXOXVLR0VzWWl4aktYdDJZWElnWkQxMFlTaGhLMXdpUDF3aUsySXBPMlF1YjI1c2IyRmtQV1F1YjI1bGNuSnZjajFtZFc1amRHbHZiaWdwZTJRdWIyNXNiMkZrUFc1MWJHdzdaQzV2Ym1WeWNtOXlQVzUxYkd3N1l5Z3BmWDBzZDJROVpuVnVZM1JwYjI0b1lTeGlMR01wZTNaaGNpQmtQVTh1V0UxTVNIUjBjRkpsY1hWbGMzUTdhV1lvSVdRcGNtVjBkWEp1SVRFN2RtRnlJR1U5Ym1WM0lHUTdhV1lvSVNoY0luZHBkR2hEY21Wa1pXNTBhV0ZzYzF3aWFXNGdaU2twY21WMGRYSnVJVEU3WEc1bExtOXdaVzRvWENKUVQxTlVYQ0lzWVN3aE1DazdaUzUzYVhSb1EzSmxaR1Z1ZEdsaGJITTlJVEE3WlM1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0Z3aVEyOXVkR1Z1ZEMxVWVYQmxYQ0lzWENKMFpYaDBMM0JzWVdsdVhDSXBPMlV1YjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsUFdaMWJtTjBhVzl1S0NsN05EMDlaUzV5WldGa2VWTjBZWFJsSmlZb1l5Z3BMR1U5Ym5Wc2JDbDlPMlV1YzJWdVpDaGlLVHR5WlhSMWNtNGhNSDBzZUQxbWRXNWpkR2x2YmloaExHSXNZeWw3Y21WMGRYSnVJRTh1Ym1GMmFXZGhkRzl5TG5ObGJtUkNaV0ZqYjI0L1R5NXVZWFpwWjJGMGIzSXVjMlZ1WkVKbFlXTnZiaWhoTEdJcFB5aGpLQ2tzSVRBcE9pRXhPaUV4ZlN4blpUMW1kVzVqZEdsdmJpaGhMR0lzWXlsN01UdzlNVEF3S2sxaGRHZ3VjbUZ1Wkc5dEtDbDhmRWNvWENJL1hDSXBmSHdvWVQxYlhDSjBQV1Z5Y205eVhDSXNYQ0pmWlQxY0lpdGhMRndpWDNZOWFqUTRYQ0lzWENKemNqMHhYQ0pkTEdJbUptRXVjSFZ6YUNoY0lsOW1QVndpSzJJcExHTW1KbUV1Y0hWemFDaGNJbDl0UFZ3aUswc29ZeTV6ZFdKemRISnBibWNvTUN3eE1EQXBLU2tzWVM1d2RYTm9LRndpWVdsd1BURmNJaWtzWVM1d2RYTm9LRndpZWoxY0lpdG9aQ2dwS1N4M1l5aHZZeWdwSzF3aUwyTnZiR3hsWTNSY0lpeGhMbXB2YVc0b1hDSW1YQ0lwTEhWaEtTbDlPM1poY2lCb1BXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBVOHVaMkZFWVhSaFBVOHVaMkZFWVhSaGZIeDdmVHR5WlhSMWNtNGdZbHRoWFQxaVcyRmRmSHg3ZlgwN2RtRnlJRWhoUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTVOUFZ0ZGZUdElZUzV3Y205MGIzUjVjR1V1WVdSa1BXWjFibU4wYVc5dUtHRXBlM1JvYVhNdVRTNXdkWE5vS0dFcGZUdElZUzV3Y205MGIzUjVjR1V1UkQxbWRXNWpkR2x2YmloaEtYdDBjbmw3Wm05eUtIWmhjaUJpUFRBN1lqeDBhR2x6TGswdWJHVnVaM1JvTzJJckt5bDdkbUZ5SUdNOVlTNW5aWFFvZEdocGN5NU5XMkpkS1R0akppWmxZU2hqS1NZbVl5NWpZV3hzS0U4c1lTbDlmV05oZEdOb0tHUXBlMzFpUFdFdVoyVjBLRWxoS1R0aUlUMTFZU1ltWldFb1lpa21KaWhoTG5ObGRDaEpZU3gxWVN3aE1Da3NjMlYwVkdsdFpXOTFkQ2hpTERFd0tTbDlPMloxYm1OMGFXOXVJRXBoS0dFcGUybG1LREV3TUNFOVlTNW5aWFFvUzJFcEppWk1ZU2hRS0dFc1VTa3BKVEZGTkQ0OU1UQXdLbElvWVN4TFlTa3BkR2h5YjNkY0ltRmliM0owWENJN2ZXWjFibU4wYVc5dUlFMWhLR0VwZTJsbUtFY29VQ2hoTEU1aEtTa3BkR2h5YjNkY0ltRmliM0owWENJN2ZXWjFibU4wYVc5dUlFOWhLQ2w3ZG1GeUlHRTlUUzVzYjJOaGRHbHZiaTV3Y205MGIyTnZiRHRwWmloY0ltaDBkSEE2WENJaFBXRW1KbHdpYUhSMGNITTZYQ0loUFdFcGRHaHliM2RjSW1GaWIzSjBYQ0k3ZlZ4dVpuVnVZM1JwYjI0Z1VHRW9ZU2w3ZEhKNWUwOHVibUYyYVdkaGRHOXlMbk5sYm1SQ1pXRmpiMjQvU2lnME1pazZUeTVZVFV4SWRIUndVbVZ4ZFdWemRDWW1YQ0ozYVhSb1EzSmxaR1Z1ZEdsaGJITmNJbWx1SUc1bGR5QlBMbGhOVEVoMGRIQlNaWEYxWlhOMEppWktLRFF3S1gxallYUmphQ2hqS1h0OVlTNXpaWFFvYkdRc1ZHUW9ZU2tzSVRBcE8yRXVjMlYwS0VGakxGSW9ZU3hCWXlrck1TazdkbUZ5SUdJOVcxMDdVV0V1YldGd0tHWjFibU4wYVc5dUtHTXNaQ2w3WkM1R0ppWW9ZejFoTG1kbGRDaGpLU3gyYjJsa0lEQWhQV01tSm1NaFBXUXVaR1ZtWVhWc2RGWmhiSFZsSmlZb1hDSmliMjlzWldGdVhDSTlQWFI1Y0dWdlppQmpKaVlvWXlvOU1Ta3NZaTV3ZFhOb0tHUXVSaXRjSWoxY0lpdExLRndpWENJcll5a3BLU2w5S1R0aUxuQjFjMmdvWENKNlBWd2lLMEprS0NrcE8yRXVjMlYwS0ZKaExHSXVhbTlwYmloY0lpWmNJaWtzSVRBcGZWeHVablZ1WTNScGIyNGdVMkVvWVNsN2RtRnlJR0k5VUNoaExHZGtLWHg4YjJNb0tTdGNJaTlqYjJ4c1pXTjBYQ0lzWXoxUUtHRXNabUVwT3lGakppWmhMbWRsZENoV1pDa21KaWhqUFZ3aVltVmhZMjl1WENJcE8ybG1LR01wZTNaaGNpQmtQVkFvWVN4U1lTa3NaVDFoTG1kbGRDaEpZU2tzWlQxbGZIeDFZVHRjSW1sdFlXZGxYQ0k5UFdNL2QyTW9ZaXhrTEdVcE9sd2llR2h5WENJOVBXTW1KbmRrS0dJc1pDeGxLWHg4WENKaVpXRmpiMjVjSWowOVl5WW1lQ2hpTEdRc1pTbDhmR0poS0dJc1pDeGxLWDFsYkhObElHSmhLR0lzVUNoaExGSmhLU3hoTG1kbGRDaEpZU2twTzJJOVlTNW5aWFFvVG1FcE8ySTlhQ2hpS1R0alBXSXVhR2wwWTI5MWJuUTdZaTVvYVhSamIzVnVkRDFqUDJNck1Ub3hPMkk5WVM1blpYUW9UbUVwTzJSbGJHVjBaU0JvS0dJcExuQmxibVJwYm1kZlpYaHdaWEpwYldWdWRITTdZUzV6WlhRb1NXRXNkV0VzSVRBcGZWeHVablZ1WTNScGIyNGdTR01vWVNsN0tFOHVaMkZFWVhSaFBVOHVaMkZFWVhSaGZIeDdmU2t1Wlhod1NXUW1KbUV1YzJWMEtFNWpMQ2hQTG1kaFJHRjBZVDFQTG1kaFJHRjBZWHg4ZTMwcExtVjRjRWxrS1Rzb1R5NW5ZVVJoZEdFOVR5NW5ZVVJoZEdGOGZIdDlLUzVsZUhCV1lYSW1KbUV1YzJWMEtFOWpMQ2hQTG1kaFJHRjBZVDFQTG1kaFJHRjBZWHg4ZTMwcExtVjRjRlpoY2lrN2RtRnlJR0k3ZG1GeUlHTTlZUzVuWlhRb1RtRXBPMmxtS0dNOWFDaGpLUzV3Wlc1a2FXNW5YMlY0Y0dWeWFXMWxiblJ6S1h0MllYSWdaRDFiWFR0bWIzSW9ZaUJwYmlCaktXTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lpa21KbU5iWWwwbUptUXVjSFZ6YUNobGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb1lpa3JYQ0l1WENJclpXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHTmJZbDBwS1R0aVBXUXVhbTlwYmloY0lpRmNJaWw5Wld4elpTQmlQWFp2YVdRZ01EdGlKaVpoTG5ObGRDaHRMR0lzSVRBcGZXWjFibU4wYVc5dUlHTmtLQ2w3YVdZb1R5NXVZWFpwWjJGMGIzSW1KbHdpY0hKbGRtbGxkMXdpUFQxUExtNWhkbWxuWVhSdmNpNXNiMkZrVUhWeWNHOXpaU2wwYUhKdmQxd2lZV0p2Y25SY0lqdDlYRzVtZFc1amRHbHZiaUI1WkNoaEtYdDJZWElnWWoxUExtZGhSR1YyU1dSek8ydGhLR0lwSmlZd0lUMWlMbXhsYm1kMGFDWW1ZUzV6WlhRb1hDSW1aR2xrWENJc1lpNXFiMmx1S0Z3aUxGd2lLU3doTUNsOVpuVnVZM1JwYjI0Z2RtSW9ZU2w3YVdZb0lXRXVaMlYwS0U1aEtTbDBhSEp2ZDF3aVlXSnZjblJjSWp0OU8zWmhjaUJvWkQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tESXhORGMwT0RNMk5EY3FUV0YwYUM1eVlXNWtiMjBvS1NsOUxFSmtQV1oxYm1OMGFXOXVLQ2w3ZEhKNWUzWmhjaUJoUFc1bGR5QlZhVzUwTXpKQmNuSmhlU2d4S1R0UExtTnllWEIwYnk1blpYUlNZVzVrYjIxV1lXeDFaWE1vWVNrN2NtVjBkWEp1SUdGYk1GMG1NakUwTnpRNE16WTBOMzFqWVhSamFDaGlLWHR5WlhSMWNtNGdhR1FvS1gxOU8yWjFibU4wYVc5dUlGUmhLR0VwZTNaaGNpQmlQVklvWVN4VllTazdOVEF3UEQxaUppWktLREUxS1R0MllYSWdZejFRS0dFc1ZtRXBPMmxtS0Z3aWRISmhibk5oWTNScGIyNWNJaUU5WXlZbVhDSnBkR1Z0WENJaFBXTXBlM1poY2lCalBWSW9ZU3hYWVNrc1pEMG9ibVYzSUVSaGRHVXBMbWRsZEZScGJXVW9LU3hsUFZJb1lTeFlZU2s3TUQwOVpTWW1ZUzV6WlhRb1dHRXNaQ2s3WlQxTllYUm9Mbkp2ZFc1a0tESXFLR1F0WlNrdk1VVXpLVHN3UEdVbUppaGpQVTFoZEdndWJXbHVLR01yWlN3eU1Da3NZUzV6WlhRb1dHRXNaQ2twTzJsbUtEQStQV01wZEdoeWIzZGNJbUZpYjNKMFhDSTdZUzV6WlhRb1YyRXNMUzFqS1gxaExuTmxkQ2hWWVN3cksySXBmVHQyWVhJZ1dXRTlablZ1WTNScGIyNG9LWHQwYUdsekxtUmhkR0U5Ym1WM0lHVmxmU3hSWVQxdVpYY2daV1VzV21FOVcxMDdXV0V1Y0hKdmRHOTBlWEJsTG1kbGREMW1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMGtZU2hoS1N4alBYUm9hWE11WkdGMFlTNW5aWFFvWVNrN1lpWW1kbTlwWkNBd1BUMWpKaVlvWXoxbFlTaGlMbVJsWm1GMWJIUldZV3gxWlNrL1lpNWtaV1poZFd4MFZtRnNkV1VvS1RwaUxtUmxabUYxYkhSV1lXeDFaU2s3Y21WMGRYSnVJR0ltSm1JdVdqOWlMbG9vZEdocGN5eGhMR01wT21OOU8zWmhjaUJRUFdaMWJtTjBhVzl1S0dFc1lpbDdZVDFoTG1kbGRDaGlLVHR5WlhSMWNtNGdkbTlwWkNBd1BUMWhQMXdpWENJNlhDSmNJaXRoZlN4U1BXWjFibU4wYVc5dUtHRXNZaWw3WVQxaExtZGxkQ2hpS1R0eVpYUjFjbTRnZG05cFpDQXdQVDFoZkh4Y0lsd2lQVDA5WVQ4d09qRXFZWDA3V1dFdWNISnZkRzkwZVhCbExuTmxkRDFtZFc1amRHbHZiaWhoTEdJc1l5bDdhV1lvWVNscFppaGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdZU2xtYjNJb2RtRnlJR1FnYVc0Z1lTbGhMbWhoYzA5M2JsQnliM0JsY25SNUtHUXBKaVpoWWloMGFHbHpMR1FzWVZ0a1hTeGpLVHRsYkhObElHRmlLSFJvYVhNc1lTeGlMR01wZlR0Y2JuWmhjaUJoWWoxbWRXNWpkR2x2YmloaExHSXNZeXhrS1h0cFppaDJiMmxrSURBaFBXTXBjM2RwZEdOb0tHSXBlMk5oYzJVZ1RtRTZkMkl1ZEdWemRDaGpLWDEyWVhJZ1pUMGtZU2hpS1R0bEppWmxMbTgvWlM1dktHRXNZaXhqTEdRcE9tRXVaR0YwWVM1elpYUW9ZaXhqTEdRcGZTeGlZajFtZFc1amRHbHZiaWhoTEdJc1l5eGtMR1VwZTNSb2FYTXVibUZ0WlQxaE8zUm9hWE11UmoxaU8zUm9hWE11V2oxa08zUm9hWE11YnoxbE8zUm9hWE11WkdWbVlYVnNkRlpoYkhWbFBXTjlMQ1JoUFdaMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFZGaExtZGxkQ2hoS1R0cFppZ2hZaWxtYjNJb2RtRnlJR005TUR0alBGcGhMbXhsYm1kMGFEdGpLeXNwZTNaaGNpQmtQVnBoVzJOZExHVTlaRnN3WFM1bGVHVmpLR0VwTzJsbUtHVXBlMkk5WkZzeFhTaGxLVHRSWVM1elpYUW9ZaTV1WVcxbExHSXBPMkp5WldGcmZYMXlaWFIxY200Z1luMHNlV005Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k3VVdFdWJXRndLR1oxYm1OMGFXOXVLR01zWkNsN1pDNUdQVDFoSmlZb1lqMWtLWDBwTzNKbGRIVnliaUJpSmlaaUxtNWhiV1Y5TEZNOVpuVnVZM1JwYjI0b1lTeGlMR01zWkN4bEtYdGhQVzVsZHlCaVlpaGhMR0lzWXl4a0xHVXBPMUZoTG5ObGRDaGhMbTVoYldVc1lTazdjbVYwZFhKdUlHRXVibUZ0Wlgwc1kySTlablZ1WTNScGIyNG9ZU3hjYm1JcGUxcGhMbkIxYzJnb1cyNWxkeUJTWldkRmVIQW9YQ0plWENJcllTdGNJaVJjSWlrc1lsMHBmU3hVUFdaMWJtTjBhVzl1S0dFc1lpeGpLWHR5WlhSMWNtNGdVeWhoTEdJc1l5eDJiMmxrSURBc1pHSXBmU3hrWWoxbWRXNWpkR2x2YmlncGUzMDdkbUZ5SUdkaVBYRmhLSGRwYm1SdmR5NUhiMjluYkdWQmJtRnNlWFJwWTNOUFltcGxZM1FwSmlaellTaDNhVzVrYjNjdVIyOXZaMnhsUVc1aGJIbDBhV056VDJKcVpXTjBLWHg4WENKbllWd2lMRUpoUFNFeExHaGlQVlFvWENKaGNHbFdaWEp6YVc5dVhDSXNYQ0oyWENJcExHbGlQVlFvWENKamJHbGxiblJXWlhKemFXOXVYQ0lzWENKZmRsd2lLVHRUS0Z3aVlXNXZibmx0YVhwbFNYQmNJaXhjSW1GcGNGd2lLVHQyWVhJZ2FtSTlVeWhjSW1Ga1UyVnVjMlZKWkZ3aUxGd2lZVndpS1N4V1lUMVRLRndpYUdsMFZIbHdaVndpTEZ3aWRGd2lLU3hKWVQxVEtGd2lhR2wwUTJGc2JHSmhZMnRjSWlrc1VtRTlVeWhjSW1ocGRGQmhlV3h2WVdSY0lpazdVeWhjSW01dmJrbHVkR1Z5WVdOMGFXOXVYQ0lzWENKdWFWd2lLVHRUS0Z3aVkzVnljbVZ1WTNsRGIyUmxYQ0lzWENKamRWd2lLVHRUS0Z3aVpHRjBZVk52ZFhKalpWd2lMRndpWkhOY0lpazdkbUZ5SUZaa1BWTW9YQ0oxYzJWQ1pXRmpiMjVjSWl4MmIybGtJREFzSVRFcExHWmhQVk1vWENKMGNtRnVjM0J2Y25SY0lpazdVeWhjSW5ObGMzTnBiMjVEYjI1MGNtOXNYQ0lzWENKelkxd2lMRndpWENJcE8xTW9YQ0p6WlhOemFXOXVSM0p2ZFhCY0lpeGNJbk5uWENJcE8xTW9YQ0p4ZFdWMVpWUnBiV1ZjSWl4Y0luRjBYQ0lwTzNaaGNpQkJZejFUS0Z3aVgzTmNJaXhjSWw5elhDSXBPMU1vWENKelkzSmxaVzVPWVcxbFhDSXNYQ0pqWkZ3aUtUdGNiblpoY2lCcllqMVRLRndpYkc5allYUnBiMjVjSWl4Y0ltUnNYQ0lzWENKY0lpa3NiR0k5VXloY0luSmxabVZ5Y21WeVhDSXNYQ0prY2x3aUtTeHRZajFUS0Z3aWNHRm5aVndpTEZ3aVpIQmNJaXhjSWx3aUtUdFRLRndpYUc5emRHNWhiV1ZjSWl4Y0ltUm9YQ0lwTzNaaGNpQnVZajFUS0Z3aWJHRnVaM1ZoWjJWY0lpeGNJblZzWENJcExHOWlQVk1vWENKbGJtTnZaR2x1WjF3aUxGd2laR1ZjSWlrN1V5aGNJblJwZEd4bFhDSXNYQ0prZEZ3aUxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlFMHVkR2wwYkdWOGZIWnZhV1FnTUgwcE8yTmlLRndpWTI5dWRHVnVkRWR5YjNWd0tGc3dMVGxkS3lsY0lpeG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdibVYzSUdKaUtHRmJNRjBzWENKaloxd2lLMkZiTVYwcGZTazdkbUZ5SUhCaVBWTW9YQ0p6WTNKbFpXNURiMnh2Y25OY0lpeGNJbk5rWENJcExIRmlQVk1vWENKelkzSmxaVzVTWlhOdmJIVjBhVzl1WENJc1hDSnpjbHdpS1N4eVlqMVRLRndpZG1sbGQzQnZjblJUYVhwbFhDSXNYQ0oyY0Z3aUtTeHpZajFUS0Z3aWFtRjJZVVZ1WVdKc1pXUmNJaXhjSW1wbFhDSXBMSFJpUFZNb1hDSm1iR0Z6YUZabGNuTnBiMjVjSWl4Y0ltWnNYQ0lwTzFNb1hDSmpZVzF3WVdsbmJrbGtYQ0lzWENKamFWd2lLVHRUS0Z3aVkyRnRjR0ZwWjI1T1lXMWxYQ0lzWENKamJsd2lLVHRUS0Z3aVkyRnRjR0ZwWjI1VGIzVnlZMlZjSWl4Y0ltTnpYQ0lwTzFNb1hDSmpZVzF3WVdsbmJrMWxaR2wxYlZ3aUxGd2lZMjFjSWlrN1hHNVRLRndpWTJGdGNHRnBaMjVMWlhsM2IzSmtYQ0lzWENKamExd2lLVHRUS0Z3aVkyRnRjR0ZwWjI1RGIyNTBaVzUwWENJc1hDSmpZMXdpS1R0MllYSWdkV0k5VXloY0ltVjJaVzUwUTJGMFpXZHZjbmxjSWl4Y0ltVmpYQ0lwTEhoaVBWTW9YQ0psZG1WdWRFRmpkR2x2Ymx3aUxGd2laV0ZjSWlrc2VXSTlVeWhjSW1WMlpXNTBUR0ZpWld4Y0lpeGNJbVZzWENJcExIcGlQVk1vWENKbGRtVnVkRlpoYkhWbFhDSXNYQ0psZGx3aUtTeENZajFUS0Z3aWMyOWphV0ZzVG1WMGQyOXlhMXdpTEZ3aWMyNWNJaWtzUTJJOVV5aGNJbk52WTJsaGJFRmpkR2x2Ymx3aUxGd2ljMkZjSWlrc1JHSTlVeWhjSW5OdlkybGhiRlJoY21kbGRGd2lMRndpYzNSY0lpa3NSV0k5VXloY0ltd3hYQ0lzWENKd2JIUmNJaWtzUm1JOVV5aGNJbXd5WENJc1hDSndaSFJjSWlrc1IySTlVeWhjSW13elhDSXNYQ0prYm5OY0lpa3NTR0k5VXloY0ltdzBYQ0lzWENKeWNuUmNJaWtzU1dJOVV5aGNJbXcxWENJc1hDSnpjblJjSWlrc1NtSTlVeWhjSW13MlhDSXNYQ0owWTNCY0lpa3NTMkk5VXloY0ltdzNYQ0lzWENKa2FYUmNJaWtzVEdJOVV5aGNJbXc0WENJc1hDSmpiSFJjSWlrc1RXSTlVeWhjSW5ScGJXbHVaME5oZEdWbmIzSjVYQ0lzWENKMWRHTmNJaWtzVG1JOVV5aGNJblJwYldsdVoxWmhjbHdpTEZ3aWRYUjJYQ0lwTEU5aVBWTW9YQ0owYVcxcGJtZE1ZV0psYkZ3aUxGd2lkWFJzWENJcExGQmlQVk1vWENKMGFXMXBibWRXWVd4MVpWd2lMRndpZFhSMFhDSXBPMU1vWENKaGNIQk9ZVzFsWENJc1hDSmhibHdpS1R0Y2JsTW9YQ0poY0hCV1pYSnphVzl1WENJc1hDSmhkbHdpTEZ3aVhDSXBPMU1vWENKaGNIQkpaRndpTEZ3aVlXbGtYQ0lzWENKY0lpazdVeWhjSW1Gd2NFbHVjM1JoYkd4bGNrbGtYQ0lzWENKaGFXbGtYQ0lzWENKY0lpazdVeWhjSW1WNFJHVnpZM0pwY0hScGIyNWNJaXhjSW1WNFpGd2lLVHRUS0Z3aVpYaEdZWFJoYkZ3aUxGd2laWGhtWENJcE8zWmhjaUJPWXoxVEtGd2laWGh3U1dSY0lpeGNJbmhwWkZ3aUtTeFBZejFUS0Z3aVpYaHdWbUZ5WENJc1hDSjRkbUZ5WENJcExHMDlVeWhjSW1WNGNGd2lMRndpWlhod1hDSXBMRkpqUFZNb1hDSmZkWFJ0WVZ3aUxGd2lYM1YwYldGY0lpa3NVMk05VXloY0lsOTFkRzE2WENJc1hDSmZkWFJ0ZWx3aUtTeFVZejFUS0Z3aVgzVjBiV2gwWENJc1hDSmZkWFJ0YUhSY0lpa3NWV0U5VXloY0lsOW9ZMXdpTEhadmFXUWdNQ3d3S1N4WVlUMVRLRndpWDNScFhDSXNkbTlwWkNBd0xEQXBMRmRoUFZNb1hDSmZkRzljSWl4MmIybGtJREFzTWpBcE8yTmlLRndpWkdsdFpXNXphVzl1S0Zzd0xUbGRLeWxjSWl4bWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z2JtVjNJR0ppS0dGYk1GMHNYQ0pqWkZ3aUsyRmJNVjBwZlNrN1kySW9YQ0p0WlhSeWFXTW9XekF0T1YwcktWd2lMR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJ1WlhjZ1ltSW9ZVnN3WFN4Y0ltTnRYQ0lyWVZzeFhTbDlLVHRUS0Z3aWJHbHVhMlZ5VUdGeVlXMWNJaXgyYjJsa0lEQXNkbTlwWkNBd0xFSmpMR1JpS1R0Y2JuWmhjaUJzWkQxVEtGd2lkWE5oWjJWY0lpeGNJbDkxWENJcExFZGtQVk1vWENKZmRXMWNJaWs3VXloY0ltWnZjbU5sVTFOTVhDSXNkbTlwWkNBd0xIWnZhV1FnTUN4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCQ1lYMHNablZ1WTNScGIyNG9ZU3hpTEdNcGUwb29NelFwTzBKaFBTRWhZMzBwTzNaaGNpQmxaRDFUS0Z3aVgyb3hYQ0lzWENKcWFXUmNJaWs3WTJJb1hDSmNYRnhjSmlndUtpbGNJaXhtZFc1amRHbHZiaWhoS1h0MllYSWdZajF1WlhjZ1ltSW9ZVnN3WFN4aFd6RmRLU3hqUFhsaktHRmJNRjB1YzNWaWMzUnlhVzVuS0RFcEtUdGpKaVlvWWk1YVBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQmhMbWRsZENoaktYMHNZaTV2UFdaMWJtTjBhVzl1S0dFc1lpeG5MR05oS1h0aExuTmxkQ2hqTEdjc1kyRXBmU3hpTGtZOWRtOXBaQ0F3S1R0eVpYUjFjbTRnWW4wcE8xeHVkbUZ5SUZGaVBWUW9YQ0pmYjI5MFhDSXBMR1JrUFZNb1hDSndjbVYyYVdWM1ZHRnphMXdpS1N4U1lqMVRLRndpWTJobFkydFFjbTkwYjJOdmJGUmhjMnRjSWlrc2JXUTlVeWhjSW5aaGJHbGtZWFJwYjI1VVlYTnJYQ0lwTEZOaVBWTW9YQ0pqYUdWamExTjBiM0poWjJWVVlYTnJYQ0lwTEZWalBWTW9YQ0pvYVhOMGIzSjVTVzF3YjNKMFZHRnphMXdpS1N4VVlqMVRLRndpYzJGdGNHeGxjbFJoYzJ0Y0lpa3NWbUk5VXloY0lsOXliSFJjSWlrc1YySTlVeWhjSW1KMWFXeGtTR2wwVkdGemExd2lLU3hZWWoxVEtGd2ljMlZ1WkVocGRGUmhjMnRjSWlrc1ZtTTlVeWhjSW1ObFZHRnphMXdpS1N4NlpEMVRLRndpWkdWMlNXUlVZWE5yWENJcExFTmtQVk1vWENKMGFXMXBibWRVWVhOclhDSXBMRXhrUFZNb1hDSmthWE53YkdGNVJtVmhkSFZ5WlhOVVlYTnJYQ0lwTEZZOVZDaGNJbTVoYldWY0lpa3NVVDFVS0Z3aVkyeHBaVzUwU1dSY0lpeGNJbU5wWkZ3aUtTeHVQVlFvWENKamJHbGxiblJKWkZScGJXVmNJaWtzUVdROVV5aGNJblZ6WlhKSlpGd2lMRndpZFdsa1hDSXBMRTVoUFZRb1hDSjBjbUZqYTJsdVowbGtYQ0lzWENKMGFXUmNJaWtzVlQxVUtGd2lZMjl2YTJsbFRtRnRaVndpTEhadmFXUWdNQ3hjSWw5bllWd2lLU3hYUFZRb1hDSmpiMjlyYVdWRWIyMWhhVzVjSWlrc1dXSTlWQ2hjSW1OdmIydHBaVkJoZEdoY0lpeDJiMmxrSURBc1hDSXZYQ0lwTEZwaVBWUW9YQ0pqYjI5cmFXVkZlSEJwY21WelhDSXNkbTlwWkNBd0xEWXpNRGN5UlRNcExGeHVKR0k5VkNoY0lteGxaMkZqZVVOdmIydHBaVVJ2YldGcGJsd2lLU3hYWXoxVUtGd2liR1ZuWVdONVNHbHpkRzl5ZVVsdGNHOXlkRndpTEhadmFXUWdNQ3doTUNrc1lXTTlWQ2hjSW5OMGIzSmhaMlZjSWl4MmIybGtJREFzWENKamIyOXJhV1ZjSWlrc1ltTTlWQ2hjSW1Gc2JHOTNUR2x1YTJWeVhDSXNkbTlwWkNBd0xDRXhLU3hqWXoxVUtGd2lZV3hzYjNkQmJtTm9iM0pjSWl4MmIybGtJREFzSVRBcExFdGhQVlFvWENKellXMXdiR1ZTWVhSbFhDSXNYQ0p6Wmx3aUxERXdNQ2tzWkdNOVZDaGNJbk5wZEdWVGNHVmxaRk5oYlhCc1pWSmhkR1ZjSWl4MmIybGtJREFzTVNrc1pXTTlWQ2hjSW1Gc2QyRjVjMU5sYm1SU1pXWmxjbkpsY2x3aUxIWnZhV1FnTUN3aE1Ta3NaMlE5VXloY0luUnlZVzV6Y0c5eWRGVnliRndpS1N4TlpEMVRLRndpWDNKY0lpeGNJbDl5WENJcE8yWjFibU4wYVc5dUlGZ29ZU3hpTEdNc1pDbDdZbHRoWFQxbWRXNWpkR2x2YmlncGUzUnllWHR5WlhSMWNtNGdaQ1ltU2loa0tTeGpMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1gxallYUmphQ2hsS1h0MGFISnZkeUJuWlNoY0ltVjRZMXdpTEdFc1pTWW1aUzV1WVcxbEtTeGxPMzE5ZlR0MllYSWdUMlE5Wm5WdVkzUnBiMjRvWVN4aUxHTXBlM1JvYVhNdVZqMWhPM1JvYVhNdVptRTlZanQwYUdsekxpUTlJVEU3ZEdocGN5NXZZVDFqTzNSb2FYTXVaV0U5TVgwc1JXUTlablZ1WTNScGIyNG9ZU3hpS1h0MllYSWdZenRwWmloaExtWmhKaVpoTGlRcGNtVjBkWEp1SURBN1lTNGtQU0V3TzJsbUtHSXBlMmxtS0dFdWIyRW1KbElvWWl4aExtOWhLU2x5WlhSMWNtNGdVaWhpTEdFdWIyRXBPMmxtS0RBOVBXSXVaMlYwS0dSaktTbHlaWFIxY200Z01IMXBaaWd3UFQxaExsWXBjbVYwZFhKdUlEQTdkbTlwWkNBd1BUMDlZeVltS0dNOVFtUW9LU2s3Y21WMGRYSnVJREE5UFdNbFlTNVdQMDFoZEdndVpteHZiM0lvWXk5aExsWXBKV0V1WldFck1Ub3dmVHRtZFc1amRHbHZiaUJtWXlncGUzWmhjaUJoTEdJc1l6dHBaaWdvWXowb1l6MVBMbTVoZG1sbllYUnZjaWsvWXk1d2JIVm5hVzV6T201MWJHd3BKaVpqTG14bGJtZDBhQ2xtYjNJb2RtRnlJR1E5TUR0a1BHTXViR1Z1WjNSb0ppWWhZanRrS3lzcGUzWmhjaUJsUFdOYlpGMDdMVEU4WlM1dVlXMWxMbWx1WkdWNFQyWW9YQ0pUYUc5amEzZGhkbVVnUm14aGMyaGNJaWttSmloaVBXVXVaR1Z6WTNKcGNIUnBiMjRwZldsbUtDRmlLWFJ5ZVh0aFBXNWxkeUJCWTNScGRtVllUMkpxWldOMEtGd2lVMmh2WTJ0M1lYWmxSbXhoYzJndVUyaHZZMnQzWVhabFJteGhjMmd1TjF3aUtTeGlQV0V1UjJWMFZtRnlhV0ZpYkdVb1hDSWtkbVZ5YzJsdmJsd2lLWDFqWVhSamFDaG5LWHQ5YVdZb0lXSXBkSEo1ZTJFOWJtVjNJRUZqZEdsMlpWaFBZbXBsWTNRb1hDSlRhRzlqYTNkaGRtVkdiR0Z6YUM1VGFHOWphM2RoZG1WR2JHRnphQzQyWENJcExHSTlYQ0pYU1U0Z05pd3dMREl4TERCY0lpeGhMa0ZzYkc5M1UyTnlhWEIwUVdOalpYTnpQVndpWVd4M1lYbHpYQ0lzWWoxaExrZGxkRlpoY21saFlteGxLRndpSkhabGNuTnBiMjVjSWlsOVkyRjBZMmdvWnlsN2ZXbG1LQ0ZpS1hSeWVYdGhQVzVsZHlCQlkzUnBkbVZZVDJKcVpXTjBLRndpVTJodlkydDNZWFpsUm14aGMyZ3VVMmh2WTJ0M1lYWmxSbXhoYzJoY0lpa3NZajFoTGtkbGRGWmhjbWxoWW14bEtGd2lKSFpsY25OcGIyNWNJaWw5WTJGMFkyZ29aeWw3ZldJbUpseHVLR0U5WWk1dFlYUmphQ2d2VzF4Y1pGMHJMMmNwS1NZbU16dzlZUzVzWlc1bmRHZ21KaWhpUFdGYk1GMHJYQ0l1WENJcllWc3hYU3RjSWlCeVhDSXJZVnN5WFNrN2NtVjBkWEp1SUdKOGZIWnZhV1FnTUgwN2RtRnlJR0ZoUFdaMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFUxaGRHZ3ViV2x1S0ZJb1lTeGtZeWtzTVRBd0tUdHlaWFIxY200Z1RHRW9VQ2hoTEZFcEtTVXhNREErUFdJL0lURTZJVEI5TEdkalBXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBYdDlPMmxtS0VWaktHSXBmSHhHWXloaUtTbDdkbUZ5SUdNOVlsdEZZbDA3ZG05cFpDQXdQVDFqZkh4SmJtWnBibWwwZVQwOVkzeDhhWE5PWVU0b1l5bDhmQ2d3UEdNL0tGa29ZaXhIWWlrc1dTaGlMRXBpS1N4WktHSXNTV0lwTEZrb1lpeEdZaWtzV1NoaUxFaGlLU3haS0dJc1MySXBMRmtvWWl4TVlpa3NZU2hpS1NrNlRDaFBMRndpYkc5aFpGd2lMR1oxYm1OMGFXOXVLQ2w3WjJNb1lTbDlMQ0V4S1NsOWZTeEZZejFtZFc1amRHbHZiaWhoS1h0MllYSWdZajFQTG5CbGNtWnZjbTFoYm1ObGZIeFBMbmRsWW10cGRGQmxjbVp2Y20xaGJtTmxMR0k5WWlZbVlpNTBhVzFwYm1jN2FXWW9JV0lwY21WMGRYSnVJVEU3ZG1GeUlHTTlZaTV1WVhacFoyRjBhVzl1VTNSaGNuUTdhV1lvTUQwOVl5bHlaWFIxY200aE1UdGhXMFZpWFQxaUxteHZZV1JGZG1WdWRGTjBZWEowTFdNN1lWdEhZbDA5WWk1a2IyMWhhVzVNYjI5cmRYQkZibVF0WWk1a2IyMWhhVzVNYjI5cmRYQlRkR0Z5ZER0aFcwcGlYVDFpTG1OdmJtNWxZM1JGYm1RdFlpNWpiMjV1WldOMFUzUmhjblE3WVZ0SllsMDlYRzVpTG5KbGMzQnZibk5sVTNSaGNuUXRZaTV5WlhGMVpYTjBVM1JoY25RN1lWdEdZbDA5WWk1eVpYTndiMjV6WlVWdVpDMWlMbkpsYzNCdmJuTmxVM1JoY25RN1lWdElZbDA5WWk1bVpYUmphRk4wWVhKMExXTTdZVnRMWWwwOVlpNWtiMjFKYm5SbGNtRmpkR2wyWlMxak8yRmJUR0pkUFdJdVpHOXRRMjl1ZEdWdWRFeHZZV1JsWkVWMlpXNTBVM1JoY25RdFl6dHlaWFIxY200aE1IMHNSbU05Wm5WdVkzUnBiMjRvWVNsN2FXWW9UeTUwYjNBaFBVOHBjbVYwZFhKdUlURTdkbUZ5SUdJOVR5NWxlSFJsY201aGJDeGpQV0ltSm1JdWIyNXNiMkZrVkR0aUppWWhZaTVwYzFaaGJHbGtURzloWkZScGJXVW1KaWhqUFhadmFXUWdNQ2s3TWpFME56UTRNelkwT0R4akppWW9ZejEyYjJsa0lEQXBPekE4WXlZbVlpNXpaWFJRWVdkbFVtVmhaSGxVYVcxbEtDazdhV1lvZG05cFpDQXdQVDFqS1hKbGRIVnliaUV4TzJGYlJXSmRQV003Y21WMGRYSnVJVEI5TEZrOVpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MWhXMkpkTzJsbUtHbHpUbUZPS0dNcGZIeEpibVpwYm1sMGVUMDlZM3g4TUQ1aktXRmJZbDA5ZG05cFpDQXdmU3hHWkQxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b1lpbDdhV1lvWENKd1lXZGxkbWxsZDF3aVBUMWlMbWRsZENoV1lTa21KaUZoTGtrcGUyRXVTVDBoTUR0MllYSWdZejFjYm1GaEtHSXBPMkk5TUR4RktHSXVaMlYwS0d0aUtTeGNJbWRqYkdsa1hDSXBMbXhsYm1kMGFEc29ZM3g4WWlrbUptZGpLR1oxYm1OMGFXOXVLR0lwZTJFdWMyVnVaQ2hqUDF3aWRHbHRhVzVuWENJNlhDSmhaSFJwYldsdVoxd2lMR0lwZlNsOWZYMDdkbUZ5SUdoalBTRXhMRzFqUFdaMWJtTjBhVzl1S0dFcGUybG1LRndpWTI5dmEybGxYQ0k5UFZBb1lTeGhZeWtwZTNaaGNpQmlQVkFvWVN4VktTeGpQVzVrS0dFcExHUTlhMk1vVUNoaExGbGlLU2tzWlQxc1l5aFFLR0VzVnlrcExHYzlNVVV6S2xJb1lTeGFZaWtzWTJFOVVDaGhMRTVoS1R0cFppaGNJbUYxZEc5Y0lpRTlaU2w2WXloaUxHTXNaQ3hsTEdOaExHY3BKaVlvYUdNOUlUQXBPMlZzYzJWN1NpZ3pNaWs3ZG1GeUlHdzdZVHA3WXoxYlhUdGxQWGhoS0NrdWMzQnNhWFFvWENJdVhDSXBPMmxtS0RROVBXVXViR1Z1WjNSb0ppWW9iRDFsVzJVdWJHVnVaM1JvTFRGZExIQmhjbk5sU1c1MEtHd3NNVEFwUFQxc0tTbDdiRDFiWENKdWIyNWxYQ0pkTzJKeVpXRnJJR0Y5Wm05eUtHdzlaUzVzWlc1bmRHZ3RNanN3UEQxc08yd3RMU2xqTG5CMWMyZ29aUzV6YkdsalpTaHNLUzVxYjJsdUtGd2lMbHdpS1NrN1l5NXdkWE5vS0Z3aWJtOXVaVndpS1R0c1BXTjlabTl5S0haaGNpQnJQVEE3YXp4c0xteGxibWQwYUR0ckt5c3BhV1lvWlQxc1cydGRMR0V1WkdGMFlTNXpaWFFvVnl4bEtTeGpQVzVrS0dFcExIcGpLR0lzWXl4a0xHVXNZMkVzWnlrcGUyaGpQU0V3TzNKbGRIVnlibjFoTG1SaGRHRXVjMlYwS0Zjc1hDSmhkWFJ2WENJcGZYMTlMRzVqUFdaMWJtTjBhVzl1S0dFcGUybG1LRndpWTI5dmEybGxYQ0k5UFZBb1lTeGhZeWttSmx4dUlXaGpKaVlvYldNb1lTa3NJV2hqS1NsMGFISnZkMXdpWVdKdmNuUmNJanQ5TEZsalBXWjFibU4wYVc5dUtHRXBlMmxtS0dFdVoyVjBLRmRqS1NsN2RtRnlJR0k5VUNoaExGY3BMR005VUNoaExDUmlLWHg4ZUdFb0tTeGtQVmhqS0Z3aVgxOTFkRzFoWENJc1l5eGlLVHRrSmlZb1NpZ3hPU2tzWVM1elpYUW9WR01zS0c1bGR5QkVZWFJsS1M1blpYUlVhVzFsS0Nrc0lUQXBMR0V1YzJWMEtGSmpMR1F1VWlrc0tHSTlXR01vWENKZlgzVjBiWHBjSWl4akxHSXBLU1ltWkM1b1lYTm9QVDFpTG1oaGMyZ21KbUV1YzJWMEtGTmpMR0l1VWlrcGZYMHNibVE5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5UTJNb1VDaGhMRkVwS1N4alBXeGpLRkFvWVN4WEtTa3VjM0JzYVhRb1hDSXVYQ0lwTG14bGJtZDBhRHRoUFdwaktGQW9ZU3haWWlrcE96RThZU1ltS0dNclBWd2lMVndpSzJFcE8zSmxkSFZ5Ymx0Y0lrZEJNVndpTEdNc1lsMHVhbTlwYmloY0lpNWNJaWw5TEVkalBXWjFibU4wYVc5dUtHRXNZaXhqS1h0bWIzSW9kbUZ5SUdROVcxMHNaVDFiWFN4bkxHTmhQVEE3WTJFOFlTNXNaVzVuZEdnN1kyRXJLeWw3ZG1GeUlHdzlZVnRqWVYwN2JDNUlXMk5kUFQxaVAyUXVjSFZ6YUNoc0tUcDJiMmxrSURBOVBXZDhmR3d1U0Z0alhUeG5QeWhsUFZ0c1hTeG5QV3d1U0Z0alhTazZiQzVJVzJOZFBUMW5KaVpsTG5CMWMyZ29iQ2w5Y21WMGRYSnVJREE4WEc1a0xteGxibWQwYUQ5a09tVjlMR3hqUFdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlBd1BUMWhMbWx1WkdWNFQyWW9YQ0l1WENJcFAyRXVjM1ZpYzNSeUtERXBPbUY5TEd0alBXWjFibU4wYVc5dUtHRXBlMmxtS0NGaEtYSmxkSFZ5Ymx3aUwxd2lPekU4WVM1c1pXNW5kR2dtSm1FdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcFBUMWhMbXhsYm1kMGFDMHhKaVlvWVQxaExuTjFZbk4wY2lnd0xHRXViR1Z1WjNSb0xURXBLVHN3SVQxaExtbHVaR1Y0VDJZb1hDSXZYQ0lwSmlZb1lUMWNJaTljSWl0aEtUdHlaWFIxY200Z1lYMHNhbU05Wm5WdVkzUnBiMjRvWVNsN1lUMXJZeWhoS1R0eVpYUjFjbTVjSWk5Y0lqMDlZVDh4T21FdWMzQnNhWFFvWENJdlhDSXBMbXhsYm1kMGFIMDdablZ1WTNScGIyNGdXR01vWVN4aUxHTXBlMXdpYm05dVpWd2lQVDFpSmlZb1lqMWNJbHdpS1R0MllYSWdaRDFiWFN4bFBVTmhLR0VwTzJFOVhDSmZYM1YwYldGY0lqMDlZVDgyT2pJN1ptOXlLSFpoY2lCblBUQTdaenhsTG14bGJtZDBhRHRuS3lzcGUzWmhjaUJqWVQwb1hDSmNJaXRsVzJkZEtTNXpjR3hwZENoY0lpNWNJaWs3WTJFdWJHVnVaM1JvUGoxaEppWmtMbkIxYzJnb2UyaGhjMmc2WTJGYk1GMHNVanBsVzJkZExFODZZMkY5S1gxcFppZ3dJVDFrTG14bGJtZDBhQ2x5WlhSMWNtNGdNVDA5WkM1c1pXNW5kR2cvWkZzd1hUcGFZeWhpTEdRcGZIeGFZeWhqTEdRcGZIeGFZeWh1ZFd4c0xHUXBmSHhrV3pCZGZXWjFibU4wYVc5dUlGcGpLR0VzWWlsN2RtRnlJR003Ym5Wc2JEMDlZVDlqUFdFOU1Ub29ZejFNWVNoaEtTeGhQVXhoS0VRb1lTeGNJaTVjSWlrL1lTNXpkV0p6ZEhKcGJtY29NU2s2WENJdVhDSXJZU2twTzJadmNpaDJZWElnWkQwd08yUThZaTVzWlc1bmRHZzdaQ3NyS1dsbUtHSmJaRjB1YUdGemFEMDlZM3g4WWx0a1hTNW9ZWE5vUFQxaEtYSmxkSFZ5YmlCaVcyUmRmVHQyWVhJZ2IyUTlibVYzSUZKbFowVjRjQ2d2WG1oMGRIQnpQenBjWEM5Y1hDOG9XMTVjWEM4NlhTc3BMeWtzY0dROUx5Z3VLaWtvV3o4bUkxMHBLRDg2WDJkaFBWdGVKaU5kS2lrb1B6b21QeWtvTGlvcEx6dG1kVzVqZEdsdmJpQkNZeWhoS1h0aFBXRXVaMlYwS0ZFcE8zWmhjaUJpUFVsaktHRXNNQ2s3Y21WMGRYSnVYQ0pmWjJFOU1TNWNJaXRMS0dJclhDSXVYQ0lyWVNsOVpuVnVZM1JwYjI0Z1NXTW9ZU3hpS1h0MllYSWdZejF1WlhjZ1JHRjBaU3hrUFU4dWJtRjJhV2RoZEc5eUxHVTlaQzV3YkhWbmFXNXpmSHhiWFR0aFBWdGhMR1F1ZFhObGNrRm5aVzUwTEdNdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeGpMbWRsZEZsbFlYSW9LU3hqTG1kbGRFUmhkR1VvS1N4akxtZGxkRWh2ZFhKektDa3NZeTVuWlhSTmFXNTFkR1Z6S0NrcllsMDdabTl5S0dJOU1EdGlQR1V1YkdWdVozUm9PeXNyWWlsaExuQjFjMmdvWlZ0aVhTNWtaWE5qY21sd2RHbHZiaWs3Y21WMGRYSnVJRXhoS0dFdWFtOXBiaWhjSWk1Y0lpa3BmWFpoY2lCRVl6MW1kVzVqZEdsdmJpaGhLWHRLS0RRNEtUdDBhR2x6TG5SaGNtZGxkRDFoTzNSb2FYTXVWRDBoTVgwN1hHNUVZeTV3Y205MGIzUjVjR1V1WTJFOVpuVnVZM1JwYjI0b1lTeGlLWHRwWmloaExuUmhaMDVoYldVcGUybG1LRndpWVZ3aVBUMWhMblJoWjA1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1NsN1lTNW9jbVZtSmlZb1lTNW9jbVZtUFhGa0tIUm9hWE1zWVM1b2NtVm1MR0lwS1R0eVpYUjFjbTU5YVdZb1hDSm1iM0p0WENJOVBXRXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwS1hKbGRIVnliaUJ5WkNoMGFHbHpMR0VwZldsbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmhLWEpsZEhWeWJpQnhaQ2gwYUdsekxHRXNZaWw5TzF4dWRtRnlJSEZrUFdaMWJtTjBhVzl1S0dFc1lpeGpLWHQyWVhJZ1pEMXdaQzVsZUdWaktHSXBPMlFtSmpNOFBXUXViR1Z1WjNSb0ppWW9ZajFrV3pGZEt5aGtXek5kUDJSYk1sMHJaRnN6WFRwY0lsd2lLU2s3WVQxaExuUmhjbWRsZEM1blpYUW9YQ0pzYVc1clpYSlFZWEpoYlZ3aUtUdDJZWElnWlQxaUxtbHVaR1Y0VDJZb1hDSS9YQ0lwTEdROVlpNXBibVJsZUU5bUtGd2lJMXdpS1R0alAySXJQU2d0TVQwOVpEOWNJaU5jSWpwY0lpWmNJaWtyWVRvb1l6MHRNVDA5WlQ5Y0lqOWNJanBjSWlaY0lpeGlQUzB4UFQxa1AySXJLR01yWVNrNllpNXpkV0p6ZEhKcGJtY29NQ3hrS1N0aksyRXJZaTV6ZFdKemRISnBibWNvWkNrcE8zSmxkSFZ5YmlCaVBXSXVjbVZ3YkdGalpTZ3ZKaXRmWjJFOUx5eGNJaVpmWjJFOVhDSXBmU3h5WkQxbWRXNWpkR2x2YmloaExHSXBlMmxtS0dJbUptSXVZV04wYVc5dUtYdDJZWElnWXoxaExuUmhjbWRsZEM1blpYUW9YQ0pzYVc1clpYSlFZWEpoYlZ3aUtTNXpjR3hwZENoY0lqMWNJaWxiTVYwN2FXWW9YQ0puWlhSY0lqMDlZaTV0WlhSb2IyUXVkRzlNYjNkbGNrTmhjMlVvS1NsN1lUMWlMbU5vYVd4a1RtOWtaWE44ZkZ0ZE8yWnZjaWgyWVhJZ1pEMHdPMlE4WVM1c1pXNW5kR2c3WkNzcktXbG1LRndpWDJkaFhDSTlQV0ZiWkYwdWJtRnRaU2w3WVZ0a1hTNXpaWFJCZEhSeWFXSjFkR1VvWENKMllXeDFaVndpTEdNcE8zSmxkSFZ5Ym4xaFBWeHVUUzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhVzV3ZFhSY0lpazdZUzV6WlhSQmRIUnlhV0oxZEdVb1hDSjBlWEJsWENJc1hDSm9hV1JrWlc1Y0lpazdZUzV6WlhSQmRIUnlhV0oxZEdVb1hDSnVZVzFsWENJc1hDSmZaMkZjSWlrN1lTNXpaWFJCZEhSeWFXSjFkR1VvWENKMllXeDFaVndpTEdNcE8ySXVZWEJ3Wlc1a1EyaHBiR1FvWVNsOVpXeHpaVndpY0c5emRGd2lQVDFpTG0xbGRHaHZaQzUwYjB4dmQyVnlRMkZ6WlNncEppWW9ZaTVoWTNScGIyNDljV1FvWVN4aUxtRmpkR2x2YmlrcGZYMDdYRzVFWXk1d2NtOTBiM1I1Y0dVdVV6MW1kVzVqZEdsdmJpaGhMR0lzWXlsN1puVnVZM1JwYjI0Z1pDaGpLWHQwY25sN1l6MWpmSHhQTG1WMlpXNTBPM1poY2lCa08yRTZlM1poY2lCblBXTXVkR0Z5WjJWMGZIeGpMbk55WTBWc1pXMWxiblE3Wm05eUtHTTlNVEF3TzJjbUpqQThZenNwZTJsbUtHY3VhSEpsWmlZbVp5NXViMlJsVG1GdFpTNXRZWFJqYUNndlhtRW9QenB5WldFcFB5UXZhU2twZTJROVp6dGljbVZoYXlCaGZXYzlaeTV3WVhKbGJuUk9iMlJsTzJNdExYMWtQWHQ5ZlNoY0ltaDBkSEE2WENJOVBXUXVjSEp2ZEc5amIyeDhmRndpYUhSMGNITTZYQ0k5UFdRdWNISnZkRzlqYjJ3cEppWnpaQ2hoTEdRdWFHOXpkRzVoYldWOGZGd2lYQ0lwSmlaa0xtaHlaV1ltSmloa0xtaHlaV1k5Y1dRb1pTeGtMbWh5WldZc1lpa3BmV05oZEdOb0tHc3BlMG9vTWpZcGZYMTJZWElnWlQxMGFHbHpPM1JvYVhNdVZIeDhLSFJvYVhNdVZEMGhNQ3hNS0Uwc1hDSnRiM1Z6WldSdmQyNWNJaXhrTENFeEtTeE1LRTBzWENKclpYbDFjRndpTEdRc0lURXBLVHRqSmlaTUtFMHNYQ0p6ZFdKdGFYUmNJaXhtZFc1amRHbHZiaWhpS1h0aVBXSjhmRTh1WlhabGJuUTdhV1lvS0dJOVlpNTBZWEpuWlhSOGZHSXVjM0pqUld4bGJXVnVkQ2ttSm1JdVlXTjBhVzl1S1h0MllYSWdZejFpTG1GamRHbHZiaTV0WVhSamFDaHZaQ2s3WXlZbWMyUW9ZU3hjYm1OYk1WMHBKaVp5WkNobExHSXBmWDBwZlR0bWRXNWpkR2x2YmlCelpDaGhMR0lwZTJsbUtHSTlQVTB1Ykc5allYUnBiMjR1YUc5emRHNWhiV1VwY21WMGRYSnVJVEU3Wm05eUtIWmhjaUJqUFRBN1l6eGhMbXhsYm1kMGFEdGpLeXNwYVdZb1lWdGpYV2x1YzNSaGJtTmxiMllnVW1WblJYaHdLWHRwWmloaFcyTmRMblJsYzNRb1lpa3BjbVYwZFhKdUlUQjlaV3h6WlNCcFppZ3dQRDFpTG1sdVpHVjRUMllvWVZ0alhTa3BjbVYwZFhKdUlUQTdjbVYwZFhKdUlURjlPM1poY2lCd1BTOWVLRWRVVFh4UFVGUXBMVnRCTFZvd0xUbGRLeVF2TEhFOUx6dGZaMkZsZUhBOVcxNDdYU292Wnl4eVBTODdLQ2hmWDNWMGJXRTlLWHdvVzE0N1BWMHJQVWRCV0Q5Y1hHUXJYRnd1S1NsYlhqdGRLaTluTEhROVpuVnVZM1JwYjI0b1lTbDdablZ1WTNScGIyNGdZaWhoTEdJcGUySW1KaWhqS3oxY0lpWmNJaXRoSzF3aVBWd2lLMHNvWWlrcGZYWmhjaUJqUFZ3aWFIUjBjSE02THk5M2QzY3VaMjl2WjJ4bExXRnVZV3g1ZEdsamN5NWpiMjB2WjNSdEwycHpQMmxrUFZ3aUswc29ZUzVwWkNrN1hDSmtZWFJoVEdGNVpYSmNJaUU5WVM1Q0ppWmlLRndpYkZ3aUxHRXVRaWs3WWloY0luUmNJaXhoTG5SaGNtZGxkQ2s3WWloY0ltTnBaRndpTEdFdWFtRXBPMklvWENKamFXUjBYQ0lzWVM1cllTazdZaWhjSW1kaFkxd2lMR0V1YkdFcE8ySW9YQ0poYVhCY0lpeGhMbWxoS1R0aExtNWhKaVppS0Z3aWJWd2lMRndpYzNsdVkxd2lLVHRpS0Z3aVkzbGpiR1ZjSWl4aExrY3BPMkV1Y1dFbUptSW9YQ0puWTJ4cFpGd2lMR0V1Y1dFcE8zSmxkSFZ5YmlCamZUdDJZWElnU21ROVpuVnVZM1JwYjI0b1lTeGlMR01wZTNSb2FYTXVWVDFsWkR0MGFHbHpMbUZoUFdJN0tHSTlZeWw4ZkNoaVBTaGlQVkFvWVN4V0tTa21KbHdpZERCY0lpRTlZajlYWkM1MFpYTjBLR0lwUDF3aVgyZGhkRjljSWl0RFl5aFFLR0VzVG1FcEtUcGNJbDluWVhSZlhDSXJRMk1vWWlrNlhDSmZaMkYwWENJcE8zUm9hWE11V1QxaU8wVmtLRzVsZHlCUFpDZ3hNQ2tzWVNrbUppaEtLRE13S1N4MGFHbHpMbkJoUFNFd0tYMHNVbVE5Wm5WdVkzUnBiMjRvWVN4aUtYdDJZWElnWXoxaUxtZGxkQ2hYWWlrN1lpNXpaWFFvVjJJc1puVnVZM1JwYjI0b1lpbDdVR1FvWVN4aUtUdDJZWElnWkQxaktHSXBPMUZrS0dFc1lpazdjbVYwZFhKdUlHUjlLVHQyWVhJZ1pEMWlMbWRsZENoWVlpazdZaTV6WlhRb1dHSXNablZ1WTNScGIyNG9ZaWw3ZG1GeUlHTTlaQ2hpS1R0SlpDaGhMR0lwTzNKbGRIVnliaUJqZlNsOUxGQmtQV1oxYm1OMGFXOXVLR0VzWWlsN1lpNW5aWFFvWVM1VktYeDhLRndpTVZ3aVBUMURZU2hoTGxrcFd6QmRQMkl1YzJWMEtHRXVWU3hjSWx3aUxDRXdLVHBpTG5ObGRDaGhMbFVzWENKY0lpdG9aQ2dwTENFd0tTbDlMRkZrUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvWWk1blpYUW9ZUzVWS1NsN2RtRnlJR005TmtVMU8yRXVjR0VtSmloakx6MHhNQ2s3ZW1Nb1lTNVpMRndpTVZ3aUxHSXVaMlYwS0ZsaUtTeGlMbWRsZENoWEtTeGNibUl1WjJWMEtFNWhLU3hqS1gxOUxFbGtQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9ZaTVuWlhRb1lTNVZLU2w3ZG1GeUlHTTlibVYzSUdWbExHUTlablZ1WTNScGIyNG9ZU2w3SkdFb1lTa3VSaVltWXk1elpYUW9KR0VvWVNrdVJpeGlMbWRsZENoaEtTbDlPMlFvYUdJcE8yUW9hV0lwTzJRb1RtRXBPMlFvVVNrN1pDaEJaQ2s3WkNoaExsVXBPMk11YzJWMEtDUmhLR3hrS1M1R0xGUmtLR0lwS1R0MllYSWdaVDFoTG1GaE8yTXViV0Z3S0daMWJtTjBhVzl1S0dFc1lpbDdaU3M5U3loaEtTdGNJajFjSWp0bEt6MUxLRndpWENJcllpa3JYQ0ltWENKOUtUdGxLejFjSW5vOVhDSXJhR1FvS1R0MFlTaGxLVHRpTG5ObGRDaGhMbFVzWENKY0lpd2hNQ2w5ZlN4WFpEMHZYbWQwYlZ4Y1pDc2tMenQyWVhJZ1ptUTlablZ1WTNScGIyNG9ZU3hpS1h0aFBXRXVZanRwWmlnaFlTNW5aWFFvWENKa1kweHZZV1JsWkZ3aUtTbDdUbVFvWVN3eU9TazdZajFpZkh4N2ZUdDJZWElnWXp0aVcxVmRKaVlvWXoxRFl5aGlXMVZkS1NrN1lqMXVaWGNnU21Rb1lTeGNJbWgwZEhCek9pOHZjM1JoZEhNdVp5NWtiM1ZpYkdWamJHbGpheTV1WlhRdmNpOWpiMnhzWldOMFAzUTlaR01tWVdsd1BURW1YM0k5TXlaY0lpeGpLVHRTWkNoaUxHRXBPMkV1YzJWMEtGd2laR05NYjJGa1pXUmNJaXdoTUNsOWZUdDJZWElnVTJROVpuVnVZM1JwYjI0b1lTbDdhV1lvSVdFdVoyVjBLRndpWkdOTWIyRmtaV1JjSWlrbUpsd2lZMjl2YTJsbFhDSTlQV0V1WjJWMEtHRmpLU2w3VG1Rb1lTdzFNU2s3ZG1GeUlHSTlibVYzSUVwa0tHRXBPMUJrS0dJc1lTazdVV1FvWWl4aEtUdGhMbWRsZENoaUxsVXBKaVlvWVM1elpYUW9UV1FzTVN3aE1Da3NZUzV6WlhRb1oyUXNiMk1vS1N0Y0lpOXlMMk52Ykd4bFkzUmNJaXdoTUNrcGZYMDdkbUZ5SUV4alBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOVR5NW5ZVWRzYjJKaGJEMVBMbWRoUjJ4dlltRnNmSHg3ZlR0eVpYUjFjbTRnWVM1b2FXUTlZUzVvYVdSOGZHaGtLQ2w5TzNaaGNpQmhaQ3hpWkQxbWRXNWpkR2x2YmloaExHSXNZeWw3YVdZb0lXRmtLWHQyWVhJZ1pEdGtQVTB1Ykc5allYUnBiMjR1YUdGemFEdDJZWElnWlQxUExtNWhiV1VzWnowdlhpTS9aMkZ6Ynowb1cxNG1YU29wTHp0cFppaGxQU2hrUFNoa1BXUW1KbVF1YldGMFkyZ29aeWw4ZkdVbUptVXViV0YwWTJnb1p5a3BQMlJiTVYwNlEyRW9YQ0pIUVZOUFhDSXBXekJkZkh4Y0lsd2lLU1ltWkM1dFlYUmphQ2d2WGlnL09pRW9XeTB3TFRsaExYb3VYWHN4TERRd2ZTa2hLVDhvV3kwdVhGeDNYWHN4TUN3eE1qQXdmU2trTDJrcEtYcGpLRndpUjBGVFQxd2lMRndpWENJclpDeGpMR0lzWVN3d0tTeDNhVzVrYjNjdVgzVmtiM3g4S0hkcGJtUnZkeTVmZFdSdlBXSXBMSGRwYm1SdmR5NWZkWFJqY0h4OEtIZHBibVJ2ZHk1ZmRYUmpjRDFqS1N4aFBXVmJNVjBzZDJFb1hDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVXVZMjl0TDJGdVlXeDVkR2xqY3k5M1pXSXZhVzV3WVdkbEwzQjFZaTlwYm5CaFoyVXVhbk0vWENJcktHRS9YQ0p3Y21WbWFYZzlYQ0lyWVN0Y0lpWmNJanBjSWx3aUtTdG9aQ2dwTEZ3aVgyZGhjMjlxYzF3aUtUdGhaRDBoTUgxOU8zWmhjaUJJUFdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCaFB5Z3hLbUVwTG5SdlJtbDRaV1FvTXlrNlhDSXdYQ0o5TEdSaFBXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBVOHVjR1Z5Wm05eWJXRnVZMlU3YVdZb1lpWW1ZaTVuWlhSRmJuUnlhV1Z6UW5sT1lXMWxLWHRLS0RNMUtUdDJZWElnWXoxY0ltaDBkSEJ6T2k4dmQzZDNMbWR2YjJkc1pTMWhibUZzZVhScFkzTXVZMjl0TDJGdVlXeDVkR2xqY3k1cWN6OTNjR2xrUFZ3aUsyRTdkMkVvWXl4MmIybGtJREFzZG05cFpDQXdMR1oxYm1OMGFXOXVLQ2w3ZEhKNWUzWmhjaUJrUFRFc1pUMWlMbWRsZEVWdWRISnBaWE5DZVU1aGJXVW9YQ0pvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1V0WVc1aGJIbDBhV056TG1OdmJTOWhibUZzZVhScFkzTXVhbk5jSWlrN1pTWW1NQ0U5WlM1c1pXNW5kR2g4ZkNobFBXSXVaMlYwUlc1MGNtbGxjMEo1VG1GdFpTaGNJbWgwZEhBNkx5OTNkM2N1WjI5dloyeGxMV0Z1WVd4NWRHbGpjeTVqYjIwdllXNWhiSGwwYVdOekxtcHpYQ0lwTEdROU1DazdkbUZ5SUdjOVlpNW5aWFJGYm5SeWFXVnpRbmxPWVcxbEtHTXBPMmxtS0dVbUpqRTlQV1V1YkdWdVozUm9KaVpuSmlZeFBUMW5MbXhsYm1kMGFDbDdTaWd6TnlrN2RtRnlJR05oUFdWYk1GMHNiRDFuV3pCZExHczllM1JwWkRwaExHRmtPa2dvWTJFdVpIVnlZWFJwYjI0cExHSmtPa2dvYkM1a2RYSmhkR2x2Ymlrc1hHNWhjanBJS0dOaExuSmxjM0J2Ym5ObFJXNWtMV05oTG5KbGNYVmxjM1JUZEdGeWRDa3NZbkk2U0Noc0xuSmxjM0J2Ym5ObFJXNWtMV3d1Y21WeGRXVnpkRk4wWVhKMEtTeGhianBJS0dOaExtUnZiV0ZwYmt4dmIydDFjRVZ1WkMxallTNWtiMjFoYVc1TWIyOXJkWEJUZEdGeWRDa3NZbTQ2U0Noc0xtUnZiV0ZwYmt4dmIydDFjRVZ1WkMxc0xtUnZiV0ZwYmt4dmIydDFjRk4wWVhKMEtTeGhZenBJS0dOaExtTnZibTVsWTNSRmJtUXRZMkV1WTI5dWJtVmpkRk4wWVhKMEtTeGlZenBJS0d3dVkyOXVibVZqZEVWdVpDMXNMbU52Ym01bFkzUlRkR0Z5ZENrc1lYTTZaSDBzWkQxYlhUdGtMbkIxYzJnb1hDSmZkajFxTkRoY0lpazdaQzV3ZFhOb0tGd2lhV1E5TVRCY0lpazdabTl5S0haaGNpQjNJR2x1SUdzcGF5NW9ZWE5QZDI1UWNtOXdaWEowZVNoM0tTWW1aQzV3ZFhOb0tIY3JYQ0k5WENJclN5aHJXM2RkS1NrN1pDNXdkWE5vS0Z3aWVqMWNJaXRvWkNncEtUdDNZeWhjSW1oMGRIQnpPaTh2ZDNkM0xtZHZiMmRzWlMxaGJtRnNlWFJwWTNNdVkyOXRMM1V2WkZ3aUxHUXVhbTlwYmloY0lpWmNJaWtzZFdFcGZYMWpZWFJqYUNob1lTbDdmWDBwZlgwN2RtRnlJSGRpUFM5ZUtGVkJmRmxVZkUxUGZFZFFLUzBvWEZ4a0t5a3RLRnhjWkNzcEpDOHNjR005Wm5WdVkzUnBiMjRvWVNsN1puVnVZM1JwYjI0Z1lpaGhMR0lwZTJVdVlpNWtZWFJoTG5ObGRDaGhMR0lwZldaMWJtTjBhVzl1SUdNb1lTeGpLWHRpS0dFc1l5azdaUzVtYVd4MFpYSnpMbUZrWkNoaEtYMW1kVzVqZEdsdmJpQmtLR0VzWWl4aktYdEZaQ2h1WlhjZ1QyUW9NVVUwTENFd0xHSXBMR1V1WWlrbUppaGhQVU5oS0dFcEtTWW1NRHhoTG14bGJtZDBhQ1ltU2loaktYMTJZWElnWlQxMGFHbHpPM1JvYVhNdVlqMXVaWGNnV1dFN2RHaHBjeTVtYVd4MFpYSnpQVzVsZHlCSVlUdGlLRllzWVZ0V1hTazdZaWhPWVN4ellTaGhXMDVoWFNrcE8ySW9WU3hoVzFWZEtUdGlLRmNzWVZ0WFhYeDhlR0VvS1NrN1lpaFpZaXhoVzFsaVhTazdZaWhhWWl4aFcxcGlYU2s3WWlna1lpeGhXeVJpWFNrN1lpaFhZeXhoVzFkalhTazdZaWhpWXl4aFcySmpYU2s3WWloall5eGhXMk5qWFNrN1lpaExZU3hoVzB0aFhTazdZaWhrWXl4aFcyUmpYU2s3WWlobFl5eGhXMlZqWFNrN1lpaGhZeXhoVzJGalhTazdZaWhCWkN4aFcwRmtYU2s3WWlodUxHRmJibDBwTzJJb2FHSXNNU2s3WWlocFlpeGNJbW8wT0Z3aUtUdGpLRkZpTEUxaEtUdGpLR1JrTEdOa0tUdGpLRkppTEU5aEtUdGpLRzFrTEhaaUtUdGpLRk5pTEc1aktUdGNibU1vVldNc1dXTXBPMk1vVkdJc1NtRXBPMk1vVm1Jc1ZHRXBPMk1vVm1Nc1NHTXBPMk1vZW1Rc2VXUXBPMk1vVEdRc1UyUXBPMk1vVjJJc1VHRXBPMk1vV0dJc1UyRXBPMk1vUTJRc1JtUW9kR2hwY3lrcE8wcGpLSFJvYVhNdVlpeGhXMUZkS1R0TFl5aDBhR2x6TG1JcE8zUm9hWE11WWk1elpYUW9hbUlzVEdNb0tTazdZbVFvZEdocGN5NWlMbWRsZENoT1lTa3NkR2hwY3k1aUxtZGxkQ2hYS1N4MGFHbHpMbUl1WjJWMEtGbGlLU2s3ZEdocGN5NXlZVDF1WlhjZ1QyUW9NVVUwTENFd0xGd2laMkZsZUhBeE1Gd2lLVHRrS0Z3aVgyZHBaRndpTEZ3aVoyRmpiMjlyYVdVeE1Wd2lMRFF4S1R0a0tGd2lYMmRoYVdSY0lpeGNJbWRoWTI5dmEybGxNVEpjSWl3ME5DbDlMRXBqUFdaMWJtTjBhVzl1S0dFc1lpbDdhV1lvWENKamIyOXJhV1ZjSWowOVVDaGhMR0ZqS1NsN2FHTTlJVEU3ZG1GeUlHTTdZanA3ZG1GeUlHUTlRMkVvVUNoaExGVXBLVHRwWmloa0ppWWhLREUrWkM1c1pXNW5kR2dwS1h0alBWdGRPMlp2Y2loMllYSWdaVDB3TzJVOFpDNXNaVzVuZEdnN1pTc3JLWHQyWVhJZ1p6dG5QV1JiWlYwdWMzQnNhWFFvWENJdVhDSXBPM1poY2lCallUMW5Mbk5vYVdaMEtDazdLRndpUjBFeFhDSTlQV05oZkh4Y0lqRmNJajA5WTJFcEppWXhQR2N1YkdWdVozUm9QeWhqWVQxbkxuTm9hV1owS0NrdWMzQnNhWFFvWENJdFhDSXBMREU5UFdOaExteGxibWQwYUNZbVhHNG9ZMkZiTVYwOVhDSXhYQ0lwTEdOaFd6QmRLajB4TEdOaFd6RmRLajB4TEdjOWUwZzZZMkVzY3pwbkxtcHZhVzRvWENJdVhDSXBmU2s2WnoxMmIybGtJREE3WnlZbVl5NXdkWE5vS0djcGZXbG1LREU5UFdNdWJHVnVaM1JvS1h0S0tERXpLVHRqUFdOYk1GMHVjenRpY21WaGF5QmlmV2xtS0RBOVBXTXViR1Z1WjNSb0tVb29NVElwTzJWc2MyVjdTaWd4TkNrN1pEMXNZeWhRS0dFc1Z5a3BMbk53YkdsMEtGd2lMbHdpS1M1c1pXNW5kR2c3WXoxSFl5aGpMR1FzTUNrN2FXWW9NVDA5WXk1c1pXNW5kR2dwZTJNOVkxc3dYUzV6TzJKeVpXRnJJR0o5WkQxcVl5aFFLR0VzV1dJcEtUdGpQVWRqS0dNc1pDd3hLVHRqUFdOYk1GMG1KbU5iTUYwdWN6dGljbVZoYXlCaWZYMWpQWFp2YVdRZ01IMWpmSHdvWXoxUUtHRXNWeWtzWkQxUUtHRXNKR0lwZkh4NFlTZ3BMR005V0dNb1hDSmZYM1YwYldGY0lpeGtMR01wTEhadmFXUWdNQ0U5WXo4b1NpZ3hNQ2tzWXoxakxrOWJNVjByWENJdVhDSXJZeTVQV3pKZEtUcGpQWFp2YVdRZ01DazdZeVltS0dFdVpHRjBZUzV6WlhRb1VTeGpLU3hvWXowaE1DbDlZejFoTG1kbGRDaGpZeWs3YVdZb1pUMUZLRTB1Ykc5allYUnBiMjViWXo5Y0ltaHlaV1pjSWpwY0luTmxZWEpqYUZ3aVhTeGNJbDluWVZ3aUtTbGhMbWRsZENoaVl5ay9LR005WlM1cGJtUmxlRTltS0Z3aUxsd2lLU3d0TVQwOVl6OUtLREl5S1RwY2JpaGtQV1V1YzNWaWMzUnlhVzVuS0dNck1Ta3NYQ0l4WENJaFBXVXVjM1ZpYzNSeWFXNW5LREFzWXlrL1NpZ3lNaWs2S0dNOVpDNXBibVJsZUU5bUtGd2lMbHdpS1N3dE1UMDlZejlLS0RJeUtUb29aVDFrTG5OMVluTjBjbWx1Wnlnd0xHTXBMR005WkM1emRXSnpkSEpwYm1jb1l5c3hLU3hsSVQxSll5aGpMREFwSmlabElUMUpZeWhqTEMweEtTWW1aU0U5U1dNb1l5d3RNaWsvU2lneU15azZLRW9vTVRFcExHRXVaR0YwWVM1elpYUW9VU3hqS1NrcEtTa3BPa29vTWpFcE8ySW1KaWhLS0RrcExHRXVaR0YwWVM1elpYUW9VU3hMS0dJcEtTazdhV1lvSVdFdVoyVjBLRkVwS1dsbUtHSTlLR0k5VHk1bllVZHNiMkpoYkNZbVR5NW5ZVWRzYjJKaGJDNTJhV1FwSmlZdE1TRTlZaTV6WldGeVkyZ29MMTRvUHpwMWRHMWhYRnd1S1Q5Y1hHUXJYRnd1WEZ4a0t5UXZLVDlpT25admFXUWdNQ2xLS0RFM0tTeGhMbVJoZEdFdWMyVjBLRkVzWWlrN1pXeHpaWHRLS0RncE8ySTlUeTV1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS3loTkxtTnZiMnRwWlQ5TkxtTnZiMnRwWlRwY0lsd2lLU3NvVFM1eVpXWmxjbkpsY2o5TkxuSmxabVZ5Y21WeU9sd2lYQ0lwTzJNOVlpNXNaVzVuZEdnN1ptOXlLR1E5VHk1b2FYTjBiM0o1TG14bGJtZDBhRHN3UEdRN0tXSXJQV1F0TFY1akt5czdZUzVrWVhSaExuTmxkQ2hSTEZ0b1pDZ3BYa3hoS0dJcEpseHVNakUwTnpRNE16WTBOeXhOWVhSb0xuSnZkVzVrS0NodVpYY2dSR0YwWlNrdVoyVjBWR2x0WlNncEx6RkZNeWxkTG1wdmFXNG9YQ0l1WENJcEtYMXRZeWhoS1gwc1MyTTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlUeTV1WVhacFoyRjBiM0lzWXoxUExuTmpjbVZsYml4a1BVMHViRzlqWVhScGIyNDdZUzV6WlhRb2JHSXNlV0VvWVM1blpYUW9aV01wS1NrN2FXWW9aQ2w3ZG1GeUlHVTlaQzV3WVhSb2JtRnRaWHg4WENKY0lqdGNJaTljSWlFOVpTNWphR0Z5UVhRb01Da21KaWhLS0RNeEtTeGxQVndpTDF3aUsyVXBPMkV1YzJWMEtHdGlMR1F1Y0hKdmRHOWpiMndyWENJdkwxd2lLMlF1YUc5emRHNWhiV1VyWlN0a0xuTmxZWEpqYUNsOVl5WW1ZUzV6WlhRb2NXSXNZeTUzYVdSMGFDdGNJbmhjSWl0akxtaGxhV2RvZENrN1l5WW1ZUzV6WlhRb2NHSXNZeTVqYjJ4dmNrUmxjSFJvSzF3aUxXSnBkRndpS1R0MllYSWdZejFOTG1SdlkzVnRaVzUwUld4bGJXVnVkQ3huUFNobFBVMHVZbTlrZVNrbUptVXVZMnhwWlc1MFYybGtkR2dtSm1VdVkyeHBaVzUwU0dWcFoyaDBMR05oUFZ0ZE8yTW1KbU11WTJ4cFpXNTBWMmxrZEdnbUptTXVZMnhwWlc1MFNHVnBaMmgwSmlZb1hDSkRVMU14UTI5dGNHRjBYQ0k5UFQxTkxtTnZiWEJoZEUxdlpHVjhmQ0ZuS1Q5allUMWJZeTVqYkdsbGJuUlhhV1IwYUN4akxtTnNhV1Z1ZEVobGFXZG9kRjA2WnlZbVhHNG9ZMkU5VzJVdVkyeHBaVzUwVjJsa2RHZ3NaUzVqYkdsbGJuUklaV2xuYUhSZEtUdGpQVEErUFdOaFd6QmRmSHd3UGoxallWc3hYVDljSWx3aU9tTmhMbXB2YVc0b1hDSjRYQ0lwTzJFdWMyVjBLSEppTEdNcE8yRXVjMlYwS0hSaUxHWmpLQ2twTzJFdWMyVjBLRzlpTEUwdVkyaGhjbUZqZEdWeVUyVjBmSHhOTG1Ob1lYSnpaWFFwTzJFdWMyVjBLSE5pTEdJbUpsd2lablZ1WTNScGIyNWNJajA5UFhSNWNHVnZaaUJpTG1waGRtRkZibUZpYkdWa0ppWmlMbXBoZG1GRmJtRmliR1ZrS0NsOGZDRXhLVHRoTG5ObGRDaHVZaXdvWWlZbUtHSXViR0Z1WjNWaFoyVjhmR0l1WW5KdmQzTmxja3hoYm1kMVlXZGxLWHg4WENKY0lpa3VkRzlNYjNkbGNrTmhjMlVvS1NrN2FXWW9aQ1ltWVM1blpYUW9ZMk1wSmlZb1lqMU5MbXh2WTJGMGFXOXVMbWhoYzJncEtYdGlQV0l1YzNCc2FYUW9MMXMvSmlOZEt5OHBPMlE5VzEwN1ptOXlLR005TUR0alBHSXViR1Z1WjNSb095c3JZeWtvUkNoaVcyTmRMRndpZFhSdFgybGtYQ0lwZkh4RUtHSmJZMTBzWENKMWRHMWZZMkZ0Y0dGcFoyNWNJaWw4ZkVRb1lsdGpYU3hjSW5WMGJWOXpiM1Z5WTJWY0lpbDhmRVFvWWx0alhTeGNJblYwYlY5dFpXUnBkVzFjSWlsOGZFUW9ZbHRqWFN4Y0luVjBiVjkwWlhKdFhDSXBmSHhFS0dKYlkxMHNYQ0oxZEcxZlkyOXVkR1Z1ZEZ3aUtYeDhSQ2hpVzJOZExGd2laMk5zYVdSY0lpbDhmRnh1UkNoaVcyTmRMRndpWkdOc2FXUmNJaWw4ZkVRb1lsdGpYU3hjSW1kamJITnlZMXdpS1NrbUptUXVjSFZ6YUNoaVcyTmRLVHN3UEdRdWJHVnVaM1JvSmlZb1lqMWNJaU5jSWl0a0xtcHZhVzRvWENJbVhDSXBMR0V1YzJWMEtHdGlMR0V1WjJWMEtHdGlLU3RpS1NsOWZUdHdZeTV3Y205MGIzUjVjR1V1WjJWMFBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQjBhR2x6TG1JdVoyVjBLR0VwZlR0d1l5NXdjbTkwYjNSNWNHVXVjMlYwUFdaMWJtTjBhVzl1S0dFc1lpbDdkR2hwY3k1aUxuTmxkQ2hoTEdJcGZUdDJZWElnY1dNOWUzQmhaMlYyYVdWM09sdHRZbDBzWlhabGJuUTZXM1ZpTEhoaUxIbGlMSHBpWFN4emIyTnBZV3c2VzBKaUxFTmlMRVJpWFN4MGFXMXBibWM2VzAxaUxFNWlMRkJpTEU5aVhYMDdYRzV3WXk1d2NtOTBiM1I1Y0dVdWMyVnVaRDFtZFc1amRHbHZiaWhoS1h0cFppZ2hLREUrWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2twZTNaaGNpQmlMR003WENKemRISnBibWRjSWowOVBYUjVjR1Z2WmlCaGNtZDFiV1Z1ZEhOYk1GMC9LR0k5WVhKbmRXMWxiblJ6V3pCZExHTTlXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc01Ta3BPaWhpUFdGeVozVnRaVzUwYzFzd1hTWW1ZWEpuZFcxbGJuUnpXekJkVzFaaFhTeGpQV0Z5WjNWdFpXNTBjeWs3WWlZbUtHTTllbUVvY1dOYllsMThmRnRkTEdNcExHTmJWbUZkUFdJc2RHaHBjeTVpTG5ObGRDaGpMSFp2YVdRZ01Dd2hNQ2tzZEdocGN5NW1hV3gwWlhKekxrUW9kR2hwY3k1aUtTeDBhR2x6TG1JdVpHRjBZUzV0UFh0OUxFVmtLSFJvYVhNdWNtRXNkR2hwY3k1aUtTWW1aR0VvZEdocGN5NWlMbWRsZENoT1lTa3BLWDE5TzNCakxuQnliM1J2ZEhsd1pTNXRZVDFtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFhSb2FYTTdkU2hoTEdNc1lpbDhmQ2gyS0dFc1puVnVZM1JwYjI0b0tYdDFLR0VzWXl4aUtYMHBMSGtvVTNSeWFXNW5LR011WjJWMEtGWXBLU3hoTEhadmFXUWdNQ3hpTENFd0tTbDlPM1poY2lCeVl6MW1kVzVqZEdsdmJpaGhLWHRwWmloY0luQnlaWEpsYm1SbGNsd2lQVDFOTG5acGMybGlhV3hwZEhsVGRHRjBaU2x5WlhSMWNtNGhNVHRoS0NrN2NtVjBkWEp1SVRCOUxIbzlablZ1WTNScGIyNG9ZU2w3YVdZb0lYSmpLR0VwS1h0S0tERTJLVHQyWVhJZ1lqMGhNU3hqUFdaMWJtTjBhVzl1S0NsN2FXWW9JV0ltSm5KaktHRXBLWHRpUFNFd08zWmhjaUJrUFdNc1pUMU5PMlV1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2o5bExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0oyYVhOcFltbHNhWFI1WTJoaGJtZGxYQ0lzWkN3aE1TazZaUzVrWlhSaFkyaEZkbVZ1ZENZbVpTNWtaWFJoWTJoRmRtVnVkQ2hjSW05dWRtbHphV0pwYkdsMGVXTm9ZVzVuWlZ3aUxHUXBmWDA3VENoTkxGd2lkbWx6YVdKcGJHbDBlV05vWVc1blpWd2lMR01wZlgwN2RtRnlJSFJrUFM5ZUtEODZLRnhjZHlzcFhGd3VLVDhvUHpvb1hGeDNLeWs2S1Q4b1hGeDNLeWtrTHl4ell6MW1kVzVqZEdsdmJpaGhLWHRwWmlobFlTaGhXekJkS1NsMGFHbHpMblU5WVZzd1hUdGxiSE5sZTNaaGNpQmlQWFJrTG1WNFpXTW9ZVnN3WFNrN2JuVnNiQ0U5WWlZbU5EMDlZaTVzWlc1bmRHZ21KaWgwYUdsekxtTTlZbHN4WFh4OFhDSjBNRndpTEhSb2FYTXVTejFpV3pKZGZIeGNJbHdpTEhSb2FYTXVRejFpV3pOZExIUm9hWE11WVQxYlhTNXpiR2xqWlM1allXeHNLR0VzTVNrc2RHaHBjeTVMZkh3b2RHaHBjeTVCUFZ3aVkzSmxZWFJsWENJOVBYUm9hWE11UXl4MGFHbHpMbWs5WENKeVpYRjFhWEpsWENJOVBYUm9hWE11UXl4MGFHbHpMbWM5WENKd2NtOTJhV1JsWENJOVBYUm9hWE11UXl4MGFHbHpMbUpoUFZ3aWNtVnRiM1psWENJOVBYUm9hWE11UXlrc2RHaHBjeTVwSmlZb016dzlkR2hwY3k1aExteGxibWQwYUQ4b2RHaHBjeTVZUFhSb2FYTXVZVnN4WFN4MGFHbHpMbGM5ZEdocGN5NWhXekpkS1RwMGFHbHpMbUZiTVYwbUppaHhZU2gwYUdsekxtRmJNVjBwUDNSb2FYTXVXRDEwYUdsekxtRmJNVjA2ZEdocGN5NVhQWFJvYVhNdVlWc3hYU2twS1R0aVBXRmJNVjA3WVQxaFd6SmRPMmxtS0NGMGFHbHpMa01wZEdoeWIzZGNJbUZpYjNKMFhDSTdhV1lvZEdocGN5NXBKaVlvSVhGaEtHSXBmSHhjSWx3aVBUMWlLU2wwYUhKdmQxd2lZV0p2Y25SY0lqdGNibWxtS0hSb2FYTXVaeVltS0NGeFlTaGlLWHg4WENKY0lqMDlZbng4SVdWaEtHRXBLU2wwYUhKdmQxd2lZV0p2Y25SY0lqdHBaaWgxWkNoMGFHbHpMbU1wZkh4MVpDaDBhR2x6TGtzcEtYUm9jbTkzWENKaFltOXlkRndpTzJsbUtIUm9hWE11WnlZbVhDSjBNRndpSVQxMGFHbHpMbU1wZEdoeWIzZGNJbUZpYjNKMFhDSTdmWDA3Wm5WdVkzUnBiMjRnZFdRb1lTbDdjbVYwZFhKdUlEQThQV0V1YVc1a1pYaFBaaWhjSWk1Y0lpbDhmREE4UFdFdWFXNWtaWGhQWmloY0lqcGNJaWw5TzNaaGNpQlpaQ3hhWkN3a1pDeEJPMWxrUFc1bGR5QmxaVHNrWkQxdVpYY2daV1U3UVQxdVpYY2daV1U3V21ROWUyVmpPalExTEdWamIyMXRaWEpqWlRvME5peHNhVzVyYVdRNk5EZDlPMXh1ZG1GeUlIVTlablZ1WTNScGIyNG9ZU3hpTEdNcGUySTlQVTU4ZkdJdVoyVjBLRllwTzNaaGNpQmtQVmxrTG1kbGRDaGhLVHRwWmlnaFpXRW9aQ2twY21WMGRYSnVJVEU3WWk1d2JIVm5hVzV6WHoxaUxuQnNkV2RwYm5OZmZIeHVaWGNnWldVN2FXWW9ZaTV3YkhWbmFXNXpYeTVuWlhRb1lTa3BjbVYwZFhKdUlUQTdZaTV3YkhWbmFXNXpYeTV6WlhRb1lTeHVaWGNnWkNoaUxHTjhmSHQ5S1NrN2NtVjBkWEp1SVRCOUxIazlablZ1WTNScGIyNG9ZU3hpTEdNc1pDeGxLWHRwWmlnaFpXRW9XV1F1WjJWMEtHSXBLU1ltSVNSa0xtZGxkQ2hpS1NsN1dtUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lpa21Ka29vV21SYllsMHBPMmxtS0hBdWRHVnpkQ2hpS1NsN1NpZzFNaWs3WVQxT0xtb29ZU2s3YVdZb0lXRXBjbVYwZFhKdUlUQTdZejFrZkh4N2ZUdGtQWHRwWkRwaUxFSTZZeTVrWVhSaFRHRjVaWEo4ZkZ3aVpHRjBZVXhoZVdWeVhDSXNhV0U2SVNGaExtZGxkQ2hjSW1GdWIyNTViV2w2WlVsd1hDSXBMRzVoT21Vc1J6b2hNWDA3WVM1blpYUW9YQ0ltWjNSdFhDSXBQVDFpSmlZb1pDNUhQU0V3S1R0MllYSWdaejFUZEhKcGJtY29ZUzVuWlhRb1hDSnVZVzFsWENJcEtUdGNJblF3WENJaFBXY21KaWhrTG5SaGNtZGxkRDFuS1R0SEtGTjBjbWx1WnloaExtZGxkQ2hjSW5SeVlXTnJhVzVuU1dSY0lpa3BLWHg4S0dRdWFtRTlVM1J5YVc1bktHRXVaMlYwS0ZFcEtTeGNibVF1YTJFOVRuVnRZbVZ5S0dFdVoyVjBLRzRwS1N4alBXTXVjR0ZzYVc1a2NtOXRaVDl5T25Fc1l6MG9ZejFOTG1OdmIydHBaUzV5WlhCc1lXTmxLQzllZkNnN0lDc3BMMmNzWENJN1hDSXBMbTFoZEdOb0tHTXBLVDlqTG5OdmNuUW9LUzVxYjJsdUtGd2lYQ0lwTG5OMVluTjBjbWx1WnlneEtUcDJiMmxrSURBc1pDNXNZVDFqTEdRdWNXRTlSU2hoTG1JdVoyVjBLR3RpS1h4OFhDSmNJaXhjSW1kamJHbGtYQ0lwS1R0aFBXUXVRanRqUFNodVpYY2dSR0YwWlNrdVoyVjBWR2x0WlNncE8wOWJZVjA5VDF0aFhYeDhXMTA3WXoxN1hDSm5kRzB1YzNSaGNuUmNJanBqZlR0bGZId29ZeTVsZG1WdWREMWNJbWQwYlM1cWMxd2lLVHRQVzJGZExuQjFjMmdvWXlrN1l6MTBLR1FwZlNGakppWmFaQzVvWVhOUGQyNVFjbTl3WlhKMGVTaGlLVDhvU2lnek9Ta3NZejFpSzF3aUxtcHpYQ0lwT2tvb05ETXBPMk1tSmloakppWXdQRDFqTG1sdVpHVjRUMllvWENJdlhDSXBmSHdvWXowb1FtRjhmRlZrS0NrL1hDSm9kSFJ3Y3pwY0lqcGNJbWgwZEhBNlhDSXBLMXdpTHk5M2QzY3VaMjl2WjJ4bExXRnVZV3g1ZEdsamN5NWpiMjB2Y0d4MVoybHVjeTkxWVM5Y0lpdGpLU3hrUFdGbEtHTXBMR0U5WkM1d2NtOTBiMk52YkN4alBVMHViRzlqWVhScGIyNHVjSEp2ZEc5amIyd3NLRndpYUhSMGNITTZYQ0k5UFdGOGZHRTlQV044ZkNoY0ltaDBkSEE2WENJaFBXRS9NRHBjSW1oMGRIQTZYQ0k5UFZ4dVl5a3BKaVpDS0dRcEppWW9kMkVvWkM1MWNtd3NkbTlwWkNBd0xHVXBMQ1JrTG5ObGRDaGlMQ0V3S1NrcGZYMHNkajFtZFc1amRHbHZiaWhoTEdJcGUzWmhjaUJqUFVFdVoyVjBLR0VwZkh4YlhUdGpMbkIxYzJnb1lpazdRUzV6WlhRb1lTeGpLWDBzUXoxbWRXNWpkR2x2YmloaExHSXBlMWxrTG5ObGRDaGhMR0lwTzJJOVFTNW5aWFFvWVNsOGZGdGRPMlp2Y2loMllYSWdZejB3TzJNOFlpNXNaVzVuZEdnN1l5c3JLV0piWTEwb0tUdEJMbk5sZENoaExGdGRLWDBzUWoxbWRXNWpkR2x2YmloaEtYdDJZWElnWWoxaFpTaE5MbXh2WTJGMGFXOXVMbWh5WldZcE8ybG1LRVFvWVM1MWNtd3NYQ0pvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1V0WVc1aGJIbDBhV056TG1OdmJTOW5kRzB2YW5NL2FXUTlYQ0lwS1hKbGRIVnliaUV3TzJsbUtHRXVjWFZsY25sOGZEQThQV0V1ZFhKc0xtbHVaR1Y0VDJZb1hDSS9YQ0lwZkh3d1BEMWhMbkJoZEdndWFXNWtaWGhQWmloY0lqb3ZMMXdpS1NseVpYUjFjbTRoTVR0cFppaGhMbWh2YzNROVBXSXVhRzl6ZENZbVlTNXdiM0owUFQxaUxuQnZjblFwY21WMGRYSnVJVEE3WWoxY0ltaDBkSEE2WENJOVBXRXVjSEp2ZEc5amIydy9PREE2TkRRek8zSmxkSFZ5Ymx3aWQzZDNMbWR2YjJkc1pTMWhibUZzZVhScFkzTXVZMjl0WENJOVBXRXVhRzl6ZENZbUtHRXVjRzl5ZEh4OFlpazlQV0ltSmx4dVJDaGhMbkJoZEdnc1hDSXZjR3gxWjJsdWN5OWNJaWsvSVRBNklURjlMR0ZsUFdaMWJtTjBhVzl1S0dFcGUyWjFibU4wYVc5dUlHSW9ZU2w3ZG1GeUlHSTlLR0V1YUc5emRHNWhiV1Y4ZkZ3aVhDSXBMbk53YkdsMEtGd2lPbHdpS1Zzd1hTNTBiMHh2ZDJWeVEyRnpaU2dwTEdNOUtHRXVjSEp2ZEc5amIyeDhmRndpWENJcExuUnZURzkzWlhKRFlYTmxLQ2tzWXoweEttRXVjRzl5ZEh4OEtGd2lhSFIwY0RwY0lqMDlZejg0TURwY0ltaDBkSEJ6T2x3aVBUMWpQelEwTXpwY0lsd2lLVHRoUFdFdWNHRjBhRzVoYldWOGZGd2lYQ0k3UkNoaExGd2lMMXdpS1h4OEtHRTlYQ0l2WENJcllTazdjbVYwZFhKdVcySXNYQ0pjSWl0akxHRmRmWFpoY2lCalBVMHVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltRmNJaWs3WXk1b2NtVm1QVTB1Ykc5allYUnBiMjR1YUhKbFpqdDJZWElnWkQwb1l5NXdjbTkwYjJOdmJIeDhYQ0pjSWlrdWRHOU1iM2RsY2tOaGMyVW9LU3hsUFdJb1l5a3NaejFqTG5ObFlYSmphSHg4WENKY0lpeGpZVDFrSzF3aUx5OWNJaXRsV3pCZEt5aGxXekZkUDF3aU9sd2lLMlZiTVYwNlhDSmNJaWs3UkNoaExGd2lMeTljSWlrL1lUMWtLMkU2UkNoaExGd2lMMXdpS1Q5aFBXTmhLMkU2SVdGOGZFUW9ZU3hjSWo5Y0lpay9ZVDFqWVN0bFd6SmRLeWhoZkh4bktUb3dQbUV1YzNCc2FYUW9YQ0l2WENJcFd6QmRMbWx1WkdWNFQyWW9YQ0k2WENJcEppWW9ZVDFqWVN0bFd6SmRMbk4xWW5OMGNtbHVaeWd3TEZ4dVpWc3lYUzVzWVhOMFNXNWtaWGhQWmloY0lpOWNJaWtwSzF3aUwxd2lLMkVwTzJNdWFISmxaajFoTzJROVlpaGpLVHR5WlhSMWNtNTdjSEp2ZEc5amIydzZLR011Y0hKdmRHOWpiMng4ZkZ3aVhDSXBMblJ2VEc5M1pYSkRZWE5sS0Nrc2FHOXpkRHBrV3pCZExIQnZjblE2WkZzeFhTeHdZWFJvT21SYk1sMHNjWFZsY25rNll5NXpaV0Z5WTJoOGZGd2lYQ0lzZFhKc09tRjhmRndpWENKOWZUdDJZWElnV2oxN1oyRTZablZ1WTNScGIyNG9LWHRhTG1ZOVcxMTlmVHRhTG1kaEtDazdXaTVFUFdaMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFZvdVNpNWhjSEJzZVNoYUxHRnlaM1Z0Wlc1MGN5a3NZajFhTG1ZdVkyOXVZMkYwS0dJcE8yWnZjaWhhTG1ZOVcxMDdNRHhpTG14bGJtZDBhQ1ltSVZvdWRpaGlXekJkS1NZbUlTaGlMbk5vYVdaMEtDa3NNRHhhTG1ZdWJHVnVaM1JvS1RzcE8xb3VaajFhTG1ZdVkyOXVZMkYwS0dJcGZUdGFMa285Wm5WdVkzUnBiMjRvWVNsN1ptOXlLSFpoY2lCaVBWdGRMR005TUR0alBHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN1l5c3JLWFJ5ZVh0MllYSWdaRDF1WlhjZ2MyTW9ZWEpuZFcxbGJuUnpXMk5kS1R0a0xtYy9ReWhrTG1GYk1GMHNaQzVoV3pGZEtUb29aQzVwSmlZb1pDNW9ZVDE1S0dRdVl5eGtMbUZiTUYwc1pDNVlMR1F1VnlrcExHSXVjSFZ6YUNoa0tTbDlZMkYwWTJnb1pTbDdmWEpsZEhWeWJpQmlmVHRjYmxvdWRqMW1kVzVqZEdsdmJpaGhLWHQwY25sN2FXWW9ZUzUxS1dFdWRTNWpZV3hzS0U4c1RpNXFLRndpZERCY0lpa3BPMlZzYzJWN2RtRnlJR0k5WVM1alBUMW5ZajlPT2s0dWFpaGhMbU1wTzJsbUtHRXVRU2xjSW5Rd1hDSWhQV0V1WTN4OFRpNWpjbVZoZEdVdVlYQndiSGtvVGl4aExtRXBPMlZzYzJVZ2FXWW9ZUzVpWVNsT0xuSmxiVzkyWlNoaExtTXBPMlZzYzJVZ2FXWW9ZaWxwWmloaExta3BlMmxtS0dFdWFHRW1KaWhoTG1oaFBYa29ZUzVqTEdFdVlWc3dYU3hoTGxnc1lTNVhLU2tzSVhVb1lTNWhXekJkTEdJc1lTNVhLU2x5WlhSMWNtNGhNSDFsYkhObElHbG1LR0V1U3lsN2RtRnlJR005WVM1RExHUTlZUzVoTEdVOVlpNXdiSFZuYVc1elh5NW5aWFFvWVM1TEtUdGxXMk5kTG1Gd2NHeDVLR1VzWkNsOVpXeHpaU0JpVzJFdVExMHVZWEJ3Ykhrb1lpeGhMbUVwZlgxallYUmphQ2huS1h0OWZUdDJZWElnVGoxbWRXNWpkR2x2YmloaEtYdEtLREVwTzFvdVJDNWhjSEJzZVNoYUxGdGhjbWQxYldWdWRITmRLWDA3VGk1b1BYdDlPMDR1VUQxYlhUdE9Ma3c5TUR0T0xtRnVjM2RsY2owME1qdDJZWElnZFdNOVcwNWhMRmNzVmwwN1RpNWpjbVZoZEdVOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOWVtRW9kV01zVzEwdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXBLVHRpVzFaZGZId29ZbHRXWFQxY0luUXdYQ0lwTzNaaGNpQmpQVndpWENJcllsdFdYVHRwWmloT0xtaGJZMTBwY21WMGRYSnVJRTR1YUZ0alhUdGlQVzVsZHlCd1l5aGlLVHRPTG1oYlkxMDlZanRPTGxBdWNIVnphQ2hpS1R0eVpYUjFjbTRnWW4wN1RpNXlaVzF2ZG1VOVpuVnVZM1JwYjI0b1lTbDdabTl5S0haaGNpQmlQVEE3WWp4T0xsQXViR1Z1WjNSb08ySXJLeWxwWmloT0xsQmJZbDB1WjJWMEtGWXBQVDFoS1h0T0xsQXVjM0JzYVdObEtHSXNNU2s3VGk1b1cyRmRQVzUxYkd3N1luSmxZV3Q5ZlR0T0xtbzlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJRTR1YUZ0aFhYMDdUaTVuWlhSQmJHdzlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdUaTVRTG5Oc2FXTmxLREFwZlR0Y2JrNHVUajFtZFc1amRHbHZiaWdwZTF3aVoyRmNJaUU5WjJJbUprb29ORGtwTzNaaGNpQmhQVTliWjJKZE8ybG1LQ0ZoZkh3ME1pRTlZUzVoYm5OM1pYSXBlMDR1VEQxaEppWmhMbXc3VGk1c2IyRmtaV1E5SVRBN2RtRnlJR0k5VDF0bllsMDlUanRZS0Z3aVkzSmxZWFJsWENJc1lpeGlMbU55WldGMFpTazdXQ2hjSW5KbGJXOTJaVndpTEdJc1lpNXlaVzF2ZG1VcE8xZ29YQ0puWlhSQ2VVNWhiV1ZjSWl4aUxHSXVhaXcxS1R0WUtGd2laMlYwUVd4c1hDSXNZaXhpTG1kbGRFRnNiQ3cyS1R0aVBYQmpMbkJ5YjNSdmRIbHdaVHRZS0Z3aVoyVjBYQ0lzWWl4aUxtZGxkQ3czS1R0WUtGd2ljMlYwWENJc1lpeGlMbk5sZEN3MEtUdFlLRndpYzJWdVpGd2lMR0lzWWk1elpXNWtLVHRZS0Z3aWNtVnhkV2x5WlZONWJtTmNJaXhpTEdJdWJXRXBPMkk5V1dFdWNISnZkRzkwZVhCbE8xZ29YQ0puWlhSY0lpeGlMR0l1WjJWMEtUdFlLRndpYzJWMFhDSXNZaXhpTG5ObGRDazdhV1lvSVZWa0tDa21KaUZDWVNsN1lUcDdabTl5S0haaGNpQmlQVTB1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb1hDSnpZM0pwY0hSY0lpa3NZejB3TzJNOFlpNXNaVzVuZEdnbUpqRXdNRDVqTzJNckt5bDdkbUZ5SUdROVlsdGpYUzV6Y21NN2FXWW9aQ1ltTUQwOVpDNXBibVJsZUU5bUtGd2lhSFIwY0hNNkx5OTNkM2N1WjI5dloyeGxMV0Z1WVd4NWRHbGpjeTVqYjIwdllXNWhiSGwwYVdOelhDSXBLWHRLS0RNektUdGNibUk5SVRBN1luSmxZV3NnWVgxOVlqMGhNWDFpSmlZb1FtRTlJVEFwZlZWa0tDbDhmRUpoZkh3aFJXUW9ibVYzSUU5a0tERkZOQ2twZkh3b1NpZ3pOaWtzUW1FOUlUQXBPeWhQTG1kaGNHeDFaMmx1Y3oxUExtZGhjR3gxWjJsdWMzeDhlMzBwTGt4cGJtdGxjajFFWXp0aVBVUmpMbkJ5YjNSdmRIbHdaVHRES0Z3aWJHbHVhMlZ5WENJc1JHTXBPMWdvWENKa1pXTnZjbUYwWlZ3aUxHSXNZaTVqWVN3eU1DazdXQ2hjSW1GMWRHOU1hVzVyWENJc1lpeGlMbE1zTWpVcE8wTW9YQ0prYVhOd2JHRjVabVZoZEhWeVpYTmNJaXhtWkNrN1F5aGNJbUZrWm1WaGRIVnlaWE5jSWl4bVpDazdZVDFoSmlaaExuRTdhMkVvWVNrL1dpNUVMbUZ3Y0d4NUtFNHNZU2s2U2lnMU1DbDlmVHRPTG1SaFBXWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmhQVTR1WjJWMFFXeHNLQ2tzWWowd08ySThZUzVzWlc1bmRHZzdZaXNyS1dGYllsMHVaMlYwS0ZZcGZUdDJZWElnU1QxT0xrNHNaMkU5VDF0bllsMDdaMkVtSm1kaExuSS9TU2dwT25vb1NTazdlaWhtZFc1amRHbHZiaWdwZTFvdVJDaGJYQ0p3Y205MmFXUmxYQ0lzWENKeVpXNWtaWEpjSWl4MVlWMHBmU2s3Wm5WdVkzUnBiMjRnVEdFb1lTbDdkbUZ5SUdJOU1TeGpMR1E3YVdZb1lTbG1iM0lvWWowd0xHUTlZUzVzWlc1bmRHZ3RNVHN3UEQxa08yUXRMU2xqUFdFdVkyaGhja052WkdWQmRDaGtLU3hpUFNoaVBEdzJKakkyT0RRek5UUTFOU2tyWXlzb1l6dzhNVFFwTEdNOVlpWXlOall6TXpnek1EUXNZajB3SVQxalAySmVZejQrTWpFNllqdHlaWFIxY200Z1luMDdmU2tvZDJsdVpHOTNLVHRjYmlJc0lpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2RtRnlJRUZxWVhoTmIyNXBkRzl5TENCQ1lYSXNJRVJ2WTNWdFpXNTBUVzl1YVhSdmNpd2dSV3hsYldWdWRFMXZibWwwYjNJc0lFVnNaVzFsYm5SVWNtRmphMlZ5TENCRmRtVnVkRXhoWjAxdmJtbDBiM0lzSUVWMlpXNTBaV1FzSUVWMlpXNTBjeXdnVG05VVlYSm5aWFJGY25KdmNpd2dVR0ZqWlN3Z1VtVnhkV1Z6ZEVsdWRHVnlZMlZ3ZEN3Z1UwOVZVa05GWDB0RldWTXNJRk5qWVd4bGNpd2dVMjlqYTJWMFVtVnhkV1Z6ZEZSeVlXTnJaWElzSUZoSVVsSmxjWFZsYzNSVWNtRmphMlZ5TENCaGJtbHRZWFJwYjI0c0lHRjJaMEZ0Y0d4cGRIVmtaU3dnWW1GeUxDQmpZVzVqWld4QmJtbHRZWFJwYjI0c0lHTmhibU5sYkVGdWFXMWhkR2x2YmtaeVlXMWxMQ0JrWldaaGRXeDBUM0IwYVc5dWN5d2daWGgwWlc1a0xDQmxlSFJsYm1ST1lYUnBkbVVzSUdkbGRFWnliMjFFVDAwc0lHZGxkRWx1ZEdWeVkyVndkQ3dnYUdGdVpHeGxVSFZ6YUZOMFlYUmxMQ0JwWjI1dmNtVlRkR0ZqYXl3Z2FXNXBkQ3dnYm05M0xDQnZjSFJwYjI1ekxDQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VzSUhKbGMzVnNkQ3dnY25WdVFXNXBiV0YwYVc5dUxDQnpZMkZzWlhKekxDQnphRzkxYkdSSloyNXZjbVZWVWt3c0lITm9iM1ZzWkZSeVlXTnJMQ0J6YjNWeVkyVXNJSE52ZFhKalpYTXNJSFZ1YVZOallXeGxjaXdnWDFkbFlsTnZZMnRsZEN3Z1gxaEViMjFoYVc1U1pYRjFaWE4wTENCZldFMU1TSFIwY0ZKbGNYVmxjM1FzSUY5cExDQmZhVzUwWlhKalpYQjBMQ0JmYkdWdUxDQmZjSFZ6YUZOMFlYUmxMQ0JmY21WbUxDQmZjbVZtTVN3Z1gzSmxjR3hoWTJWVGRHRjBaU3hjYmlBZ0lDQmZYM05zYVdObElEMGdXMTB1YzJ4cFkyVXNYRzRnSUNBZ1gxOW9ZWE5RY205d0lEMGdlMzB1YUdGelQzZHVVSEp2Y0dWeWRIa3NYRzRnSUNBZ1gxOWxlSFJsYm1SeklEMGdablZ1WTNScGIyNG9ZMmhwYkdRc0lIQmhjbVZ1ZENrZ2V5Qm1iM0lnS0haaGNpQnJaWGtnYVc0Z2NHRnlaVzUwS1NCN0lHbG1JQ2hmWDJoaGMxQnliM0F1WTJGc2JDaHdZWEpsYm5Rc0lHdGxlU2twSUdOb2FXeGtXMnRsZVYwZ1BTQndZWEpsYm5SYmEyVjVYVHNnZlNCbWRXNWpkR2x2YmlCamRHOXlLQ2tnZXlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwZ1kyaHBiR1E3SUgwZ1kzUnZjaTV3Y205MGIzUjVjR1VnUFNCd1lYSmxiblF1Y0hKdmRHOTBlWEJsT3lCamFHbHNaQzV3Y205MGIzUjVjR1VnUFNCdVpYY2dZM1J2Y2lncE95QmphR2xzWkM1ZlgzTjFjR1Z5WDE4Z1BTQndZWEpsYm5RdWNISnZkRzkwZVhCbE95QnlaWFIxY200Z1kyaHBiR1E3SUgwc1hHNGdJQ0FnWDE5cGJtUmxlRTltSUQwZ1cxMHVhVzVrWlhoUFppQjhmQ0JtZFc1amRHbHZiaWhwZEdWdEtTQjdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnZEdocGN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHNnYVdZZ0tHa2dhVzRnZEdocGN5QW1KaUIwYUdselcybGRJRDA5UFNCcGRHVnRLU0J5WlhSMWNtNGdhVHNnZlNCeVpYUjFjbTRnTFRFN0lIMDdYRzVjYmlBZ1pHVm1ZWFZzZEU5d2RHbHZibk1nUFNCN1hHNGdJQ0FnWTJGMFkyaDFjRlJwYldVNklERXdNQ3hjYmlBZ0lDQnBibWwwYVdGc1VtRjBaVG9nTGpBekxGeHVJQ0FnSUcxcGJsUnBiV1U2SURJMU1DeGNiaUFnSUNCbmFHOXpkRlJwYldVNklERXdNQ3hjYmlBZ0lDQnRZWGhRY205bmNtVnpjMUJsY2taeVlXMWxPaUF5TUN4Y2JpQWdJQ0JsWVhObFJtRmpkRzl5T2lBeExqSTFMRnh1SUNBZ0lITjBZWEowVDI1UVlXZGxURzloWkRvZ2RISjFaU3hjYmlBZ0lDQnlaWE4wWVhKMFQyNVFkWE5vVTNSaGRHVTZJSFJ5ZFdVc1hHNGdJQ0FnY21WemRHRnlkRTl1VW1WeGRXVnpkRUZtZEdWeU9pQTFNREFzWEc0Z0lDQWdkR0Z5WjJWME9pQW5ZbTlrZVNjc1hHNGdJQ0FnWld4bGJXVnVkSE02SUh0Y2JpQWdJQ0FnSUdOb1pXTnJTVzUwWlhKMllXdzZJREV3TUN4Y2JpQWdJQ0FnSUhObGJHVmpkRzl5Y3pvZ1d5ZGliMlI1SjExY2JpQWdJQ0I5TEZ4dUlDQWdJR1YyWlc1MFRHRm5PaUI3WEc0Z0lDQWdJQ0J0YVc1VFlXMXdiR1Z6T2lBeE1DeGNiaUFnSUNBZ0lITmhiWEJzWlVOdmRXNTBPaUF6TEZ4dUlDQWdJQ0FnYkdGblZHaHlaWE5vYjJ4a09pQXpYRzRnSUNBZ2ZTeGNiaUFnSUNCaGFtRjRPaUI3WEc0Z0lDQWdJQ0IwY21GamEwMWxkR2h2WkhNNklGc25SMFZVSjEwc1hHNGdJQ0FnSUNCMGNtRmphMWRsWWxOdlkydGxkSE02SUhSeWRXVXNYRzRnSUNBZ0lDQnBaMjV2Y21WVlVreHpPaUJiWFZ4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCdWIzY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1gzSmxaanRjYmlBZ0lDQnlaWFIxY200Z0tGOXlaV1lnUFNCMGVYQmxiMllnY0dWeVptOXliV0Z1WTJVZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdjR1Z5Wm05eWJXRnVZMlVnSVQwOUlHNTFiR3dnUHlCMGVYQmxiMllnY0dWeVptOXliV0Z1WTJVdWJtOTNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJ3WlhKbWIzSnRZVzVqWlM1dWIzY29LU0E2SUhadmFXUWdNQ0E2SUhadmFXUWdNQ2tnSVQwZ2JuVnNiQ0EvSUY5eVpXWWdPaUFyS0c1bGR5QkVZWFJsS1R0Y2JpQWdmVHRjYmx4dUlDQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnUFNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElIeDhJSGRwYm1SdmR5NXRiM3BTWlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVZ2ZId2dkMmx1Wkc5M0xuZGxZbXRwZEZKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQjhmQ0IzYVc1a2IzY3ViWE5TWlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVN1hHNWNiaUFnWTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVZ1BTQjNhVzVrYjNjdVkyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVWdmSHdnZDJsdVpHOTNMbTF2ZWtOaGJtTmxiRUZ1YVcxaGRHbHZia1p5WVcxbE8xeHVYRzRnSUdsbUlDaHlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNBOUlHWjFibU4wYVc5dUtHWnVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htYml3Z05UQXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1kyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVWdQU0JtZFc1amRHbHZiaWhwWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOc1pXRnlWR2x0Wlc5MWRDaHBaQ2s3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhKMWJrRnVhVzFoZEdsdmJpQTlJR1oxYm1OMGFXOXVLR1p1S1NCN1hHNGdJQ0FnZG1GeUlHeGhjM1FzSUhScFkyczdYRzRnSUNBZ2JHRnpkQ0E5SUc1dmR5Z3BPMXh1SUNBZ0lIUnBZMnNnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUJrYVdabU8xeHVJQ0FnSUNBZ1pHbG1aaUE5SUc1dmR5Z3BJQzBnYkdGemREdGNiaUFnSUNBZ0lHbG1JQ2hrYVdabUlENDlJRE16S1NCN1hHNGdJQ0FnSUNBZ0lHeGhjM1FnUFNCdWIzY29LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1p1S0dScFptWXNJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9kR2xqYXlrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9kR2xqYXl3Z016TWdMU0JrYVdabUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUIwYVdOcktDazdYRzRnSUgwN1hHNWNiaUFnY21WemRXeDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01zSUd0bGVTd2diMkpxTzF4dUlDQWdJRzlpYWlBOUlHRnlaM1Z0Wlc1MGMxc3dYU3dnYTJWNUlEMGdZWEpuZFcxbGJuUnpXekZkTENCaGNtZHpJRDBnTXlBOFBTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEOGdYMTl6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3l3Z01pa2dPaUJiWFR0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFsdHJaWGxkSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiMkpxVzJ0bGVWMHVZWEJ3Ykhrb2IySnFMQ0JoY21kektUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzlpYWx0clpYbGRPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JsZUhSbGJtUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVMQ0J2ZFhRc0lITnZkWEpqWlN3Z2MyOTFjbU5sY3l3Z2RtRnNMQ0JmYVN3Z1gyeGxianRjYmlBZ0lDQnZkWFFnUFNCaGNtZDFiV1Z1ZEhOYk1GMHNJSE52ZFhKalpYTWdQU0F5SUR3OUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1B5QmZYM05zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeEtTQTZJRnRkTzF4dUlDQWdJR1p2Y2lBb1gya2dQU0F3TENCZmJHVnVJRDBnYzI5MWNtTmxjeTVzWlc1bmRHZzdJRjlwSUR3Z1gyeGxianNnWDJrckt5a2dlMXh1SUNBZ0lDQWdjMjkxY21ObElEMGdjMjkxY21ObGMxdGZhVjA3WEc0Z0lDQWdJQ0JwWmlBb2MyOTFjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJSE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMTlvWVhOUWNtOXdMbU5oYkd3b2MyOTFjbU5sTENCclpYa3BLU0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNCMllXd2dQU0J6YjNWeVkyVmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvS0c5MWRGdHJaWGxkSUNFOUlHNTFiR3dwSUNZbUlIUjVjR1Z2WmlCdmRYUmJhMlY1WFNBOVBUMGdKMjlpYW1WamRDY2dKaVlnS0haaGJDQWhQU0J1ZFd4c0tTQW1KaUIwZVhCbGIyWWdkbUZzSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaDBaVzVrS0c5MWRGdHJaWGxkTENCMllXd3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkWFJiYTJWNVhTQTlJSFpoYkR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNiaUFnZlR0Y2JseHVJQ0JoZG1kQmJYQnNhWFIxWkdVZ1BTQm1kVzVqZEdsdmJpaGhjbklwSUh0Y2JpQWdJQ0IyWVhJZ1kyOTFiblFzSUhOMWJTd2dkaXdnWDJrc0lGOXNaVzQ3WEc0Z0lDQWdjM1Z0SUQwZ1kyOTFiblFnUFNBd08xeHVJQ0FnSUdadmNpQW9YMmtnUFNBd0xDQmZiR1Z1SUQwZ1lYSnlMbXhsYm1kMGFEc2dYMmtnUENCZmJHVnVPeUJmYVNzcktTQjdYRzRnSUNBZ0lDQjJJRDBnWVhKeVcxOXBYVHRjYmlBZ0lDQWdJSE4xYlNBclBTQk5ZWFJvTG1GaWN5aDJLVHRjYmlBZ0lDQWdJR052ZFc1MEt5czdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ6ZFcwZ0x5QmpiM1Z1ZER0Y2JpQWdmVHRjYmx4dUlDQm5aWFJHY205dFJFOU5JRDBnWm5WdVkzUnBiMjRvYTJWNUxDQnFjMjl1S1NCN1hHNGdJQ0FnZG1GeUlHUmhkR0VzSUdVc0lHVnNPMXh1SUNBZ0lHbG1JQ2hyWlhrZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2EyVjVJRDBnSjI5d2RHbHZibk1uTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYW5OdmJpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnFjMjl1SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUNBZ1pXd2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lXMlJoZEdFdGNHRmpaUzFjSWlBcklHdGxlU0FySUZ3aVhWd2lLVHRjYmlBZ0lDQnBaaUFvSVdWc0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1JoZEdFZ1BTQmxiQzVuWlhSQmRIUnlhV0oxZEdVb1hDSmtZWFJoTFhCaFkyVXRYQ0lnS3lCclpYa3BPMXh1SUNBZ0lHbG1JQ2doYW5OdmJpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdTbE5QVGk1d1lYSnpaU2hrWVhSaEtUdGNiaUFnSUNCOUlHTmhkR05vSUNoZlpYSnliM0lwSUh0Y2JpQWdJQ0FnSUdVZ1BTQmZaWEp5YjNJN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR052Ym5OdmJHVWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnWTI5dWMyOXNaU0FoUFQwZ2JuVnNiQ0EvSUdOdmJuTnZiR1V1WlhKeWIzSW9YQ0pGY25KdmNpQndZWEp6YVc1bklHbHViR2x1WlNCd1lXTmxJRzl3ZEdsdmJuTmNJaXdnWlNrZ09pQjJiMmxrSURBN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lFVjJaVzUwWldRZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdSWFpsYm5SbFpDZ3BJSHQ5WEc1Y2JpQWdJQ0JGZG1WdWRHVmtMbkJ5YjNSdmRIbHdaUzV2YmlBOUlHWjFibU4wYVc5dUtHVjJaVzUwTENCb1lXNWtiR1Z5TENCamRIZ3NJRzl1WTJVcElIdGNiaUFnSUNBZ0lIWmhjaUJmWW1GelpUdGNiaUFnSUNBZ0lHbG1JQ2h2Ym1ObElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdiMjVqWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WW1sdVpHbHVaM01nUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUpwYm1ScGJtZHpJRDBnZTMwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9LRjlpWVhObElEMGdkR2hwY3k1aWFXNWthVzVuY3lsYlpYWmxiblJkSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ1gySmhjMlZiWlhabGJuUmRJRDBnVzEwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWlhVzVrYVc1bmMxdGxkbVZ1ZEYwdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaWEk2SUdoaGJtUnNaWElzWEc0Z0lDQWdJQ0FnSUdOMGVEb2dZM1I0TEZ4dUlDQWdJQ0FnSUNCdmJtTmxPaUJ2Ym1ObFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1JYWmxiblJsWkM1d2NtOTBiM1I1Y0dVdWIyNWpaU0E5SUdaMWJtTjBhVzl1S0dWMlpXNTBMQ0JvWVc1a2JHVnlMQ0JqZEhncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl1S0dWMlpXNTBMQ0JvWVc1a2JHVnlMQ0JqZEhnc0lIUnlkV1VwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JGZG1WdWRHVmtMbkJ5YjNSdmRIbHdaUzV2Wm1ZZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z2FHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2tzSUY5eVpXWXNJRjl5WlhOMWJIUnpPMXh1SUNBZ0lDQWdhV1lnS0Nnb1gzSmxaaUE5SUhSb2FYTXVZbWx1WkdsdVozTXBJQ0U5SUc1MWJHd2dQeUJmY21WbVcyVjJaVzUwWFNBNklIWnZhV1FnTUNrZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9hR0Z1Wkd4bGNpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV3hsZEdVZ2RHaHBjeTVpYVc1a2FXNW5jMXRsZG1WdWRGMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLR2tnUENCMGFHbHpMbUpwYm1ScGJtZHpXMlYyWlc1MFhTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVpYVc1a2FXNW5jMXRsZG1WdWRGMWJhVjB1YUdGdVpHeGxjaUE5UFQwZ2FHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNKbGMzVnNkSE11Y0hWemFDaDBhR2x6TG1KcGJtUnBibWR6VzJWMlpXNTBYUzV6Y0d4cFkyVW9hU3dnTVNrcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmNtVnpkV3gwY3k1d2RYTm9LR2tyS3lrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmY21WemRXeDBjenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdSWFpsYm5SbFpDNXdjbTkwYjNSNWNHVXVkSEpwWjJkbGNpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHRnlaM01zSUdOMGVDd2daWFpsYm5Rc0lHaGhibVJzWlhJc0lHa3NJRzl1WTJVc0lGOXlaV1lzSUY5eVpXWXhMQ0JmY21WemRXeDBjenRjYmlBZ0lDQWdJR1YyWlc1MElEMGdZWEpuZFcxbGJuUnpXekJkTENCaGNtZHpJRDBnTWlBOFBTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEOGdYMTl6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3l3Z01Ta2dPaUJiWFR0Y2JpQWdJQ0FnSUdsbUlDZ29YM0psWmlBOUlIUm9hWE11WW1sdVpHbHVaM01wSUNFOUlHNTFiR3dnUHlCZmNtVm1XMlYyWlc1MFhTQTZJSFp2YVdRZ01Da2dlMXh1SUNBZ0lDQWdJQ0JwSUQwZ01EdGNiaUFnSUNBZ0lDQWdYM0psYzNWc2RITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0drZ1BDQjBhR2x6TG1KcGJtUnBibWR6VzJWMlpXNTBYUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCZmNtVm1NU0E5SUhSb2FYTXVZbWx1WkdsdVozTmJaWFpsYm5SZFcybGRMQ0JvWVc1a2JHVnlJRDBnWDNKbFpqRXVhR0Z1Wkd4bGNpd2dZM1I0SUQwZ1gzSmxaakV1WTNSNExDQnZibU5sSUQwZ1gzSmxaakV1YjI1alpUdGNiaUFnSUNBZ0lDQWdJQ0JvWVc1a2JHVnlMbUZ3Y0d4NUtHTjBlQ0FoUFNCdWRXeHNJRDhnWTNSNElEb2dkR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRzl1WTJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5eVpYTjFiSFJ6TG5CMWMyZ29kR2hwY3k1aWFXNWthVzVuYzF0bGRtVnVkRjB1YzNCc2FXTmxLR2tzSURFcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNdWNIVnphQ2hwS3lzcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNKbGMzVnNkSE03WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQkZkbVZ1ZEdWa08xeHVYRzRnSUgwcEtDazdYRzVjYmlBZ1VHRmpaU0E5SUhkcGJtUnZkeTVRWVdObElIeDhJSHQ5TzF4dVhHNGdJSGRwYm1SdmR5NVFZV05sSUQwZ1VHRmpaVHRjYmx4dUlDQmxlSFJsYm1Rb1VHRmpaU3dnUlhabGJuUmxaQzV3Y205MGIzUjVjR1VwTzF4dVhHNGdJRzl3ZEdsdmJuTWdQU0JRWVdObExtOXdkR2x2Ym5NZ1BTQmxlSFJsYm1Rb2UzMHNJR1JsWm1GMWJIUlBjSFJwYjI1ekxDQjNhVzVrYjNjdWNHRmpaVTl3ZEdsdmJuTXNJR2RsZEVaeWIyMUVUMDBvS1NrN1hHNWNiaUFnWDNKbFppQTlJRnNuWVdwaGVDY3NJQ2RrYjJOMWJXVnVkQ2NzSUNkbGRtVnVkRXhoWnljc0lDZGxiR1Z0Wlc1MGN5ZGRPMXh1SUNCbWIzSWdLRjlwSUQwZ01Dd2dYMnhsYmlBOUlGOXlaV1l1YkdWdVozUm9PeUJmYVNBOElGOXNaVzQ3SUY5cEt5c3BJSHRjYmlBZ0lDQnpiM1Z5WTJVZ1BTQmZjbVZtVzE5cFhUdGNiaUFnSUNCcFppQW9iM0IwYVc5dWMxdHpiM1Z5WTJWZElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1elczTnZkWEpqWlYwZ1BTQmtaV1poZFd4MFQzQjBhVzl1YzF0emIzVnlZMlZkTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUU1dlZHRnlaMlYwUlhKeWIzSWdQU0FvWm5WdVkzUnBiMjRvWDNOMWNHVnlLU0I3WEc0Z0lDQWdYMTlsZUhSbGJtUnpLRTV2VkdGeVoyVjBSWEp5YjNJc0lGOXpkWEJsY2lrN1hHNWNiaUFnSUNCbWRXNWpkR2x2YmlCT2IxUmhjbWRsZEVWeWNtOXlLQ2tnZTF4dUlDQWdJQ0FnWDNKbFpqRWdQU0JPYjFSaGNtZGxkRVZ5Y205eUxsOWZjM1Z3WlhKZlh5NWpiMjV6ZEhKMVkzUnZjaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUY5eVpXWXhPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCT2IxUmhjbWRsZEVWeWNtOXlPMXh1WEc0Z0lIMHBLRVZ5Y205eUtUdGNibHh1SUNCQ1lYSWdQU0FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnUW1GeUtDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1d2NtOW5jbVZ6Y3lBOUlEQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FtRnlMbkJ5YjNSdmRIbHdaUzVuWlhSRmJHVnRaVzUwSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnZEdGeVoyVjBSV3hsYldWdWREdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtVnNJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBSV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb2IzQjBhVzl1Y3k1MFlYSm5aWFFwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFJoY21kbGRFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVG05VVlYSm5aWFJGY25KdmNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld3dVkyeGhjM05PWVcxbElEMGdYQ0p3WVdObElIQmhZMlV0WVdOMGFYWmxYQ0k3WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZMnhoYzNOT1lXMWxJRDBnWkc5amRXMWxiblF1WW05a2VTNWpiR0Z6YzA1aGJXVXVjbVZ3YkdGalpTZ3ZjR0ZqWlMxa2IyNWxMMmNzSUNjbktUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1amJHRnpjMDVoYldVZ0t6MGdKeUJ3WVdObExYSjFibTVwYm1jbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc0xtbHVibVZ5U0ZSTlRDQTlJQ2M4WkdsMklHTnNZWE56UFZ3aWNHRmpaUzF3Y205bmNtVnpjMXdpUGx4Y2JpQWdQR1JwZGlCamJHRnpjejFjSW5CaFkyVXRjSEp2WjNKbGMzTXRhVzV1WlhKY0lqNDhMMlJwZGo1Y1hHNDhMMlJwZGo1Y1hHNDhaR2wySUdOc1lYTnpQVndpY0dGalpTMWhZM1JwZG1sMGVWd2lQand2WkdsMlBpYzdYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFJGYkdWdFpXNTBMbVpwY25OMFEyaHBiR1FnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZEVWc1pXMWxiblF1YVc1elpYSjBRbVZtYjNKbEtIUm9hWE11Wld3c0lIUmhjbWRsZEVWc1pXMWxiblF1Wm1seWMzUkRhR2xzWkNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFJXeGxiV1Z1ZEM1aGNIQmxibVJEYUdsc1pDaDBhR2x6TG1Wc0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wld3N1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUVKaGNpNXdjbTkwYjNSNWNHVXVabWx1YVhOb0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pXdzdYRzRnSUNBZ0lDQmxiQ0E5SUhSb2FYTXVaMlYwUld4bGJXVnVkQ2dwTzF4dUlDQWdJQ0FnWld3dVkyeGhjM05PWVcxbElEMGdaV3d1WTJ4aGMzTk9ZVzFsTG5KbGNHeGhZMlVvSjNCaFkyVXRZV04wYVhabEp5d2dKeWNwTzF4dUlDQWdJQ0FnWld3dVkyeGhjM05PWVcxbElDczlJQ2NnY0dGalpTMXBibUZqZEdsMlpTYzdYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNWliMlI1TG1Oc1lYTnpUbUZ0WlNBOUlHUnZZM1Z0Wlc1MExtSnZaSGt1WTJ4aGMzTk9ZVzFsTG5KbGNHeGhZMlVvSjNCaFkyVXRjblZ1Ym1sdVp5Y3NJQ2NuS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJrYjJOMWJXVnVkQzVpYjJSNUxtTnNZWE56VG1GdFpTQXJQU0FuSUhCaFkyVXRaRzl1WlNjN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUVKaGNpNXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNG9jSEp2WnlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205bmNtVnpjeUE5SUhCeWIyYzdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5Wlc1a1pYSW9LVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdRbUZ5TG5CeWIzUnZkSGx3WlM1a1pYTjBjbTk1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRsZEVWc1pXMWxiblFvS1M1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSFJvYVhNdVoyVjBSV3hsYldWdWRDZ3BLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLRjlsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0JPYjFSaGNtZGxkRVZ5Y205eUlEMGdYMlZ5Y205eU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3dnUFNCMmIybGtJREE3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJRUpoY2k1d2NtOTBiM1I1Y0dVdWNtVnVaR1Z5SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnWld3c0lHdGxlU3dnY0hKdlozSmxjM05UZEhJc0lIUnlZVzV6Wm05eWJTd2dYMm9zSUY5c1pXNHhMQ0JmY21WbU1qdGNiaUFnSUNBZ0lHbG1JQ2hrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHOXdkR2x2Ym5NdWRHRnlaMlYwS1NBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzSUQwZ2RHaHBjeTVuWlhSRmJHVnRaVzUwS0NrN1hHNGdJQ0FnSUNCMGNtRnVjMlp2Y20wZ1BTQmNJblJ5WVc1emJHRjBaVE5rS0Z3aUlDc2dkR2hwY3k1d2NtOW5jbVZ6Y3lBcklGd2lKU3dnTUN3Z01DbGNJanRjYmlBZ0lDQWdJRjl5WldZeUlEMGdXeWQzWldKcmFYUlVjbUZ1YzJadmNtMG5MQ0FuYlhOVWNtRnVjMlp2Y20wbkxDQW5kSEpoYm5ObWIzSnRKMTA3WEc0Z0lDQWdJQ0JtYjNJZ0tGOXFJRDBnTUN3Z1gyeGxiakVnUFNCZmNtVm1NaTVzWlc1bmRHZzdJRjlxSUR3Z1gyeGxiakU3SUY5cUt5c3BJSHRjYmlBZ0lDQWdJQ0FnYTJWNUlEMGdYM0psWmpKYlgycGRPMXh1SUNBZ0lDQWdJQ0JsYkM1amFHbHNaSEpsYmxzd1hTNXpkSGxzWlZ0clpYbGRJRDBnZEhKaGJuTm1iM0p0TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tDRjBhR2x6TG14aGMzUlNaVzVrWlhKbFpGQnliMmR5WlhOeklIeDhJSFJvYVhNdWJHRnpkRkpsYm1SbGNtVmtVSEp2WjNKbGMzTWdmQ0F3SUNFOVBTQjBhR2x6TG5CeWIyZHlaWE56SUh3Z01Da2dlMXh1SUNBZ0lDQWdJQ0JsYkM1amFHbHNaSEpsYmxzd1hTNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRjSEp2WjNKbGMzTXRkR1Y0ZENjc0lGd2lYQ0lnS3lBb2RHaHBjeTV3Y205bmNtVnpjeUI4SURBcElDc2dYQ0lsWENJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdjbTluY21WemN5QStQU0F4TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjMU4wY2lBOUlDYzVPU2M3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NISnZaM0psYzNOVGRISWdQU0IwYUdsekxuQnliMmR5WlhOeklEd2dNVEFnUHlCY0lqQmNJaUE2SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJQ0FnY0hKdlozSmxjM05UZEhJZ0t6MGdkR2hwY3k1d2NtOW5jbVZ6Y3lCOElEQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld3dVkyaHBiR1J5Wlc1Yk1GMHVjMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMWEJ5YjJkeVpYTnpKeXdnWENKY0lpQXJJSEJ5YjJkeVpYTnpVM1J5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxteGhjM1JTWlc1a1pYSmxaRkJ5YjJkeVpYTnpJRDBnZEdocGN5NXdjbTluY21WemN6dGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1FtRnlMbkJ5YjNSdmRIbHdaUzVrYjI1bElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2NtOW5jbVZ6Y3lBK1BTQXhNREE3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQkNZWEk3WEc1Y2JpQWdmU2tvS1R0Y2JseHVJQ0JGZG1WdWRITWdQU0FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnUlhabGJuUnpLQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWlhVzVrYVc1bmN5QTlJSHQ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJRVYyWlc1MGN5NXdjbTkwYjNSNWNHVXVkSEpwWjJkbGNpQTlJR1oxYm1OMGFXOXVLRzVoYldVc0lIWmhiQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHSnBibVJwYm1jc0lGOXFMQ0JmYkdWdU1Td2dYM0psWmpJc0lGOXlaWE4xYkhSek8xeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVltbHVaR2x1WjNOYmJtRnRaVjBnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCZmNtVm1NaUE5SUhSb2FYTXVZbWx1WkdsdVozTmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lGOXlaWE4xYkhSeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9YMm9nUFNBd0xDQmZiR1Z1TVNBOUlGOXlaV1l5TG14bGJtZDBhRHNnWDJvZ1BDQmZiR1Z1TVRzZ1gyb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHSnBibVJwYm1jZ1BTQmZjbVZtTWx0ZmFsMDdYRzRnSUNBZ0lDQWdJQ0FnWDNKbGMzVnNkSE11Y0hWemFDaGlhVzVrYVc1bkxtTmhiR3dvZEdocGN5d2dkbUZzS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOXlaWE4xYkhSek8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCRmRtVnVkSE11Y0hKdmRHOTBlWEJsTG05dUlEMGdablZ1WTNScGIyNG9ibUZ0WlN3Z1ptNHBJSHRjYmlBZ0lDQWdJSFpoY2lCZlltRnpaVHRjYmlBZ0lDQWdJR2xtSUNnb1gySmhjMlVnUFNCMGFHbHpMbUpwYm1ScGJtZHpLVnR1WVcxbFhTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJRjlpWVhObFcyNWhiV1ZkSUQwZ1cxMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpYVc1a2FXNW5jMXR1WVcxbFhTNXdkWE5vS0dadUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUVWMlpXNTBjenRjYmx4dUlDQjlLU2dwTzF4dVhHNGdJRjlZVFV4SWRIUndVbVZ4ZFdWemRDQTlJSGRwYm1SdmR5NVlUVXhJZEhSd1VtVnhkV1Z6ZER0Y2JseHVJQ0JmV0VSdmJXRnBibEpsY1hWbGMzUWdQU0IzYVc1a2IzY3VXRVJ2YldGcGJsSmxjWFZsYzNRN1hHNWNiaUFnWDFkbFlsTnZZMnRsZENBOUlIZHBibVJ2ZHk1WFpXSlRiMk5yWlhRN1hHNWNiaUFnWlhoMFpXNWtUbUYwYVhabElEMGdablZ1WTNScGIyNG9kRzhzSUdaeWIyMHBJSHRjYmlBZ0lDQjJZWElnWlN3Z2EyVjVMQ0JmY21WemRXeDBjenRjYmlBZ0lDQmZjbVZ6ZFd4MGN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2EyVjVJR2x1SUdaeWIyMHVjSEp2ZEc5MGVYQmxLU0I3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvS0hSdlcydGxlVjBnUFQwZ2JuVnNiQ2tnSmlZZ2RIbHdaVzltSUdaeWIyMWJhMlY1WFNBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZjbVZ6ZFd4MGN5NXdkWE5vS0U5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBieXdnYTJWNUxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaeWIyMHVjSEp2ZEc5MGVYQmxXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZjbVZ6ZFd4MGN5NXdkWE5vS0hSdlcydGxlVjBnUFNCbWNtOXRMbkJ5YjNSdmRIbHdaVnRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNdWNIVnphQ2gyYjJsa0lEQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hmWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnWlNBOUlGOWxjbkp2Y2p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlGOXlaWE4xYkhSek8xeHVJQ0I5TzF4dVhHNGdJR2xuYm05eVpWTjBZV05ySUQwZ1cxMDdYRzVjYmlBZ1VHRmpaUzVwWjI1dmNtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeXdnWm00c0lISmxkRHRjYmlBZ0lDQm1iaUE5SUdGeVozVnRaVzUwYzFzd1hTd2dZWEpuY3lBOUlESWdQRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0EvSUY5ZmMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwSURvZ1cxMDdYRzRnSUNBZ2FXZHViM0psVTNSaFkyc3VkVzV6YUdsbWRDZ25hV2R1YjNKbEp5azdYRzRnSUNBZ2NtVjBJRDBnWm00dVlYQndiSGtvYm5Wc2JDd2dZWEpuY3lrN1hHNGdJQ0FnYVdkdWIzSmxVM1JoWTJzdWMyaHBablFvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbVYwTzF4dUlDQjlPMXh1WEc0Z0lGQmhZMlV1ZEhKaFkyc2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeXdnWm00c0lISmxkRHRjYmlBZ0lDQm1iaUE5SUdGeVozVnRaVzUwYzFzd1hTd2dZWEpuY3lBOUlESWdQRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0EvSUY5ZmMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwSURvZ1cxMDdYRzRnSUNBZ2FXZHViM0psVTNSaFkyc3VkVzV6YUdsbWRDZ25kSEpoWTJzbktUdGNiaUFnSUNCeVpYUWdQU0JtYmk1aGNIQnNlU2h1ZFd4c0xDQmhjbWR6S1R0Y2JpQWdJQ0JwWjI1dmNtVlRkR0ZqYXk1emFHbG1kQ2dwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lIMDdYRzVjYmlBZ2MyaHZkV3hrVkhKaFkyc2dQU0JtZFc1amRHbHZiaWh0WlhSb2IyUXBJSHRjYmlBZ0lDQjJZWElnWDNKbFpqSTdYRzRnSUNBZ2FXWWdLRzFsZEdodlpDQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnRaWFJvYjJRZ1BTQW5SMFZVSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dsbmJtOXlaVk4wWVdOcld6QmRJRDA5UFNBbmRISmhZMnNuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSjJadmNtTmxKenRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZwWjI1dmNtVlRkR0ZqYXk1c1pXNW5kR2dnSmlZZ2IzQjBhVzl1Y3k1aGFtRjRLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUQwOVBTQW5jMjlqYTJWMEp5QW1KaUJ2Y0hScGIyNXpMbUZxWVhndWRISmhZMnRYWldKVGIyTnJaWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hmY21WbU1pQTlJRzFsZEdodlpDNTBiMVZ3Y0dWeVEyRnpaU2dwTENCZlgybHVaR1Y0VDJZdVkyRnNiQ2h2Y0hScGIyNXpMbUZxWVhndWRISmhZMnROWlhSb2IyUnpMQ0JmY21WbU1pa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOU8xeHVYRzRnSUZKbGNYVmxjM1JKYm5SbGNtTmxjSFFnUFNBb1puVnVZM1JwYjI0b1gzTjFjR1Z5S1NCN1hHNGdJQ0FnWDE5bGVIUmxibVJ6S0ZKbGNYVmxjM1JKYm5SbGNtTmxjSFFzSUY5emRYQmxjaWs3WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJTWlhGMVpYTjBTVzUwWlhKalpYQjBLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHMXZibWwwYjNKWVNGSXNYRzRnSUNBZ0lDQWdJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUZKbGNYVmxjM1JKYm5SbGNtTmxjSFF1WDE5emRYQmxjbDlmTG1OdmJuTjBjblZqZEc5eUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0J0YjI1cGRHOXlXRWhTSUQwZ1puVnVZM1JwYjI0b2NtVnhLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZiM0JsYmp0Y2JpQWdJQ0FnSUNBZ1gyOXdaVzRnUFNCeVpYRXViM0JsYmp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNTNXZjR1Z1SUQwZ1puVnVZM1JwYjI0b2RIbHdaU3dnZFhKc0xDQmhjM2x1WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemFHOTFiR1JVY21GamF5aDBlWEJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVkSEpwWjJkbGNpZ25jbVZ4ZFdWemRDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2RIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzT2lCMWNtd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNRNklISmxjVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmIzQmxiaTVoY0hCc2VTaHlaWEVzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdkMmx1Wkc5M0xsaE5URWgwZEhCU1pYRjFaWE4wSUQwZ1puVnVZM1JwYjI0b1pteGhaM01wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsY1R0Y2JpQWdJQ0FnSUNBZ2NtVnhJRDBnYm1WM0lGOVlUVXhJZEhSd1VtVnhkV1Z6ZENobWJHRm5jeWs3WEc0Z0lDQWdJQ0FnSUcxdmJtbDBiM0pZU0ZJb2NtVnhLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JsZUhSbGJtUk9ZWFJwZG1Vb2QybHVaRzkzTGxoTlRFaDBkSEJTWlhGMVpYTjBMQ0JmV0UxTVNIUjBjRkpsY1hWbGMzUXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9YMlZ5Y205eUtTQjdmVnh1SUNBZ0lDQWdhV1lnS0Y5WVJHOXRZV2x1VW1WeGRXVnpkQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVZUkc5dFlXbHVVbVZ4ZFdWemRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhFN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ4SUQwZ2JtVjNJRjlZUkc5dFlXbHVVbVZ4ZFdWemREdGNiaUFnSUNBZ0lDQWdJQ0J0YjI1cGRHOXlXRWhTS0hKbGNTazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQmxlSFJsYm1ST1lYUnBkbVVvZDJsdVpHOTNMbGhFYjIxaGFXNVNaWEYxWlhOMExDQmZXRVJ2YldGcGJsSmxjWFZsYzNRcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGZaWEp5YjNJcElIdDlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvS0Y5WFpXSlRiMk5yWlhRZ0lUMGdiblZzYkNrZ0ppWWdiM0IwYVc5dWN5NWhhbUY0TG5SeVlXTnJWMlZpVTI5amEyVjBjeWtnZTF4dUlDQWdJQ0FnSUNCM2FXNWtiM2N1VjJWaVUyOWphMlYwSUQwZ1puVnVZM1JwYjI0b2RYSnNMQ0J3Y205MGIyTnZiSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnY21WeE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOTBiMk52YkhNZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeElEMGdibVYzSUY5WFpXSlRiMk5yWlhRb2RYSnNMQ0J3Y205MGIyTnZiSE1wTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhFZ1BTQnVaWGNnWDFkbFlsTnZZMnRsZENoMWNtd3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJodmRXeGtWSEpoWTJzb0ozTnZZMnRsZENjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTUwY21sbloyVnlLQ2R5WlhGMVpYTjBKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5jMjlqYTJWMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUIxY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzUnZZMjlzY3pvZ2NISnZkRzlqYjJ4ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wT2lCeVpYRmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WeE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Y0ZEdWdVpFNWhkR2wyWlNoM2FXNWtiM2N1VjJWaVUyOWphMlYwTENCZlYyVmlVMjlqYTJWMEtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9YMlZ5Y205eUtTQjdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCU1pYRjFaWE4wU1c1MFpYSmpaWEIwTzF4dVhHNGdJSDBwS0VWMlpXNTBjeWs3WEc1Y2JpQWdYMmx1ZEdWeVkyVndkQ0E5SUc1MWJHdzdYRzVjYmlBZ1oyVjBTVzUwWlhKalpYQjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnYVdZZ0tGOXBiblJsY21ObGNIUWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdYMmx1ZEdWeVkyVndkQ0E5SUc1bGR5QlNaWEYxWlhOMFNXNTBaWEpqWlhCME8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdYMmx1ZEdWeVkyVndkRHRjYmlBZ2ZUdGNibHh1SUNCemFHOTFiR1JKWjI1dmNtVlZVa3dnUFNCbWRXNWpkR2x2YmloMWNtd3BJSHRjYmlBZ0lDQjJZWElnY0dGMGRHVnliaXdnWDJvc0lGOXNaVzR4TENCZmNtVm1NanRjYmlBZ0lDQmZjbVZtTWlBOUlHOXdkR2x2Ym5NdVlXcGhlQzVwWjI1dmNtVlZVa3h6TzF4dUlDQWdJR1p2Y2lBb1gyb2dQU0F3TENCZmJHVnVNU0E5SUY5eVpXWXlMbXhsYm1kMGFEc2dYMm9nUENCZmJHVnVNVHNnWDJvckt5a2dlMXh1SUNBZ0lDQWdjR0YwZEdWeWJpQTlJRjl5WldZeVcxOXFYVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0dGMGRHVnliaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hWeWJDNXBibVJsZUU5bUtIQmhkSFJsY200cElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCcFppQW9jR0YwZEdWeWJpNTBaWE4wS0hWeWJDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgwN1hHNWNiaUFnWjJWMFNXNTBaWEpqWlhCMEtDa3ViMjRvSjNKbGNYVmxjM1FuTENCbWRXNWpkR2x2YmloZllYSm5LU0I3WEc0Z0lDQWdkbUZ5SUdGbWRHVnlMQ0JoY21kekxDQnlaWEYxWlhOMExDQjBlWEJsTENCMWNtdzdYRzRnSUNBZ2RIbHdaU0E5SUY5aGNtY3VkSGx3WlN3Z2NtVnhkV1Z6ZENBOUlGOWhjbWN1Y21WeGRXVnpkQ3dnZFhKc0lEMGdYMkZ5Wnk1MWNtdzdYRzRnSUNBZ2FXWWdLSE5vYjNWc1pFbG5ibTl5WlZWU1RDaDFjbXdwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doVUdGalpTNXlkVzV1YVc1bklDWW1JQ2h2Y0hScGIyNXpMbkpsYzNSaGNuUlBibEpsY1hWbGMzUkJablJsY2lBaFBUMGdabUZzYzJVZ2ZId2djMmh2ZFd4a1ZISmhZMnNvZEhsd1pTa2dQVDA5SUNkbWIzSmpaU2NwS1NCN1hHNGdJQ0FnSUNCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnWVdaMFpYSWdQU0J2Y0hScGIyNXpMbkpsYzNSaGNuUlBibEpsY1hWbGMzUkJablJsY2lCOGZDQXdPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJoWm5SbGNpQTlQVDBnSjJKdmIyeGxZVzRuS1NCN1hHNGdJQ0FnSUNBZ0lHRm1kR1Z5SUQwZ01EdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzUnBiR3hCWTNScGRtVXNJRjlxTENCZmJHVnVNU3dnWDNKbFpqSXNJRjl5WldZekxDQmZjbVZ6ZFd4MGN6dGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkemIyTnJaWFFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JwYkd4QlkzUnBkbVVnUFNCeVpYRjFaWE4wTG5KbFlXUjVVM1JoZEdVZ1BDQXlPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhOMGFXeHNRV04wYVhabElEMGdLREFnUENBb1gzSmxaaklnUFNCeVpYRjFaWE4wTG5KbFlXUjVVM1JoZEdVcElDWW1JRjl5WldZeUlEd2dOQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSE4wYVd4c1FXTjBhWFpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdVR0ZqWlM1eVpYTjBZWEowS0NrN1hHNGdJQ0FnSUNBZ0lDQWdYM0psWmpNZ1BTQlFZV05sTG5OdmRYSmpaWE03WEc0Z0lDQWdJQ0FnSUNBZ1gzSmxjM1ZzZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLRjlxSUQwZ01Dd2dYMnhsYmpFZ1BTQmZjbVZtTXk1c1pXNW5kR2c3SUY5cUlEd2dYMnhsYmpFN0lGOXFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFhKalpTQTlJRjl5WldZelcxOXFYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6YjNWeVkyVWdhVzV6ZEdGdVkyVnZaaUJCYW1GNFRXOXVhWFJ2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnlZMlV1ZDJGMFkyZ3VZWEJ3Ykhrb2MyOTFjbU5sTENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZjbVZ6ZFd4MGN5NXdkWE5vS0hadmFXUWdNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmNtVnpkV3gwY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTd2dZV1owWlhJcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdRV3BoZUUxdmJtbDBiM0lnUFNBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1FXcGhlRTF2Ym1sMGIzSW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwY3lBOUlGdGRPMXh1SUNBZ0lDQWdaMlYwU1c1MFpYSmpaWEIwS0NrdWIyNG9KM0psY1hWbGMzUW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbmRoZEdOb0xtRndjR3g1S0Y5MGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUVdwaGVFMXZibWwwYjNJdWNISnZkRzkwZVhCbExuZGhkR05vSUQwZ1puVnVZM1JwYjI0b1gyRnlaeWtnZTF4dUlDQWdJQ0FnZG1GeUlISmxjWFZsYzNRc0lIUnlZV05yWlhJc0lIUjVjR1VzSUhWeWJEdGNiaUFnSUNBZ0lIUjVjR1VnUFNCZllYSm5MblI1Y0dVc0lISmxjWFZsYzNRZ1BTQmZZWEpuTG5KbGNYVmxjM1FzSUhWeWJDQTlJRjloY21jdWRYSnNPMXh1SUNBZ0lDQWdhV1lnS0hOb2IzVnNaRWxuYm05eVpWVlNUQ2gxY213cEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuYzI5amEyVjBKeWtnZTF4dUlDQWdJQ0FnSUNCMGNtRmphMlZ5SUQwZ2JtVjNJRk52WTJ0bGRGSmxjWFZsYzNSVWNtRmphMlZ5S0hKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEhKaFkydGxjaUE5SUc1bGR5QllTRkpTWlhGMVpYTjBWSEpoWTJ0bGNpaHlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUnpMbkIxYzJnb2RISmhZMnRsY2lrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhKbGRIVnliaUJCYW1GNFRXOXVhWFJ2Y2p0Y2JseHVJQ0I5S1NncE8xeHVYRzRnSUZoSVVsSmxjWFZsYzNSVWNtRmphMlZ5SUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlGaElVbEpsY1hWbGMzUlVjbUZqYTJWeUtISmxjWFZsYzNRcElIdGNiaUFnSUNBZ0lIWmhjaUJsZG1WdWRDd2djMmw2WlN3Z1gyb3NJRjlzWlc0eExDQmZiMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxMQ0JmY21WbU1peGNiaUFnSUNBZ0lDQWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnZEdocGN5NXdjbTluY21WemN5QTlJREE3WEc0Z0lDQWdJQ0JwWmlBb2QybHVaRzkzTGxCeWIyZHlaWE56UlhabGJuUWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J6YVhwbElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nkd2NtOW5jbVZ6Y3ljc0lHWjFibU4wYVc5dUtHVjJkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsZG5RdWJHVnVaM1JvUTI5dGNIVjBZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxuQnliMmR5WlhOeklEMGdNVEF3SUNvZ1pYWjBMbXh2WVdSbFpDQXZJR1YyZEM1MGIzUmhiRHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG5CeWIyZHlaWE56SUQwZ1gzUm9hWE11Y0hKdlozSmxjM01nS3lBb01UQXdJQzBnWDNSb2FYTXVjSEp2WjNKbGMzTXBJQzhnTWp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnWDNKbFpqSWdQU0JiSjJ4dllXUW5MQ0FuWVdKdmNuUW5MQ0FuZEdsdFpXOTFkQ2NzSUNkbGNuSnZjaWRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLRjlxSUQwZ01Dd2dYMnhsYmpFZ1BTQmZjbVZtTWk1c1pXNW5kR2c3SUY5cUlEd2dYMnhsYmpFN0lGOXFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZENBOUlGOXlaV1l5VzE5cVhUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9aWFpsYm5Rc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbkJ5YjJkeVpYTnpJRDBnTVRBd08xeHVJQ0FnSUNBZ0lDQWdJSDBzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWDI5dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNBOUlISmxjWFZsYzNRdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbE8xeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMExtOXVjbVZoWkhsemRHRjBaV05vWVc1blpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJmY21WbU16dGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tGOXlaV1l6SUQwZ2NtVnhkV1Z6ZEM1eVpXRmtlVk4wWVhSbEtTQTlQVDBnTUNCOGZDQmZjbVZtTXlBOVBUMGdOQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNISnZaM0psYzNNZ1BTQXhNREE3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaWEYxWlhOMExuSmxZV1I1VTNSaGRHVWdQVDA5SURNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbkJ5YjJkeVpYTnpJRDBnTlRBN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdYMjl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnWDI5dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlM1aGNIQnNlU2h1ZFd4c0xDQmhjbWQxYldWdWRITXBJRG9nZG05cFpDQXdPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQllTRkpTWlhGMVpYTjBWSEpoWTJ0bGNqdGNibHh1SUNCOUtTZ3BPMXh1WEc0Z0lGTnZZMnRsZEZKbGNYVmxjM1JVY21GamEyVnlJRDBnS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZOdlkydGxkRkpsY1hWbGMzUlVjbUZqYTJWeUtISmxjWFZsYzNRcElIdGNiaUFnSUNBZ0lIWmhjaUJsZG1WdWRDd2dYMm9zSUY5c1pXNHhMQ0JmY21WbU1peGNiaUFnSUNBZ0lDQWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnZEdocGN5NXdjbTluY21WemN5QTlJREE3WEc0Z0lDQWdJQ0JmY21WbU1pQTlJRnNuWlhKeWIzSW5MQ0FuYjNCbGJpZGRPMXh1SUNBZ0lDQWdabTl5SUNoZmFpQTlJREFzSUY5c1pXNHhJRDBnWDNKbFpqSXViR1Z1WjNSb095QmZhaUE4SUY5c1pXNHhPeUJmYWlzcktTQjdYRzRnSUNBZ0lDQWdJR1YyWlc1MElEMGdYM0psWmpKYlgycGRPMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9aWFpsYm5Rc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXdjbTluY21WemN5QTlJREV3TUR0Y2JpQWdJQ0FnSUNBZ2ZTd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJUYjJOclpYUlNaWEYxWlhOMFZISmhZMnRsY2p0Y2JseHVJQ0I5S1NncE8xeHVYRzRnSUVWc1pXMWxiblJOYjI1cGRHOXlJRDBnS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUVWc1pXMWxiblJOYjI1cGRHOXlLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJSFpoY2lCelpXeGxZM1J2Y2l3Z1gyb3NJRjlzWlc0eExDQmZjbVZtTWp0Y2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1eklEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MGN5QTlJRnRkTzF4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWMyVnNaV04wYjNKeklEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXpaV3hsWTNSdmNuTWdQU0JiWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUY5eVpXWXlJRDBnYjNCMGFXOXVjeTV6Wld4bFkzUnZjbk03WEc0Z0lDQWdJQ0JtYjNJZ0tGOXFJRDBnTUN3Z1gyeGxiakVnUFNCZmNtVm1NaTVzWlc1bmRHZzdJRjlxSUR3Z1gyeGxiakU3SUY5cUt5c3BJSHRjYmlBZ0lDQWdJQ0FnYzJWc1pXTjBiM0lnUFNCZmNtVm1NbHRmYWwwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkSE11Y0hWemFDaHVaWGNnUld4bGJXVnVkRlJ5WVdOclpYSW9jMlZzWldOMGIzSXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1JXeGxiV1Z1ZEUxdmJtbDBiM0k3WEc1Y2JpQWdmU2tvS1R0Y2JseHVJQ0JGYkdWdFpXNTBWSEpoWTJ0bGNpQTlJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJGYkdWdFpXNTBWSEpoWTJ0bGNpaHpaV3hsWTNSdmNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1elpXeGxZM1J2Y2lBOUlITmxiR1ZqZEc5eU8xeHVJQ0FnSUNBZ2RHaHBjeTV3Y205bmNtVnpjeUE5SURBN1hHNGdJQ0FnSUNCMGFHbHpMbU5vWldOcktDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1JXeGxiV1Z1ZEZSeVlXTnJaWEl1Y0hKdmRHOTBlWEJsTG1Ob1pXTnJJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnYVdZZ0tHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvZEdocGN5NXpaV3hsWTNSdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHOXVaU2dwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amFHVmpheWdwTzF4dUlDQWdJQ0FnSUNCOUtTd2diM0IwYVc5dWN5NWxiR1Z0Wlc1MGN5NWphR1ZqYTBsdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnUld4bGJXVnVkRlJ5WVdOclpYSXVjSEp2ZEc5MGVYQmxMbVJ2Ym1VZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIyZHlaWE56SUQwZ01UQXdPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnlaWFIxY200Z1JXeGxiV1Z1ZEZSeVlXTnJaWEk3WEc1Y2JpQWdmU2tvS1R0Y2JseHVJQ0JFYjJOMWJXVnVkRTF2Ym1sMGIzSWdQU0FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnUkc5amRXMWxiblJOYjI1cGRHOXlMbkJ5YjNSdmRIbHdaUzV6ZEdGMFpYTWdQU0I3WEc0Z0lDQWdJQ0JzYjJGa2FXNW5PaUF3TEZ4dUlDQWdJQ0FnYVc1MFpYSmhZM1JwZG1VNklEVXdMRnh1SUNBZ0lDQWdZMjl0Y0d4bGRHVTZJREV3TUZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJFYjJOMWJXVnVkRTF2Ym1sMGIzSW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1gyOXVjbVZoWkhsemRHRjBaV05vWVc1blpTd2dYM0psWmpJc1hHNGdJQ0FnSUNBZ0lGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFJvYVhNdWNISnZaM0psYzNNZ1BTQW9YM0psWmpJZ1BTQjBhR2x6TG5OMFlYUmxjMXRrYjJOMWJXVnVkQzV5WldGa2VWTjBZWFJsWFNrZ0lUMGdiblZzYkNBL0lGOXlaV1l5SURvZ01UQXdPMXh1SUNBZ0lDQWdYMjl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdSdlkzVnRaVzUwTG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlR0Y2JpQWdJQ0FnSUdSdlkzVnRaVzUwTG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1gzUm9hWE11YzNSaGRHVnpXMlJ2WTNWdFpXNTBMbkpsWVdSNVUzUmhkR1ZkSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1d2NtOW5jbVZ6Y3lBOUlGOTBhR2x6TG5OMFlYUmxjMXRrYjJOMWJXVnVkQzV5WldGa2VWTjBZWFJsWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RIbHdaVzltSUY5dmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lGOXZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVXVZWEJ3Ykhrb2JuVnNiQ3dnWVhKbmRXMWxiblJ6S1NBNklIWnZhV1FnTUR0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRVJ2WTNWdFpXNTBUVzl1YVhSdmNqdGNibHh1SUNCOUtTZ3BPMXh1WEc0Z0lFVjJaVzUwVEdGblRXOXVhWFJ2Y2lBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQkZkbVZ1ZEV4aFowMXZibWwwYjNJb0tTQjdYRzRnSUNBZ0lDQjJZWElnWVhabkxDQnBiblJsY25aaGJDd2diR0Z6ZEN3Z2NHOXBiblJ6TENCellXMXdiR1Z6TEZ4dUlDQWdJQ0FnSUNCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQjBhR2x6TG5CeWIyZHlaWE56SUQwZ01EdGNiaUFnSUNBZ0lHRjJaeUE5SURBN1hHNGdJQ0FnSUNCellXMXdiR1Z6SUQwZ1cxMDdYRzRnSUNBZ0lDQndiMmx1ZEhNZ1BTQXdPMXh1SUNBZ0lDQWdiR0Z6ZENBOUlHNXZkeWdwTzF4dUlDQWdJQ0FnYVc1MFpYSjJZV3dnUFNCelpYUkpiblJsY25aaGJDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUnBabVk3WEc0Z0lDQWdJQ0FnSUdScFptWWdQU0J1YjNjb0tTQXRJR3hoYzNRZ0xTQTFNRHRjYmlBZ0lDQWdJQ0FnYkdGemRDQTlJRzV2ZHlncE8xeHVJQ0FnSUNBZ0lDQnpZVzF3YkdWekxuQjFjMmdvWkdsbVppazdYRzRnSUNBZ0lDQWdJR2xtSUNoellXMXdiR1Z6TG14bGJtZDBhQ0ErSUc5d2RHbHZibk11WlhabGJuUk1ZV2N1YzJGdGNHeGxRMjkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0J6WVcxd2JHVnpMbk5vYVdaMEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWVhabklEMGdZWFpuUVcxd2JHbDBkV1JsS0hOaGJYQnNaWE1wTzF4dUlDQWdJQ0FnSUNCcFppQW9LeXR3YjJsdWRITWdQajBnYjNCMGFXOXVjeTVsZG1WdWRFeGhaeTV0YVc1VFlXMXdiR1Z6SUNZbUlHRjJaeUE4SUc5d2RHbHZibk11WlhabGJuUk1ZV2N1YkdGblZHaHlaWE5vYjJ4a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjSEp2WjNKbGMzTWdQU0F4TURBN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTnNaV0Z5U1c1MFpYSjJZV3dvYVc1MFpYSjJZV3dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV3Y205bmNtVnpjeUE5SURFd01DQXFJQ2d6SUM4Z0tHRjJaeUFySURNcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3dnTlRBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJGZG1WdWRFeGhaMDF2Ym1sMGIzSTdYRzVjYmlBZ2ZTa29LVHRjYmx4dUlDQlRZMkZzWlhJZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdVMk5oYkdWeUtITnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6YjNWeVkyVWdQU0J6YjNWeVkyVTdYRzRnSUNBZ0lDQjBhR2x6TG14aGMzUWdQU0IwYUdsekxuTnBibU5sVEdGemRGVndaR0YwWlNBOUlEQTdYRzRnSUNBZ0lDQjBhR2x6TG5KaGRHVWdQU0J2Y0hScGIyNXpMbWx1YVhScFlXeFNZWFJsTzF4dUlDQWdJQ0FnZEdocGN5NWpZWFJqYUhWd0lEMGdNRHRjYmlBZ0lDQWdJSFJvYVhNdWNISnZaM0psYzNNZ1BTQjBhR2x6TG14aGMzUlFjbTluY21WemN5QTlJREE3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV6YjNWeVkyVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliMmR5WlhOeklEMGdjbVZ6ZFd4MEtIUm9hWE11YzI5MWNtTmxMQ0FuY0hKdlozSmxjM01uS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JUWTJGc1pYSXVjSEp2ZEc5MGVYQmxMblJwWTJzZ1BTQm1kVzVqZEdsdmJpaG1jbUZ0WlZScGJXVXNJSFpoYkNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE5qWVd4cGJtYzdYRzRnSUNBZ0lDQnBaaUFvZG1Gc0lEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdkbUZzSUQwZ2NtVnpkV3gwS0hSb2FYTXVjMjkxY21ObExDQW5jSEp2WjNKbGMzTW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMllXd2dQajBnTVRBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHOXVaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZG1Gc0lEMDlQU0IwYUdsekxteGhjM1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YVc1alpVeGhjM1JWY0dSaGRHVWdLejBnWm5KaGJXVlVhVzFsTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJsdVkyVk1ZWE4wVlhCa1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WVhSbElEMGdLSFpoYkNBdElIUm9hWE11YkdGemRDa2dMeUIwYUdsekxuTnBibU5sVEdGemRGVndaR0YwWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGRHTm9kWEFnUFNBb2RtRnNJQzBnZEdocGN5NXdjbTluY21WemN5a2dMeUJ2Y0hScGIyNXpMbU5oZEdOb2RYQlVhVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5wYm1ObFRHRnpkRlZ3WkdGMFpTQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZENBOUlIWmhiRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMllXd2dQaUIwYUdsekxuQnliMmR5WlhOektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZaM0psYzNNZ0t6MGdkR2hwY3k1allYUmphSFZ3SUNvZ1puSmhiV1ZVYVcxbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2MyTmhiR2x1WnlBOUlERWdMU0JOWVhSb0xuQnZkeWgwYUdsekxuQnliMmR5WlhOeklDOGdNVEF3TENCdmNIUnBiMjV6TG1WaGMyVkdZV04wYjNJcE8xeHVJQ0FnSUNBZ2RHaHBjeTV3Y205bmNtVnpjeUFyUFNCelkyRnNhVzVuSUNvZ2RHaHBjeTV5WVhSbElDb2dabkpoYldWVWFXMWxPMXh1SUNBZ0lDQWdkR2hwY3k1d2NtOW5jbVZ6Y3lBOUlFMWhkR2d1YldsdUtIUm9hWE11YkdGemRGQnliMmR5WlhOeklDc2diM0IwYVc5dWN5NXRZWGhRY205bmNtVnpjMUJsY2taeVlXMWxMQ0IwYUdsekxuQnliMmR5WlhOektUdGNiaUFnSUNBZ0lIUm9hWE11Y0hKdlozSmxjM01nUFNCTllYUm9MbTFoZUNnd0xDQjBhR2x6TG5CeWIyZHlaWE56S1R0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2WjNKbGMzTWdQU0JOWVhSb0xtMXBiaWd4TURBc0lIUm9hWE11Y0hKdlozSmxjM01wTzF4dUlDQWdJQ0FnZEdocGN5NXNZWE4wVUhKdlozSmxjM01nUFNCMGFHbHpMbkJ5YjJkeVpYTnpPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0hKdlozSmxjM003WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQlRZMkZzWlhJN1hHNWNiaUFnZlNrb0tUdGNibHh1SUNCemIzVnlZMlZ6SUQwZ2JuVnNiRHRjYmx4dUlDQnpZMkZzWlhKeklEMGdiblZzYkR0Y2JseHVJQ0JpWVhJZ1BTQnVkV3hzTzF4dVhHNGdJSFZ1YVZOallXeGxjaUE5SUc1MWJHdzdYRzVjYmlBZ1lXNXBiV0YwYVc5dUlEMGdiblZzYkR0Y2JseHVJQ0JqWVc1alpXeEJibWx0WVhScGIyNGdQU0J1ZFd4c08xeHVYRzRnSUZCaFkyVXVjblZ1Ym1sdVp5QTlJR1poYkhObE8xeHVYRzRnSUdoaGJtUnNaVkIxYzJoVGRHRjBaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuSmxjM1JoY25SUGJsQjFjMmhUZEdGMFpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGQmhZMlV1Y21WemRHRnlkQ2dwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCcFppQW9kMmx1Wkc5M0xtaHBjM1J2Y25rdWNIVnphRk4wWVhSbElDRTlJRzUxYkd3cElIdGNiaUFnSUNCZmNIVnphRk4wWVhSbElEMGdkMmx1Wkc5M0xtaHBjM1J2Y25rdWNIVnphRk4wWVhSbE8xeHVJQ0FnSUhkcGJtUnZkeTVvYVhOMGIzSjVMbkIxYzJoVGRHRjBaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2FHRnVaR3hsVUhWemFGTjBZWFJsS0NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDNCMWMyaFRkR0YwWlM1aGNIQnNlU2gzYVc1a2IzY3VhR2x6ZEc5eWVTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIZHBibVJ2ZHk1b2FYTjBiM0o1TG5KbGNHeGhZMlZUZEdGMFpTQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ1gzSmxjR3hoWTJWVGRHRjBaU0E5SUhkcGJtUnZkeTVvYVhOMGIzSjVMbkpsY0d4aFkyVlRkR0YwWlR0Y2JpQWdJQ0IzYVc1a2IzY3VhR2x6ZEc5eWVTNXlaWEJzWVdObFUzUmhkR1VnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHaGhibVJzWlZCMWMyaFRkR0YwWlNncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUY5eVpYQnNZV05sVTNSaGRHVXVZWEJ3Ykhrb2QybHVaRzkzTG1ocGMzUnZjbmtzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lGTlBWVkpEUlY5TFJWbFRJRDBnZTF4dUlDQWdJR0ZxWVhnNklFRnFZWGhOYjI1cGRHOXlMRnh1SUNBZ0lHVnNaVzFsYm5Sek9pQkZiR1Z0Wlc1MFRXOXVhWFJ2Y2l4Y2JpQWdJQ0JrYjJOMWJXVnVkRG9nUkc5amRXMWxiblJOYjI1cGRHOXlMRnh1SUNBZ0lHVjJaVzUwVEdGbk9pQkZkbVZ1ZEV4aFowMXZibWwwYjNKY2JpQWdmVHRjYmx4dUlDQW9hVzVwZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIWmhjaUIwZVhCbExDQmZhaXdnWDJzc0lGOXNaVzR4TENCZmJHVnVNaXdnWDNKbFpqSXNJRjl5WldZekxDQmZjbVZtTkR0Y2JpQWdJQ0JRWVdObExuTnZkWEpqWlhNZ1BTQnpiM1Z5WTJWeklEMGdXMTA3WEc0Z0lDQWdYM0psWmpJZ1BTQmJKMkZxWVhnbkxDQW5aV3hsYldWdWRITW5MQ0FuWkc5amRXMWxiblFuTENBblpYWmxiblJNWVdjblhUdGNiaUFnSUNCbWIzSWdLRjlxSUQwZ01Dd2dYMnhsYmpFZ1BTQmZjbVZtTWk1c1pXNW5kR2c3SUY5cUlEd2dYMnhsYmpFN0lGOXFLeXNwSUh0Y2JpQWdJQ0FnSUhSNWNHVWdQU0JmY21WbU1sdGZhbDA3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1YzF0MGVYQmxYU0FoUFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2MyOTFjbU5sY3k1d2RYTm9LRzVsZHlCVFQxVlNRMFZmUzBWWlUxdDBlWEJsWFNodmNIUnBiMjV6VzNSNWNHVmRLU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lGOXlaV1kwSUQwZ0tGOXlaV1l6SUQwZ2IzQjBhVzl1Y3k1bGVIUnlZVk52ZFhKalpYTXBJQ0U5SUc1MWJHd2dQeUJmY21WbU15QTZJRnRkTzF4dUlDQWdJR1p2Y2lBb1gyc2dQU0F3TENCZmJHVnVNaUE5SUY5eVpXWTBMbXhsYm1kMGFEc2dYMnNnUENCZmJHVnVNanNnWDJzckt5a2dlMXh1SUNBZ0lDQWdjMjkxY21ObElEMGdYM0psWmpSYlgydGRPMXh1SUNBZ0lDQWdjMjkxY21ObGN5NXdkWE5vS0c1bGR5QnpiM1Z5WTJVb2IzQjBhVzl1Y3lrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JRWVdObExtSmhjaUE5SUdKaGNpQTlJRzVsZHlCQ1lYSTdYRzRnSUNBZ2MyTmhiR1Z5Y3lBOUlGdGRPMXh1SUNBZ0lISmxkSFZ5YmlCMWJtbFRZMkZzWlhJZ1BTQnVaWGNnVTJOaGJHVnlPMXh1SUNCOUtTZ3BPMXh1WEc0Z0lGQmhZMlV1YzNSdmNDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJRkJoWTJVdWRISnBaMmRsY2lnbmMzUnZjQ2NwTzF4dUlDQWdJRkJoWTJVdWNuVnVibWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJR0poY2k1a1pYTjBjbTk1S0NrN1hHNGdJQ0FnWTJGdVkyVnNRVzVwYldGMGFXOXVJRDBnZEhKMVpUdGNiaUFnSUNCcFppQW9ZVzVwYldGMGFXOXVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQmpZVzVqWld4QmJtbHRZWFJwYjI1R2NtRnRaU2hoYm1sdFlYUnBiMjRwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWVc1cGJXRjBhVzl1SUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9LVHRjYmlBZ2ZUdGNibHh1SUNCUVlXTmxMbkpsYzNSaGNuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JRWVdObExuUnlhV2RuWlhJb0ozSmxjM1JoY25RbktUdGNiaUFnSUNCUVlXTmxMbk4wYjNBb0tUdGNiaUFnSUNCeVpYUjFjbTRnVUdGalpTNXpkR0Z5ZENncE8xeHVJQ0I5TzF4dVhHNGdJRkJoWTJVdVoyOGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhjblE3WEc0Z0lDQWdVR0ZqWlM1eWRXNXVhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQmlZWEl1Y21WdVpHVnlLQ2s3WEc0Z0lDQWdjM1JoY25RZ1BTQnViM2NvS1R0Y2JpQWdJQ0JqWVc1alpXeEJibWx0WVhScGIyNGdQU0JtWVd4elpUdGNiaUFnSUNCeVpYUjFjbTRnWVc1cGJXRjBhVzl1SUQwZ2NuVnVRVzVwYldGMGFXOXVLR1oxYm1OMGFXOXVLR1p5WVcxbFZHbHRaU3dnWlc1eGRXVjFaVTVsZUhSR2NtRnRaU2tnZTF4dUlDQWdJQ0FnZG1GeUlHRjJaeXdnWTI5MWJuUXNJR1J2Ym1Vc0lHVnNaVzFsYm5Rc0lHVnNaVzFsYm5SekxDQnBMQ0JxTENCeVpXMWhhVzVwYm1jc0lITmpZV3hsY2l3Z2MyTmhiR1Z5VEdsemRDd2djM1Z0TENCZmFpd2dYMnNzSUY5c1pXNHhMQ0JmYkdWdU1pd2dYM0psWmpJN1hHNGdJQ0FnSUNCeVpXMWhhVzVwYm1jZ1BTQXhNREFnTFNCaVlYSXVjSEp2WjNKbGMzTTdYRzRnSUNBZ0lDQmpiM1Z1ZENBOUlITjFiU0E5SURBN1hHNGdJQ0FnSUNCa2IyNWxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHWnZjaUFvYVNBOUlGOXFJRDBnTUN3Z1gyeGxiakVnUFNCemIzVnlZMlZ6TG14bGJtZDBhRHNnWDJvZ1BDQmZiR1Z1TVRzZ2FTQTlJQ3NyWDJvcElIdGNiaUFnSUNBZ0lDQWdjMjkxY21ObElEMGdjMjkxY21ObGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYzJOaGJHVnlUR2x6ZENBOUlITmpZV3hsY25OYmFWMGdJVDBnYm5Wc2JDQS9JSE5qWVd4bGNuTmJhVjBnT2lCelkyRnNaWEp6VzJsZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdWc1pXMWxiblJ6SUQwZ0tGOXlaV1l5SUQwZ2MyOTFjbU5sTG1Wc1pXMWxiblJ6S1NBaFBTQnVkV3hzSUQ4Z1gzSmxaaklnT2lCYmMyOTFjbU5sWFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hxSUQwZ1gyc2dQU0F3TENCZmJHVnVNaUE5SUdWc1pXMWxiblJ6TG14bGJtZDBhRHNnWDJzZ1BDQmZiR1Z1TWpzZ2FpQTlJQ3NyWDJzcElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBJRDBnWld4bGJXVnVkSE5iYWwwN1hHNGdJQ0FnSUNBZ0lDQWdjMk5oYkdWeUlEMGdjMk5oYkdWeVRHbHpkRnRxWFNBaFBTQnVkV3hzSUQ4Z2MyTmhiR1Z5VEdsemRGdHFYU0E2SUhOallXeGxja3hwYzNSYmFsMGdQU0J1WlhjZ1UyTmhiR1Z5S0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lHUnZibVVnSmowZ2MyTmhiR1Z5TG1SdmJtVTdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITmpZV3hsY2k1a2IyNWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1kyOTFiblFyS3p0Y2JpQWdJQ0FnSUNBZ0lDQnpkVzBnS3owZ2MyTmhiR1Z5TG5ScFkyc29abkpoYldWVWFXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWVhabklEMGdjM1Z0SUM4Z1kyOTFiblE3WEc0Z0lDQWdJQ0JpWVhJdWRYQmtZWFJsS0hWdWFWTmpZV3hsY2k1MGFXTnJLR1p5WVcxbFZHbHRaU3dnWVhabktTazdYRzRnSUNBZ0lDQnBaaUFvWW1GeUxtUnZibVVvS1NCOGZDQmtiMjVsSUh4OElHTmhibU5sYkVGdWFXMWhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQmlZWEl1ZFhCa1lYUmxLREV3TUNrN1hHNGdJQ0FnSUNBZ0lGQmhZMlV1ZEhKcFoyZGxjaWduWkc5dVpTY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmlZWEl1Wm1sdWFYTm9LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1VHRmpaUzV5ZFc1dWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJoWTJVdWRISnBaMmRsY2lnbmFHbGtaU2NwTzF4dUlDQWdJQ0FnSUNCOUxDQk5ZWFJvTG0xaGVDaHZjSFJwYjI1ekxtZG9iM04wVkdsdFpTd2dUV0YwYUM1dFlYZ29iM0IwYVc5dWN5NXRhVzVVYVcxbElDMGdLRzV2ZHlncElDMGdjM1JoY25RcExDQXdLU2twTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1Y1hWbGRXVk9aWGgwUm5KaGJXVW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNCUVlXTmxMbk4wWVhKMElEMGdablZ1WTNScGIyNG9YMjl3ZEdsdmJuTXBJSHRjYmlBZ0lDQmxlSFJsYm1Rb2IzQjBhVzl1Y3l3Z1gyOXdkR2x2Ym5NcE8xeHVJQ0FnSUZCaFkyVXVjblZ1Ym1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHSmhjaTV5Wlc1a1pYSW9LVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGZaWEp5YjNJcElIdGNiaUFnSUNBZ0lFNXZWR0Z5WjJWMFJYSnliM0lnUFNCZlpYSnliM0k3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbkJoWTJVbktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9VR0ZqWlM1emRHRnlkQ3dnTlRBcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JRWVdObExuUnlhV2RuWlhJb0ozTjBZWEowSnlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnVUdGalpTNW5ieWdwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tTQjdYRzRnSUNBZ1pHVm1hVzVsS0ZzbmNHRmpaU2RkTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCUVlXTmxPMXh1SUNBZ0lIMHBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VHRmpaVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1emRHRnlkRTl1VUdGblpVeHZZV1FwSUh0Y2JpQWdJQ0FnSUZCaFkyVXVjM1JoY25Rb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dWZTa3VZMkZzYkNoMGFHbHpLVHRjYmlJc0lpOHFJVnh1SUNvZ1VHRmphMlZ5ZVNCUVFVTkxRVWRGUkNCMk1pNHhMakZjYmlBcUlFZGhjR3hsYzNNc0lHUnlZV2RuWVdKc1pTQm5jbWxrSUd4aGVXOTFkSE5jYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0JIVUV4Mk15Qm1iM0lnYjNCbGJpQnpiM1Z5WTJVZ2RYTmxYRzRnS2lCdmNpQlFZV05yWlhKNUlFTnZiVzFsY21OcFlXd2dUR2xqWlc1elpTQm1iM0lnWTI5dGJXVnlZMmxoYkNCMWMyVmNiaUFxWEc0Z0tpQm9kSFJ3T2k4dmNHRmphMlZ5ZVM1dFpYUmhabWw2ZW5rdVkyOWNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTFsZEdGbWFYcDZlVnh1SUNvdlhHNWNiaUZtZFc1amRHbHZiaWgwTEdVcGUxd2lkWE5sSUhOMGNtbGpkRndpTzF3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHUmxabWx1WlNZbVpHVm1hVzVsTG1GdFpEOWtaV1pwYm1Vb1hDSnFjWFZsY25rdFluSnBaR2RsZEM5cWNYVmxjbmt0WW5KcFpHZGxkRndpTEZ0Y0ltcHhkV1Z5ZVZ3aVhTeG1kVzVqZEdsdmJpaHBLWHRsS0hRc2FTbDlLVHBjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnYlc5a2RXeGxKaVp0YjJSMWJHVXVaWGh3YjNKMGN6OXRiMlIxYkdVdVpYaHdiM0owY3oxbEtIUXNjbVZ4ZFdseVpTaGNJbXB4ZFdWeWVWd2lLU2s2ZEM1cVVYVmxjbmxDY21sa1oyVjBQV1VvZEN4MExtcFJkV1Z5ZVNsOUtIZHBibVJ2ZHl4bWRXNWpkR2x2YmloMExHVXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHa29hU3h6TEdFcGUyWjFibU4wYVc5dUlHZ29kQ3hsTEc0cGUzWmhjaUJ2TEhNOVhDSWtLQ2t1WENJcmFTc25LRndpSnl0bEt5ZGNJaWtuTzNKbGRIVnliaUIwTG1WaFkyZ29ablZ1WTNScGIyNG9kQ3hvS1h0MllYSWdkVDFoTG1SaGRHRW9hQ3hwS1R0cFppZ2hkU2x5WlhSMWNtNGdkbTlwWkNCeUtHa3JYQ0lnYm05MElHbHVhWFJwWVd4cGVtVmtMaUJEWVc1dWIzUWdZMkZzYkNCdFpYUm9iMlJ6TENCcExtVXVJRndpSzNNcE8zWmhjaUJqUFhWYlpWMDdhV1lvSVdOOGZGd2lYMXdpUFQxbExtTm9ZWEpCZENnd0tTbHlaWFIxY200Z2RtOXBaQ0J5S0hNclhDSWdhWE1nYm05MElHRWdkbUZzYVdRZ2JXVjBhRzlrWENJcE8zWmhjaUJrUFdNdVlYQndiSGtvZFN4dUtUdHZQWFp2YVdRZ01EMDlQVzgvWkRwdmZTa3NkbTlwWkNBd0lUMDliejl2T25SOVpuVnVZM1JwYjI0Z2RTaDBMR1VwZTNRdVpXRmphQ2htZFc1amRHbHZiaWgwTEc0cGUzWmhjaUJ2UFdFdVpHRjBZU2h1TEdrcE8yOC9LRzh1YjNCMGFXOXVLR1VwTEc4dVgybHVhWFFvS1NrNktHODlibVYzSUhNb2JpeGxLU3hoTG1SaGRHRW9iaXhwTEc4cEtYMHBmV0U5WVh4OFpYeDhkQzVxVVhWbGNua3NZU1ltS0hNdWNISnZkRzkwZVhCbExtOXdkR2x2Ym54OEtITXVjSEp2ZEc5MGVYQmxMbTl3ZEdsdmJqMW1kVzVqZEdsdmJpaDBLWHRoTG1selVHeGhhVzVQWW1wbFkzUW9kQ2ttSmloMGFHbHpMbTl3ZEdsdmJuTTlZUzVsZUhSbGJtUW9JVEFzZEdocGN5NXZjSFJwYjI1ekxIUXBLWDBwTEdFdVptNWJhVjA5Wm5WdVkzUnBiMjRvZENsN2FXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSFFwZTNaaGNpQmxQVzh1WTJGc2JDaGhjbWQxYldWdWRITXNNU2s3Y21WMGRYSnVJR2dvZEdocGN5eDBMR1VwZlhKbGRIVnliaUIxS0hSb2FYTXNkQ2tzZEdocGMzMHNiaWhoS1NsOVpuVnVZM1JwYjI0Z2JpaDBLWHNoZEh4OGRDWW1kQzVpY21sa1oyVjBmSHdvZEM1aWNtbGtaMlYwUFdrcGZYWmhjaUJ2UFVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTeHpQWFF1WTI5dWMyOXNaU3h5UFZ3aWRXNWtaV1pwYm1Wa1hDSTlQWFI1Y0dWdlppQnpQMloxYm1OMGFXOXVLQ2w3ZlRwbWRXNWpkR2x2YmloMEtYdHpMbVZ5Y205eUtIUXBmVHR5WlhSMWNtNGdiaWhsZkh4MExtcFJkV1Z5ZVNrc2FYMHBMR1oxYm1OMGFXOXVLSFFzWlNsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pHVm1hVzVsSmlaa1pXWnBibVV1WVcxa1AyUmxabWx1WlNoY0ltZGxkQzF6YVhwbEwyZGxkQzF6YVhwbFhDSXNXMTBzWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWlNncGZTazZYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JRzF2WkhWc1pTWW1iVzlrZFd4bExtVjRjRzl5ZEhNL2JXOWtkV3hsTG1WNGNHOXlkSE05WlNncE9uUXVaMlYwVTJsNlpUMWxLQ2w5S0hkcGJtUnZkeXhtZFc1amRHbHZiaWdwZTF3aWRYTmxJSE4wY21samRGd2lPMloxYm1OMGFXOXVJSFFvZENsN2RtRnlJR1U5Y0dGeWMyVkdiRzloZENoMEtTeHBQUzB4UFQxMExtbHVaR1Y0VDJZb1hDSWxYQ0lwSmlZaGFYTk9ZVTRvWlNrN2NtVjBkWEp1SUdrbUptVjlablZ1WTNScGIyNGdaU2dwZTMxbWRXNWpkR2x2YmlCcEtDbDdabTl5S0haaGNpQjBQWHQzYVdSMGFEb3dMR2hsYVdkb2REb3dMR2x1Ym1WeVYybGtkR2c2TUN4cGJtNWxja2hsYVdkb2REb3dMRzkxZEdWeVYybGtkR2c2TUN4dmRYUmxja2hsYVdkb2REb3dmU3hsUFRBN2RUNWxPMlVyS3lsN2RtRnlJR2s5YUZ0bFhUdDBXMmxkUFRCOWNtVjBkWEp1SUhSOVpuVnVZM1JwYjI0Z2JpaDBLWHQyWVhJZ1pUMW5aWFJEYjIxd2RYUmxaRk4wZVd4bEtIUXBPM0psZEhWeWJpQmxmSHhoS0Z3aVUzUjViR1VnY21WMGRYSnVaV1FnWENJclpTdGNJaTRnUVhKbElIbHZkU0J5ZFc1dWFXNW5JSFJvYVhNZ1kyOWtaU0JwYmlCaElHaHBaR1JsYmlCcFpuSmhiV1VnYjI0Z1JtbHlaV1p2ZUQ4Z1UyVmxJR2gwZEhBNkx5OWlhWFF1YkhrdloyVjBjMmw2WldKMVp6RmNJaWtzWlgxbWRXNWpkR2x2YmlCdktDbDdhV1lvSVdNcGUyTTlJVEE3ZG1GeUlHVTlaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltUnBkbHdpS1R0bExuTjBlV3hsTG5kcFpIUm9QVndpTWpBd2NIaGNJaXhsTG5OMGVXeGxMbkJoWkdScGJtYzlYQ0l4Y0hnZ01uQjRJRE53ZUNBMGNIaGNJaXhsTG5OMGVXeGxMbUp2Y21SbGNsTjBlV3hsUFZ3aWMyOXNhV1JjSWl4bExuTjBlV3hsTG1KdmNtUmxjbGRwWkhSb1BWd2lNWEI0SURKd2VDQXpjSGdnTkhCNFhDSXNaUzV6ZEhsc1pTNWliM2hUYVhwcGJtYzlYQ0ppYjNKa1pYSXRZbTk0WENJN2RtRnlJR2s5Wkc5amRXMWxiblF1WW05a2VYeDhaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8ya3VZWEJ3Wlc1a1EyaHBiR1FvWlNrN2RtRnlJRzg5YmlobEtUdHpMbWx6UW05NFUybDZaVTkxZEdWeVBYSTlNakF3UFQxMEtHOHVkMmxrZEdncExHa3VjbVZ0YjNabFEyaHBiR1FvWlNsOWZXWjFibU4wYVc5dUlITW9aU2w3YVdZb2J5Z3BMRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJsSmlZb1pUMWtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dVcEtTeGxKaVpjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlNZbVpTNXViMlJsVkhsd1pTbDdkbUZ5SUhNOWJpaGxLVHRwWmloY0ltNXZibVZjSWowOWN5NWthWE53YkdGNUtYSmxkSFZ5YmlCcEtDazdkbUZ5SUdFOWUzMDdZUzUzYVdSMGFEMWxMbTltWm5ObGRGZHBaSFJvTEdFdWFHVnBaMmgwUFdVdWIyWm1jMlYwU0dWcFoyaDBPMlp2Y2loMllYSWdZejFoTG1selFtOXlaR1Z5UW05NFBWd2lZbTl5WkdWeUxXSnZlRndpUFQxekxtSnZlRk5wZW1sdVp5eGtQVEE3ZFQ1a08yUXJLeWw3ZG1GeUlHWTlhRnRrWFN4c1BYTmJabDBzY0Qxd1lYSnpaVVpzYjJGMEtHd3BPMkZiWmwwOWFYTk9ZVTRvY0NrL01EcHdmWFpoY2lCblBXRXVjR0ZrWkdsdVoweGxablFyWVM1d1lXUmthVzVuVW1sbmFIUXNiVDFoTG5CaFpHUnBibWRVYjNBcllTNXdZV1JrYVc1blFtOTBkRzl0TEhrOVlTNXRZWEpuYVc1TVpXWjBLMkV1YldGeVoybHVVbWxuYUhRc2RqMWhMbTFoY21kcGJsUnZjQ3RoTG0xaGNtZHBia0p2ZEhSdmJTeGZQV0V1WW05eVpHVnlUR1ZtZEZkcFpIUm9LMkV1WW05eVpHVnlVbWxuYUhSWGFXUjBhQ3g0UFdFdVltOXlaR1Z5Vkc5d1YybGtkR2dyWVM1aWIzSmtaWEpDYjNSMGIyMVhhV1IwYUN4aVBXTW1KbklzUlQxMEtITXVkMmxrZEdncE8wVWhQVDBoTVNZbUtHRXVkMmxrZEdnOVJTc29Zajh3T21jclh5a3BPM1poY2lCVVBYUW9jeTVvWldsbmFIUXBPM0psZEhWeWJpQlVJVDA5SVRFbUppaGhMbWhsYVdkb2REMVVLeWhpUHpBNmJTdDRLU2tzWVM1cGJtNWxjbGRwWkhSb1BXRXVkMmxrZEdndEtHY3JYeWtzWVM1cGJtNWxja2hsYVdkb2REMWhMbWhsYVdkb2RDMG9iU3Q0S1N4aExtOTFkR1Z5VjJsa2RHZzlZUzUzYVdSMGFDdDVMR0V1YjNWMFpYSklaV2xuYUhROVlTNW9aV2xuYUhRcmRpeGhmWDEyWVhJZ2NpeGhQVndpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCamIyNXpiMnhsUDJVNlpuVnVZM1JwYjI0b2RDbDdZMjl1YzI5c1pTNWxjbkp2Y2loMEtYMHNhRDFiWENKd1lXUmthVzVuVEdWbWRGd2lMRndpY0dGa1pHbHVaMUpwWjJoMFhDSXNYQ0p3WVdSa2FXNW5WRzl3WENJc1hDSndZV1JrYVc1blFtOTBkRzl0WENJc1hDSnRZWEpuYVc1TVpXWjBYQ0lzWENKdFlYSm5hVzVTYVdkb2RGd2lMRndpYldGeVoybHVWRzl3WENJc1hDSnRZWEpuYVc1Q2IzUjBiMjFjSWl4Y0ltSnZjbVJsY2t4bFpuUlhhV1IwYUZ3aUxGd2lZbTl5WkdWeVVtbG5hSFJYYVdSMGFGd2lMRndpWW05eVpHVnlWRzl3VjJsa2RHaGNJaXhjSW1KdmNtUmxja0p2ZEhSdmJWZHBaSFJvWENKZExIVTlhQzVzWlc1bmRHZ3NZejBoTVR0eVpYUjFjbTRnYzMwcExHWjFibU4wYVc5dUtIUXNaU2w3WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pHVm1hVzVsSmlaa1pXWnBibVV1WVcxa1AyUmxabWx1WlNoY0ltVjJMV1Z0YVhSMFpYSXZaWFl0WlcxcGRIUmxjbHdpTEdVcE9sd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnRiMlIxYkdVbUptMXZaSFZzWlM1bGVIQnZjblJ6UDIxdlpIVnNaUzVsZUhCdmNuUnpQV1VvS1RwMExrVjJSVzFwZEhSbGNqMWxLQ2w5S0hSb2FYTXNablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUIwS0NsN2ZYWmhjaUJsUFhRdWNISnZkRzkwZVhCbE8zSmxkSFZ5YmlCbExtOXVQV1oxYm1OMGFXOXVLSFFzWlNsN2FXWW9kQ1ltWlNsN2RtRnlJR2s5ZEdocGN5NWZaWFpsYm5SelBYUm9hWE11WDJWMlpXNTBjM3g4ZTMwc2JqMXBXM1JkUFdsYmRGMThmRnRkTzNKbGRIVnliaTB4UFQxdUxtbHVaR1Y0VDJZb1pTa21KbTR1Y0hWemFDaGxLU3gwYUdsemZYMHNaUzV2Ym1ObFBXWjFibU4wYVc5dUtIUXNaU2w3YVdZb2RDWW1aU2w3ZEdocGN5NXZiaWgwTEdVcE8zWmhjaUJwUFhSb2FYTXVYMjl1WTJWRmRtVnVkSE05ZEdocGN5NWZiMjVqWlVWMlpXNTBjM3g4ZTMwc2JqMXBXM1JkUFdsYmRGMThmSHQ5TzNKbGRIVnliaUJ1VzJWZFBTRXdMSFJvYVhOOWZTeGxMbTltWmoxbWRXNWpkR2x2YmloMExHVXBlM1poY2lCcFBYUm9hWE11WDJWMlpXNTBjeVltZEdocGN5NWZaWFpsYm5SelczUmRPMmxtS0drbUpta3ViR1Z1WjNSb0tYdDJZWElnYmoxcExtbHVaR1Y0VDJZb1pTazdjbVYwZFhKdUxURWhQVzRtSm1rdWMzQnNhV05sS0c0c01Ta3NkR2hwYzMxOUxHVXVaVzFwZEVWMlpXNTBQV1oxYm1OMGFXOXVLSFFzWlNsN2RtRnlJR2s5ZEdocGN5NWZaWFpsYm5SekppWjBhR2x6TGw5bGRtVnVkSE5iZEYwN2FXWW9hU1ltYVM1c1pXNW5kR2dwZTNaaGNpQnVQVEFzYnoxcFcyNWRPMlU5Wlh4OFcxMDdabTl5S0haaGNpQnpQWFJvYVhNdVgyOXVZMlZGZG1WdWRITW1KblJvYVhNdVgyOXVZMlZGZG1WdWRITmJkRjA3YnpzcGUzWmhjaUJ5UFhNbUpuTmJiMTA3Y2lZbUtIUm9hWE11YjJabUtIUXNieWtzWkdWc1pYUmxJSE5iYjEwcExHOHVZWEJ3Ykhrb2RHaHBjeXhsS1N4dUt6MXlQekE2TVN4dlBXbGJibDE5Y21WMGRYSnVJSFJvYVhOOWZTeDBmU2tzWm5WdVkzUnBiMjRvZEN4bEtYdGNJblZ6WlNCemRISnBZM1JjSWp0Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmtaV1pwYm1VbUptUmxabWx1WlM1aGJXUS9aR1ZtYVc1bEtGd2laR1Z6WVc1a2NtOHRiV0YwWTJobGN5MXpaV3hsWTNSdmNpOXRZWFJqYUdWekxYTmxiR1ZqZEc5eVhDSXNaU2s2WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUcxdlpIVnNaU1ltYlc5a2RXeGxMbVY0Y0c5eWRITS9iVzlrZFd4bExtVjRjRzl5ZEhNOVpTZ3BPblF1YldGMFkyaGxjMU5sYkdWamRHOXlQV1VvS1gwb2QybHVaRzkzTEdaMWJtTjBhVzl1S0NsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3ZG1GeUlIUTlablZ1WTNScGIyNG9LWHQyWVhJZ2REMUZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pUdHBaaWgwTG0xaGRHTm9aWE1wY21WMGRYSnVYQ0p0WVhSamFHVnpYQ0k3YVdZb2RDNXRZWFJqYUdWelUyVnNaV04wYjNJcGNtVjBkWEp1WENKdFlYUmphR1Z6VTJWc1pXTjBiM0pjSWp0bWIzSW9kbUZ5SUdVOVcxd2lkMlZpYTJsMFhDSXNYQ0p0YjNwY0lpeGNJbTF6WENJc1hDSnZYQ0pkTEdrOU1EdHBQR1V1YkdWdVozUm9PMmtyS3lsN2RtRnlJRzQ5WlZ0cFhTeHZQVzRyWENKTllYUmphR1Z6VTJWc1pXTjBiM0pjSWp0cFppaDBXMjlkS1hKbGRIVnliaUJ2Zlgwb0tUdHlaWFIxY200Z1puVnVZM1JwYjI0b1pTeHBLWHR5WlhSMWNtNGdaVnQwWFNocEtYMTlLU3htZFc1amRHbHZiaWgwTEdVcGUxd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1JsWm1sdVpTWW1aR1ZtYVc1bExtRnRaRDlrWldacGJtVW9YQ0ptYVhwNmVTMTFhUzExZEdsc2N5OTFkR2xzYzF3aUxGdGNJbVJsYzJGdVpISnZMVzFoZEdOb1pYTXRjMlZzWldOMGIzSXZiV0YwWTJobGN5MXpaV3hsWTNSdmNsd2lYU3htZFc1amRHbHZiaWhwS1h0eVpYUjFjbTRnWlNoMExHa3BmU2s2WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUcxdlpIVnNaU1ltYlc5a2RXeGxMbVY0Y0c5eWRITS9iVzlrZFd4bExtVjRjRzl5ZEhNOVpTaDBMSEpsY1hWcGNtVW9YQ0prWlhOaGJtUnlieTF0WVhSamFHVnpMWE5sYkdWamRHOXlYQ0lwS1RwMExtWnBlbnA1VlVsVmRHbHNjejFsS0hRc2RDNXRZWFJqYUdWelUyVnNaV04wYjNJcGZTaDNhVzVrYjNjc1puVnVZM1JwYjI0b2RDeGxLWHQyWVhJZ2FUMTdmVHRwTG1WNGRHVnVaRDFtZFc1amRHbHZiaWgwTEdVcGUyWnZjaWgyWVhJZ2FTQnBiaUJsS1hSYmFWMDlaVnRwWFR0eVpYUjFjbTRnZEgwc2FTNXRiMlIxYkc4OVpuVnVZM1JwYjI0b2RDeGxLWHR5WlhSMWNtNG9kQ1ZsSzJVcEpXVjlMR2t1YldGclpVRnljbUY1UFdaMWJtTjBhVzl1S0hRcGUzWmhjaUJsUFZ0ZE8ybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb2RDa3BaVDEwTzJWc2MyVWdhV1lvZENZbVhDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlIUXViR1Z1WjNSb0tXWnZjaWgyWVhJZ2FUMHdPMms4ZEM1c1pXNW5kR2c3YVNzcktXVXVjSFZ6YUNoMFcybGRLVHRsYkhObElHVXVjSFZ6YUNoMEtUdHlaWFIxY200Z1pYMHNhUzV5WlcxdmRtVkdjbTl0UFdaMWJtTjBhVzl1S0hRc1pTbDdkbUZ5SUdrOWRDNXBibVJsZUU5bUtHVXBPeTB4SVQxcEppWjBMbk53YkdsalpTaHBMREVwZlN4cExtZGxkRkJoY21WdWREMW1kVzVqZEdsdmJpaDBMR2twZTJadmNpZzdkQ0U5Wkc5amRXMWxiblF1WW05a2VUc3BhV1lvZEQxMExuQmhjbVZ1ZEU1dlpHVXNaU2gwTEdrcEtYSmxkSFZ5YmlCMGZTeHBMbWRsZEZGMVpYSjVSV3hsYldWdWREMW1kVzVqZEdsdmJpaDBLWHR5WlhSMWNtNWNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdkRDlrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtIUXBPblI5TEdrdWFHRnVaR3hsUlhabGJuUTlablZ1WTNScGIyNG9kQ2w3ZG1GeUlHVTlYQ0p2Ymx3aUszUXVkSGx3WlR0MGFHbHpXMlZkSmlaMGFHbHpXMlZkS0hRcGZTeHBMbVpwYkhSbGNrWnBibVJGYkdWdFpXNTBjejFtZFc1amRHbHZiaWgwTEc0cGUzUTlhUzV0WVd0bFFYSnlZWGtvZENrN2RtRnlJRzg5VzEwN2NtVjBkWEp1SUhRdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloMEtYdHBaaWgwSUdsdWMzUmhibU5sYjJZZ1NGUk5URVZzWlcxbGJuUXBlMmxtS0NGdUtYSmxkSFZ5YmlCMmIybGtJRzh1Y0hWemFDaDBLVHRsS0hRc2Jpa21KbTh1Y0hWemFDaDBLVHRtYjNJb2RtRnlJR2s5ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0c0cExITTlNRHR6UEdrdWJHVnVaM1JvTzNNckt5bHZMbkIxYzJnb2FWdHpYU2w5ZlNrc2IzMHNhUzVrWldKdmRXNWpaVTFsZEdodlpEMW1kVzVqZEdsdmJpaDBMR1VzYVNsN2RtRnlJRzQ5ZEM1d2NtOTBiM1I1Y0dWYlpWMHNiejFsSzF3aVZHbHRaVzkxZEZ3aU8zUXVjSEp2ZEc5MGVYQmxXMlZkUFdaMWJtTjBhVzl1S0NsN2RtRnlJSFE5ZEdocGMxdHZYVHQwSmlaamJHVmhjbFJwYldWdmRYUW9kQ2s3ZG1GeUlHVTlZWEpuZFcxbGJuUnpMSE05ZEdocGN6dDBhR2x6VzI5ZFBYTmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHR1TG1Gd2NHeDVLSE1zWlNrc1pHVnNaWFJsSUhOYmIxMTlMR2w4ZkRFd01DbDlmU3hwTG1SdlkxSmxZV1I1UFdaMWJtTjBhVzl1S0hRcGUxd2lZMjl0Y0d4bGRHVmNJajA5Wkc5amRXMWxiblF1Y21WaFpIbFRkR0YwWlQ5MEtDazZaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNJa1JQVFVOdmJuUmxiblJNYjJGa1pXUmNJaXgwS1gwc2FTNTBiMFJoYzJobFpEMW1kVzVqZEdsdmJpaDBLWHR5WlhSMWNtNGdkQzV5WlhCc1lXTmxLQzhvTGlrb1cwRXRXbDBwTDJjc1puVnVZM1JwYjI0b2RDeGxMR2twZTNKbGRIVnliaUJsSzF3aUxWd2lLMmw5S1M1MGIweHZkMlZ5UTJGelpTZ3BmVHQyWVhJZ2JqMTBMbU52Ym5OdmJHVTdjbVYwZFhKdUlHa3VhSFJ0YkVsdWFYUTlablZ1WTNScGIyNG9aU3h2S1h0cExtUnZZMUpsWVdSNUtHWjFibU4wYVc5dUtDbDdkbUZ5SUhNOWFTNTBiMFJoYzJobFpDaHZLU3h5UFZ3aVpHRjBZUzFjSWl0ekxHRTlaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGNJbHRjSWl0eUsxd2lYVndpS1N4b1BXUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSXVhbk10WENJcmN5a3NkVDFwTG0xaGEyVkJjbkpoZVNoaEtTNWpiMjVqWVhRb2FTNXRZV3RsUVhKeVlYa29hQ2twTEdNOWNpdGNJaTF2Y0hScGIyNXpYQ0lzWkQxMExtcFJkV1Z5ZVR0MUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdkbUZ5SUdrc2N6MTBMbWRsZEVGMGRISnBZblYwWlNoeUtYeDhkQzVuWlhSQmRIUnlhV0oxZEdVb1l5azdkSEo1ZTJrOWN5WW1TbE5QVGk1d1lYSnpaU2h6S1gxallYUmphQ2hoS1h0eVpYUjFjbTRnZG05cFpDaHVKaVp1TG1WeWNtOXlLRndpUlhKeWIzSWdjR0Z5YzJsdVp5QmNJaXR5SzF3aUlHOXVJRndpSzNRdVkyeGhjM05PWVcxbEsxd2lPaUJjSWl0aEtTbDlkbUZ5SUdnOWJtVjNJR1VvZEN4cEtUdGtKaVprTG1SaGRHRW9kQ3h2TEdncGZTbDlLWDBzYVgwcExHWjFibU4wYVc5dUtIUXNaU2w3WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pHVm1hVzVsSmlaa1pXWnBibVV1WVcxa1AyUmxabWx1WlNoY0ltOTFkR3hoZVdWeUwybDBaVzFjSWl4YlhDSmxkaTFsYldsMGRHVnlMMlYyTFdWdGFYUjBaWEpjSWl4Y0ltZGxkQzF6YVhwbEwyZGxkQzF6YVhwbFhDSmRMR1VwT2x3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCdGIyUjFiR1VtSm0xdlpIVnNaUzVsZUhCdmNuUnpQMjF2WkhWc1pTNWxlSEJ2Y25SelBXVW9jbVZ4ZFdseVpTaGNJbVYyTFdWdGFYUjBaWEpjSWlrc2NtVnhkV2x5WlNoY0ltZGxkQzF6YVhwbFhDSXBLVG9vZEM1UGRYUnNZWGxsY2oxN2ZTeDBMazkxZEd4aGVXVnlMa2wwWlcwOVpTaDBMa1YyUlcxcGRIUmxjaXgwTG1kbGRGTnBlbVVwS1gwb2QybHVaRzkzTEdaMWJtTjBhVzl1S0hRc1pTbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2FTaDBLWHRtYjNJb2RtRnlJR1VnYVc0Z2RDbHlaWFIxY200aE1UdHlaWFIxY200Z1pUMXVkV3hzTENFd2ZXWjFibU4wYVc5dUlHNG9kQ3hsS1h0MEppWW9kR2hwY3k1bGJHVnRaVzUwUFhRc2RHaHBjeTVzWVhsdmRYUTlaU3gwYUdsekxuQnZjMmwwYVc5dVBYdDRPakFzZVRvd2ZTeDBhR2x6TGw5amNtVmhkR1VvS1NsOVpuVnVZM1JwYjI0Z2J5aDBLWHR5WlhSMWNtNGdkQzV5WlhCc1lXTmxLQzhvVzBFdFdsMHBMMmNzWm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1WENJdFhDSXJkQzUwYjB4dmQyVnlRMkZ6WlNncGZTbDlkbUZ5SUhNOVpHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG5OMGVXeGxMSEk5WENKemRISnBibWRjSWowOWRIbHdaVzltSUhNdWRISmhibk5wZEdsdmJqOWNJblJ5WVc1emFYUnBiMjVjSWpwY0lsZGxZbXRwZEZSeVlXNXphWFJwYjI1Y0lpeGhQVndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ6TG5SeVlXNXpabTl5YlQ5Y0luUnlZVzV6Wm05eWJWd2lPbHdpVjJWaWEybDBWSEpoYm5ObWIzSnRYQ0lzYUQxN1YyVmlhMmwwVkhKaGJuTnBkR2x2YmpwY0luZGxZbXRwZEZSeVlXNXphWFJwYjI1RmJtUmNJaXgwY21GdWMybDBhVzl1T2x3aWRISmhibk5wZEdsdmJtVnVaRndpZlZ0eVhTeDFQWHQwY21GdWMyWnZjbTA2WVN4MGNtRnVjMmwwYVc5dU9uSXNkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVPbklyWENKRWRYSmhkR2x2Ymx3aUxIUnlZVzV6YVhScGIyNVFjbTl3WlhKMGVUcHlLMXdpVUhKdmNHVnlkSGxjSWl4MGNtRnVjMmwwYVc5dVJHVnNZWGs2Y2l0Y0lrUmxiR0Y1WENKOUxHTTliaTV3Y205MGIzUjVjR1U5VDJKcVpXTjBMbU55WldGMFpTaDBMbkJ5YjNSdmRIbHdaU2s3WXk1amIyNXpkSEoxWTNSdmNqMXVMR011WDJOeVpXRjBaVDFtZFc1amRHbHZiaWdwZTNSb2FYTXVYM1J5WVc1emJqMTdhVzVuVUhKdmNHVnlkR2xsY3pwN2ZTeGpiR1ZoYmpwN2ZTeHZia1Z1WkRwN2ZYMHNkR2hwY3k1amMzTW9lM0J2YzJsMGFXOXVPbHdpWVdKemIyeDFkR1ZjSW4wcGZTeGpMbWhoYm1Sc1pVVjJaVzUwUFdaMWJtTjBhVzl1S0hRcGUzWmhjaUJsUFZ3aWIyNWNJaXQwTG5SNWNHVTdkR2hwYzF0bFhTWW1kR2hwYzF0bFhTaDBLWDBzWXk1blpYUlRhWHBsUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTV6YVhwbFBXVW9kR2hwY3k1bGJHVnRaVzUwS1gwc1l5NWpjM005Wm5WdVkzUnBiMjRvZENsN2RtRnlJR1U5ZEdocGN5NWxiR1Z0Wlc1MExuTjBlV3hsTzJadmNpaDJZWElnYVNCcGJpQjBLWHQyWVhJZ2JqMTFXMmxkZkh4cE8yVmJibDA5ZEZ0cFhYMTlMR011WjJWMFVHOXphWFJwYjI0OVpuVnVZM1JwYjI0b0tYdDJZWElnZEQxblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0hSb2FYTXVaV3hsYldWdWRDa3NaVDEwYUdsekxteGhlVzkxZEM1ZloyVjBUM0IwYVc5dUtGd2liM0pwWjJsdVRHVm1kRndpS1N4cFBYUm9hWE11YkdGNWIzVjBMbDluWlhSUGNIUnBiMjRvWENKdmNtbG5hVzVVYjNCY0lpa3NiajEwVzJVL1hDSnNaV1owWENJNlhDSnlhV2RvZEZ3aVhTeHZQWFJiYVQ5Y0luUnZjRndpT2x3aVltOTBkRzl0WENKZExITTlkR2hwY3k1c1lYbHZkWFF1YzJsNlpTeHlQUzB4SVQxdUxtbHVaR1Y0VDJZb1hDSWxYQ0lwUDNCaGNuTmxSbXh2WVhRb2Jpa3ZNVEF3S25NdWQybGtkR2c2Y0dGeWMyVkpiblFvYml3eE1Da3NZVDB0TVNFOWJ5NXBibVJsZUU5bUtGd2lKVndpS1Q5d1lYSnpaVVpzYjJGMEtHOHBMekV3TUNwekxtaGxhV2RvZERwd1lYSnpaVWx1ZENodkxERXdLVHR5UFdselRtRk9LSElwUHpBNmNpeGhQV2x6VG1GT0tHRXBQekE2WVN4eUxUMWxQM011Y0dGa1pHbHVaMHhsWm5RNmN5NXdZV1JrYVc1blVtbG5hSFFzWVMwOWFUOXpMbkJoWkdScGJtZFViM0E2Y3k1d1lXUmthVzVuUW05MGRHOXRMSFJvYVhNdWNHOXphWFJwYjI0dWVEMXlMSFJvYVhNdWNHOXphWFJwYjI0dWVUMWhmU3hqTG14aGVXOTFkRkJ2YzJsMGFXOXVQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlIUTlkR2hwY3k1c1lYbHZkWFF1YzJsNlpTeGxQWHQ5TEdrOWRHaHBjeTVzWVhsdmRYUXVYMmRsZEU5d2RHbHZiaWhjSW05eWFXZHBia3hsWm5SY0lpa3NiajEwYUdsekxteGhlVzkxZEM1ZloyVjBUM0IwYVc5dUtGd2liM0pwWjJsdVZHOXdYQ0lwTEc4OWFUOWNJbkJoWkdScGJtZE1aV1owWENJNlhDSndZV1JrYVc1blVtbG5hSFJjSWl4elBXay9YQ0pzWldaMFhDSTZYQ0p5YVdkb2RGd2lMSEk5YVQ5Y0luSnBaMmgwWENJNlhDSnNaV1owWENJc1lUMTBhR2x6TG5CdmMybDBhVzl1TG5ncmRGdHZYVHRsVzNOZFBYUm9hWE11WjJWMFdGWmhiSFZsS0dFcExHVmJjbDA5WENKY0lqdDJZWElnYUQxdVAxd2ljR0ZrWkdsdVoxUnZjRndpT2x3aWNHRmtaR2x1WjBKdmRIUnZiVndpTEhVOWJqOWNJblJ2Y0Z3aU9sd2lZbTkwZEc5dFhDSXNZejF1UDF3aVltOTBkRzl0WENJNlhDSjBiM0JjSWl4a1BYUm9hWE11Y0c5emFYUnBiMjR1ZVN0MFcyaGRPMlZiZFYwOWRHaHBjeTVuWlhSWlZtRnNkV1VvWkNrc1pWdGpYVDFjSWx3aUxIUm9hWE11WTNOektHVXBMSFJvYVhNdVpXMXBkRVYyWlc1MEtGd2liR0Y1YjNWMFhDSXNXM1JvYVhOZEtYMHNZeTVuWlhSWVZtRnNkV1U5Wm5WdVkzUnBiMjRvZENsN2RtRnlJR1U5ZEdocGN5NXNZWGx2ZFhRdVgyZGxkRTl3ZEdsdmJpaGNJbWh2Y21sNmIyNTBZV3hjSWlrN2NtVjBkWEp1SUhSb2FYTXViR0Y1YjNWMExtOXdkR2x2Ym5NdWNHVnlZMlZ1ZEZCdmMybDBhVzl1SmlZaFpUOTBMM1JvYVhNdWJHRjViM1YwTG5OcGVtVXVkMmxrZEdncU1UQXdLMXdpSlZ3aU9uUXJYQ0p3ZUZ3aWZTeGpMbWRsZEZsV1lXeDFaVDFtZFc1amRHbHZiaWgwS1h0MllYSWdaVDEwYUdsekxteGhlVzkxZEM1ZloyVjBUM0IwYVc5dUtGd2lhRzl5YVhwdmJuUmhiRndpS1R0eVpYUjFjbTRnZEdocGN5NXNZWGx2ZFhRdWIzQjBhVzl1Y3k1d1pYSmpaVzUwVUc5emFYUnBiMjRtSm1VL2RDOTBhR2x6TG14aGVXOTFkQzV6YVhwbExtaGxhV2RvZENveE1EQXJYQ0lsWENJNmRDdGNJbkI0WENKOUxHTXVYM1J5WVc1emFYUnBiMjVVYnoxbWRXNWpkR2x2YmloMExHVXBlM1JvYVhNdVoyVjBVRzl6YVhScGIyNG9LVHQyWVhJZ2FUMTBhR2x6TG5CdmMybDBhVzl1TG5nc2JqMTBhR2x6TG5CdmMybDBhVzl1TG5rc2J6MXdZWEp6WlVsdWRDaDBMREV3S1N4elBYQmhjbk5sU1c1MEtHVXNNVEFwTEhJOWJ6MDlQWFJvYVhNdWNHOXphWFJwYjI0dWVDWW1jejA5UFhSb2FYTXVjRzl6YVhScGIyNHVlVHRwWmloMGFHbHpMbk5sZEZCdmMybDBhVzl1S0hRc1pTa3NjaVltSVhSb2FYTXVhWE5VY21GdWMybDBhVzl1YVc1bktYSmxkSFZ5YmlCMmIybGtJSFJvYVhNdWJHRjViM1YwVUc5emFYUnBiMjRvS1R0MllYSWdZVDEwTFdrc2FEMWxMVzRzZFQxN2ZUdDFMblJ5WVc1elptOXliVDEwYUdsekxtZGxkRlJ5WVc1emJHRjBaU2hoTEdncExIUm9hWE11ZEhKaGJuTnBkR2x2YmloN2RHODZkU3h2YmxSeVlXNXphWFJwYjI1RmJtUTZlM1J5WVc1elptOXliVHAwYUdsekxteGhlVzkxZEZCdmMybDBhVzl1ZlN4cGMwTnNaV0Z1YVc1bk9pRXdmU2w5TEdNdVoyVjBWSEpoYm5Oc1lYUmxQV1oxYm1OMGFXOXVLSFFzWlNsN2RtRnlJR2s5ZEdocGN5NXNZWGx2ZFhRdVgyZGxkRTl3ZEdsdmJpaGNJbTl5YVdkcGJreGxablJjSWlrc2JqMTBhR2x6TG14aGVXOTFkQzVmWjJWMFQzQjBhVzl1S0Z3aWIzSnBaMmx1Vkc5d1hDSXBPM0psZEhWeWJpQjBQV2svZERvdGRDeGxQVzQvWlRvdFpTeGNJblJ5WVc1emJHRjBaVE5rS0Z3aUszUXJYQ0p3ZUN3Z1hDSXJaU3RjSW5CNExDQXdLVndpZlN4akxtZHZWRzg5Wm5WdVkzUnBiMjRvZEN4bEtYdDBhR2x6TG5ObGRGQnZjMmwwYVc5dUtIUXNaU2tzZEdocGN5NXNZWGx2ZFhSUWIzTnBkR2x2YmlncGZTeGpMbTF2ZG1WVWJ6MWpMbDkwY21GdWMybDBhVzl1Vkc4c1l5NXpaWFJRYjNOcGRHbHZiajFtZFc1amRHbHZiaWgwTEdVcGUzUm9hWE11Y0c5emFYUnBiMjR1ZUQxd1lYSnpaVWx1ZENoMExERXdLU3gwYUdsekxuQnZjMmwwYVc5dUxuazljR0Z5YzJWSmJuUW9aU3d4TUNsOUxHTXVYMjV2YmxSeVlXNXphWFJwYjI0OVpuVnVZM1JwYjI0b2RDbDdkR2hwY3k1amMzTW9kQzUwYnlrc2RDNXBjME5zWldGdWFXNW5KaVowYUdsekxsOXlaVzF2ZG1WVGRIbHNaWE1vZEM1MGJ5azdabTl5S0haaGNpQmxJR2x1SUhRdWIyNVVjbUZ1YzJsMGFXOXVSVzVrS1hRdWIyNVVjbUZ1YzJsMGFXOXVSVzVrVzJWZExtTmhiR3dvZEdocGN5bDlMR011ZEhKaGJuTnBkR2x2YmoxbWRXNWpkR2x2YmloMEtYdHBaaWdoY0dGeWMyVkdiRzloZENoMGFHbHpMbXhoZVc5MWRDNXZjSFJwYjI1ekxuUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpa3BjbVYwZFhKdUlIWnZhV1FnZEdocGN5NWZibTl1VkhKaGJuTnBkR2x2YmloMEtUdDJZWElnWlQxMGFHbHpMbDkwY21GdWMyNDdabTl5S0haaGNpQnBJR2x1SUhRdWIyNVVjbUZ1YzJsMGFXOXVSVzVrS1dVdWIyNUZibVJiYVYwOWRDNXZibFJ5WVc1emFYUnBiMjVGYm1SYmFWMDdabTl5S0drZ2FXNGdkQzUwYnlsbExtbHVaMUJ5YjNCbGNuUnBaWE5iYVYwOUlUQXNkQzVwYzBOc1pXRnVhVzVuSmlZb1pTNWpiR1ZoYmx0cFhUMGhNQ2s3YVdZb2RDNW1jbTl0S1h0MGFHbHpMbU56Y3loMExtWnliMjBwTzNaaGNpQnVQWFJvYVhNdVpXeGxiV1Z1ZEM1dlptWnpaWFJJWldsbmFIUTdiajF1ZFd4c2ZYUm9hWE11Wlc1aFlteGxWSEpoYm5OcGRHbHZiaWgwTG5SdktTeDBhR2x6TG1OemN5aDBMblJ2S1N4MGFHbHpMbWx6VkhKaGJuTnBkR2x2Ym1sdVp6MGhNSDA3ZG1GeUlHUTlYQ0p2Y0dGamFYUjVMRndpSzI4b1lTazdZeTVsYm1GaWJHVlVjbUZ1YzJsMGFXOXVQV1oxYm1OMGFXOXVLQ2w3YVdZb0lYUm9hWE11YVhOVWNtRnVjMmwwYVc5dWFXNW5LWHQyWVhJZ2REMTBhR2x6TG14aGVXOTFkQzV2Y0hScGIyNXpMblJ5WVc1emFYUnBiMjVFZFhKaGRHbHZianQwUFZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCMFAzUXJYQ0p0YzF3aU9uUXNkR2hwY3k1amMzTW9lM1J5WVc1emFYUnBiMjVRY205d1pYSjBlVHBrTEhSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmpwMExIUnlZVzV6YVhScGIyNUVaV3hoZVRwMGFHbHpMbk4wWVdkblpYSkVaV3hoZVh4OE1IMHBMSFJvYVhNdVpXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0dnc2RHaHBjeXdoTVNsOWZTeGpMbTl1ZDJWaWEybDBWSEpoYm5OcGRHbHZia1Z1WkQxbWRXNWpkR2x2YmloMEtYdDBhR2x6TG05dWRISmhibk5wZEdsdmJtVnVaQ2gwS1gwc1l5NXZibTkwY21GdWMybDBhVzl1Wlc1a1BXWjFibU4wYVc5dUtIUXBlM1JvYVhNdWIyNTBjbUZ1YzJsMGFXOXVaVzVrS0hRcGZUdDJZWElnWmoxN1hDSXRkMlZpYTJsMExYUnlZVzV6Wm05eWJWd2lPbHdpZEhKaGJuTm1iM0p0WENKOU8yTXViMjUwY21GdWMybDBhVzl1Wlc1a1BXWjFibU4wYVc5dUtIUXBlMmxtS0hRdWRHRnlaMlYwUFQwOWRHaHBjeTVsYkdWdFpXNTBLWHQyWVhJZ1pUMTBhR2x6TGw5MGNtRnVjMjRzYmoxbVczUXVjSEp2Y0dWeWRIbE9ZVzFsWFh4OGRDNXdjbTl3WlhKMGVVNWhiV1U3YVdZb1pHVnNaWFJsSUdVdWFXNW5VSEp2Y0dWeWRHbGxjMXR1WFN4cEtHVXVhVzVuVUhKdmNHVnlkR2xsY3lrbUpuUm9hWE11WkdsellXSnNaVlJ5WVc1emFYUnBiMjRvS1N4dUlHbHVJR1V1WTJ4bFlXNG1KaWgwYUdsekxtVnNaVzFsYm5RdWMzUjViR1ZiZEM1d2NtOXdaWEowZVU1aGJXVmRQVndpWENJc1pHVnNaWFJsSUdVdVkyeGxZVzViYmwwcExHNGdhVzRnWlM1dmJrVnVaQ2w3ZG1GeUlHODlaUzV2YmtWdVpGdHVYVHR2TG1OaGJHd29kR2hwY3lrc1pHVnNaWFJsSUdVdWIyNUZibVJiYmwxOWRHaHBjeTVsYldsMFJYWmxiblFvWENKMGNtRnVjMmwwYVc5dVJXNWtYQ0lzVzNSb2FYTmRLWDE5TEdNdVpHbHpZV0pzWlZSeVlXNXphWFJwYjI0OVpuVnVZM1JwYjI0b0tYdDBhR2x6TG5KbGJXOTJaVlJ5WVc1emFYUnBiMjVUZEhsc1pYTW9LU3gwYUdsekxtVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaG9MSFJvYVhNc0lURXBMSFJvYVhNdWFYTlVjbUZ1YzJsMGFXOXVhVzVuUFNFeGZTeGpMbDl5WlcxdmRtVlRkSGxzWlhNOVpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWUzMDdabTl5S0haaGNpQnBJR2x1SUhRcFpWdHBYVDFjSWx3aU8zUm9hWE11WTNOektHVXBmVHQyWVhJZ2JEMTdkSEpoYm5OcGRHbHZibEJ5YjNCbGNuUjVPbHdpWENJc2RISmhibk5wZEdsdmJrUjFjbUYwYVc5dU9sd2lYQ0lzZEhKaGJuTnBkR2x2YmtSbGJHRjVPbHdpWENKOU8zSmxkSFZ5YmlCakxuSmxiVzkyWlZSeVlXNXphWFJwYjI1VGRIbHNaWE05Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbU56Y3loc0tYMHNZeTV6ZEdGbloyVnlQV1oxYm1OMGFXOXVLSFFwZTNROWFYTk9ZVTRvZENrL01EcDBMSFJvYVhNdWMzUmhaMmRsY2tSbGJHRjVQWFFyWENKdGMxd2lmU3hqTG5KbGJXOTJaVVZzWlcwOVpuVnVZM1JwYjI0b0tYdDBhR2x6TG1Wc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaDBhR2x6TG1Wc1pXMWxiblFwTEhSb2FYTXVZM056S0h0a2FYTndiR0Y1T2x3aVhDSjlLU3gwYUdsekxtVnRhWFJGZG1WdWRDaGNJbkpsYlc5MlpWd2lMRnQwYUdselhTbDlMR011Y21WdGIzWmxQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSEltSm5CaGNuTmxSbXh2WVhRb2RHaHBjeTVzWVhsdmRYUXViM0IwYVc5dWN5NTBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNHBQeWgwYUdsekxtOXVZMlVvWENKMGNtRnVjMmwwYVc5dVJXNWtYQ0lzWm5WdVkzUnBiMjRvS1h0MGFHbHpMbkpsYlc5MlpVVnNaVzBvS1gwcExIWnZhV1FnZEdocGN5NW9hV1JsS0NrcE9uWnZhV1FnZEdocGN5NXlaVzF2ZG1WRmJHVnRLQ2w5TEdNdWNtVjJaV0ZzUFdaMWJtTjBhVzl1S0NsN1pHVnNaWFJsSUhSb2FYTXVhWE5JYVdSa1pXNHNkR2hwY3k1amMzTW9lMlJwYzNCc1lYazZYQ0pjSW4wcE8zWmhjaUIwUFhSb2FYTXViR0Y1YjNWMExtOXdkR2x2Ym5Nc1pUMTdmU3hwUFhSb2FYTXVaMlYwU0dsa1pWSmxkbVZoYkZSeVlXNXphWFJwYjI1RmJtUlFjbTl3WlhKMGVTaGNJblpwYzJsaWJHVlRkSGxzWlZ3aUtUdGxXMmxkUFhSb2FYTXViMjVTWlhabFlXeFVjbUZ1YzJsMGFXOXVSVzVrTEhSb2FYTXVkSEpoYm5OcGRHbHZiaWg3Wm5KdmJUcDBMbWhwWkdSbGJsTjBlV3hsTEhSdk9uUXVkbWx6YVdKc1pWTjBlV3hsTEdselEyeGxZVzVwYm1jNklUQXNiMjVVY21GdWMybDBhVzl1Ulc1a09tVjlLWDBzWXk1dmJsSmxkbVZoYkZSeVlXNXphWFJwYjI1RmJtUTlablZ1WTNScGIyNG9LWHQwYUdsekxtbHpTR2xrWkdWdWZIeDBhR2x6TG1WdGFYUkZkbVZ1ZENoY0luSmxkbVZoYkZ3aUtYMHNZeTVuWlhSSWFXUmxVbVYyWldGc1ZISmhibk5wZEdsdmJrVnVaRkJ5YjNCbGNuUjVQV1oxYm1OMGFXOXVLSFFwZTNaaGNpQmxQWFJvYVhNdWJHRjViM1YwTG05d2RHbHZibk5iZEYwN2FXWW9aUzV2Y0dGamFYUjVLWEpsZEhWeWJsd2liM0JoWTJsMGVWd2lPMlp2Y2loMllYSWdhU0JwYmlCbEtYSmxkSFZ5YmlCcGZTeGpMbWhwWkdVOVpuVnVZM1JwYjI0b0tYdDBhR2x6TG1selNHbGtaR1Z1UFNFd0xIUm9hWE11WTNOektIdGthWE53YkdGNU9sd2lYQ0o5S1R0MllYSWdkRDEwYUdsekxteGhlVzkxZEM1dmNIUnBiMjV6TEdVOWUzMHNhVDEwYUdsekxtZGxkRWhwWkdWU1pYWmxZV3hVY21GdWMybDBhVzl1Ulc1a1VISnZjR1Z5ZEhrb1hDSm9hV1JrWlc1VGRIbHNaVndpS1R0bFcybGRQWFJvYVhNdWIyNUlhV1JsVkhKaGJuTnBkR2x2YmtWdVpDeDBhR2x6TG5SeVlXNXphWFJwYjI0b2UyWnliMjA2ZEM1MmFYTnBZbXhsVTNSNWJHVXNkRzg2ZEM1b2FXUmtaVzVUZEhsc1pTeHBjME5zWldGdWFXNW5PaUV3TEc5dVZISmhibk5wZEdsdmJrVnVaRHBsZlNsOUxHTXViMjVJYVdSbFZISmhibk5wZEdsdmJrVnVaRDFtZFc1amRHbHZiaWdwZTNSb2FYTXVhWE5JYVdSa1pXNG1KaWgwYUdsekxtTnpjeWg3WkdsemNHeGhlVHBjSW01dmJtVmNJbjBwTEhSb2FYTXVaVzFwZEVWMlpXNTBLRndpYUdsa1pWd2lLU2w5TEdNdVpHVnpkSEp2ZVQxbWRXNWpkR2x2YmlncGUzUm9hWE11WTNOektIdHdiM05wZEdsdmJqcGNJbHdpTEd4bFpuUTZYQ0pjSWl4eWFXZG9kRHBjSWx3aUxIUnZjRHBjSWx3aUxHSnZkSFJ2YlRwY0lsd2lMSFJ5WVc1emFYUnBiMjQ2WENKY0lpeDBjbUZ1YzJadmNtMDZYQ0pjSW4wcGZTeHVmU2tzWm5WdVkzUnBiMjRvZEN4bEtYdGNJblZ6WlNCemRISnBZM1JjSWp0Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmtaV1pwYm1VbUptUmxabWx1WlM1aGJXUS9aR1ZtYVc1bEtGd2liM1YwYkdGNVpYSXZiM1YwYkdGNVpYSmNJaXhiWENKbGRpMWxiV2wwZEdWeUwyVjJMV1Z0YVhSMFpYSmNJaXhjSW1kbGRDMXphWHBsTDJkbGRDMXphWHBsWENJc1hDSm1hWHA2ZVMxMWFTMTFkR2xzY3k5MWRHbHNjMXdpTEZ3aUxpOXBkR1Z0WENKZExHWjFibU4wYVc5dUtHa3NiaXh2TEhNcGUzSmxkSFZ5YmlCbEtIUXNhU3h1TEc4c2N5bDlLVHBjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnYlc5a2RXeGxKaVp0YjJSMWJHVXVaWGh3YjNKMGN6OXRiMlIxYkdVdVpYaHdiM0owY3oxbEtIUXNjbVZ4ZFdseVpTaGNJbVYyTFdWdGFYUjBaWEpjSWlrc2NtVnhkV2x5WlNoY0ltZGxkQzF6YVhwbFhDSXBMSEpsY1hWcGNtVW9YQ0ptYVhwNmVTMTFhUzExZEdsc2Mxd2lLU3h5WlhGMWFYSmxLRndpTGk5cGRHVnRYQ0lwS1RwMExrOTFkR3hoZVdWeVBXVW9kQ3gwTGtWMlJXMXBkSFJsY2l4MExtZGxkRk5wZW1Vc2RDNW1hWHA2ZVZWSlZYUnBiSE1zZEM1UGRYUnNZWGxsY2k1SmRHVnRLWDBvZDJsdVpHOTNMR1oxYm1OMGFXOXVLSFFzWlN4cExHNHNieWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdjeWgwTEdVcGUzWmhjaUJwUFc0dVoyVjBVWFZsY25sRmJHVnRaVzUwS0hRcE8ybG1LQ0ZwS1hKbGRIVnliaUIyYjJsa0tHZ21KbWd1WlhKeWIzSW9YQ0pDWVdRZ1pXeGxiV1Z1ZENCbWIzSWdYQ0lyZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbGMzQmhZMlVyWENJNklGd2lLeWhwZkh4MEtTa3BPM1JvYVhNdVpXeGxiV1Z1ZEQxcExIVW1KaWgwYUdsekxpUmxiR1Z0Wlc1MFBYVW9kR2hwY3k1bGJHVnRaVzUwS1Nrc2RHaHBjeTV2Y0hScGIyNXpQVzR1WlhoMFpXNWtLSHQ5TEhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1WkdWbVlYVnNkSE1wTEhSb2FYTXViM0IwYVc5dUtHVXBPM1poY2lCdlBTc3JaRHQwYUdsekxtVnNaVzFsYm5RdWIzVjBiR0Y1WlhKSFZVbEVQVzhzWmx0dlhUMTBhR2x6TEhSb2FYTXVYMk55WldGMFpTZ3BPM1poY2lCelBYUm9hWE11WDJkbGRFOXdkR2x2YmloY0ltbHVhWFJNWVhsdmRYUmNJaWs3Y3lZbWRHaHBjeTVzWVhsdmRYUW9LWDFtZFc1amRHbHZiaUJ5S0hRcGUyWjFibU4wYVc5dUlHVW9LWHQwTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMXlaWFIxY200Z1pTNXdjbTkwYjNSNWNHVTlUMkpxWldOMExtTnlaV0YwWlNoMExuQnliM1J2ZEhsd1pTa3NaUzV3Y205MGIzUjVjR1V1WTI5dWMzUnlkV04wYjNJOVpTeGxmV1oxYm1OMGFXOXVJR0VvZENsN2FXWW9YQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JSFFwY21WMGRYSnVJSFE3ZG1GeUlHVTlkQzV0WVhSamFDZ3ZLRjVjWEdRcVhGd3VQMXhjWkNvcEtGeGNkeW9wTHlrc2FUMWxKaVpsV3pGZExHNDlaU1ltWlZzeVhUdHBaaWdoYVM1c1pXNW5kR2dwY21WMGRYSnVJREE3YVQxd1lYSnpaVVpzYjJGMEtHa3BPM1poY2lCdlBYQmJibDE4ZkRFN2NtVjBkWEp1SUdrcWIzMTJZWElnYUQxMExtTnZibk52YkdVc2RUMTBMbXBSZFdWeWVTeGpQV1oxYm1OMGFXOXVLQ2w3ZlN4a1BUQXNaajE3ZlR0ekxtNWhiV1Z6Y0dGalpUMWNJbTkxZEd4aGVXVnlYQ0lzY3k1SmRHVnRQVzhzY3k1a1pXWmhkV3gwY3oxN1kyOXVkR0ZwYm1WeVUzUjViR1U2ZTNCdmMybDBhVzl1T2x3aWNtVnNZWFJwZG1WY0luMHNhVzVwZEV4aGVXOTFkRG9oTUN4dmNtbG5hVzVNWldaME9pRXdMRzl5YVdkcGJsUnZjRG9oTUN4eVpYTnBlbVU2SVRBc2NtVnphWHBsUTI5dWRHRnBibVZ5T2lFd0xIUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJqcGNJakF1TkhOY0lpeG9hV1JrWlc1VGRIbHNaVHA3YjNCaFkybDBlVG93TEhSeVlXNXpabTl5YlRwY0luTmpZV3hsS0RBdU1EQXhLVndpZlN4MmFYTnBZbXhsVTNSNWJHVTZlMjl3WVdOcGRIazZNU3gwY21GdWMyWnZjbTA2WENKelkyRnNaU2d4S1Z3aWZYMDdkbUZ5SUd3OWN5NXdjbTkwYjNSNWNHVTdiaTVsZUhSbGJtUW9iQ3hsTG5CeWIzUnZkSGx3WlNrc2JDNXZjSFJwYjI0OVpuVnVZM1JwYjI0b2RDbDdiaTVsZUhSbGJtUW9kR2hwY3k1dmNIUnBiMjV6TEhRcGZTeHNMbDluWlhSUGNIUnBiMjQ5Wm5WdVkzUnBiMjRvZENsN2RtRnlJR1U5ZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVqYjIxd1lYUlBjSFJwYjI1elczUmRPM0psZEhWeWJpQmxKaVoyYjJsa0lEQWhQVDEwYUdsekxtOXdkR2x2Ym5OYlpWMC9kR2hwY3k1dmNIUnBiMjV6VzJWZE9uUm9hWE11YjNCMGFXOXVjMXQwWFgwc2N5NWpiMjF3WVhSUGNIUnBiMjV6UFh0cGJtbDBUR0Y1YjNWME9sd2lhWE5KYm1sMFRHRjViM1YwWENJc2FHOXlhWHB2Ym5SaGJEcGNJbWx6U0c5eWFYcHZiblJoYkZ3aUxHeGhlVzkxZEVsdWMzUmhiblE2WENKcGMweGhlVzkxZEVsdWMzUmhiblJjSWl4dmNtbG5hVzVNWldaME9sd2lhWE5QY21sbmFXNU1aV1owWENJc2IzSnBaMmx1Vkc5d09sd2lhWE5QY21sbmFXNVViM0JjSWl4eVpYTnBlbVU2WENKcGMxSmxjMmw2WlVKdmRXNWtYQ0lzY21WemFYcGxRMjl1ZEdGcGJtVnlPbHdpYVhOU1pYTnBlbWx1WjBOdmJuUmhhVzVsY2x3aWZTeHNMbDlqY21WaGRHVTlablZ1WTNScGIyNG9LWHQwYUdsekxuSmxiRzloWkVsMFpXMXpLQ2tzZEdocGN5NXpkR0Z0Y0hNOVcxMHNkR2hwY3k1emRHRnRjQ2gwYUdsekxtOXdkR2x2Ym5NdWMzUmhiWEFwTEc0dVpYaDBaVzVrS0hSb2FYTXVaV3hsYldWdWRDNXpkSGxzWlN4MGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdGcGJtVnlVM1I1YkdVcE8zWmhjaUIwUFhSb2FYTXVYMmRsZEU5d2RHbHZiaWhjSW5KbGMybDZaVndpS1R0MEppWjBhR2x6TG1KcGJtUlNaWE5wZW1Vb0tYMHNiQzV5Wld4dllXUkpkR1Z0Y3oxbWRXNWpkR2x2YmlncGUzUm9hWE11YVhSbGJYTTlkR2hwY3k1ZmFYUmxiV2w2WlNoMGFHbHpMbVZzWlcxbGJuUXVZMmhwYkdSeVpXNHBmU3hzTGw5cGRHVnRhWHBsUFdaMWJtTjBhVzl1S0hRcGUyWnZjaWgyWVhJZ1pUMTBhR2x6TGw5bWFXeDBaWEpHYVc1a1NYUmxiVVZzWlcxbGJuUnpLSFFwTEdrOWRHaHBjeTVqYjI1emRISjFZM1J2Y2k1SmRHVnRMRzQ5VzEwc2J6MHdPMjg4WlM1c1pXNW5kR2c3YnlzcktYdDJZWElnY3oxbFcyOWRMSEk5Ym1WM0lHa29jeXgwYUdsektUdHVMbkIxYzJnb2NpbDljbVYwZFhKdUlHNTlMR3d1WDJacGJIUmxja1pwYm1SSmRHVnRSV3hsYldWdWRITTlablZ1WTNScGIyNG9kQ2w3Y21WMGRYSnVJRzR1Wm1sc2RHVnlSbWx1WkVWc1pXMWxiblJ6S0hRc2RHaHBjeTV2Y0hScGIyNXpMbWwwWlcxVFpXeGxZM1J2Y2lsOUxHd3VaMlYwU1hSbGJVVnNaVzFsYm5SelBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11YVhSbGJYTXViV0Z3S0daMWJtTjBhVzl1S0hRcGUzSmxkSFZ5YmlCMExtVnNaVzFsYm5SOUtYMHNiQzVzWVhsdmRYUTlablZ1WTNScGIyNG9LWHQwYUdsekxsOXlaWE5sZEV4aGVXOTFkQ2dwTEhSb2FYTXVYMjFoYm1GblpWTjBZVzF3Y3lncE8zWmhjaUIwUFhSb2FYTXVYMmRsZEU5d2RHbHZiaWhjSW14aGVXOTFkRWx1YzNSaGJuUmNJaWtzWlQxMmIybGtJREFoUFQxMFAzUTZJWFJvYVhNdVgybHpUR0Y1YjNWMFNXNXBkR1ZrTzNSb2FYTXViR0Y1YjNWMFNYUmxiWE1vZEdocGN5NXBkR1Z0Y3l4bEtTeDBhR2x6TGw5cGMweGhlVzkxZEVsdWFYUmxaRDBoTUgwc2JDNWZhVzVwZEQxc0xteGhlVzkxZEN4c0xsOXlaWE5sZEV4aGVXOTFkRDFtZFc1amRHbHZiaWdwZTNSb2FYTXVaMlYwVTJsNlpTZ3BmU3hzTG1kbGRGTnBlbVU5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbk5wZW1VOWFTaDBhR2x6TG1Wc1pXMWxiblFwZlN4c0xsOW5aWFJOWldGemRYSmxiV1Z1ZEQxbWRXNWpkR2x2YmloMExHVXBlM1poY2lCdUxHODlkR2hwY3k1dmNIUnBiMjV6VzNSZE8yOC9LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ2UDI0OWRHaHBjeTVsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb2J5azZieUJwYm5OMFlXNWpaVzltSUVoVVRVeEZiR1Z0Wlc1MEppWW9iajF2S1N4MGFHbHpXM1JkUFc0L2FTaHVLVnRsWFRwdktUcDBhR2x6VzNSZFBUQjlMR3d1YkdGNWIzVjBTWFJsYlhNOVpuVnVZM1JwYjI0b2RDeGxLWHQwUFhSb2FYTXVYMmRsZEVsMFpXMXpSbTl5VEdGNWIzVjBLSFFwTEhSb2FYTXVYMnhoZVc5MWRFbDBaVzF6S0hRc1pTa3NkR2hwY3k1ZmNHOXpkRXhoZVc5MWRDZ3BmU3hzTGw5blpYUkpkR1Z0YzBadmNreGhlVzkxZEQxbWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z2RDNW1hV3gwWlhJb1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlYUXVhWE5KWjI1dmNtVmtmU2w5TEd3dVgyeGhlVzkxZEVsMFpXMXpQV1oxYm1OMGFXOXVLSFFzWlNsN2FXWW9kR2hwY3k1ZlpXMXBkRU52YlhCc1pYUmxUMjVKZEdWdGN5aGNJbXhoZVc5MWRGd2lMSFFwTEhRbUpuUXViR1Z1WjNSb0tYdDJZWElnYVQxYlhUdDBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kQ2w3ZG1GeUlHNDlkR2hwY3k1ZloyVjBTWFJsYlV4aGVXOTFkRkJ2YzJsMGFXOXVLSFFwTzI0dWFYUmxiVDEwTEc0dWFYTkpibk4wWVc1MFBXVjhmSFF1YVhOTVlYbHZkWFJKYm5OMFlXNTBMR2t1Y0hWemFDaHVLWDBzZEdocGN5a3NkR2hwY3k1ZmNISnZZMlZ6YzB4aGVXOTFkRkYxWlhWbEtHa3BmWDBzYkM1ZloyVjBTWFJsYlV4aGVXOTFkRkJ2YzJsMGFXOXVQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVlM2c2TUN4NU9qQjlmU3hzTGw5d2NtOWpaWE56VEdGNWIzVjBVWFZsZFdVOVpuVnVZM1JwYjI0b2RDbDdkR2hwY3k1MWNHUmhkR1ZUZEdGbloyVnlLQ2tzZEM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hRc1pTbDdkR2hwY3k1ZmNHOXphWFJwYjI1SmRHVnRLSFF1YVhSbGJTeDBMbmdzZEM1NUxIUXVhWE5KYm5OMFlXNTBMR1VwZlN4MGFHbHpLWDBzYkM1MWNHUmhkR1ZUZEdGbloyVnlQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlIUTlkR2hwY3k1dmNIUnBiMjV6TG5OMFlXZG5aWEk3Y21WMGRYSnVJRzUxYkd3OVBUMTBmSHgyYjJsa0lEQTlQVDEwUDNadmFXUW9kR2hwY3k1emRHRm5aMlZ5UFRBcE9paDBhR2x6TG5OMFlXZG5aWEk5WVNoMEtTeDBhR2x6TG5OMFlXZG5aWElwZlN4c0xsOXdiM05wZEdsdmJrbDBaVzA5Wm5WdVkzUnBiMjRvZEN4bExHa3NiaXh2S1h0dVAzUXVaMjlVYnlobExHa3BPaWgwTG5OMFlXZG5aWElvYnlwMGFHbHpMbk4wWVdkblpYSXBMSFF1Ylc5MlpWUnZLR1VzYVNrcGZTeHNMbDl3YjNOMFRHRjViM1YwUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTV5WlhOcGVtVkRiMjUwWVdsdVpYSW9LWDBzYkM1eVpYTnBlbVZEYjI1MFlXbHVaWEk5Wm5WdVkzUnBiMjRvS1h0MllYSWdkRDEwYUdsekxsOW5aWFJQY0hScGIyNG9YQ0p5WlhOcGVtVkRiMjUwWVdsdVpYSmNJaWs3YVdZb2RDbDdkbUZ5SUdVOWRHaHBjeTVmWjJWMFEyOXVkR0ZwYm1WeVUybDZaU2dwTzJVbUppaDBhR2x6TGw5elpYUkRiMjUwWVdsdVpYSk5aV0Z6ZFhKbEtHVXVkMmxrZEdnc0lUQXBMSFJvYVhNdVgzTmxkRU52Ym5SaGFXNWxjazFsWVhOMWNtVW9aUzVvWldsbmFIUXNJVEVwS1gxOUxHd3VYMmRsZEVOdmJuUmhhVzVsY2xOcGVtVTlZeXhzTGw5elpYUkRiMjUwWVdsdVpYSk5aV0Z6ZFhKbFBXWjFibU4wYVc5dUtIUXNaU2w3YVdZb2RtOXBaQ0F3SVQwOWRDbDdkbUZ5SUdrOWRHaHBjeTV6YVhwbE8ya3VhWE5DYjNKa1pYSkNiM2dtSmloMEt6MWxQMmt1Y0dGa1pHbHVaMHhsWm5RcmFTNXdZV1JrYVc1blVtbG5hSFFyYVM1aWIzSmtaWEpNWldaMFYybGtkR2dyYVM1aWIzSmtaWEpTYVdkb2RGZHBaSFJvT21rdWNHRmtaR2x1WjBKdmRIUnZiU3RwTG5CaFpHUnBibWRVYjNBcmFTNWliM0prWlhKVWIzQlhhV1IwYUN0cExtSnZjbVJsY2tKdmRIUnZiVmRwWkhSb0tTeDBQVTFoZEdndWJXRjRLSFFzTUNrc2RHaHBjeTVsYkdWdFpXNTBMbk4wZVd4bFcyVS9YQ0ozYVdSMGFGd2lPbHdpYUdWcFoyaDBYQ0pkUFhRclhDSndlRndpZlgwc2JDNWZaVzFwZEVOdmJYQnNaWFJsVDI1SmRHVnRjejFtZFc1amRHbHZiaWgwTEdVcGUyWjFibU4wYVc5dUlHa29LWHR2TG1ScGMzQmhkR05vUlhabGJuUW9kQ3RjSWtOdmJYQnNaWFJsWENJc2JuVnNiQ3hiWlYwcGZXWjFibU4wYVc5dUlHNG9LWHR5S3lzc2NqMDljeVltYVNncGZYWmhjaUJ2UFhSb2FYTXNjejFsTG14bGJtZDBhRHRwWmlnaFpYeDhJWE1wY21WMGRYSnVJSFp2YVdRZ2FTZ3BPM1poY2lCeVBUQTdaUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1VwZTJVdWIyNWpaU2gwTEc0cGZTbDlMR3d1WkdsemNHRjBZMmhGZG1WdWREMW1kVzVqZEdsdmJpaDBMR1VzYVNsN2RtRnlJRzQ5WlQ5YlpWMHVZMjl1WTJGMEtHa3BPbWs3YVdZb2RHaHBjeTVsYldsMFJYWmxiblFvZEN4dUtTeDFLV2xtS0hSb2FYTXVKR1ZzWlcxbGJuUTlkR2hwY3k0a1pXeGxiV1Z1ZEh4OGRTaDBhR2x6TG1Wc1pXMWxiblFwTEdVcGUzWmhjaUJ2UFhVdVJYWmxiblFvWlNrN2J5NTBlWEJsUFhRc2RHaHBjeTRrWld4bGJXVnVkQzUwY21sbloyVnlLRzhzYVNsOVpXeHpaU0IwYUdsekxpUmxiR1Z0Wlc1MExuUnlhV2RuWlhJb2RDeHBLWDBzYkM1cFoyNXZjbVU5Wm5WdVkzUnBiMjRvZENsN2RtRnlJR1U5ZEdocGN5NW5aWFJKZEdWdEtIUXBPMlVtSmlobExtbHpTV2R1YjNKbFpEMGhNQ2w5TEd3dWRXNXBaMjV2Y21VOVpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWRHaHBjeTVuWlhSSmRHVnRLSFFwTzJVbUptUmxiR1YwWlNCbExtbHpTV2R1YjNKbFpIMHNiQzV6ZEdGdGNEMW1kVzVqZEdsdmJpaDBLWHQwUFhSb2FYTXVYMlpwYm1Rb2RDa3NkQ1ltS0hSb2FYTXVjM1JoYlhCelBYUm9hWE11YzNSaGJYQnpMbU52Ym1OaGRDaDBLU3gwTG1admNrVmhZMmdvZEdocGN5NXBaMjV2Y21Vc2RHaHBjeWtwZlN4c0xuVnVjM1JoYlhBOVpuVnVZM1JwYjI0b2RDbDdkRDEwYUdsekxsOW1hVzVrS0hRcExIUW1KblF1Wm05eVJXRmphQ2htZFc1amRHbHZiaWgwS1h0dUxuSmxiVzkyWlVaeWIyMG9kR2hwY3k1emRHRnRjSE1zZENrc2RHaHBjeTUxYm1sbmJtOXlaU2gwS1gwc2RHaHBjeWw5TEd3dVgyWnBibVE5Wm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SUhRL0tGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQjBKaVlvZEQxMGFHbHpMbVZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaDBLU2tzZEQxdUxtMWhhMlZCY25KaGVTaDBLU2s2ZG05cFpDQXdmU3hzTGw5dFlXNWhaMlZUZEdGdGNITTlablZ1WTNScGIyNG9LWHQwYUdsekxuTjBZVzF3Y3lZbWRHaHBjeTV6ZEdGdGNITXViR1Z1WjNSb0ppWW9kR2hwY3k1ZloyVjBRbTkxYm1ScGJtZFNaV04wS0Nrc2RHaHBjeTV6ZEdGdGNITXVabTl5UldGamFDaDBhR2x6TGw5dFlXNWhaMlZUZEdGdGNDeDBhR2x6S1NsOUxHd3VYMmRsZEVKdmRXNWthVzVuVW1WamREMW1kVzVqZEdsdmJpZ3BlM1poY2lCMFBYUm9hWE11Wld4bGJXVnVkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTeGxQWFJvYVhNdWMybDZaVHQwYUdsekxsOWliM1Z1WkdsdVoxSmxZM1E5ZTJ4bFpuUTZkQzVzWldaMEsyVXVjR0ZrWkdsdVoweGxablFyWlM1aWIzSmtaWEpNWldaMFYybGtkR2dzZEc5d09uUXVkRzl3SzJVdWNHRmtaR2x1WjFSdmNDdGxMbUp2Y21SbGNsUnZjRmRwWkhSb0xISnBaMmgwT25RdWNtbG5hSFF0S0dVdWNHRmtaR2x1WjFKcFoyaDBLMlV1WW05eVpHVnlVbWxuYUhSWGFXUjBhQ2tzWW05MGRHOXRPblF1WW05MGRHOXRMU2hsTG5CaFpHUnBibWRDYjNSMGIyMHJaUzVpYjNKa1pYSkNiM1IwYjIxWGFXUjBhQ2w5ZlN4c0xsOXRZVzVoWjJWVGRHRnRjRDFqTEd3dVgyZGxkRVZzWlcxbGJuUlBabVp6WlhROVpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWRDNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1N4dVBYUm9hWE11WDJKdmRXNWthVzVuVW1WamRDeHZQV2tvZENrc2N6MTdiR1ZtZERwbExteGxablF0Ymk1c1pXWjBMVzh1YldGeVoybHVUR1ZtZEN4MGIzQTZaUzUwYjNBdGJpNTBiM0F0Ynk1dFlYSm5hVzVVYjNBc2NtbG5hSFE2Ymk1eWFXZG9kQzFsTG5KcFoyaDBMVzh1YldGeVoybHVVbWxuYUhRc1ltOTBkRzl0T200dVltOTBkRzl0TFdVdVltOTBkRzl0TFc4dWJXRnlaMmx1UW05MGRHOXRmVHR5WlhSMWNtNGdjMzBzYkM1b1lXNWtiR1ZGZG1WdWREMXVMbWhoYm1Sc1pVVjJaVzUwTEd3dVltbHVaRkpsYzJsNlpUMW1kVzVqZEdsdmJpZ3BlM1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW5KbGMybDZaVndpTEhSb2FYTXBMSFJvYVhNdWFYTlNaWE5wZW1WQ2IzVnVaRDBoTUgwc2JDNTFibUpwYm1SU1pYTnBlbVU5Wm5WdVkzUnBiMjRvS1h0MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p5WlhOcGVtVmNJaXgwYUdsektTeDBhR2x6TG1selVtVnphWHBsUW05MWJtUTlJVEY5TEd3dWIyNXlaWE5wZW1VOVpuVnVZM1JwYjI0b0tYdDBhR2x6TG5KbGMybDZaU2dwZlN4dUxtUmxZbTkxYm1ObFRXVjBhRzlrS0hNc1hDSnZibkpsYzJsNlpWd2lMREV3TUNrc2JDNXlaWE5wZW1VOVpuVnVZM1JwYjI0b0tYdDBhR2x6TG1selVtVnphWHBsUW05MWJtUW1KblJvYVhNdWJtVmxaSE5TWlhOcGVtVk1ZWGx2ZFhRb0tTWW1kR2hwY3k1c1lYbHZkWFFvS1gwc2JDNXVaV1ZrYzFKbGMybDZaVXhoZVc5MWREMW1kVzVqZEdsdmJpZ3BlM1poY2lCMFBXa29kR2hwY3k1bGJHVnRaVzUwS1N4bFBYUm9hWE11YzJsNlpTWW1kRHR5WlhSMWNtNGdaU1ltZEM1cGJtNWxjbGRwWkhSb0lUMDlkR2hwY3k1emFYcGxMbWx1Ym1WeVYybGtkR2g5TEd3dVlXUmtTWFJsYlhNOVpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWRHaHBjeTVmYVhSbGJXbDZaU2gwS1R0eVpYUjFjbTRnWlM1c1pXNW5kR2dtSmloMGFHbHpMbWwwWlcxelBYUm9hWE11YVhSbGJYTXVZMjl1WTJGMEtHVXBLU3hsZlN4c0xtRndjR1Z1WkdWa1BXWjFibU4wYVc5dUtIUXBlM1poY2lCbFBYUm9hWE11WVdSa1NYUmxiWE1vZENrN1pTNXNaVzVuZEdnbUppaDBhR2x6TG14aGVXOTFkRWwwWlcxektHVXNJVEFwTEhSb2FYTXVjbVYyWldGc0tHVXBLWDBzYkM1d2NtVndaVzVrWldROVpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWRHaHBjeTVmYVhSbGJXbDZaU2gwS1R0cFppaGxMbXhsYm1kMGFDbDdkbUZ5SUdrOWRHaHBjeTVwZEdWdGN5NXpiR2xqWlNnd0tUdDBhR2x6TG1sMFpXMXpQV1V1WTI5dVkyRjBLR2twTEhSb2FYTXVYM0psYzJWMFRHRjViM1YwS0Nrc2RHaHBjeTVmYldGdVlXZGxVM1JoYlhCektDa3NkR2hwY3k1c1lYbHZkWFJKZEdWdGN5aGxMQ0V3S1N4MGFHbHpMbkpsZG1WaGJDaGxLU3gwYUdsekxteGhlVzkxZEVsMFpXMXpLR2twZlgwc2JDNXlaWFpsWVd3OVpuVnVZM1JwYjI0b2RDbDdhV1lvZEdocGN5NWZaVzFwZEVOdmJYQnNaWFJsVDI1SmRHVnRjeWhjSW5KbGRtVmhiRndpTEhRcExIUW1KblF1YkdWdVozUm9LWHQyWVhJZ1pUMTBhR2x6TG5Wd1pHRjBaVk4wWVdkblpYSW9LVHQwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZEN4cEtYdDBMbk4wWVdkblpYSW9hU3BsS1N4MExuSmxkbVZoYkNncGZTbDlmU3hzTG1ocFpHVTlablZ1WTNScGIyNG9kQ2w3YVdZb2RHaHBjeTVmWlcxcGRFTnZiWEJzWlhSbFQyNUpkR1Z0Y3loY0ltaHBaR1ZjSWl4MEtTeDBKaVowTG14bGJtZDBhQ2w3ZG1GeUlHVTlkR2hwY3k1MWNHUmhkR1ZUZEdGbloyVnlLQ2s3ZEM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hRc2FTbDdkQzV6ZEdGbloyVnlLR2txWlNrc2RDNW9hV1JsS0NsOUtYMTlMR3d1Y21WMlpXRnNTWFJsYlVWc1pXMWxiblJ6UFdaMWJtTjBhVzl1S0hRcGUzWmhjaUJsUFhSb2FYTXVaMlYwU1hSbGJYTW9kQ2s3ZEdocGN5NXlaWFpsWVd3b1pTbDlMR3d1YUdsa1pVbDBaVzFGYkdWdFpXNTBjejFtZFc1amRHbHZiaWgwS1h0MllYSWdaVDEwYUdsekxtZGxkRWwwWlcxektIUXBPM1JvYVhNdWFHbGtaU2hsS1gwc2JDNW5aWFJKZEdWdFBXWjFibU4wYVc5dUtIUXBlMlp2Y2loMllYSWdaVDB3TzJVOGRHaHBjeTVwZEdWdGN5NXNaVzVuZEdnN1pTc3JLWHQyWVhJZ2FUMTBhR2x6TG1sMFpXMXpXMlZkTzJsbUtHa3VaV3hsYldWdWREMDlkQ2x5WlhSMWNtNGdhWDE5TEd3dVoyVjBTWFJsYlhNOVpuVnVZM1JwYjI0b2RDbDdkRDF1TG0xaGEyVkJjbkpoZVNoMEtUdDJZWElnWlQxYlhUdHlaWFIxY200Z2RDNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIUXBlM1poY2lCcFBYUm9hWE11WjJWMFNYUmxiU2gwS1R0cEppWmxMbkIxYzJnb2FTbDlMSFJvYVhNcExHVjlMR3d1Y21WdGIzWmxQV1oxYm1OMGFXOXVLSFFwZTNaaGNpQmxQWFJvYVhNdVoyVjBTWFJsYlhNb2RDazdkR2hwY3k1ZlpXMXBkRU52YlhCc1pYUmxUMjVKZEdWdGN5aGNJbkpsYlc5MlpWd2lMR1VwTEdVbUptVXViR1Z1WjNSb0ppWmxMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kQ2w3ZEM1eVpXMXZkbVVvS1N4dUxuSmxiVzkyWlVaeWIyMG9kR2hwY3k1cGRHVnRjeXgwS1gwc2RHaHBjeWw5TEd3dVpHVnpkSEp2ZVQxbWRXNWpkR2x2YmlncGUzWmhjaUIwUFhSb2FYTXVaV3hsYldWdWRDNXpkSGxzWlR0MExtaGxhV2RvZEQxY0lsd2lMSFF1Y0c5emFYUnBiMjQ5WENKY0lpeDBMbmRwWkhSb1BWd2lYQ0lzZEdocGN5NXBkR1Z0Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hRcGUzUXVaR1Z6ZEhKdmVTZ3BmU2tzZEdocGN5NTFibUpwYm1SU1pYTnBlbVVvS1R0MllYSWdaVDEwYUdsekxtVnNaVzFsYm5RdWIzVjBiR0Y1WlhKSFZVbEVPMlJsYkdWMFpTQm1XMlZkTEdSbGJHVjBaU0IwYUdsekxtVnNaVzFsYm5RdWIzVjBiR0Y1WlhKSFZVbEVMSFVtSm5VdWNtVnRiM1psUkdGMFlTaDBhR2x6TG1Wc1pXMWxiblFzZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbGMzQmhZMlVwZlN4ekxtUmhkR0U5Wm5WdVkzUnBiMjRvZENsN2REMXVMbWRsZEZGMVpYSjVSV3hsYldWdWRDaDBLVHQyWVhJZ1pUMTBKaVowTG05MWRHeGhlV1Z5UjFWSlJEdHlaWFIxY200Z1pTWW1abHRsWFgwc2N5NWpjbVZoZEdVOVpuVnVZM1JwYjI0b2RDeGxLWHQyWVhJZ2FUMXlLSE1wTzNKbGRIVnliaUJwTG1SbFptRjFiSFJ6UFc0dVpYaDBaVzVrS0h0OUxITXVaR1ZtWVhWc2RITXBMRzR1WlhoMFpXNWtLR2t1WkdWbVlYVnNkSE1zWlNrc2FTNWpiMjF3WVhSUGNIUnBiMjV6UFc0dVpYaDBaVzVrS0h0OUxITXVZMjl0Y0dGMFQzQjBhVzl1Y3lrc2FTNXVZVzFsYzNCaFkyVTlkQ3hwTG1SaGRHRTljeTVrWVhSaExHa3VTWFJsYlQxeUtHOHBMRzR1YUhSdGJFbHVhWFFvYVN4MEtTeDFKaVoxTG1KeWFXUm5aWFFtSm5VdVluSnBaR2RsZENoMExHa3BMR2w5TzNaaGNpQndQWHR0Y3pveExITTZNV1V6ZlR0eVpYUjFjbTRnY3k1SmRHVnRQVzhzYzMwcExHWjFibU4wYVc5dUtIUXNaU2w3WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pHVm1hVzVsSmlaa1pXWnBibVV1WVcxa1AyUmxabWx1WlNoY0luQmhZMnRsY25rdmFuTXZjbVZqZEZ3aUxHVXBPbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ0YjJSMWJHVW1KbTF2WkhWc1pTNWxlSEJ2Y25SelAyMXZaSFZzWlM1bGVIQnZjblJ6UFdVb0tUb29kQzVRWVdOclpYSjVQWFF1VUdGamEyVnllWHg4ZTMwc2RDNVFZV05yWlhKNUxsSmxZM1E5WlNncEtYMG9kMmx1Wkc5M0xHWjFibU4wYVc5dUtDbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2RDaGxLWHRtYjNJb2RtRnlJR2tnYVc0Z2RDNWtaV1poZFd4MGN5bDBhR2x6VzJsZFBYUXVaR1ZtWVhWc2RITmJhVjA3Wm05eUtHa2dhVzRnWlNsMGFHbHpXMmxkUFdWYmFWMTlkQzVrWldaaGRXeDBjejE3ZURvd0xIazZNQ3gzYVdSMGFEb3dMR2hsYVdkb2REb3dmVHQyWVhJZ1pUMTBMbkJ5YjNSdmRIbHdaVHR5WlhSMWNtNGdaUzVqYjI1MFlXbHVjejFtZFc1amRHbHZiaWgwS1h0MllYSWdaVDEwTG5kcFpIUm9mSHd3TEdrOWRDNW9aV2xuYUhSOGZEQTdjbVYwZFhKdUlIUm9hWE11ZUR3OWRDNTRKaVowYUdsekxuazhQWFF1ZVNZbWRHaHBjeTU0SzNSb2FYTXVkMmxrZEdnK1BYUXVlQ3RsSmlaMGFHbHpMbmtyZEdocGN5NW9aV2xuYUhRK1BYUXVlU3RwZlN4bExtOTJaWEpzWVhCelBXWjFibU4wYVc5dUtIUXBlM1poY2lCbFBYUm9hWE11ZUN0MGFHbHpMbmRwWkhSb0xHazlkR2hwY3k1NUszUm9hWE11YUdWcFoyaDBMRzQ5ZEM1NEszUXVkMmxrZEdnc2J6MTBMbmtyZEM1b1pXbG5hSFE3Y21WMGRYSnVJSFJvYVhNdWVEeHVKaVpsUG5RdWVDWW1kR2hwY3k1NVBHOG1KbWsrZEM1NWZTeGxMbWRsZEUxaGVHbHRZV3hHY21WbFVtVmpkSE05Wm5WdVkzUnBiMjRvWlNsN2FXWW9JWFJvYVhNdWIzWmxjbXhoY0hNb1pTa3BjbVYwZFhKdUlURTdkbUZ5SUdrc2JqMWJYU3h2UFhSb2FYTXVlQ3QwYUdsekxuZHBaSFJvTEhNOWRHaHBjeTU1SzNSb2FYTXVhR1ZwWjJoMExISTlaUzU0SzJVdWQybGtkR2dzWVQxbExua3JaUzVvWldsbmFIUTdjbVYwZFhKdUlIUm9hWE11ZVR4bExua21KaWhwUFc1bGR5QjBLSHQ0T25Sb2FYTXVlQ3g1T25Sb2FYTXVlU3gzYVdSMGFEcDBhR2x6TG5kcFpIUm9MR2hsYVdkb2REcGxMbmt0ZEdocGN5NTVmU2tzYmk1d2RYTm9LR2twS1N4dlBuSW1KaWhwUFc1bGR5QjBLSHQ0T25Jc2VUcDBhR2x6TG5rc2QybGtkR2c2YnkxeUxHaGxhV2RvZERwMGFHbHpMbWhsYVdkb2RIMHBMRzR1Y0hWemFDaHBLU2tzY3o1aEppWW9hVDF1WlhjZ2RDaDdlRHAwYUdsekxuZ3NlVHBoTEhkcFpIUm9PblJvYVhNdWQybGtkR2dzYUdWcFoyaDBPbk10WVgwcExHNHVjSFZ6YUNocEtTa3NkR2hwY3k1NFBHVXVlQ1ltS0drOWJtVjNJSFFvZTNnNmRHaHBjeTU0TEhrNmRHaHBjeTU1TEhkcFpIUm9PbVV1ZUMxMGFHbHpMbmdzYUdWcFoyaDBPblJvYVhNdWFHVnBaMmgwZlNrc2JpNXdkWE5vS0drcEtTeHVmU3hsTG1OaGJrWnBkRDFtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnZEdocGN5NTNhV1IwYUQ0OWRDNTNhV1IwYUNZbWRHaHBjeTVvWldsbmFIUStQWFF1YUdWcFoyaDBmU3gwZlNrc1puVnVZM1JwYjI0b2RDeGxLWHRwWmloY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmtaV1pwYm1VbUptUmxabWx1WlM1aGJXUXBaR1ZtYVc1bEtGd2ljR0ZqYTJWeWVTOXFjeTl3WVdOclpYSmNJaXhiWENJdUwzSmxZM1JjSWwwc1pTazdaV3h6WlNCcFppaGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdiVzlrZFd4bEppWnRiMlIxYkdVdVpYaHdiM0owY3lsdGIyUjFiR1V1Wlhod2IzSjBjejFsS0hKbGNYVnBjbVVvWENJdUwzSmxZM1JjSWlrcE8yVnNjMlY3ZG1GeUlHazlkQzVRWVdOclpYSjVQWFF1VUdGamEyVnllWHg4ZTMwN2FTNVFZV05yWlhJOVpTaHBMbEpsWTNRcGZYMG9kMmx1Wkc5M0xHWjFibU4wYVc5dUtIUXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHVW9kQ3hsTEdrcGUzUm9hWE11ZDJsa2RHZzlkSHg4TUN4MGFHbHpMbWhsYVdkb2REMWxmSHd3TEhSb2FYTXVjMjl5ZEVScGNtVmpkR2x2YmoxcGZIeGNJbVJ2ZDI1M1lYSmtUR1ZtZEZSdlVtbG5hSFJjSWl4MGFHbHpMbkpsYzJWMEtDbDlkbUZ5SUdrOVpTNXdjbTkwYjNSNWNHVTdhUzV5WlhObGREMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWMzQmhZMlZ6UFZ0ZE8zWmhjaUJsUFc1bGR5QjBLSHQ0T2pBc2VUb3dMSGRwWkhSb09uUm9hWE11ZDJsa2RHZ3NhR1ZwWjJoME9uUm9hWE11YUdWcFoyaDBmU2s3ZEdocGN5NXpjR0ZqWlhNdWNIVnphQ2hsS1N4MGFHbHpMbk52Y25SbGNqMXVXM1JvYVhNdWMyOXlkRVJwY21WamRHbHZibDE4Zkc0dVpHOTNibmRoY21STVpXWjBWRzlTYVdkb2RIMHNhUzV3WVdOclBXWjFibU4wYVc5dUtIUXBlMlp2Y2loMllYSWdaVDB3TzJVOGRHaHBjeTV6Y0dGalpYTXViR1Z1WjNSb08yVXJLeWw3ZG1GeUlHazlkR2hwY3k1emNHRmpaWE5iWlYwN2FXWW9hUzVqWVc1R2FYUW9kQ2twZTNSb2FYTXVjR3hoWTJWSmJsTndZV05sS0hRc2FTazdZbkpsWVd0OWZYMHNhUzVqYjJ4MWJXNVFZV05yUFdaMWJtTjBhVzl1S0hRcGUyWnZjaWgyWVhJZ1pUMHdPMlU4ZEdocGN5NXpjR0ZqWlhNdWJHVnVaM1JvTzJVckt5bDdkbUZ5SUdrOWRHaHBjeTV6Y0dGalpYTmJaVjBzYmoxcExuZzhQWFF1ZUNZbWFTNTRLMmt1ZDJsa2RHZytQWFF1ZUN0MExuZHBaSFJvSmlacExtaGxhV2RvZEQ0OWRDNW9aV2xuYUhRdExqQXhPMmxtS0c0cGUzUXVlVDFwTG5rc2RHaHBjeTV3YkdGalpXUW9kQ2s3WW5KbFlXdDlmWDBzYVM1eWIzZFFZV05yUFdaMWJtTjBhVzl1S0hRcGUyWnZjaWgyWVhJZ1pUMHdPMlU4ZEdocGN5NXpjR0ZqWlhNdWJHVnVaM1JvTzJVckt5bDdkbUZ5SUdrOWRHaHBjeTV6Y0dGalpYTmJaVjBzYmoxcExuazhQWFF1ZVNZbWFTNTVLMmt1YUdWcFoyaDBQajEwTG5rcmRDNW9aV2xuYUhRbUpta3VkMmxrZEdnK1BYUXVkMmxrZEdndExqQXhPMmxtS0c0cGUzUXVlRDFwTG5nc2RHaHBjeTV3YkdGalpXUW9kQ2s3WW5KbFlXdDlmWDBzYVM1d2JHRmpaVWx1VTNCaFkyVTlablZ1WTNScGIyNG9kQ3hsS1h0MExuZzlaUzU0TEhRdWVUMWxMbmtzZEdocGN5NXdiR0ZqWldRb2RDbDlMR2t1Y0d4aFkyVmtQV1oxYm1OMGFXOXVLSFFwZTJadmNpaDJZWElnWlQxYlhTeHBQVEE3YVR4MGFHbHpMbk53WVdObGN5NXNaVzVuZEdnN2FTc3JLWHQyWVhJZ2JqMTBhR2x6TG5Od1lXTmxjMXRwWFN4dlBXNHVaMlYwVFdGNGFXMWhiRVp5WldWU1pXTjBjeWgwS1R0dlAyVXVjSFZ6YUM1aGNIQnNlU2hsTEc4cE9tVXVjSFZ6YUNodUtYMTBhR2x6TG5Od1lXTmxjejFsTEhSb2FYTXViV1Z5WjJWVGIzSjBVM0JoWTJWektDbDlMR2t1YldWeVoyVlRiM0owVTNCaFkyVnpQV1oxYm1OMGFXOXVLQ2w3WlM1dFpYSm5aVkpsWTNSektIUm9hWE11YzNCaFkyVnpLU3gwYUdsekxuTndZV05sY3k1emIzSjBLSFJvYVhNdWMyOXlkR1Z5S1gwc2FTNWhaR1JUY0dGalpUMW1kVzVqZEdsdmJpaDBLWHQwYUdsekxuTndZV05sY3k1d2RYTm9LSFFwTEhSb2FYTXViV1Z5WjJWVGIzSjBVM0JoWTJWektDbDlMR1V1YldWeVoyVlNaV04wY3oxbWRXNWpkR2x2YmloMEtYdDJZWElnWlQwd0xHazlkRnRsWFR0ME9tWnZjaWc3YVRzcGUyWnZjaWgyWVhJZ2JqMHdMRzg5ZEZ0bEsyNWRPMjg3S1h0cFppaHZQVDFwS1c0ckt6dGxiSE5sZTJsbUtHOHVZMjl1ZEdGcGJuTW9hU2twZTNRdWMzQnNhV05sS0dVc01Ta3NhVDEwVzJWZE8yTnZiblJwYm5WbElIUjlhUzVqYjI1MFlXbHVjeWh2S1Q5MExuTndiR2xqWlNobEsyNHNNU2s2YmlzcmZXODlkRnRsSzI1ZGZXVXJLeXhwUFhSYlpWMTljbVYwZFhKdUlIUjlPM1poY2lCdVBYdGtiM2R1ZDJGeVpFeGxablJVYjFKcFoyaDBPbVoxYm1OMGFXOXVLSFFzWlNsN2NtVjBkWEp1SUhRdWVTMWxMbmw4ZkhRdWVDMWxMbmg5TEhKcFoyaDBkMkZ5WkZSdmNGUnZRbTkwZEc5dE9tWjFibU4wYVc5dUtIUXNaU2w3Y21WMGRYSnVJSFF1ZUMxbExuaDhmSFF1ZVMxbExubDlmVHR5WlhSMWNtNGdaWDBwTEdaMWJtTjBhVzl1S0hRc1pTbDdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWkdWbWFXNWxKaVprWldacGJtVXVZVzFrUDJSbFptbHVaU2hjSW5CaFkydGxjbmt2YW5NdmFYUmxiVndpTEZ0Y0ltOTFkR3hoZVdWeUwyOTFkR3hoZVdWeVhDSXNYQ0l1TDNKbFkzUmNJbDBzWlNrNlhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHMXZaSFZzWlNZbWJXOWtkV3hsTG1WNGNHOXlkSE0vYlc5a2RXeGxMbVY0Y0c5eWRITTlaU2h5WlhGMWFYSmxLRndpYjNWMGJHRjVaWEpjSWlrc2NtVnhkV2x5WlNoY0lpNHZjbVZqZEZ3aUtTazZkQzVRWVdOclpYSjVMa2wwWlcwOVpTaDBMazkxZEd4aGVXVnlMSFF1VUdGamEyVnllUzVTWldOMEtYMG9kMmx1Wkc5M0xHWjFibU4wYVc5dUtIUXNaU2w3WENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUdrOVpHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG5OMGVXeGxMRzQ5WENKemRISnBibWRjSWowOWRIbHdaVzltSUdrdWRISmhibk5tYjNKdFAxd2lkSEpoYm5ObWIzSnRYQ0k2WENKWFpXSnJhWFJVY21GdWMyWnZjbTFjSWl4dlBXWjFibU4wYVc5dUtDbDdkQzVKZEdWdExtRndjR3g1S0hSb2FYTXNZWEpuZFcxbGJuUnpLWDBzY3oxdkxuQnliM1J2ZEhsd1pUMVBZbXBsWTNRdVkzSmxZWFJsS0hRdVNYUmxiUzV3Y205MGIzUjVjR1VwTEhJOWN5NWZZM0psWVhSbE8zTXVYMk55WldGMFpUMW1kVzVqZEdsdmJpZ3BlM0l1WTJGc2JDaDBhR2x6S1N4MGFHbHpMbkpsWTNROWJtVjNJR1Y5TzNaaGNpQmhQWE11Ylc5MlpWUnZPM0psZEhWeWJpQnpMbTF2ZG1WVWJ6MW1kVzVqZEdsdmJpaDBMR1VwZTNaaGNpQnBQVTFoZEdndVlXSnpLSFJvYVhNdWNHOXphWFJwYjI0dWVDMTBLU3h1UFUxaGRHZ3VZV0p6S0hSb2FYTXVjRzl6YVhScGIyNHVlUzFsS1N4dlBYUm9hWE11YkdGNWIzVjBMbVJ5WVdkSmRHVnRRMjkxYm5RbUppRjBhR2x6TG1selVHeGhZMmx1WnlZbUlYUm9hWE11YVhOVWNtRnVjMmwwYVc5dWFXNW5KaVl4UG1rbUpqRStianR5WlhSMWNtNGdiejkyYjJsa0lIUm9hWE11WjI5VWJ5aDBMR1VwT25admFXUWdZUzVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lsOUxITXVaVzVoWW14bFVHeGhZMmx1WnoxbWRXNWpkR2x2YmlncGUzUm9hWE11Y21WdGIzWmxWSEpoYm5OcGRHbHZibE4wZVd4bGN5Z3BMSFJvYVhNdWFYTlVjbUZ1YzJsMGFXOXVhVzVuSmladUppWW9kR2hwY3k1bGJHVnRaVzUwTG5OMGVXeGxXMjVkUFZ3aWJtOXVaVndpS1N4MGFHbHpMbWx6VkhKaGJuTnBkR2x2Ym1sdVp6MGhNU3gwYUdsekxtZGxkRk5wZW1Vb0tTeDBhR2x6TG14aGVXOTFkQzVmYzJWMFVtVmpkRk5wZW1Vb2RHaHBjeTVsYkdWdFpXNTBMSFJvYVhNdWNtVmpkQ2tzZEdocGN5NXBjMUJzWVdOcGJtYzlJVEI5TEhNdVpHbHpZV0pzWlZCc1lXTnBibWM5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbWx6VUd4aFkybHVaejBoTVgwc2N5NXlaVzF2ZG1WRmJHVnRQV1oxYm1OMGFXOXVLQ2w3ZEdocGN5NWxiR1Z0Wlc1MExuQmhjbVZ1ZEU1dlpHVXVjbVZ0YjNabFEyaHBiR1FvZEdocGN5NWxiR1Z0Wlc1MEtTeDBhR2x6TG14aGVXOTFkQzV3WVdOclpYSXVZV1JrVTNCaFkyVW9kR2hwY3k1eVpXTjBLU3gwYUdsekxtVnRhWFJGZG1WdWRDaGNJbkpsYlc5MlpWd2lMRnQwYUdselhTbDlMSE11YzJodmQwUnliM0JRYkdGalpXaHZiR1JsY2oxbWRXNWpkR2x2YmlncGUzWmhjaUIwUFhSb2FYTXVaSEp2Y0ZCc1lXTmxhRzlzWkdWeU8zUjhmQ2gwUFhSb2FYTXVaSEp2Y0ZCc1lXTmxhRzlzWkdWeVBXUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKa2FYWmNJaWtzZEM1amJHRnpjMDVoYldVOVhDSndZV05yWlhKNUxXUnliM0F0Y0d4aFkyVm9iMnhrWlhKY0lpeDBMbk4wZVd4bExuQnZjMmwwYVc5dVBWd2lZV0p6YjJ4MWRHVmNJaWtzZEM1emRIbHNaUzUzYVdSMGFEMTBhR2x6TG5OcGVtVXVkMmxrZEdnclhDSndlRndpTEhRdWMzUjViR1V1YUdWcFoyaDBQWFJvYVhNdWMybDZaUzVvWldsbmFIUXJYQ0p3ZUZ3aUxIUm9hWE11Y0c5emFYUnBiMjVFY205d1VHeGhZMlZvYjJ4a1pYSW9LU3gwYUdsekxteGhlVzkxZEM1bGJHVnRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tIUXBmU3h6TG5CdmMybDBhVzl1UkhKdmNGQnNZV05sYUc5c1pHVnlQV1oxYm1OMGFXOXVLQ2w3ZEdocGN5NWtjbTl3VUd4aFkyVm9iMnhrWlhJdWMzUjViR1ZiYmwwOVhDSjBjbUZ1YzJ4aGRHVW9YQ0lyZEdocGN5NXlaV04wTG5nclhDSndlQ3dnWENJcmRHaHBjeTV5WldOMExua3JYQ0p3ZUNsY0luMHNjeTVvYVdSbFJISnZjRkJzWVdObGFHOXNaR1Z5UFdaMWJtTjBhVzl1S0NsN2RtRnlJSFE5ZEdocGN5NWtjbTl3VUd4aFkyVm9iMnhrWlhJdWNHRnlaVzUwVG05a1pUdDBKaVowTG5KbGJXOTJaVU5vYVd4a0tIUm9hWE11WkhKdmNGQnNZV05sYUc5c1pHVnlLWDBzYjMwcExHWjFibU4wYVc5dUtIUXNaU2w3WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pHVm1hVzVsSmlaa1pXWnBibVV1WVcxa1AyUmxabWx1WlNoYlhDSm5aWFF0YzJsNlpTOW5aWFF0YzJsNlpWd2lMRndpYjNWMGJHRjVaWEl2YjNWMGJHRjVaWEpjSWl4Y0luQmhZMnRsY25rdmFuTXZjbVZqZEZ3aUxGd2ljR0ZqYTJWeWVTOXFjeTl3WVdOclpYSmNJaXhjSW5CaFkydGxjbmt2YW5NdmFYUmxiVndpWFN4bEtUcGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdiVzlrZFd4bEppWnRiMlIxYkdVdVpYaHdiM0owY3o5dGIyUjFiR1V1Wlhod2IzSjBjejFsS0hKbGNYVnBjbVVvWENKblpYUXRjMmw2WlZ3aUtTeHlaWEYxYVhKbEtGd2liM1YwYkdGNVpYSmNJaWtzY21WeGRXbHlaU2hjSWk0dmNtVmpkRndpS1N4eVpYRjFhWEpsS0Z3aUxpOXdZV05yWlhKY0lpa3NjbVZ4ZFdseVpTaGNJaTR2YVhSbGJWd2lLU2s2ZEM1UVlXTnJaWEo1UFdVb2RDNW5aWFJUYVhwbExIUXVUM1YwYkdGNVpYSXNkQzVRWVdOclpYSjVMbEpsWTNRc2RDNVFZV05yWlhKNUxsQmhZMnRsY2l4MExsQmhZMnRsY25rdVNYUmxiU2w5S0hkcGJtUnZkeXhtZFc1amRHbHZiaWgwTEdVc2FTeHVMRzhwZTF3aWRYTmxJSE4wY21samRGd2lPMloxYm1OMGFXOXVJSE1vZEN4bEtYdHlaWFIxY200Z2RDNXdiM05wZEdsdmJpNTVMV1V1Y0c5emFYUnBiMjR1ZVh4OGRDNXdiM05wZEdsdmJpNTRMV1V1Y0c5emFYUnBiMjR1ZUgxbWRXNWpkR2x2YmlCeUtIUXNaU2w3Y21WMGRYSnVJSFF1Y0c5emFYUnBiMjR1ZUMxbExuQnZjMmwwYVc5dUxuaDhmSFF1Y0c5emFYUnBiMjR1ZVMxbExuQnZjMmwwYVc5dUxubDlablZ1WTNScGIyNGdZU2gwTEdVcGUzWmhjaUJwUFdVdWVDMTBMbmdzYmoxbExua3RkQzU1TzNKbGRIVnliaUJOWVhSb0xuTnhjblFvYVNwcEsyNHFiaWw5YVM1d2NtOTBiM1I1Y0dVdVkyRnVSbWwwUFdaMWJtTjBhVzl1S0hRcGUzSmxkSFZ5YmlCMGFHbHpMbmRwWkhSb1BqMTBMbmRwWkhSb0xURW1KblJvYVhNdWFHVnBaMmgwUGoxMExtaGxhV2RvZEMweGZUdDJZWElnYUQxbExtTnlaV0YwWlNoY0luQmhZMnRsY25sY0lpazdhQzVKZEdWdFBXODdkbUZ5SUhVOWFDNXdjbTkwYjNSNWNHVTdkUzVmWTNKbFlYUmxQV1oxYm1OMGFXOXVLQ2w3WlM1d2NtOTBiM1I1Y0dVdVgyTnlaV0YwWlM1allXeHNLSFJvYVhNcExIUm9hWE11Y0dGamEyVnlQVzVsZHlCdUxIUm9hWE11YzJocFpuUlFZV05yWlhJOWJtVjNJRzRzZEdocGN5NXBjMFZ1WVdKc1pXUTlJVEFzZEdocGN5NWtjbUZuU1hSbGJVTnZkVzUwUFRBN2RtRnlJSFE5ZEdocGN6dDBhR2x6TG1oaGJtUnNaVVJ5WVdkbllXSnBiR3g1UFh0a2NtRm5VM1JoY25RNlpuVnVZM1JwYjI0b0tYdDBMbWwwWlcxRWNtRm5VM1JoY25Rb2RHaHBjeTVsYkdWdFpXNTBLWDBzWkhKaFowMXZkbVU2Wm5WdVkzUnBiMjRvS1h0MExtbDBaVzFFY21GblRXOTJaU2gwYUdsekxtVnNaVzFsYm5Rc2RHaHBjeTV3YjNOcGRHbHZiaTU0TEhSb2FYTXVjRzl6YVhScGIyNHVlU2w5TEdSeVlXZEZibVE2Wm5WdVkzUnBiMjRvS1h0MExtbDBaVzFFY21GblJXNWtLSFJvYVhNdVpXeGxiV1Z1ZENsOWZTeDBhR2x6TG1oaGJtUnNaVlZKUkhKaFoyZGhZbXhsUFh0emRHRnlkRHBtZFc1amRHbHZiaWhsTEdrcGUya21KblF1YVhSbGJVUnlZV2RUZEdGeWRDaGxMbU4xY25KbGJuUlVZWEpuWlhRcGZTeGtjbUZuT21aMWJtTjBhVzl1S0dVc2FTbDdhU1ltZEM1cGRHVnRSSEpoWjAxdmRtVW9aUzVqZFhKeVpXNTBWR0Z5WjJWMExHa3VjRzl6YVhScGIyNHViR1ZtZEN4cExuQnZjMmwwYVc5dUxuUnZjQ2w5TEhOMGIzQTZablZ1WTNScGIyNG9aU3hwS1h0cEppWjBMbWwwWlcxRWNtRm5SVzVrS0dVdVkzVnljbVZ1ZEZSaGNtZGxkQ2w5Zlgwc2RTNWZjbVZ6WlhSTVlYbHZkWFE5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbWRsZEZOcGVtVW9LU3gwYUdsekxsOW5aWFJOWldGemRYSmxiV1Z1ZEhNb0tUdDJZWElnZEN4bExHazdkR2hwY3k1ZloyVjBUM0IwYVc5dUtGd2lhRzl5YVhwdmJuUmhiRndpS1Q4b2REMHhMekFzWlQxMGFHbHpMbk5wZW1VdWFXNXVaWEpJWldsbmFIUXJkR2hwY3k1bmRYUjBaWElzYVQxY0luSnBaMmgwZDJGeVpGUnZjRlJ2UW05MGRHOXRYQ0lwT2loMFBYUm9hWE11YzJsNlpTNXBibTVsY2xkcFpIUm9LM1JvYVhNdVozVjBkR1Z5TEdVOU1TOHdMR2s5WENKa2IzZHVkMkZ5WkV4bFpuUlViMUpwWjJoMFhDSXBMSFJvYVhNdWNHRmphMlZ5TG5kcFpIUm9QWFJvYVhNdWMyaHBablJRWVdOclpYSXVkMmxrZEdnOWRDeDBhR2x6TG5CaFkydGxjaTVvWldsbmFIUTlkR2hwY3k1emFHbG1kRkJoWTJ0bGNpNW9aV2xuYUhROVpTeDBhR2x6TG5CaFkydGxjaTV6YjNKMFJHbHlaV04wYVc5dVBYUm9hWE11YzJocFpuUlFZV05yWlhJdWMyOXlkRVJwY21WamRHbHZiajFwTEhSb2FYTXVjR0ZqYTJWeUxuSmxjMlYwS0Nrc2RHaHBjeTV0WVhoWlBUQXNkR2hwY3k1dFlYaFlQVEI5TEhVdVgyZGxkRTFsWVhOMWNtVnRaVzUwY3oxbWRXNWpkR2x2YmlncGUzUm9hWE11WDJkbGRFMWxZWE4xY21WdFpXNTBLRndpWTI5c2RXMXVWMmxrZEdoY0lpeGNJbmRwWkhSb1hDSXBMSFJvYVhNdVgyZGxkRTFsWVhOMWNtVnRaVzUwS0Z3aWNtOTNTR1ZwWjJoMFhDSXNYQ0pvWldsbmFIUmNJaWtzZEdocGN5NWZaMlYwVFdWaGMzVnlaVzFsYm5Rb1hDSm5kWFIwWlhKY0lpeGNJbmRwWkhSb1hDSXBmU3gxTGw5blpYUkpkR1Z0VEdGNWIzVjBVRzl6YVhScGIyNDlablZ1WTNScGIyNG9kQ2w3YVdZb2RHaHBjeTVmYzJWMFVtVmpkRk5wZW1Vb2RDNWxiR1Z0Wlc1MExIUXVjbVZqZENrc2RHaHBjeTVwYzFOb2FXWjBhVzVuZkh4MGFHbHpMbVJ5WVdkSmRHVnRRMjkxYm5RK01DbDdkbUZ5SUdVOWRHaHBjeTVmWjJWMFVHRmphMDFsZEdodlpDZ3BPM1JvYVhNdWNHRmphMlZ5VzJWZEtIUXVjbVZqZENsOVpXeHpaU0IwYUdsekxuQmhZMnRsY2k1d1lXTnJLSFF1Y21WamRDazdjbVYwZFhKdUlIUm9hWE11WDNObGRFMWhlRmhaS0hRdWNtVmpkQ2tzZEM1eVpXTjBmU3gxTG5Ob2FXWjBUR0Y1YjNWMFBXWjFibU4wYVc5dUtDbDdkR2hwY3k1cGMxTm9hV1owYVc1blBTRXdMSFJvYVhNdWJHRjViM1YwS0Nrc1pHVnNaWFJsSUhSb2FYTXVhWE5UYUdsbWRHbHVaMzBzZFM1ZloyVjBVR0ZqYTAxbGRHaHZaRDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxsOW5aWFJQY0hScGIyNG9YQ0pvYjNKcGVtOXVkR0ZzWENJcFAxd2ljbTkzVUdGamExd2lPbHdpWTI5c2RXMXVVR0ZqYTF3aWZTeDFMbDl6WlhSTllYaFlXVDFtZFc1amRHbHZiaWgwS1h0MGFHbHpMbTFoZUZnOVRXRjBhQzV0WVhnb2RDNTRLM1F1ZDJsa2RHZ3NkR2hwY3k1dFlYaFlLU3gwYUdsekxtMWhlRms5VFdGMGFDNXRZWGdvZEM1NUszUXVhR1ZwWjJoMExIUm9hWE11YldGNFdTbDlMSFV1WDNObGRGSmxZM1JUYVhwbFBXWjFibU4wYVc5dUtHVXNhU2w3ZG1GeUlHNDlkQ2hsS1N4dlBXNHViM1YwWlhKWGFXUjBhQ3h6UFc0dWIzVjBaWEpJWldsbmFIUTdLRzk4ZkhNcEppWW9iejEwYUdsekxsOWhjSEJzZVVkeWFXUkhkWFIwWlhJb2J5eDBhR2x6TG1OdmJIVnRibGRwWkhSb0tTeHpQWFJvYVhNdVgyRndjR3g1UjNKcFpFZDFkSFJsY2loekxIUm9hWE11Y205M1NHVnBaMmgwS1Nrc2FTNTNhV1IwYUQxTllYUm9MbTFwYmlodkxIUm9hWE11Y0dGamEyVnlMbmRwWkhSb0tTeHBMbWhsYVdkb2REMU5ZWFJvTG0xcGJpaHpMSFJvYVhNdWNHRmphMlZ5TG1obGFXZG9kQ2w5TEhVdVgyRndjR3g1UjNKcFpFZDFkSFJsY2oxbWRXNWpkR2x2YmloMExHVXBlMmxtS0NGbEtYSmxkSFZ5YmlCMEszUm9hWE11WjNWMGRHVnlPMlVyUFhSb2FYTXVaM1YwZEdWeU8zWmhjaUJwUFhRbFpTeHVQV2ttSmpFK2FUOWNJbkp2ZFc1a1hDSTZYQ0pqWldsc1hDSTdjbVYwZFhKdUlIUTlUV0YwYUZ0dVhTaDBMMlVwS21WOUxIVXVYMmRsZEVOdmJuUmhhVzVsY2xOcGVtVTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1ZloyVjBUM0IwYVc5dUtGd2lhRzl5YVhwdmJuUmhiRndpS1Q5N2QybGtkR2c2ZEdocGN5NXRZWGhZTFhSb2FYTXVaM1YwZEdWeWZUcDdhR1ZwWjJoME9uUm9hWE11YldGNFdTMTBhR2x6TG1kMWRIUmxjbjE5TEhVdVgyMWhibUZuWlZOMFlXMXdQV1oxYm1OMGFXOXVLSFFwZTNaaGNpQmxMRzQ5ZEdocGN5NW5aWFJKZEdWdEtIUXBPMmxtS0c0bUptNHVhWE5RYkdGamFXNW5LV1U5Ymk1eVpXTjBPMlZzYzJWN2RtRnlJRzg5ZEdocGN5NWZaMlYwUld4bGJXVnVkRTltWm5ObGRDaDBLVHRsUFc1bGR5QnBLSHQ0T25Sb2FYTXVYMmRsZEU5d2RHbHZiaWhjSW05eWFXZHBia3hsWm5SY0lpay9ieTVzWldaME9tOHVjbWxuYUhRc2VUcDBhR2x6TGw5blpYUlBjSFJwYjI0b1hDSnZjbWxuYVc1VWIzQmNJaWsvYnk1MGIzQTZieTVpYjNSMGIyMTlLWDEwYUdsekxsOXpaWFJTWldOMFUybDZaU2gwTEdVcExIUm9hWE11Y0dGamEyVnlMbkJzWVdObFpDaGxLU3gwYUdsekxsOXpaWFJOWVhoWVdTaGxLWDBzZFM1emIzSjBTWFJsYlhOQ2VWQnZjMmwwYVc5dVBXWjFibU4wYVc5dUtDbDdkbUZ5SUhROWRHaHBjeTVmWjJWMFQzQjBhVzl1S0Z3aWFHOXlhWHB2Ym5SaGJGd2lLVDl5T25NN2RHaHBjeTVwZEdWdGN5NXpiM0owS0hRcGZTeDFMbVpwZEQxbWRXNWpkR2x2YmloMExHVXNhU2w3ZG1GeUlHNDlkR2hwY3k1blpYUkpkR1Z0S0hRcE8yNG1KaWgwYUdsekxuTjBZVzF3S0c0dVpXeGxiV1Z1ZENrc2JpNWxibUZpYkdWUWJHRmphVzVuS0Nrc2RHaHBjeTUxY0dSaGRHVlRhR2xtZEZSaGNtZGxkSE1vYmlrc1pUMTJiMmxrSURBOVBUMWxQMjR1Y21WamRDNTRPbVVzYVQxMmIybGtJREE5UFQxcFAyNHVjbVZqZEM1NU9ta3NkR2hwY3k1emFHbG1kQ2h1TEdVc2FTa3NkR2hwY3k1ZlltbHVaRVpwZEVWMlpXNTBjeWh1S1N4dUxtMXZkbVZVYnlodUxuSmxZM1F1ZUN4dUxuSmxZM1F1ZVNrc2RHaHBjeTV6YUdsbWRFeGhlVzkxZENncExIUm9hWE11ZFc1emRHRnRjQ2h1TG1Wc1pXMWxiblFwTEhSb2FYTXVjMjl5ZEVsMFpXMXpRbmxRYjNOcGRHbHZiaWdwTEc0dVpHbHpZV0pzWlZCc1lXTnBibWNvS1NsOUxIVXVYMkpwYm1SR2FYUkZkbVZ1ZEhNOVpuVnVZM1JwYjI0b2RDbDdablZ1WTNScGIyNGdaU2dwZTI0ckt5d3lQVDF1SmlacExtUnBjM0JoZEdOb1JYWmxiblFvWENKbWFYUkRiMjF3YkdWMFpWd2lMRzUxYkd3c1czUmRLWDEyWVhJZ2FUMTBhR2x6TEc0OU1EdDBMbTl1WTJVb1hDSnNZWGx2ZFhSY0lpeGxLU3gwYUdsekxtOXVZMlVvWENKc1lYbHZkWFJEYjIxd2JHVjBaVndpTEdVcGZTeDFMbkpsYzJsNlpUMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWFYTlNaWE5wZW1WQ2IzVnVaQ1ltZEdocGN5NXVaV1ZrYzFKbGMybDZaVXhoZVc5MWRDZ3BKaVlvZEdocGN5NXZjSFJwYjI1ekxuTm9hV1owVUdWeVkyVnVkRkpsYzJsNlpUOTBhR2x6TG5KbGMybDZaVk5vYVdaMFVHVnlZMlZ1ZEV4aGVXOTFkQ2dwT25Sb2FYTXViR0Y1YjNWMEtDa3BmU3gxTG01bFpXUnpVbVZ6YVhwbFRHRjViM1YwUFdaMWJtTjBhVzl1S0NsN2RtRnlJR1U5ZENoMGFHbHpMbVZzWlcxbGJuUXBMR2s5ZEdocGN5NWZaMlYwVDNCMGFXOXVLRndpYUc5eWFYcHZiblJoYkZ3aUtUOWNJbWx1Ym1WeVNHVnBaMmgwWENJNlhDSnBibTVsY2xkcFpIUm9YQ0k3Y21WMGRYSnVJR1ZiYVYwaFBYUm9hWE11YzJsNlpWdHBYWDBzZFM1eVpYTnBlbVZUYUdsbWRGQmxjbU5sYm5STVlYbHZkWFE5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsekxsOW5aWFJKZEdWdGMwWnZja3hoZVc5MWRDaDBhR2x6TG1sMFpXMXpLU3hwUFhSb2FYTXVYMmRsZEU5d2RHbHZiaWhjSW1odmNtbDZiMjUwWVd4Y0lpa3NiajFwUDF3aWVWd2lPbHdpZUZ3aUxHODlhVDljSW1obGFXZG9kRndpT2x3aWQybGtkR2hjSWl4elBXay9YQ0p5YjNkSVpXbG5hSFJjSWpwY0ltTnZiSFZ0YmxkcFpIUm9YQ0lzY2oxcFAxd2lhVzV1WlhKSVpXbG5hSFJjSWpwY0ltbHVibVZ5VjJsa2RHaGNJaXhoUFhSb2FYTmJjMTA3YVdZb1lUMWhKaVpoSzNSb2FYTXVaM1YwZEdWeUtYdDBhR2x6TGw5blpYUk5aV0Z6ZFhKbGJXVnVkSE1vS1R0MllYSWdhRDEwYUdselczTmRLM1JvYVhNdVozVjBkR1Z5TzJVdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloMEtYdDJZWElnWlQxTllYUm9Mbkp2ZFc1a0tIUXVjbVZqZEZ0dVhTOWhLVHQwTG5KbFkzUmJibDA5WlNwb2ZTbDlaV3h6Wlh0MllYSWdkVDEwS0hSb2FYTXVaV3hsYldWdWRDbGJjbDByZEdocGN5NW5kWFIwWlhJc1l6MTBhR2x6TG5CaFkydGxjbHR2WFR0bExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdkQzV5WldOMFcyNWRQWFF1Y21WamRGdHVYUzlqS25WOUtYMTBhR2x6TG5Ob2FXWjBUR0Y1YjNWMEtDbDlMSFV1YVhSbGJVUnlZV2RUZEdGeWREMW1kVzVqZEdsdmJpaDBLWHRwWmloMGFHbHpMbWx6Ulc1aFlteGxaQ2w3ZEdocGN5NXpkR0Z0Y0NoMEtUdDJZWElnWlQxMGFHbHpMbWRsZEVsMFpXMG9kQ2s3WlNZbUtHVXVaVzVoWW14bFVHeGhZMmx1WnlncExHVXVjMmh2ZDBSeWIzQlFiR0ZqWldodmJHUmxjaWdwTEhSb2FYTXVaSEpoWjBsMFpXMURiM1Z1ZENzckxIUm9hWE11ZFhCa1lYUmxVMmhwWm5SVVlYSm5aWFJ6S0dVcEtYMTlMSFV1ZFhCa1lYUmxVMmhwWm5SVVlYSm5aWFJ6UFdaMWJtTjBhVzl1S0hRcGUzUm9hWE11YzJocFpuUlFZV05yWlhJdWNtVnpaWFFvS1N4MGFHbHpMbDluWlhSQ2IzVnVaR2x1WjFKbFkzUW9LVHQyWVhJZ1pUMTBhR2x6TGw5blpYUlBjSFJwYjI0b1hDSnZjbWxuYVc1TVpXWjBYQ0lwTEc0OWRHaHBjeTVmWjJWMFQzQjBhVzl1S0Z3aWIzSnBaMmx1Vkc5d1hDSXBPM1JvYVhNdWMzUmhiWEJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZENsN2RtRnlJRzg5ZEdocGN5NW5aWFJKZEdWdEtIUXBPMmxtS0NGdmZId2hieTVwYzFCc1lXTnBibWNwZTNaaGNpQnpQWFJvYVhNdVgyZGxkRVZzWlcxbGJuUlBabVp6WlhRb2RDa3NjajF1WlhjZ2FTaDdlRHBsUDNNdWJHVm1kRHB6TG5KcFoyaDBMSGs2Ymo5ekxuUnZjRHB6TG1KdmRIUnZiWDBwTzNSb2FYTXVYM05sZEZKbFkzUlRhWHBsS0hRc2Npa3NkR2hwY3k1emFHbG1kRkJoWTJ0bGNpNXdiR0ZqWldRb2NpbDlmU3gwYUdsektUdDJZWElnYnoxMGFHbHpMbDluWlhSUGNIUnBiMjRvWENKb2IzSnBlbTl1ZEdGc1hDSXBMSE05Yno5Y0luSnZkMGhsYVdkb2RGd2lPbHdpWTI5c2RXMXVWMmxrZEdoY0lpeHlQVzgvWENKb1pXbG5hSFJjSWpwY0luZHBaSFJvWENJN2RHaHBjeTV6YUdsbWRGUmhjbWRsZEV0bGVYTTlXMTBzZEdocGN5NXphR2xtZEZSaGNtZGxkSE05VzEwN2RtRnlJR0VzYUQxMGFHbHpXM05kTzJsbUtHZzlhQ1ltYUN0MGFHbHpMbWQxZEhSbGNpbDdkbUZ5SUhVOVRXRjBhQzVqWldsc0tIUXVjbVZqZEZ0eVhTOW9LU3hqUFUxaGRHZ3VabXh2YjNJb0tIUm9hWE11YzJocFpuUlFZV05yWlhKYmNsMHJkR2hwY3k1bmRYUjBaWElwTDJncE8yRTlLR010ZFNrcWFEdG1iM0lvZG1GeUlHUTlNRHRqUG1RN1pDc3JLWHQyWVhJZ1pqMXZQekE2WkNwb0xHdzliejlrS21nNk1EdDBhR2x6TGw5aFpHUlRhR2xtZEZSaGNtZGxkQ2htTEd3c1lTbDlmV1ZzYzJVZ1lUMTBhR2x6TG5Ob2FXWjBVR0ZqYTJWeVczSmRLM1JvYVhNdVozVjBkR1Z5TFhRdWNtVmpkRnR5WFN4MGFHbHpMbDloWkdSVGFHbG1kRlJoY21kbGRDZ3dMREFzWVNrN2RtRnlJSEE5ZEdocGN5NWZaMlYwU1hSbGJYTkdiM0pNWVhsdmRYUW9kR2hwY3k1cGRHVnRjeWtzWnoxMGFHbHpMbDluWlhSUVlXTnJUV1YwYUc5a0tDazdjQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFFwZTNaaGNpQmxQWFF1Y21WamREdDBhR2x6TGw5elpYUlNaV04wVTJsNlpTaDBMbVZzWlcxbGJuUXNaU2tzZEdocGN5NXphR2xtZEZCaFkydGxjbHRuWFNobEtTeDBhR2x6TGw5aFpHUlRhR2xtZEZSaGNtZGxkQ2hsTG5nc1pTNTVMR0VwTzNaaGNpQnBQVzgvWlM1NEsyVXVkMmxrZEdnNlpTNTRMRzQ5Yno5bExuazZaUzU1SzJVdWFHVnBaMmgwTzJsbUtIUm9hWE11WDJGa1pGTm9hV1owVkdGeVoyVjBLR2tzYml4aEtTeG9LV1p2Y2loMllYSWdjejFOWVhSb0xuSnZkVzVrS0dWYmNsMHZhQ2tzZFQweE8zTStkVHQxS3lzcGUzWmhjaUJqUFc4L2FUcGxMbmdyYUNwMUxHUTliejlsTG5rcmFDcDFPbTQ3ZEdocGN5NWZZV1JrVTJocFpuUlVZWEpuWlhRb1l5eGtMR0VwZlgwc2RHaHBjeWw5TEhVdVgyRmtaRk5vYVdaMFZHRnlaMlYwUFdaMWJtTjBhVzl1S0hRc1pTeHBLWHQyWVhJZ2JqMTBhR2x6TGw5blpYUlBjSFJwYjI0b1hDSm9iM0pwZW05dWRHRnNYQ0lwUDJVNmREdHBaaWdoS0RBaFBUMXVKaVp1UG1rcEtYdDJZWElnYnoxMEsxd2lMRndpSzJVc2N6MHRNU0U5ZEdocGN5NXphR2xtZEZSaGNtZGxkRXRsZVhNdWFXNWtaWGhQWmlodktUdHpmSHdvZEdocGN5NXphR2xtZEZSaGNtZGxkRXRsZVhNdWNIVnphQ2h2S1N4MGFHbHpMbk5vYVdaMFZHRnlaMlYwY3k1d2RYTm9LSHQ0T25Rc2VUcGxmU2twZlgwc2RTNXphR2xtZEQxbWRXNWpkR2x2YmloMExHVXNhU2w3ZG1GeUlHNHNiejB4THpBc2N6MTdlRHBsTEhrNmFYMDdkR2hwY3k1emFHbG1kRlJoY21kbGRITXVabTl5UldGamFDaG1kVzVqZEdsdmJpaDBLWHQyWVhJZ1pUMWhLSFFzY3lrN2J6NWxKaVlvYmoxMExHODlaU2w5S1N4MExuSmxZM1F1ZUQxdUxuZ3NkQzV5WldOMExuazliaTU1ZlR0MllYSWdZejB4TWpBN2RTNXBkR1Z0UkhKaFowMXZkbVU5Wm5WdVkzUnBiMjRvZEN4bExHa3BlMXh1Wm5WdVkzUnBiMjRnYmlncGUzTXVjMmhwWm5Rb2J5eGxMR2twTEc4dWNHOXphWFJwYjI1RWNtOXdVR3hoWTJWb2IyeGtaWElvS1N4ekxteGhlVzkxZENncGZYWmhjaUJ2UFhSb2FYTXVhWE5GYm1GaWJHVmtKaVowYUdsekxtZGxkRWwwWlcwb2RDazdhV1lvYnlsN1pTMDlkR2hwY3k1emFYcGxMbkJoWkdScGJtZE1aV1owTEdrdFBYUm9hWE11YzJsNlpTNXdZV1JrYVc1blZHOXdPM1poY2lCelBYUm9hWE1zY2oxdVpYY2dSR0YwWlR0MGFHbHpMbDlwZEdWdFJISmhaMVJwYldVbUpuSXRkR2hwY3k1ZmFYUmxiVVJ5WVdkVWFXMWxQR00vS0dOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG1SeVlXZFVhVzFsYjNWMEtTeDBhR2x6TG1SeVlXZFVhVzFsYjNWMFBYTmxkRlJwYldWdmRYUW9iaXhqS1NrNktHNG9LU3gwYUdsekxsOXBkR1Z0UkhKaFoxUnBiV1U5Y2lsOWZTeDFMbWwwWlcxRWNtRm5SVzVrUFdaMWJtTjBhVzl1S0hRcGUyWjFibU4wYVc5dUlHVW9LWHR1S3lzc01qMDliaVltS0drdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Z3aWFYTXRjRzl6YVhScGIyNXBibWN0Y0c5emRDMWtjbUZuWENJcExHa3VhR2xrWlVSeWIzQlFiR0ZqWldodmJHUmxjaWdwTEc4dVpHbHpjR0YwWTJoRmRtVnVkQ2hjSW1SeVlXZEpkR1Z0VUc5emFYUnBiMjVsWkZ3aUxHNTFiR3dzVzJsZEtTbDlkbUZ5SUdrOWRHaHBjeTVwYzBWdVlXSnNaV1FtSm5Sb2FYTXVaMlYwU1hSbGJTaDBLVHRwWmlocEtYdGpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NWtjbUZuVkdsdFpXOTFkQ2tzYVM1bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9YQ0pwY3kxd2IzTnBkR2x2Ym1sdVp5MXdiM04wTFdSeVlXZGNJaWs3ZG1GeUlHNDlNQ3h2UFhSb2FYTTdhUzV2Ym1ObEtGd2liR0Y1YjNWMFhDSXNaU2tzZEdocGN5NXZibU5sS0Z3aWJHRjViM1YwUTI5dGNHeGxkR1ZjSWl4bEtTeHBMbTF2ZG1WVWJ5aHBMbkpsWTNRdWVDeHBMbkpsWTNRdWVTa3NkR2hwY3k1c1lYbHZkWFFvS1N4MGFHbHpMbVJ5WVdkSmRHVnRRMjkxYm5ROVRXRjBhQzV0WVhnb01DeDBhR2x6TG1SeVlXZEpkR1Z0UTI5MWJuUXRNU2tzZEdocGN5NXpiM0owU1hSbGJYTkNlVkJ2YzJsMGFXOXVLQ2tzYVM1a2FYTmhZbXhsVUd4aFkybHVaeWdwTEhSb2FYTXVkVzV6ZEdGdGNDaHBMbVZzWlcxbGJuUXBmWDBzZFM1aWFXNWtSSEpoWjJkaFltbHNiSGxGZG1WdWRITTlablZ1WTNScGIyNG9kQ2w3ZEdocGN5NWZZbWx1WkVSeVlXZG5ZV0pwYkd4NVJYWmxiblJ6S0hRc1hDSnZibHdpS1gwc2RTNTFibUpwYm1SRWNtRm5aMkZpYVd4c2VVVjJaVzUwY3oxbWRXNWpkR2x2YmloMEtYdDBhR2x6TGw5aWFXNWtSSEpoWjJkaFltbHNiSGxGZG1WdWRITW9kQ3hjSW05bVpsd2lLWDBzZFM1ZlltbHVaRVJ5WVdkbllXSnBiR3g1UlhabGJuUnpQV1oxYm1OMGFXOXVLSFFzWlNsN2RtRnlJR2s5ZEdocGN5NW9ZVzVrYkdWRWNtRm5aMkZpYVd4c2VUdDBXMlZkS0Z3aVpISmhaMU4wWVhKMFhDSXNhUzVrY21GblUzUmhjblFwTEhSYlpWMG9YQ0prY21GblRXOTJaVndpTEdrdVpISmhaMDF2ZG1VcExIUmJaVjBvWENKa2NtRm5SVzVrWENJc2FTNWtjbUZuUlc1a0tYMHNkUzVpYVc1a1ZVbEVjbUZuWjJGaWJHVkZkbVZ1ZEhNOVpuVnVZM1JwYjI0b2RDbDdkR2hwY3k1ZlltbHVaRlZKUkhKaFoyZGhZbXhsUlhabGJuUnpLSFFzWENKdmJsd2lLWDBzZFM1MWJtSnBibVJWU1VSeVlXZG5ZV0pzWlVWMlpXNTBjejFtZFc1amRHbHZiaWgwS1h0MGFHbHpMbDlpYVc1a1ZVbEVjbUZuWjJGaWJHVkZkbVZ1ZEhNb2RDeGNJbTltWmx3aUtYMHNkUzVmWW1sdVpGVkpSSEpoWjJkaFlteGxSWFpsYm5SelBXWjFibU4wYVc5dUtIUXNaU2w3ZG1GeUlHazlkR2hwY3k1b1lXNWtiR1ZWU1VSeVlXZG5ZV0pzWlR0MFcyVmRLRndpWkhKaFozTjBZWEowWENJc2FTNXpkR0Z5ZENsYlpWMG9YQ0prY21GblhDSXNhUzVrY21GbktWdGxYU2hjSW1SeVlXZHpkRzl3WENJc2FTNXpkRzl3S1gwN2RtRnlJR1E5ZFM1a1pYTjBjbTk1TzNKbGRIVnliaUIxTG1SbGMzUnliM2s5Wm5WdVkzUnBiMjRvS1h0a0xtRndjR3g1S0hSb2FYTXNZWEpuZFcxbGJuUnpLU3gwYUdsekxtbHpSVzVoWW14bFpEMGhNWDBzYUM1U1pXTjBQV2tzYUM1UVlXTnJaWEk5Yml4b2ZTazdYRzRpTENJdktpcGNiaUFxSUdwUmRXVnllU0JWYm5abGFXeGNiaUFxSUVFZ2RtVnllU0JzYVdkb2RIZGxhV2RvZENCcVVYVmxjbmtnY0d4MVoybHVJSFJ2SUd4aGVua2diRzloWkNCcGJXRm5aWE5jYmlBcUlHaDBkSEE2THk5c2RXbHpMV0ZzYldWcFpHRXVaMmwwYUhWaUxtTnZiUzkxYm5abGFXeGNiaUFxWEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUd4cFkyVnVjMlV1WEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXlCTWRjT3RjeUJCYkcxbGFXUmhYRzRnS2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmJIVnBjeTFoYkcxbGFXUmhYRzRnS2k5Y2JseHVPeWhtZFc1amRHbHZiaWdrS1NCN1hHNWNiaUFnSkM1bWJpNTFiblpsYVd3Z1BTQm1kVzVqZEdsdmJpaDBhSEpsYzJodmJHUXNJR05oYkd4aVlXTnJMQ0J2Y0hScGIyNXpLU0I3WEc1Y2JpQWdJQ0IyWVhJZ0pIY2dQU0FrS0hkcGJtUnZkeWtzWEc0Z0lDQWdJQ0FnSUhSb0lEMGdkR2h5WlhOb2IyeGtJSHg4SURBc1hHNGdJQ0FnSUNBZ0lISmxkR2x1WVNBOUlIZHBibVJ2ZHk1a1pYWnBZMlZRYVhobGJGSmhkR2x2SUQ0Z01TeGNiaUFnSUNBZ0lDQWdZWFIwY21saUlEMGdjbVYwYVc1aFB5QmNJbVJoZEdFdGMzSmpMWEpsZEdsdVlWd2lJRG9nWENKa1lYUmhMWE55WTF3aUxGeHVJQ0FnSUNBZ0lDQnBiV0ZuWlhNZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmU3hjYmlBZ0lDQWdJQ0FnY1hWbGRXVkRiM1Z1ZEdWeUlEMGdNQ3hjYmlBZ0lDQWdJQ0FnYkc5aFpHVmtPMXh1WEc0Z0lDQWdkR2hwY3k1dmJtVW9YQ0oxYm5abGFXeGNJaXdnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdVltVm1iM0psVlc1MlpXbHNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJRzl3ZEdsdmJuTXVZbVZtYjNKbFZXNTJaV2xzTG1OaGJHd29kR2hwY3lrN1hHNWNiaUFnSUNBZ0lIWmhjaUJ6YjNWeVkyVWdQU0IwYUdsekxtZGxkRUYwZEhKcFluVjBaU2hoZEhSeWFXSXBPMXh1SUNBZ0lDQWdjMjkxY21ObElEMGdjMjkxY21ObElIeDhJSFJvYVhNdVoyVjBRWFIwY21saWRYUmxLRndpWkdGMFlTMXpjbU5jSWlrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJCZEhSeWFXSjFkR1VvWENKemNtTmNJaXdnYzI5MWNtTmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCallXeHNZbUZqYXk1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2RXNTJaV2xzS0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2tnUFNBd08xeHVYRzRnSUNBZ0lDQjJZWElnYVc1MmFXVjNJRDBnYVcxaFoyVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXWW9hU3NySUQ0OUlESXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnSkdVZ1BTQWtLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSkdVdWFYTW9YQ0k2YUdsa1pHVnVYQ0lwS1NCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSGQwSUQwZ0pIY3VjMk55YjJ4c1ZHOXdLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZaUE5SUhkMElDc2dKSGN1YUdWcFoyaDBLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxkQ0E5SUNSbExtOW1abk5sZENncExuUnZjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmlJRDBnWlhRZ0t5QWtaUzVvWldsbmFIUW9LVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWldJZ1BqMGdkM1FnTFNCMGFDQW1KaUJsZENBOFBTQjNZaUFySUhSb08xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSFpoY2lCcGJuWnBaWGRKYldGblpYTWdQU0JwYm5acFpYY3ViR1Z1WjNSb08xeHVYRzRnSUNBZ0lDQm1iM0lvZG1GeUlHa2dQU0F3T3lCcElEd2dhVzUyYVdWM0xteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnFJRDBnYVR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2IyNXNiMkZrTFdWMlpXNTBJSGRvWlc0Z2JtOTBJR0pwYm1Wa0lIbGxkRnh1SUNBZ0lDQWdJQ0IyWVhJZ2FXMW5SWFpsYm5SeklEMGdkMmx1Wkc5M0xtcFJkV1Z5ZVM1ZlpHRjBZU2hwYm5acFpYZGJhVjBzSUZ3aVpYWmxiblJ6WENJcE8xeHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2FXUWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJSFpoYkdsa0lEMGdkbUZzYVdRZ0ppWWdLSFI1Y0dWdlppQnBiV2RGZG1WdWRITWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUtIWmhiR2xrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZzYVdRZ1BTQjJZV3hwWkNBbUppQW9kSGx3Wlc5bUlHbHRaMFYyWlc1MGN5NXNiMkZrSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtS0haaGJHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NYVmxkV1ZEYjNWdWRHVnlLeXM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWFsRjFaWEo1S0dsdWRtbGxkMXRwWFNrdWIyNG9KMnh2WVdRbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIRjFaWFZsUTI5MWJuUmxjaTB0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd4dllXUlFaWEpqWlc1MFlXZGxJRDBnTVRBd0lDMGdLSEYxWlhWbFEyOTFiblJsY2k5cGJuWnBaWGRKYldGblpYTWdLaUF4TURBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaWhzYjJGa1VHVnlZMlZ1ZEdGblpTQStQU0F3SUNZbUlHeHZZV1JRWlhKalpXNTBZV2RsSUR3OUlERXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11YVcxaFoyVlRaWFJRY205bmNtVnpjME5oYkd4aVlXTnJJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJRzl3ZEdsdmJuTXVhVzFoWjJWVFpYUlFjbTluY21WemMwTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2dkR2hwY3l3Z2JHOWhaRkJsY21ObGJuUmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloeGRXVjFaVU52ZFc1MFpYSWdQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdVlXWjBaWEpKYldGblpWTmxkRWhoYzBKbFpXNU1iMkZrWldRZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2IzQjBhVzl1Y3k1aFpuUmxja2x0WVdkbFUyVjBTR0Z6UW1WbGJreHZZV1JsWkM1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUd4dllXUmxaQ0E5SUdsdWRtbGxkeTUwY21sbloyVnlLRndpZFc1MlpXbHNYQ0lwTzF4dUlDQWdJQ0FnYVcxaFoyVnpJRDBnYVcxaFoyVnpMbTV2ZENoc2IyRmtaV1FwTzF4dVhHNGdJQ0FnSUNBdkttTnZibk52YkdVdWJHOW5LRndpYVc1MmFXVjNPaUJjSWl3Z2FXNTJhV1YzU1cxaFoyVnpLVHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Z3aWJHOWhaR1ZrT2lCY0lpd2diRzloWkdWa0xteGxibWQwYUNrN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGNJbTV2ZENCc2IyRmtaV1E2SUZ3aUxDQnBiV0ZuWlhNdWJHVnVaM1JvS1RzcUwxeHVJQ0FnSUgxY2JseHVJQ0FnSUNSM0xtOXVLRndpYzJOeWIyeHNMblZ1ZG1WcGJDQnlaWE5wZW1VdWRXNTJaV2xzSUd4dmIydDFjQzUxYm5abGFXeGNJaXdnZFc1MlpXbHNLVHRjYmx4dUlDQWdJSFZ1ZG1WcGJDZ3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYm4wcEtIZHBibVJ2ZHk1cVVYVmxjbmtnZkh3Z2QybHVaRzkzTGxwbGNIUnZLVHRjYmlJc0luWmhjaUJwYzAxdlltbHNaVVJsZG1salpTQTlJR1poYkhObE8xeHVYRzRrS0dSdlkzVnRaVzUwS1M1eVpXRmtlU2htZFc1amRHbHZiaWdwSUh0Y2JseHVJQ0FrS0NkcGJXY3VjM1puSnlrdVpXRmphQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJSFpoY2lBa2FXMW5JRDBnYWxGMVpYSjVLSFJvYVhNcE8xeHVJQ0FnSUhaaGNpQnBiV2RKUkNBOUlDUnBiV2N1WVhSMGNpZ25hV1FuS1R0Y2JpQWdJQ0IyWVhJZ2FXMW5RMnhoYzNNZ1BTQWthVzFuTG1GMGRISW9KMk5zWVhOekp5azdYRzRnSUNBZ2RtRnlJR2x0WjFWU1RDQTlJQ1JwYldjdVlYUjBjaWduYzNKakp5azdYRzVjYmlBZ0lDQnFVWFZsY25rdVoyVjBLR2x0WjFWU1RDd2dablZ1WTNScGIyNG9aR0YwWVNrZ2UxeHVJQ0FnSUNBZ0x5OGdSMlYwSUhSb1pTQlRWa2NnZEdGbkxDQnBaMjV2Y21VZ2RHaGxJSEpsYzNSY2JpQWdJQ0FnSUhaaGNpQWtjM1puSUQwZ2FsRjFaWEo1S0dSaGRHRXBMbVpwYm1Rb0ozTjJaeWNwTzF4dVhHNGdJQ0FnSUNBdkx5QkJaR1FnY21Wd2JHRmpaV1FnYVcxaFoyVW5jeUJKUkNCMGJ5QjBhR1VnYm1WM0lGTldSMXh1SUNBZ0lDQWdhV1lvZEhsd1pXOW1JR2x0WjBsRUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWtjM1puSUQwZ0pITjJaeTVoZEhSeUtDZHBaQ2NzSUdsdFowbEVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUVGa1pDQnlaWEJzWVdObFpDQnBiV0ZuWlNkeklHTnNZWE56WlhNZ2RHOGdkR2hsSUc1bGR5QlRWa2RjYmlBZ0lDQWdJR2xtS0hSNWNHVnZaaUJwYldkRGJHRnpjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSkhOMlp5QTlJQ1J6ZG1jdVlYUjBjaWduWTJ4aGMzTW5MQ0JwYldkRGJHRnpjeXNuSUhKbGNHeGhZMlZrTFhOMlp5Y3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCU1pXMXZkbVVnWVc1NUlHbHVkbUZzYVdRZ1dFMU1JSFJoWjNNZ1lYTWdjR1Z5SUdoMGRIQTZMeTkyWVd4cFpHRjBiM0l1ZHpNdWIzSm5YRzRnSUNBZ0lDQWtjM1puSUQwZ0pITjJaeTV5WlcxdmRtVkJkSFJ5S0NkNGJXeHVjenBoSnlrN1hHNWNiaUFnSUNBZ0lDOHZJRU5vWldOcklHbG1JSFJvWlNCMmFXVjNjRzl5ZENCcGN5QnpaWFFzSUdsbUlIUm9aU0IyYVdWM2NHOXlkQ0JwY3lCdWIzUWdjMlYwSUhSb1pTQlRWa2NnZDI5dWRDZDBJSE5qWVd4bExseHVJQ0FnSUNBZ2FXWW9JU1J6ZG1jdVlYUjBjaWduZG1sbGQwSnZlQ2NwSUNZbUlDUnpkbWN1WVhSMGNpZ25hR1ZwWjJoMEp5a2dKaVlnSkhOMlp5NWhkSFJ5S0NkM2FXUjBhQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDUnpkbWN1WVhSMGNpZ25kbWxsZDBKdmVDY3NJQ2N3SURBZ0p5QXJJQ1J6ZG1jdVlYUjBjaWduYUdWcFoyaDBKeWtnS3lBbklDY2dLeUFrYzNabkxtRjBkSElvSjNkcFpIUm9KeWtwWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGSmxjR3hoWTJVZ2FXMWhaMlVnZDJsMGFDQnVaWGNnVTFaSFhHNGdJQ0FnSUNBa2FXMW5MbkpsY0d4aFkyVlhhWFJvS0NSemRtY3BPMXh1WEc0Z0lDQWdmU3dnSjNodGJDY3BPMXh1SUNCOUtUdGNibHh1SUNCcFppZ3ZLR0Z1WkhKdmFXUjhZbUpjWEdRcmZHMWxaV2R2S1M0cmJXOWlhV3hsZkdGMllXNTBaMjk4WW1Ga1lWeGNMM3hpYkdGamEySmxjbko1ZkdKc1lYcGxjbnhqYjIxd1lXeDhaV3hoYVc1bGZHWmxibTVsWTN4b2FYQjBiM0I4YVdWdGIySnBiR1Y4YVhBb2FHOXVaWHh2WkNsOGFYQmhaSHhwY21semZHdHBibVJzWlh4QmJtUnliMmxrZkZOcGJHdDhiR2RsSUh4dFlXVnRiM3h0YVdSd2ZHMXRjSHh1WlhSbWNtOXVkSHh2Y0dWeVlTQnRLRzlpZkdsdUtXbDhjR0ZzYlNnZ2IzTXBQM3h3YUc5dVpYeHdLR2w0YVh4eVpTbGNYQzk4Y0d4MVkydGxjbnh3YjJOclpYUjhjSE53ZkhObGNtbGxjeWcwZkRZcE1IeHplVzFpYVdGdWZIUnlaVzk4ZFhCY1hDNG9Zbkp2ZDNObGNueHNhVzVyS1h4MmIyUmhabTl1Wlh4M1lYQjhkMmx1Wkc5M2N5QW9ZMlY4Y0dodmJtVXBmSGhrWVh4NGFXbHVieTlwTG5SbGMzUW9ibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ2xjYmlBZ0lDQjhmQ0F2TVRJd04zdzJNekV3ZkRZMU9UQjhNMmR6YjN3MGRHaHdmRFV3V3pFdE5sMXBmRGMzTUhOOE9EQXljM3hoSUhkaGZHRmlZV044WVdNb1pYSjhiMjk4YzF4Y0xTbDhZV2tvYTI5OGNtNHBmR0ZzS0dGMmZHTmhmR052S1h4aGJXOXBmR0Z1S0dWNGZHNTVmSGwzS1h4aGNIUjFmR0Z5S0dOb2ZHZHZLWHhoY3loMFpYeDFjeWw4WVhSMGQzeGhkU2hrYVh4Y1hDMXRmSElnZkhNZ0tYeGhkbUZ1ZkdKbEtHTnJmR3hzZkc1eEtYeGlhU2hzWW54eVpDbDhZbXdvWVdOOFlYb3BmR0p5S0dWOGRpbDNmR0oxYldKOFluZGNYQzBvYm54MUtYeGpOVFZjWEM5OFkyRndhWHhqWTNkaGZHTmtiVnhjTFh4alpXeHNmR05vZEcxOFkyeGtZM3hqYldSY1hDMThZMjhvYlhCOGJtUXBmR055WVhkOFpHRW9hWFI4Ykd4OGJtY3BmR1JpZEdWOFpHTmNYQzF6ZkdSbGRtbDhaR2xqWVh4a2JXOWlmR1J2S0dOOGNDbHZmR1J6S0RFeWZGeGNMV1FwZkdWc0tEUTVmR0ZwS1h4bGJTaHNNbngxYkNsOFpYSW9hV044YXpBcGZHVnpiRGg4Wlhvb1d6UXROMTB3Zkc5emZIZGhmSHBsS1h4bVpYUmpmR1pzZVNoY1hDMThYeWw4WnpFZ2RYeG5OVFl3ZkdkbGJtVjhaMlpjWEMwMWZHZGNYQzF0YjN4bmJ5aGNYQzUzZkc5a0tYeG5jaWhoWkh4MWJpbDhhR0ZwWlh4b1kybDBmR2hrWEZ3dEtHMThjSHgwS1h4b1pXbGNYQzE4YUdrb2NIUjhkR0VwZkdod0tDQnBmR2x3S1h4b2MxeGNMV044YUhRb1l5aGNYQzE4SUh4ZmZHRjhaM3h3ZkhOOGRDbDhkSEFwZkdoMUtHRjNmSFJqS1h4cFhGd3RLREl3ZkdkdmZHMWhLWHhwTWpNd2ZHbGhZeWdnZkZ4Y0xYeGNYQzhwZkdsaWNtOThhV1JsWVh4cFp6QXhmR2xyYjIxOGFXMHhhM3hwYm01dmZHbHdZWEY4YVhKcGMzeHFZU2gwZkhZcFlYeHFZbkp2ZkdwbGJYVjhhbWxuYzN4clpHUnBmR3RsYW1sOGEyZDBLQ0I4WEZ3dktYeHJiRzl1Zkd0d2RDQjhhM2RqWEZ3dGZHdDVieWhqZkdzcGZHeGxLRzV2ZkhocEtYeHNaeWdnWjN4Y1hDOG9hM3hzZkhVcGZEVXdmRFUwZkZ4Y0xWdGhMWGRkS1h4c2FXSjNmR3g1Ym5oOGJURmNYQzEzZkcweloyRjhiVFV3WEZ3dmZHMWhLSFJsZkhWcGZIaHZLWHh0WXlnd01Yd3lNWHhqWVNsOGJWeGNMV055ZkcxbEtISmpmSEpwS1h4dGFTaHZPSHh2WVh4MGN5bDhiVzFsWm54dGJ5Z3dNWHd3TW54aWFYeGtaWHhrYjN4MEtGeGNMWHdnZkc5OGRpbDhlbm9wZkcxMEtEVXdmSEF4ZkhZZ0tYeHRkMkp3ZkcxNWQyRjhiakV3V3pBdE1sMThiakl3V3pJdE0xMThiak13S0RCOE1pbDhialV3S0RCOE1udzFLWHh1Tnlnd0tEQjhNU2w4TVRBcGZHNWxLQ2hqZkcwcFhGd3RmRzl1ZkhSbWZIZG1mSGRuZkhkMEtYeHViMnNvTm54cEtYeHVlbkJvZkc4eWFXMThiM0FvZEdsOGQzWXBmRzl5WVc1OGIzZG5NWHh3T0RBd2ZIQmhiaWhoZkdSOGRDbDhjR1I0WjN4d1p5Z3hNM3hjWEMwb1d6RXRPRjE4WXlrcGZIQm9hV3g4Y0dseVpYeHdiQ2hoZVh4MVl5bDhjRzVjWEMweWZIQnZLR05yZkhKMGZITmxLWHh3Y205NGZIQnphVzk4Y0hSY1hDMW5mSEZoWEZ3dFlYeHhZeWd3TjN3eE1ud3lNWHd6TW53Mk1IeGNYQzFiTWkwM1hYeHBYRnd0S1h4eGRHVnJmSEl6T0RCOGNqWXdNSHh5WVd0emZISnBiVGw4Y204b2RtVjhlbThwZkhNMU5WeGNMM3h6WVNoblpYeHRZWHh0Ylh4dGMzeHVlWHgyWVNsOGMyTW9NREY4YUZ4Y0xYeHZiM3h3WEZ3dEtYeHpaR3RjWEM5OGMyVW9ZeWhjWEMxOE1Id3hLWHcwTjN4dFkzeHVaSHh5YVNsOGMyZG9YRnd0ZkhOb1lYSjhjMmxsS0Z4Y0xYeHRLWHh6YTF4Y0xUQjhjMndvTkRWOGFXUXBmSE50S0dGc2ZHRnlmR0l6ZkdsMGZIUTFLWHh6YnlobWRIeHVlU2w4YzNBb01ERjhhRnhjTFh4MlhGd3RmSFlnS1h4emVTZ3dNWHh0WWlsOGRESW9NVGg4TlRBcGZIUTJLREF3ZkRFd2ZERTRLWHgwWVNobmRIeHNheWw4ZEdOc1hGd3RmSFJrWjF4Y0xYeDBaV3dvYVh4dEtYeDBhVzFjWEMxOGRGeGNMVzF2ZkhSdktIQnNmSE5vS1h4MGN5ZzNNSHh0WEZ3dGZHMHpmRzAxS1h4MGVGeGNMVGw4ZFhBb1hGd3VZbnhuTVh4emFTbDhkWFJ6ZEh4Mk5EQXdmSFkzTlRCOGRtVnlhWHgyYVNoeVozeDBaU2w4ZG1zb05EQjhOVnN3TFROZGZGeGNMWFlwZkhadE5EQjhkbTlrWVh4MmRXeGpmSFo0S0RVeWZEVXpmRFl3ZkRZeGZEY3dmRGd3ZkRneGZEZ3pmRGcxZkRrNEtYeDNNMk1vWEZ3dGZDQXBmSGRsWW1OOGQyaHBkSHgzYVNobklIeHVZM3h1ZHlsOGQyMXNZbngzYjI1MWZIZzNNREI4ZVdGelhGd3RmSGx2ZFhKOGVtVjBiM3g2ZEdWY1hDMHZhUzUwWlhOMEtHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVjM1ZpYzNSeUtEQXNOQ2twS1NCN1hHNWNiaUFnSUNCcGMwMXZZbWxzWlVSbGRtbGpaU0E5SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0FrS0hkcGJtUnZkeWt1YjI0b0ozSmxjMmw2WlNjc0lHWjFibU4wYVc5dUtHVnNLU0I3WEc0Z0lDQWdZMkZzWTNWc1lYUmxSM0pwWkZkeVlYQndaWEpUYVhwbEtGd2lMbWx0WnkxM2NtRndjR1Z5WENJcE8xeHVJQ0FnSUhkaGRHTm9RV1ptYVhnb0tUdGNibHh1SUNBZ0lDUW9kMmx1Wkc5M0tTNTBjbWxuWjJWeUtGd2liRzl2YTNWd1hDSXBPMXh1SUNBZ0lDUm5jbWxrTG5CaFkydGxjbmtvS1R0Y2JpQWdmU2s3WEc1Y2JpQWdkbUZ5SUNSbmNtbGtJRDBnSkNnbkxtZHlhV1FuS1M1d1lXTnJaWEo1S0h0Y2JpQWdJQ0JwZEdWdFUyVnNaV04wYjNJNklDY3VaM0pwWkMxcGRHVnRKeXhjYmlBZ0lDQmpiMngxYlc1WGFXUjBhRG9nSnk1bmNtbGtMWE5wZW1WeUp5eGNiaUFnSUNCd1pYSmpaVzUwVUc5emFYUnBiMjQ2SUhSeWRXVmNiaUFnZlNrN1hHNWNiaUFnTHk4Z2FXMXdjbTkyWlhNZ2JHRjViM1YwSUdsdUlHTnZjM1FnYjJZZ2NHVnlabTl5YldGdVkyVmNiaUFnTHlwMllYSWdiR0Z6ZEVOb1pXTnJaV1FnUFNBd08xeHVYRzRnSUNRb2QybHVaRzkzS1M1dmJpZ25jMk55YjJ4c0p5d2dablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJSFpoY2lCdWIzY2dQU0JFWVhSbExtNXZkeWdwTzF4dVhHNGdJQ0FnYVdZb2JHRnpkRU5vWldOclpXUWdLeUF4TURBd0lEd2dibTkzS1NCN1hHNGdJQ0FnSUNBa1ozSnBaQzV3WVdOclpYSjVLQ2s3WEc0Z0lDQWdJQ0JzWVhOMFEyaGxZMnRsWkNBOUlHNXZkenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaWdrS0hkcGJtUnZkeWt1YzJOeWIyeHNWRzl3S0NrZ0t5QWtLSGRwYm1SdmR5a3VhR1ZwWjJoMEtDa2dQVDBnSkNoa2IyTjFiV1Z1ZENrdWFHVnBaMmgwS0NrcElIdGNiaUFnSUNBZ0lDUm5jbWxrTG5CaFkydGxjbmtvS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPeW92WEc1Y2JpQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUhzZ0pHZHlhV1F1Y0dGamEyVnllU2dwT3lCOUxDQXhNREF3S1R0Y2JpQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUhzZ0pHZHlhV1F1Y0dGamEyVnllU2dwT3lCOUxDQXlNREF3S1R0Y2JseHVJQ0IyWVhJZ2RXNTJaV2xzUTI5MWJuUmxjaUE5SUNRb1hDSXVkVzUyWldsc1hDSXBMbXhsYm1kMGFEdGNiaUFnZG1GeUlHeGhjM1JRWlhKalpXNTBZV2RsSUQwZ01EdGNiaUFnZG1GeUlIQnliMk5sYzNOVGRHRmpheUE5SURBN1hHNWNiaUFnSkNoY0lpNTFiblpsYVd4Y0lpa3VkVzUyWldsc0tESXdNQ3dnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSkNoMGFHbHpLUzV3WVhKbGJuUnpLQ2N1WjNKcFpDMXBkR1Z0SnlrdVlXUmtRMnhoYzNNb0p5MTFiblpsYVd4bFpDY3BPMXh1WEc0Z0lDQWdKQ2gzYVc1a2IzY3BMblJ5YVdkblpYSW9YQ0pzYjI5cmRYQmNJaWs3WEc1Y2JpQWdJQ0FrWjNKcFpDNXdZV05yWlhKNUtDazdYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmlaV1p2Y21WVmJuWmxhV3c2SUdaMWJtTjBhVzl1S0hSbGMzUXBJSHRjYmlBZ0lDQWdJSEJ5YjJObGMzTlRkR0ZqYXlzck8xeHVYRzRnSUNBZ0lDQnBaaWhzWVhOMFVHVnlZMlZ1ZEdGblpTQTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDUW9KeTV3WVdObExYQnliMmR5WlhOekp5a3VZM056S0NkMGNtRnVjMlp2Y20wbkxDQW5kSEpoYm5Oc1lYUmxNMlFvTUNVc0lEQndlQ3dnTUhCNEtTY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ0pITndhVzV1WlhJZ1BTQWtLQ2N1YzNCcGJtNWxjaWNwTzF4dVhHNGdJQ0FnSUNCcFppZ2hKSE53YVc1dVpYSXVhR0Z6UTJ4aGMzTW9KeTFvYVdSa1pXNG5LU2tnZTF4dUlDQWdJQ0FnSUNBa2MzQnBibTVsY2k1aFpHUkRiR0Z6Y3lnbkxXaHBaR1JsYmljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNGdJQ0FnWVdaMFpYSkpiV0ZuWlZObGRFaGhjMEpsWlc1TWIyRmtaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0x5OGdhblZ6ZENCMGJ5QmlaU0J6ZFhKbFhHNGdJQ0FnSUNBa0tDY3VjR0ZqWlMxd2NtOW5jbVZ6Y3ljcExtTnpjeWduZEhKaGJuTm1iM0p0Snl3Z0ozUnlZVzV6YkdGMFpUTmtLREV3TUNVc0lEQndlQ3dnTUhCNEtTY3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ2FXMWhaMlZUWlhSUWNtOW5jbVZ6YzBOaGJHeGlZV05yT2lCbWRXNWpkR2x2YmlocGJXRm5aU3dnY0dWeVkyVnVkQ2tnZTF4dUlDQWdJQ0FnSkNocGJXRm5aU2t1WVdSa1EyeGhjM01vSnkxMWJuWmxhV3hsWkNjcE8xeHVJQ0FnSUNBZ2NISnZZMlZ6YzFOMFlXTnJMUzA3WEc1Y2JpQWdJQ0FnSUNRb0p5NXdZV05sTFhCeWIyZHlaWE56SnlrdVkzTnpLQ2QwY21GdWMyWnZjbTBuTENBbmRISmhibk5zWVhSbE0yUW9KeXR3WlhKalpXNTBLeWNsTENBd2NIZ3NJREJ3ZUNrbktUdGNibHh1SUNBZ0lDQWdhV1lvYkdGemRGQmxjbU5sYm5SaFoyVWdQRDBnY0dWeVkyVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCc1lYTjBVR1Z5WTJWdWRHRm5aU0E5SUhCbGNtTmxiblE3WEc0Z0lDQWdJQ0FnSUNRb0p5NXdZV05sTFhCeWIyZHlaWE56SnlrdVkzTnpLQ2QwY21GdWMyWnZjbTBuTENBbmRISmhibk5zWVhSbE0yUW9KeXR3WlhKalpXNTBLeWNsTENBd2NIZ3NJREJ3ZUNrbktUdGNibHh1SUNBZ0lDQWdJQ0JwWmloc1lYTjBVR1Z5WTJWdWRHRm5aU0ErUFNBeE1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCc1lYTjBVR1Z5WTJWdWRHRm5aU0E5SURBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJR05oYkdOMWJHRjBaVWR5YVdSWGNtRndjR1Z5VTJsNlpTaGNJaTVwYldjdGQzSmhjSEJsY2x3aUtUdGNiaUFnYzJOeWIyeHNWRzl3UW5WMGRHOXVLRFF3TUNrN1hHNGdJSGRoZEdOb1FXWm1hWGdvS1R0Y2JpQWdkMkYwWTJoQlptWnBlRTFwYmxOcGVtVW9LVHRjYm4wcE8xeHVYRzVjYm1aMWJtTjBhVzl1SUdOaGJHTjFiR0YwWlVkeWFXUlhjbUZ3Y0dWeVUybDZaU2h6Wld4bFkzUnZjaWtnZTF4dUlDQWtLSE5sYkdWamRHOXlLUzVsWVdOb0tHWjFibU4wYVc5dUtHbHVaR1Y0TENCbGJDa2dlMXh1SUNBZ0lIWmhjaUJvWldsbmFIUWdJRDBnSkNobGJDa3VaR0YwWVNnbmFHVnBaMmgwSnlrN1hHNGdJQ0FnZG1GeUlIZHBaSFJvSUNBZ1BTQWtLR1ZzS1M1a1lYUmhLQ2QzYVdSMGFDY3BPMXh1SUNBZ0lIWmhjaUJqZFhKeVpXNTBWMmxrZEdnZ0lEMGdKQ2hsYkNrdWIzVjBaWEpYYVdSMGFDZ3BPMXh1WEc0Z0lDQWdkbUZ5SUdOeWIzQkdZV04wYjNJZ1BTQW9ZM1Z5Y21WdWRGZHBaSFJvSUM4Z2QybGtkR2dwSUNvZ01UQXdPMXh1SUNBZ0lIWmhjaUJqY205d2NHVmtTR1ZwWjJoMElEMGdUV0YwYUM1eWIzVnVaQ2hvWldsbmFIUWdLaUJqY205d1JtRmpkRzl5SUM4Z01UQXdLVHRjYmx4dUlDQWdJQ1FvWld3cExtaGxhV2RvZENoamNtOXdjR1ZrU0dWcFoyaDBJQ3NnWENKd2VGd2lLVHRjYmlBZ2ZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIZGhkR05vUVdabWFYZ29LU0I3WEc0Z0lDOHZJRVZ1WVdKc1pTQXZJRVJwYzJGaWJHVWdZV1ptYVhoY2JpQWdkbUZ5SUhkcGJtUnZkMGhsYVdkb2RDQTlJQ1FvZDJsdVpHOTNLUzVvWldsbmFIUW9LVHRjYmlBZ2RtRnlJR0ZtWm1sNFNHVnBaMmgwSUNBZ1BTQWtLQ2N1YW5NdFlteHZaeTFoWm1acGVDY3BMbWhsYVdkb2RDZ3BPMXh1WEc0Z0lHbG1LR0ZtWm1sNFNHVnBaMmgwSUQ0Z2QybHVaRzkzU0dWcFoyaDBLU0I3WEc0Z0lDQWdKQ2gzYVc1a2IzY3BMbTltWmlnbkxtRm1abWw0SnlrN1hHNGdJSDFjYmlBZ1pXeHpaU0I3WEc0Z0lDQWdKQ2gzYVc1a2IzY3BMbTl1S0NjdVlXWm1hWGduS1R0Y2JseHVJQ0FnSUNRb0p5NXFjeTFpYkc5bkxXRm1abWw0SnlrdVlXWm1hWGdvZTF4dUlDQWdJQ0FnYjJabWMyVjBPaUI3WEc0Z0lDQWdJQ0FnSUhSdmNEb2dNekExWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2QyRjBZMmhCWm1acGVFMXBibE5wZW1Vb0tTQjdYRzRnSUhaaGNpQmpiMjUwWlc1MFNHVnBaMmgwSUQwZ0pDZ25MbUpzYjJkd2IzTjBjeWNwTG1obGFXZG9kQ2dwTzF4dUlDQjJZWElnWVdabWFYaElaV2xuYUhRZ0lDQTlJQ1FvSnk1cWN5MWliRzluTFdGbVptbDRKeWt1YUdWcFoyaDBLQ2s3WEc1Y2JpQWdKQ2duTG1Kc2IyZHdiM04wY3ljcExtTnpjeWduYldsdUxXaGxhV2RvZENjc0lHRm1abWw0U0dWcFoyaDBJQ3NnWENKd2VGd2lLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMk55YjJ4c1ZHOXdRblYwZEc5dUtHOW1abk5sZENrZ2UxeHVJQ0J2Wm1aelpYUWdQU0FvYjJabWMyVjBLU0EvSUc5bVpuTmxkQ0E2SURRd01EdGNibHh1WEhSMllYSWdZbUZqYTE5MGIxOTBiM0JmWW5WMGRHOXVJRDBnV3ljOFlTQm9jbVZtUFZ3aUkzUnZjRndpSUdOc1lYTnpQVndpWW1GamF5MTBieTEwYjNCY0lqNDhjM0JoYmlCamJHRnpjejFjSW1kc2VYQm9hV052Ym5NZ1oyeDVjR2hwWTI5dUlHZHNlWEJvYVdOdmJpMWphR1YyY205dUxYVndYQ0krUEM5emNHRnVQand2WVQ0blhTNXFiMmx1S0Z3aVhDSXBPMXh1WEhRa0tGd2lZbTlrZVZ3aUtTNWhjSEJsYm1Rb1ltRmphMTkwYjE5MGIzQmZZblYwZEc5dUtUdGNibHh1WEhRdkx5QklhV1JsSUhSb1pTQmlkWFIwYjI1Y2JseDBKQ2hjSWk1aVlXTnJMWFJ2TFhSdmNGd2lLUzVvYVdSbEtDazdYRzVjYmx4MEx5OGdVMk55YjJ4c2MzQjVYRzVjZENRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIWmhjaUJzWVhOMFZtRnNJRDBnTUR0Y2JpQWdJQ0IyWVhJZ1kzVnlWbUZzSUQwZ01EdGNiaUFnSUNCMllYSWdaR2x5WldOMGFXOXVJRDBnSjJSdmQyNG5PMXh1WEc1Y2RGeDBKQ2gzYVc1a2IzY3BMbk5qY205c2JDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2JpQWdJQ0FnSUdOMWNsWmhiQ0E5SUNRb2RHaHBjeWt1YzJOeWIyeHNWRzl3S0NrN1hHNGdJQ0FnSUNCa2FYSmxZM1JwYjI0Z1BTQW9ZM1Z5Vm1Gc0lENGdiR0Z6ZEZaaGJDa2dQeUFuWkc5M2JpY2dPaUFuZFhBbk8xeHVYRzRnSUNBZ0lDQnBaaWhrYVhKbFkzUnBiMjRnUFQwZ0oyUnZkMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDUW9KeTVpWVdOckxYUnZMWFJ2Y0NjcExtWmhaR1ZQZFhRb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnNjMlVnZTF4dUlDQmNkRngwWEhScFppZ2tLSFJvYVhNcExuTmpjbTlzYkZSdmNDZ3BJRDRnYjJabWMyVjBLU0I3SUM4dklISmxZV05vWldRZ2MyTnliMnhzSUc5bVpuTmxkRnh1SUNBZ0lDQWdJQ0FnSUdsbUtHUnBjbVZqZEdsdmJpQTlQU0FuZFhBbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3VZbUZqYXkxMGJ5MTBiM0FuS1M1bVlXUmxTVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUZ4MFhIUmNkSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUZ4MFhIUmNkRngwSkNnbkxtSmhZMnN0ZEc4dGRHOXdKeWt1Wm1Ga1pVOTFkQ2dwTzF4dUlDQmNkRngwWEhSOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeGhjM1JXWVd3Z1BTQmpkWEpXWVd3N1hHNWNkRngwZlNrN1hHNWNibHgwWEhRa0tDY3VZbUZqYXkxMGJ5MTBiM0FuS1M1amJHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwWEhRa0tDZGliMlI1TEdoMGJXd25LUzVoYm1sdFlYUmxLSHRjYmx4MFhIUmNkRngwYzJOeWIyeHNWRzl3T2lBd1hHNWNkRngwWEhSOUxDQTRNREFwTzF4dVhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEgwcE8xeHVYSFI5S1R0Y2JuMWNiaUpkTENKemIzVnlZMlZTYjI5MElqb2lMM052ZFhKalpTOGlmUT09XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
